[package com.ifpb.exemplo.dao;, , import com.ifpb.exemplo.modelo.Pessoa;, , import java.util.ArrayList;, import java.util.List;, , public class PessoaDao {, ,     private List<Pessoa> pessoas;, ,     public PessoaDao(){,         pessoas = new ArrayList<>();,     }, ,     public boolean salvar(Pessoa pessoa){,         return pessoas.add(pessoa);,     }, ,     public boolean deletar(Pessoa pessoa){,         return pessoas.remove(pessoa);,     }, ,     /*,     Atividade - remover e listar,     Condição onde não pode haver pessoas com CPF duplicado.,      */, , }]
[package com.ifpb.exemplo.modelo;, , import java.time.LocalDate;, , public class Pessoa {, ,     private String cpf;,     private String nome;,     private LocalDate nascimento;, ,     public Pessoa(String cpf, String nome, LocalDate nascimento) {,         this.cpf = cpf;,         this.nome = nome;,         this.nascimento = nascimento;,     }, ,     public String getCpf() {,         return cpf;,     }, ,     public void setCpf(String cpf) {,         this.cpf = cpf;,     }, ,     public String getNome() {,         return nome;,     }, ,     public void setNome(String nome) {,         this.nome = nome;,     }, ,     public LocalDate getNascimento() {,         return nascimento;,     }, ,     public void setNascimento(LocalDate nascimento) {,         this.nascimento = nascimento;,     }, ,     @Override,     public String toString() {,         return "Pessoa{" +,                 "cpf='" + cpf + '\'' +,                 ", nome='" + nome + '\'' +,                 ", nascimento=" + nascimento +,                 '}';,     }, }]
[package com.ifpb.exemplo.visao;, , import java.util.*;, , public class App {, ,     public static void main(String[] args) {, ,         System.out.println(ehBalanceada(")("));,         System.out.println(ehBalanceada("(a+b*(b*c))"));,         System.out.println(ehBalanceada("(a+b+c)*(a"));, ,     }, ,     /*Atividade feita em sala - verifica se os parênteses de uma,      * equação estão balanceados,      */,     public static boolean ehBalanceada(String equacao){, ,         Stack<Character> pilha = new Stack<>();, ,         for(int i=0; i<equacao.length();i++){,             if(equacao.charAt(i) == '('){,                 pilha.push('X');,             }else if(equacao.charAt(i) == ')'){,                 if(pilha.isEmpty()){,                     return false;,                 }else{,                     pilha.pop();,                 },             },         }, ,         return pilha.isEmpty();, ,     }, , }]
[package com.ifpb.exemplo.dao;, , import java.util.Arrays;, , public class ObjectDao {, ,     private Object[] objects;,     private int quantObjects;, ,     public ObjectDao(){,         objects = new Object[100];,         quantObjects = 0;,     }, ,     public boolean adicionar(Object Object){,         objects[quantObjects++] = Object;,         return true;,     }, ,     public Object[] listar(){,         return Arrays.copyOf(objects,quantObjects);,     }, , }]
[package com.ifpb.exemplo.dao;, , import java.util.Arrays;, , public class GenericDao <T> {, ,     private T[] elementos;,     private int quantElementos;, ,     public GenericDao(){,         elementos = (T[]) new Object[100];,         quantElementos = 0;,     }, ,     public boolean adicionar(T elemento){,         elementos[quantElementos++] = elemento;,         return true;,     }, ,     public T[] listar(){,         return Arrays.copyOf(elementos, quantElementos);,     }, , }]
[package com.ifpb.exemplo.dao;, , import com.ifpb.exemplo.modelo.Carro;, , import java.util.Arrays;, , public class CarroDao {, ,     private Carro[] carros;,     private int quantcarros;, ,     public CarroDao(){,         carros = new Carro[100];,         quantcarros = 0;,     }, ,     public boolean adicionar(Carro Carro){,         carros[quantcarros++] = Carro;,         return true;,     }, ,     public Carro[] listar(){,         return Arrays.copyOf(carros,quantcarros);,     }, , }]
[package com.ifpb.exemplo.dao;, , import com.ifpb.exemplo.modelo.Pessoa;, , import java.util.Arrays;, , public class PessoaDao {, ,     private Pessoa[] pessoas;,     private int quantPessoas;, ,     public PessoaDao(){,         pessoas = new Pessoa[100];,         quantPessoas = 0;,     }, ,     public boolean adicionar(Pessoa pessoa){,         pessoas[quantPessoas++] = pessoa;,         return true;,     }, ,     public Pessoa[] listar(){,         return Arrays.copyOf(pessoas,quantPessoas);,     }, , }]
[package com.ifpb.exemplo.modelo;, , //Questão 20.8 Deitel, , public class Pair <F,S> {, ,     private F elemento1;,     private S elemento2;, ,     public Pair(F elemento1, S elemento2){,         this.elemento1 = elemento1;,         this.elemento2 = elemento2;,     }, ,     public F getElemento1() {,         return elemento1;,     }, ,     public void setElemento1(F elemento1) {,         this.elemento1 = elemento1;,     }, ,     public S getElemento2() {,         return elemento2;,     }, ,     public void setElemento2(S elemento2) {,         this.elemento2 = elemento2;,     }, }]
[package com.ifpb.exemplo.modelo;, , public class Carro {, ,     private String placa;,     private String modelo;,     private int ano;, ,     public Carro(String placa, String modelo, int ano) {,         this.placa = placa;,         this.modelo = modelo;,         this.ano = ano;,     }, ,     public String getPlaca() {,         return placa;,     }, ,     public void setPlaca(String placa) {,         this.placa = placa;,     }, ,     public String getModelo() {,         return modelo;,     }, ,     public void setModelo(String modelo) {,         this.modelo = modelo;,     }, ,     public int getAno() {,         return ano;,     }, ,     public void setAno(int ano) {,         this.ano = ano;,     }, ,     @Override,     public String toString() {,         return "Carro{" +,                 "placa='" + placa + '\'' +,                 ", modelo='" + modelo + '\'' +,                 ", ano=" + ano +,                 '}';,     }, }]
[package com.ifpb.exemplo.modelo;, , import java.time.LocalDate;, , public class Pessoa {, ,     private String cpf;,     private String nome;,     private LocalDate nascimento;, ,     public Pessoa(String cpf, String nome, LocalDate nascimento) {,         this.cpf = cpf;,         this.nome = nome;,         this.nascimento = nascimento;,     }, ,     public String getCpf() {,         return cpf;,     }, ,     public void setCpf(String cpf) {,         this.cpf = cpf;,     }, ,     public String getNome() {,         return nome;,     }, ,     public void setNome(String nome) {,         this.nome = nome;,     }, ,     public LocalDate getNascimento() {,         return nascimento;,     }, ,     public void setNascimento(LocalDate nascimento) {,         this.nascimento = nascimento;,     }, ,     @Override,     public String toString() {,         return "Pessoa{" +,                 "cpf='" + cpf + '\'' +,                 ", nome='" + nome + '\'' +,                 ", nascimento=" + nascimento +,                 '}';,     }, }]
[package com.ifpb.exemplo.visao;, , import com.ifpb.exemplo.dao.GenericDao;, import com.ifpb.exemplo.modelo.Carro;, import com.ifpb.exemplo.modelo.Pair;, import com.ifpb.exemplo.modelo.Pessoa;, , import java.time.LocalDate;, import java.util.ArrayList;, import java.util.Arrays;, import java.util.List;, , public class App {, ,     public static void main(String[] args) {, ,         Pair<String, Integer> par = new Pair<>("ABC", 123);, ,     }, ,     public static <T extends Comparable<T>> T max(T x, T y){,         return x.compareTo(y)>0? x : y;,     }, ,     public static void imprimirArray2(Object[] elementos){,         System.out.println(Arrays.toString(elementos));,     }, ,     //Exemplo de método genérico,     public static <T extends Number> void imprimirArray(T[] elementos){,         System.out.println(Arrays.toString(elementos));,     }, ,     public static <T extends Comparable<T>> void ordenarArray(T[] elementos){,         Arrays.sort(elementos);,         System.out.println(Arrays.toString(elementos));,     }, , }]
[package com.ifpb.dao.dao;, , import com.ifpb.dao.modelo.Pessoa;, , public class PessoaDaoBancoImpl implements PessoaDao {, ,     @Override,     public boolean salvar(Pessoa pessoa) {,         return false;,     }, ,     @Override,     public Pessoa buscar(String cpf) {,         return null;,     }, ,     @Override,     public boolean deletar(Pessoa pessoa) {,         return false;,     }, ,     @Override,     public boolean atualizar(Pessoa pessoa) {,         return false;,     }, ,     @Override,     public Pessoa[] listar() {,         return new Pessoa[0];,     }, }]
[package com.ifpb.dao.dao;, , import com.ifpb.dao.modelo.Pessoa;, , /**,  * Essa interface padroniza os métodos de acesso aos objetos da classe,  * Pessoa. Devendo ser implementada por <b>todas</b> as classes que desejem,  * manipular esse tipo de objeto.,  * @author paulo,  * @see com.ifpb.dao.dao.PessoaDaoBancoImpl,  * @version 1.0,  * @since 1.0, */, , public interface PessoaDao {, ,     /**,      * Recebe uma pessoa e salva na unidade de persistência,      * @param pessoa a pessoa que deve ser salva,      * @return {@code true} caso a pessoa tenha sido salva ou {@code false},      * caso não tenha conseguido salvar a pessoa,      * @throws NullPointerException caso a pessoa a ser salva seja nulo,      */, ,     boolean salvar(Pessoa pessoa);, ,     /**,      * Recebe um CPF e busca a pessoa correspondente na unidade de persistência,      * @param cpf o CPF que deseja buscar,      * @return o objeto Pessoa com o CPF correspondente ou null caso não haja,      * pessoa com esse CPF,      * @see com.ifpb.dao.modelo.Pessoa,      */, ,     Pessoa buscar(String cpf);,     boolean deletar(Pessoa pessoa);,     boolean atualizar(Pessoa pessoa);,     Pessoa[] listar();, , }]
[package com.ifpb.dao.dao;, , import com.ifpb.dao.modelo.Pessoa;, , public class PessoaDaoArquivoImpl implements PessoaDao{, ,     @Override,     public boolean salvar(Pessoa pessoa) {,         return false;,     }, ,     @Override,     public Pessoa buscar(String cpf) {,         return null;,     }, ,     @Override,     public boolean deletar(Pessoa pessoa) {,         return false;,     }, ,     @Override,     public boolean atualizar(Pessoa pessoa) {,         return false;,     }, ,     @Override,     public Pessoa[] listar() {,         return new Pessoa[0];,     }, , }]
[package com.ifpb.dao.modelo;, , import java.time.LocalDate;, , public class Pessoa implements Comparable<Pessoa> {, ,     private String cpf;,     private String nome;,     private LocalDate nascimento;, ,     public Pessoa(String cpf, String nome, LocalDate nascimento) {,         this.cpf = cpf;,         this.nome = nome;,         this.nascimento = nascimento;,     }, ,     public String getCpf() {,         return cpf;,     }, ,     public void setCpf(String cpf) {,         this.cpf = cpf;,     }, ,     public String getNome() {,         return nome;,     }, ,     public void setNome(String nome) {,         this.nome = nome;,     }, ,     public LocalDate getNascimento() {,         return nascimento;,     }, ,     public void setNascimento(LocalDate nascimento) {,         this.nascimento = nascimento;,     }, ,     @Override,     public String toString() {,         return "Pessoa{" +,                 "cpf='" + cpf + '\'' +,                 ", nome='" + nome + '\'' +,                 ", nascimento=" + nascimento +,                 '}';,     }, ,     @Override,     public int compareTo(Pessoa pessoa){,         return nascimento.compareTo(pessoa.nascimento);,     }, , }]
[package com.ifpb.dao.visao;, , import com.ifpb.dao.dao.PessoaDao;, import com.ifpb.dao.dao.PessoaDaoArquivoImpl;, import com.ifpb.dao.dao.PessoaDaoBancoImpl;, import com.ifpb.dao.modelo.Pessoa;, , import java.time.LocalDate;, import java.util.Arrays;, import java.util.Comparator;, , public class App {, ,     public static void main(String[] args) {, ,         Pessoa pessoas[] = {,             new Pessoa("111.111.111-01", "João",,                     LocalDate.of(1992,03,01)),,             new Pessoa("222.222.222-02", "Maria",,                     LocalDate.of(1990,01,03)),,             new Pessoa("333.333.333-03", "Ana",,                     LocalDate.now()),         };, ,         //classe interna anônima,         Comparator<Pessoa> comparador = new Comparator<Pessoa>() {,             @Override,             public int compare(Pessoa o1, Pessoa o2) {,                 return o1.getNome().compareTo(o2.getNome());,             },         };, ,         Arrays.sort(pessoas, comparador);,         System.out.println(Arrays.toString(pessoas));, ,     }, , }]
[package com.ifpb.formasgeometricas.modelo;, , public interface AreaCalculavel {, ,     double calcularArea();, , }]
[package com.ifpb.formasgeometricas.modelo;, , public class Circulo implements AreaCalculavel {, ,     private double raio;, ,     public Circulo(double raio) {,         this.raio = raio;,     }, ,     public double getRaio() {,         return raio;,     }, ,     public void setRaio(double raio) {,         this.raio = raio;,     }, ,     @Override,     public double calcularArea(){,         return Math.PI* Math.pow(raio,2);,     }, , }]
[package com.ifpb.formasgeometricas.modelo;, , public class Quadrado implements AreaCalculavel {, ,     private double lado;, ,     public Quadrado(double lado) {,         this.lado = lado;,     }, ,     public double getLado() {,         return lado;,     }, ,     public void setLado(double lado) {,         this.lado = lado;,     }, ,     @Override,     public double calcularArea(){,         return Math.pow(lado,2);,     },     , }]
[package com.ifpb.disciplinas.enumetarions;, , public enum Titulacao {, ,     ESPECIALIZACAO, MESTRADO, DOUTORADO, POS_DOUTORADO;, , }]
[package com.ifpb.disciplinas.modelo;, , import com.ifpb.disciplinas.enumetarions.Titulacao;, , import java.time.LocalDate;, , public class Professor extends Pessoa {, ,     private Titulacao titulacao;, ,     public Professor(String cpf, String nome, LocalDate nascimento, Titulacao titulacao) {,         super(cpf, nome, nascimento);,         this.titulacao = titulacao;,     }, ,     public Titulacao getTitulacao() {,         return titulacao;,     }, ,     public void setTitulacao(Titulacao titulacao) {,         this.titulacao = titulacao;,     }, , }]
[package com.ifpb.disciplinas.modelo;, , import java.time.LocalDate;, import java.util.Objects;, , public abstract class Pessoa {, ,     private String cpf;,     private String nome;,     private LocalDate nascimento;, ,     public Pessoa(String cpf, String nome, LocalDate nascimento) {,         this.cpf = cpf;,         this.nome = nome;,         this.nascimento = nascimento;,     }, ,     public String getCpf() {,         return cpf;,     }, ,     public void setCpf(String cpf) {,         this.cpf = cpf;,     }, ,     public String getNome() {,         return nome;,     }, ,     public void setNome(String nome) {,         this.nome = nome;,     }, ,     public LocalDate getNascimento() {,         return nascimento;,     }, ,     public void setNascimento(LocalDate nascimento) {,         this.nascimento = nascimento;,     }, ,     @Override,     public String toString() {,         return "Pessoa{" +,                 "cpf='" + cpf + '\'' +,                 ", nome='" + nome + '\'' +,                 ", nascimento=" + nascimento +,                 '}';,     }, ,     @Override,     public boolean equals(Object o) {,         if (this == o) return true;,         if (o == null || getClass() != o.getClass()) return false;,         Pessoa pessoa = (Pessoa) o;,         return Objects.equals(cpf, pessoa.cpf);,     }, ,     @Override,     public int hashCode() {,         return Objects.hash(cpf);,     }, }]
[package com.ifpb.disciplinas.modelo;, , public class Disciplina {, ,     private String nome;,     private int periodo;,     private final Aluno[] alunos;,     private final int capacidade;,     private int quantAlunos;,     private Professor professor;, ,     /*,     Exercício:,     Fazer get/set de nome e período,     Fazer get de capacidade,     Fazer get de quantidade,     Fazer get/set de professor,     Fazer o remover aluno,     Fazer o listar alunos,      */, ,     public Disciplina(String nome, int periodo, Professor professor,,                       int capacidade) {,         this.nome = nome;,         this.periodo = periodo;,         this.professor = professor;,         this.capacidade = capacidade;,         alunos = new Aluno[capacidade];,         quantAlunos = 0;,     }, ,     public boolean adicionarAluno(Aluno aluno){,         if(estaLotada()) return false;,         if(estaPresente(aluno)) return false;, ,         alunos[quantAlunos++] = aluno;,         return true;,     }, ,     private boolean estaLotada() {,         return quantAlunos >= capacidade;,     }, ,     private boolean estaPresente(Aluno aluno){,         for(int i=0;i<quantAlunos;i++){,             if(alunos[i].equals(aluno)){,                 return true;,             },         },         return false;,     }, , , }]
[package com.ifpb.disciplinas.modelo;, , import java.time.LocalDate;, , public class Aluno extends Pessoa {, ,     private String curso;, ,     public Aluno(String cpf, String nome, LocalDate nascimento, String curso) {,         super(cpf, nome, nascimento);,         this.curso = curso;,     }, ,     public String getCurso() {,         return curso;,     }, ,     public void setCurso(String curso) {,         this.curso = curso;,     }, }]
[package com.ifpb.disciplinas.visao;, , import com.ifpb.disciplinas.enumetarions.Titulacao;, import com.ifpb.disciplinas.modelo.Professor;, , import java.time.LocalDate;, import java.util.Arrays;, , public class App {, ,     public static void main(String[] args) {, ,     }, , }]
[package com.ifpb.faculdade.modelo;, , import java.time.LocalDate;, , public class Tecnico extends Funcionario {, ,     private String setor;, ,     public Tecnico(String cpf, String nome, LocalDate nascimento, float salario, String setor) {,         super(cpf, nome, nascimento, salario);,         this.setor = setor;,     }, ,     public String getSetor() {,         return setor;,     }, ,     public void setSetor(String setor) {,         this.setor = setor;,     }, , }]
[package com.ifpb.faculdade.modelo;, , import java.time.LocalDate;, , public class Professor extends Funcionario {, ,     private String titulacao;, ,     public Professor(String cpf, String nome, LocalDate nascimento, float salario, String titulação) {,         super(cpf, nome, nascimento, salario);,         this.titulacao = titulação;,     }, ,     public String getTitulacao() {,         return titulacao;,     }, ,     public void setTitulacao(String titulacao) {,         this.titulacao = titulacao;,     }, , }]
[package com.ifpb.faculdade.modelo;, , import java.util.Arrays;, , public class Faculdade {, ,     private String nome;,     private Funcionario[] funcionarios;,     private int quantidade;, ,     public Faculdade(String nome){,         this.nome = nome;,         funcionarios = new Funcionario[100];,         quantidade = 0;,     }, ,     public String getNome() {,         return nome;,     }, ,     public void setNome(String nome) {,         this.nome = nome;,     }, ,     public boolean adicionarFuncionario(Funcionario funcionario){,         if(quantidade < funcionarios.length){,             funcionarios[quantidade++] = funcionario;,             return true;,         }else{,             return false;,         },     }, ,     public Funcionario[] listarFuncionarios(){,         //equivalente: Arrays.copyOf(funcionarios,quantidade);,         return Arrays.copyOfRange(funcionarios,0,quantidade);,     }, ,     public int contProfessores(){,         int cont=0;,         for(int i=0;i<quantidade;i++){,             if(funcionarios[i].getClass()==Professor.class) cont++;,         },         return cont;,     }, ,     public boolean deletarFuncionario(Funcionario funcionario){,         for(int i=0; i<quantidade;i++){,             //deslocar todos os elementos uma posição à esquerda,             if(funcionarios[i].equals(funcionario)){,                 for(int j=i;j<quantidade-1;j++){,                     funcionarios[j] = funcionarios[j+1];,                 },                 quantidade--;,                 return true;,             },         },         return false;,     }, ,     public boolean atualizarFuncionario(Funcionario funcionario){,         for(int i=0;i<quantidade;i++){,             if(funcionarios[i].getCpf().equals(funcionario.getCpf())){,                 funcionarios[i] = funcionario;,                 return true;,             },         },         return false;,     }, , }]
[package com.ifpb.faculdade.modelo;, , import java.time.LocalDate;, import java.util.Objects;, , public abstract class Funcionario {, ,     private String cpf;,     private String nome;,     private LocalDate nascimento;,     private float salario;, ,     public Funcionario(String cpf, String nome, LocalDate nascimento, float salario) {,         this.cpf = cpf;,         this.nome = nome;,         this.nascimento = nascimento;,         this.salario = salario;,     }, ,     public String getCpf() {,         return cpf;,     }, ,     public void setCpf(String cpf) {,         this.cpf = cpf;,     }, ,     public String getNome() {,         return nome;,     }, ,     public void setNome(String nome) {,         this.nome = nome;,     }, ,     public LocalDate getNascimento() {,         return nascimento;,     }, ,     public void setNascimento(LocalDate nascimento) {,         this.nascimento = nascimento;,     }, ,     public float getSalario() {,         return salario;,     }, ,     public void setSalario(float salario) {,         this.salario = salario;,     }, ,     @Override,     public String toString() {,         return "Funcionario{" +,                 "cpf='" + cpf + '\'' +,                 ", nome='" + nome + '\'' +,                 ", nascimento=" + nascimento +,                 ", salario=" + salario +,                 '}';,     }, ,     @Override,     public boolean equals(Object o) {,         if (this == o) return true;,         if (o == null || getClass() != o.getClass()) return false;,         Funcionario that = (Funcionario) o;,         return Float.compare(that.salario, salario) == 0 &&,                 Objects.equals(cpf, that.cpf) &&,                 Objects.equals(nome, that.nome) &&,                 Objects.equals(nascimento, that.nascimento);,     }, ,     @Override,     public int hashCode() {,         return Objects.hash(cpf, nome, nascimento, salario);,     }, , }]
[package com.ifpb.faculdade.modelo;, , import java.time.LocalDate;, , public class Terceirizado extends Funcionario {, ,     private String empresa;, ,     public Terceirizado(String cpf, String nome, LocalDate nascimento, float salario, String empresa) {,         super(cpf, nome, nascimento, salario);,         this.empresa = empresa;,     }, ,     public String getEmpresa() {,         return empresa;,     }, ,     public void setEmpresa(String empresa) {,         this.empresa = empresa;,     }, , }]
[package com.ifpb.faculdade.visao;, , import com.ifpb.faculdade.modelo.*;, , import java.time.LocalDate;, import java.util.Arrays;, , public class App {, ,     public static void main(String[] args) {, ,         Faculdade faculdade = new Faculdade("IFPB");, ,         Funcionario funcionario = new Professor("111.111.111-01",,                 "João", LocalDate.now(), 2000,,                 "Mestrado");, ,         faculdade.adicionarFuncionario(funcionario);, ,         faculdade.adicionarFuncionario(new Terceirizado("222.222.222-02",,                 "Maria", LocalDate.now(), 2000,,                 "Limpeza"));,         faculdade.adicionarFuncionario(new Tecnico("333.333.333-03",,                 "Pedro", LocalDate.now(), 2000,,                 "Coordenação de cursos"));, ,         funcionario.setNome("João Paulo");, ,         faculdade.atualizarFuncionario(funcionario);, ,         System.out.println(Arrays.toString(faculdade.listarFuncionarios()));, ,     }, , }]
[package com.ifpb.banco.modelo;, , public class Endereco {, ,     private String rua;,     private int numero;,     private String cidade;, ,     public Endereco(String rua, int numero, String cidade){,         this.rua = rua;,         this.numero = numero;,         this.cidade = cidade;,     }, ,     public String getRua() {,         return rua;,     }, ,     public void setRua(String rua) {,         this.rua = rua;,     }, ,     public int getNumero() {,         return numero;,     }, ,     public void setNumero(int numero) {,         this.numero = numero;,     }, ,     public String getCidade() {,         return cidade;,     }, ,     public void setCidade(String cidade) {,         this.cidade = cidade;,     }, }]
[package com.ifpb.banco.modelo;, , public class ContaCorrente {, ,     private int numero;,     private int agencia;,     private final Cliente titular;,     private float saldo;, ,     //Sempre que a conta é criada o saldo é zero,     public ContaCorrente(int numero, int agencia, Cliente titular){,         this.numero = numero;,         this.agencia = agencia;,         this.titular = titular;,         saldo = 0;,     }, ,     public int getNumero() {,         return numero;,     }, ,     public void setNumero(int numero) {,         this.numero = numero;,     }, ,     public int getAgencia() {,         return agencia;,     }, ,     public void setAgencia(int agencia) {,         this.agencia = agencia;,     }, ,     public Cliente getTitular() {,         return titular;,     }, ,     public float getSaldo() {,         return saldo;,     }, ,     public boolean sacar(float valor){,         if(bloqueiaSaque(valor)){,             return false;,         }else{,             saldo -= valor;,             return true;,         },     }, ,     public boolean depositar(float valor){,         if(valor <= 0){,             return false;,         }else{,             saldo += valor;,             return true;,         },     }, ,     public boolean transferir(ContaCorrente destino, float valor){,         if (bloqueiaSaque(valor)){,             return false;,         }else{,             saldo -= valor;,             destino.saldo += valor;,             return true;,         },     }, ,     private boolean bloqueiaSaque(float valor){,         return valor > saldo || valor <=0;,     }, , }]
[package com.ifpb.banco.modelo;, , import java.time.LocalDate;, , public class Cliente {, ,     private String cpf;,     private String nome;,     private LocalDate nascimento;,     private Endereco endereco;, ,     public Cliente(String cpf, String nome, LocalDate nascimento,,                    Endereco endereco){,         this.cpf = cpf;,         this.nome = nome;,         this.nascimento = nascimento;,         this.endereco = endereco;,     }, ,     public String getCpf() {,         return cpf;,     }, ,     public void setCpf(String cpf) {,         this.cpf = cpf;,     }, ,     public String getNome() {,         return nome;,     }, ,     public void setNome(String nome) {,         this.nome = nome;,     }, ,     public LocalDate getNascimento() {,         return nascimento;,     }, ,     public void setNascimento(LocalDate nascimento) {,         this.nascimento = nascimento;,     }, ,     public Endereco getEndereco() {,         return endereco;,     }, ,     public void setEndereco(Endereco endereco) {,         this.endereco = endereco;,     }, }]
[package com.ifpb.banco.visao;, , import com.ifpb.banco.modelo.Cliente;, import com.ifpb.banco.modelo.ContaCorrente;, import com.ifpb.banco.modelo.Endereco;, , import java.time.LocalDate;, , public class App {, ,     public static void main(String[] args) {, ,         ContaCorrente c1 = new ContaCorrente(1,1,,                 new Cliente("111.111.111-01", "João", LocalDate.now(),,                         new Endereco("Rua X", 20, "Cajazeiras")));, ,         Endereco endereco = new Endereco("Rua B", 33,,                 "Cajazeiras");,         Cliente cliente = new Cliente("222.222.222-02", "Maria",,                 LocalDate.now(), endereco);,         ContaCorrente c2 = new ContaCorrente(1,2,cliente);, ,         if(c1.depositar(2000)) System.out.println("Depositado com sucesso");, ,         if(c2.depositar(1000)) System.out.println("Depositado com sucesso");, ,         if(c1.sacar(5000)) System.out.println("Sacado com sucesso");,         else System.out.println("Falha ao sacar");, ,         c1.transferir(c2, 300);, ,         System.out.println(c1.getSaldo());,         System.out.println(c2.getSaldo());, , ,     }, , }]
[package com.ifpb.classeeobjeto.modelo;, , public class Academia {, ,     private String nome;,     private Pessoa gerente;, , }]
[package com.ifpb.classeeobjeto.modelo;, , import java.time.LocalDate;, import java.time.Period;, , public class Pessoa {, ,     private static int contPessoas;,     private final int id;,     private String cpf;,     private String nome;,     private LocalDate nascimento;,     private float altura;,     private float peso;, ,     public Pessoa(String cpf, String nome, LocalDate nascimento,,                   float altura, float peso){,         this.cpf = cpf;,         this.nome = nome;,         this.nascimento = nascimento;,         this.altura = altura;,         this.peso = peso;,         id = ++contPessoas;,     }, ,     public Pessoa(){,         id = ++contPessoas;,     }, ,     public String getCpf(){,         return cpf;,     }, ,     public void setCpf(String cpf){,         this.cpf = cpf;,     }, ,     public String getNome(){,         return nome;,     }, ,     public void setNome(String nome){,         this.nome = nome;,     }, ,     public LocalDate getNascimento(){,         return nascimento;,     }, ,     public void setNascimento(LocalDate nascimento){,         this.nascimento = nascimento;,     }, ,     public float getAltura() {,         return altura;,     }, ,     public void setAltura(float altura) {,         this.altura = altura;,     }, ,     public float getPeso() {,         return peso;,     }, ,     public void setPeso(float peso) {,         this.peso = peso;,     }, ,     public double calculaImc(){,         return peso/Math.pow(altura,2);,     }, ,     public int getIdade(){,         return Period.between(nascimento, LocalDate.now()).getYears();,     }, ,     public int getId(){,         return id;,     }, , }]
[package com.ifpb.classeeobjeto.visao;, , import com.ifpb.classeeobjeto.modelo.Pessoa;, , import java.time.LocalDate;, import java.time.format.DateTimeFormatter;, import java.util.Scanner;, , public class App {, ,     public static void main(String[] args){, ,         Scanner scanner = new Scanner(System.in);, ,         Pessoa pessoa = new Pessoa();, ,         System.out.print("Digite seu CPF: ");,         pessoa.setCpf(scanner.next());, ,         System.out.print("Digite seu nome: ");,         pessoa.setNome(scanner.next());, ,         System.out.print("Digite sua data de nascimento (dia/mês/ano): ");,         String nascimento = scanner.next();, ,         DateTimeFormatter formatter = DateTimeFormatter,                 .ofPattern("dd/MM/yyyy");, ,         LocalDate dNascimento = LocalDate.parse(nascimento, formatter);,         pessoa.setNascimento(dNascimento);, ,         System.out.print("Digite seu peso: ");,         pessoa.setPeso(scanner.nextFloat());, ,         System.out.print("Digite sua altura: ");,         pessoa.setAltura(scanner.nextFloat());, ,         System.out.println("Dados da pessoa");,         System.out.println("ID: "+pessoa.getId());,         System.out.println("CPF: "+pessoa.getCpf());,         System.out.println("Nome: "+pessoa.getNome());,         System.out.println("Nascimento: "+pessoa,                 .getNascimento().format(formatter));,         System.out.println("Peso: "+pessoa.getPeso());,         System.out.println("Altura: "+pessoa.getAltura());,         System.out.println("IMC: "+pessoa.calculaImc());, ,     }, , }]
[package projetolivro;, , public class Livro implements Publicacao{,     ,     private String titulo;,     private String autor;,     private int totalPag;,     private int pagAtual;,     private boolean aberto;,     private Pessoa leitor;, ,     ,     public String detalhes() {,         return "Livro{" + "titulo=" + titulo + ,                 ", autor=" + autor + ", totalPag=" + totalPag + ,                 ", pagAtual=" + pagAtual + ", aberto=" + aberto + ,                 ", leitor=" + leitor + '}';,     }, ,     public Livro(String titulo, String autor, int totalPag) {,         this.titulo = titulo;,         this.autor = autor;,         this.totalPag = totalPag;,         this.pagAtual = 0;,         this.aberto = false;,     }, ,     ,     ,     ,     public String getTitulo() {,         return titulo;,     }, ,     public void setTitulo(String titulo) {,         this.titulo = titulo;,     }, ,     public String getAutor() {,         return autor;,     }, ,     public void setAutor(String autor) {,         this.autor = autor;,     }, ,     public int getTotalPag() {,         return totalPag;,     }, ,     public void setTotalPag(int totalPag) {,         this.totalPag = totalPag;,     }, ,     public int getPagAtual() {,         return pagAtual;,     }, ,     public void setPagAtual(int pagAtual) {,         this.pagAtual = pagAtual;,     }, ,     public boolean isAberto() {,         return aberto;,     }, ,     public void setAberto(boolean aberto) {,         this.aberto = aberto;,     }, ,     public Pessoa getLeitor() {,         return leitor;,     }, ,     public void setLeitor(Pessoa leitor) {,         this.leitor = leitor;,     }, ,     ,     ,     @Override,     public void abrir() {,         //this.aberto = true;,         this.setAberto(true);,     }, ,     @Override,     public void fechar() {,         this.setAberto(false);,     }, ,     ,     @Override,     public void folhear(int p) {,         if (p <= this.getTotalPag()) {,             this.setPagAtual(p);,         }else{,             this.setPagAtual(this.getTotalPag());,         }, ,     }, ,     @Override,     public void avancarPag() {,         if (this.isAberto() == true) {,             this.setPagAtual(this.getPagAtual()+1);,         }, ,     }, ,     @Override,     public void voltarPag() {,         this.setPagAtual(this.getPagAtual()-1);,     },     ,     , }]
[package projetolivro;, , public class ProjetoLivro {, ,     public static void main(String[] args) {, ,         Pessoa p[] = new Pessoa[2];,         Livro l[] = new Livro[2];,         ,         p[0] = new Pessoa("Pedro", 22, "M");,         p[1] = new Pessoa("Gabriel", 29, "M");, ,         l[0] = new Livro("Python","Daniel", 300);,         l[1] = new Livro("Java","fabiana", 500);,         ,         System.out.println(l[0].detalhes());,         l[0].avancarPag();//livro fechado não funciona,         l[0].abrir();,         l[0].avancarPag();,         System.out.println(l[0].detalhes());,         ,     },     , }]
[package projetolivro;, , public class Pessoa {,     ,     private String nome;,     private int idade;,     private String sexo;, ,       ,     public void fazerAniver(){,         this.setIdade(this.getIdade()+1);,     }, ,     public Pessoa(String nome, int idade, String sexo) {,         this.nome = nome;,         this.idade = idade;,         this.sexo = sexo;,     },         ,     ,     ,     public String getNome() {,         return nome;,     }, ,     public void setNome(String nome) {,         this.nome = nome;,     }, ,     public int getIdade() {,         return idade;,     }, ,     public void setIdade(int idade) {,         this.idade = idade;,     }, ,     public String getSexo() {,         return sexo;,     }, ,     public void setSexo(String sexo) {,         this.sexo = sexo;,     }, , ,     ,     , }]
[package projetolivro;, , public interface Publicacao {,     ,     public  void abrir();,     public  void fechar();,     public  void folhear(int p);,     public  void avancarPag();,     public  void voltarPag();,    , }]
[package aula13polimorfismosobrecarga;, , public abstract class Lobo {,     ,     public abstract void reagir();, }]
[package aula13polimorfismosobrecarga;, , public class Cachorro extends Lobo{,     ,     ,     @Override,     public void reagir() {,         System.out.println("Au, au, au");,     },     ,     // Polimorfismo de sobrecarga      ,     public void reagir(String frase){,         System.out.println("Auuuuuu, auuuuu");,     },     ,     public void reagir(int hora, int minuto){,         System.out.println("Deita");,     },     ,     public void reagir(int chamar){,         System.out.println("Cachorro vai até vocẽ");,     },     ,     public void reagir(boolean dono){,         if (dono) {,             System.out.println("Abana o rabo...");,         } else {,             System.out.println("Rosna e late");,         },     }, ,     , ,     ,       , }]
[package aula13polimorfismosobrecarga;, , public class Aula13PolimorfismoSobrecarga {, ,     public static void main(String[] args) {, ,         Cachorro c = new Cachorro();,         ,         c.reagir();,         c.reagir(true);,         c.reagir(1);, ,     },     , }]
[package ultraemojicombat;, , public class Lutador {,     ,     private String nome;,     private String nacionalidade;,     private int idade;,     private float altura;,     private float peso;,     private String categoria;,     private int vitorias;,     private int derrotas;,     private int empates;, ,     public Lutador(String nome, String nacionalidade, int idade, float altura, float peso, int vitorias, int derrotas, int empates) {,         this.nome = nome;,         this.nacionalidade = nacionalidade;,         this.idade = idade;,         this.altura = altura;,         this.setPeso(peso);,         this.vitorias = vitorias;,         this.derrotas = derrotas;,         this.empates = empates;,     }, ,     public String getNome() {,         return nome;,     }, ,     public void setNome(String nome) {,         this.nome = nome;,     }, ,     public String getNacionalidade() {,         return nacionalidade;,     }, ,     public void setNacionalidade(String nacionalidade) {,         this.nacionalidade = nacionalidade;,     }, ,     public int getIdade() {,         return idade;,     }, ,     public void setIdade(int idade) {,         this.idade = idade;,     }, ,     public float getAltura() {,         return altura;,     }, ,     public void setAltura(float altura) {,         this.altura = altura;,     }, ,     public float getPeso() {,         return peso;,     }, ,     public void setPeso(float peso) {,         this.peso = peso;,         this.setCategoria();,     }, ,     public String getCategoria() {,         return categoria;,     }, ,     public void setCategoria() {,         if (this.getPeso() < 52.5) {,             this.categoria = "Inválido";,         } else if (this.getPeso() <= 70.3){,             this.categoria = "Leve";,         }else if (this.getPeso() <= 83.9){,             this.categoria = "Medio";,         }else if (this.getPeso() <= 120.2){,             this.categoria = "Pesado";,         }else {,             this.categoria = "Inválido";,         },     }, ,     public int getVitorias() {,         return vitorias;,     }, ,     public void setVitorias(int vitorias) {,         this.vitorias = vitorias;,     }, ,     public int getDerrotas() {,         return derrotas;,     }, ,     public void setDerrotas(int derrotas) {,         this.derrotas = derrotas;,     }, ,     public int getEmpates() {,         return empates;,     }, ,     public void setEmpates(int empates) {,         this.empates = empates;,     },     ,     //Metodos especiais,     ,     public void apresentar(){,         System.out.println("---Senhoras e Senhores------");,         System.out.println("Lutador: " + this.getNome());,         System.out.println("Origem: " + this.getNacionalidade());,         System.out.println(this.getIdade() + " anos");,         System.out.println(this.getAltura() + "m de altura");,         System.out.println("Pesando: " + this.getPeso() + "kg");,         System.out.println("Ganhou: " + this.getVitorias());,         System.out.println("Pedeu: " + this.getDerrotas());,         System.out.println("Empatou: " + this.getEmpates());,     ,     },     ,     public void status(){,         System.out.println(this.getNome());,         System.out.println("é um peso " + this.getCategoria());,         System.out.println(this.getVitorias() + " vitórias");,         System.out.println(this.getDerrotas() + " derrotas");,         System.out.println(this.getEmpates() + " empates");,         ,     }, ,     public void ganharLuta(){,         this.setVitorias(this.getVitorias()+1);,     },     ,     public void perderLuta(){,         this.setDerrotas(this.getDerrotas()+1);,     },     ,     public void empatar(){,         this.setEmpates(this.getEmpates()+1);,     },     ,     , }, ]
[package ultraemojicombat;, , import java.util.Random;, , public class Luta {,     ,     private Lutador desafiado;,     private Lutador desafiante;,     private int rounds;,     private boolean aprovado;,     ,     //Metodos Publicos,     public void marcarLuta(Lutador l1, Lutador l2){,         if (l1.getCategoria().equals(l2.getCategoria()) && l1!=l2){,                this.setAprovado(true);,                this.setDesafiado(l1);,                this.setDesafiante(l2);,         } else {,             this.setAprovado(false);,             this.setDesafiado(null);,             this.setDesafiante(null);,         },     },     ,     public void lutar(){,         if (this.isAprovado()) {,             System.out.println("### DESAFIADO ###");,             this.getDesafiado().apresentar();,             System.out.println("\n### DESAFIANTE ###");,             this.getDesafiante().apresentar();,             ,             Random aleatorio = new Random();,             int vencedor = aleatorio.nextInt(3);// 0, 1 , 2,             ,             System.out.println("================Resultado da Luta ==============");,             ,             switch(vencedor){,                 case 0://Empate,                     System.out.println("Empate");,                     this.desafiado.empatar();,                     this.desafiante.empatar();,                     break;,                 case 1://Desafiado vence,                     System.out.println("Venceu " + this.desafiado.getNome());,                     this.desafiado.ganharLuta();,                     this.desafiante.perderLuta();,                     break;,                 case 2://Desafiante vence,                     System.out.println("Venceu " + this.desafiante.getNome());,                     this.desafiado.perderLuta();,                     this.desafiante.ganharLuta();,                     break;,                             ,             },             System.out.println("================================================");,         } else {,             System.err.println("Luta não pode acontecer :( ");,         },     ,     },     ,     //Metodos especiais,     public Lutador getDesafiado() {,         return desafiado;,     }, ,     public void setDesafiado(Lutador desafiado) {,         this.desafiado = desafiado;,     }, ,     public Lutador getDesafiante() {,         return desafiante;,     }, ,     public void setDesafiante(Lutador desafiante) {,         this.desafiante = desafiante;,     }, ,     public int getRounds() {,         return rounds;,     }, ,     public void setRounds(int rounds) {,         this.rounds = rounds;,     }, ,     public boolean isAprovado() {,         return aprovado;,     }, ,     public void setAprovado(boolean aprovado) {,         this.aprovado = aprovado;,     },     ,     , }]
[package ultraemojicombat;, , public class UltraEmojiCombat {, ,     public static void main(String[] args) {,         ,         Lutador l[] = new Lutador[6];,        ,         l[0] = new Lutador("Pretty Boy", "França", 31, 1.75f, 68.9f, 11, 2, 1);,         l[1] = new Lutador("Putscript", "Brasil", 28, 1.79f, 70.0f, 8, 1, 0);,         ,         Luta UEC01 = new Luta();,         UEC01.marcarLuta(l[1], l[0]);,         UEC01.lutar();,         ,         ,         , ,     },     , }]
[package aula06;, , public interface Controlador {,     ,     public abstract void ligar();,     public abstract void desligar();,     ,     public abstract void abrirMenu();,     public abstract void fecharMenu();,     ,     public abstract void maisVolume();,     public abstract void menosVolume();,     ,     public abstract void ligarMudo();,     public abstract void desligarMudo();,     ,     public abstract void play(); ,     public abstract void pause();,     , }]
[package aula06;, , public class Aula06 {, ,     public static void main(String[] args) {,         ,         ControleRemoto c = new ControleRemoto();,         c.ligar();,         c.maisVolume();,         c.maisVolume();,         //c.setVolume(50); privado nao funciona,         c.abrirMenu();,         c.fecharMenu();, ,     },     , }]
[package aula06;, , public class ControleRemoto implements Controlador{,     ,     //Atributos,     private int volume;,     private boolean ligado;,     private boolean tocando;, ,     public ControleRemoto() {,         this.volume = 50;,         this.ligado = false;,         this.tocando = false;,     }, ,     private int getVolume() {,         return volume;,     }, ,     private void setVolume(int volume) {,         this.volume = volume;,     }, ,     private boolean isLigado() {,         return ligado;,     }, ,     private void setLigado(boolean ligado) {,         this.ligado = ligado;,     }, ,     private boolean isTocando() {,         return tocando;,     }, ,     private void setTocando(boolean tocando) {,         this.tocando = tocando;,     }, ,     ,     @Override,     public void ligar() {,         this.setLigado(true);,     }, ,     @Override,     public void desligar() {,         this.setLigado(false);,     }, ,     @Override,     public void abrirMenu() {,         System.out.println("----------Menu----------");,         System.out.println("Esta ligado: " + this.isLigado());,         System.out.println("Esta tocando: " + this.isTocando());,         System.out.print("Volume: " + this.getVolume() + " ");,         ,         for(int i = 0; i <= this.getVolume(); i+= 10){,             System.out.print("|");,         },         ,     }   , ,     @Override,     public void fecharMenu() {,         System.out.println("\n ------------Fechando Menu---------------");,     }, ,     @Override,     public void maisVolume() {,         if(this.isLigado()){,             this.setVolume(this.getVolume()+5);,         },     }, ,     @Override,     public void menosVolume() {,         if(this.isLigado()){,             this.setVolume(this.getVolume()-5);,         },     }, ,     @Override,     public void ligarMudo() {,         if(this.isLigado() && this.getVolume() > 0){,             this.setVolume(0);,         },     }, ,     @Override,     public void desligarMudo() {,         if(this.isLigado() && this.getVolume()==0){,             this.setVolume(30);,         },     }, ,     @Override,     public void play() {,         if(this.isLigado() && !(this.isTocando())){,             this.setTocando(true);,         },     }, ,     @Override,     public void pause() {,         if(this.isLigado() && this.isTocando()){,             this.setTocando(false);,         },     },     ,     ,     ,     , }]
[package aula12polimorfismoSobrecarga;, , public class Aula12Polimorfismo {, ,     public static void main(String[] args) {, ,         Mamifero m = new Mamifero();,         Reptil r = new Reptil();,         ,         m.alimentar();,         m.setCorPelo("Preto");,         ,         r.setCorEscama("Dourado");,         r.alimentar();, , , ,     },     , }]
[package aula12polimorfismoSobrecarga;, , public class Mamifero extends Animal{, ,     private String corPelo;, ,     public String getCorPelo() {,         return corPelo;,     }, ,     public void setCorPelo(String corPelo) {,         this.corPelo = corPelo;,     },     ,         ,     @Override,     public void locomover() {,         System.out.println("Correndo...");,     }, ,     @Override,     public void alimentar() {,         System.out.println("Mamando");,     }, ,     @Override,     public void emitirSom() {,         System.out.println("Som de Mamífero");,     },     ,     ,     , }]
[package aula12polimorfismoSobrecarga;, , public class Reptil extends Animal{, ,     private String corEscama;, ,     public String getCorEscama() {,         return corEscama;,     }, ,     public void setCorEscama(String corEscama) {,         this.corEscama = corEscama;,     },     ,     ,     ,     @Override,     public void locomover() {,         System.out.println("Rastejando");,     }, ,     @Override,     public void alimentar() {,         System.out.println("Comendo Vegetais");,     }, ,     @Override,     public void emitirSom() {,         System.out.println("Som de Réptil");,     },     ,     ,     , }]
[package aula12polimorfismoSobrecarga;, , public class Peixe extends Animal{, ,     private String corEscama;, ,     ,     public String getCorEscama() {,         return corEscama;,     }, ,     public void setCorEscama(String corEscama) {,         this.corEscama = corEscama;,     },     ,     public void soltarBolhas(){,         System.out.println("Bolhas...");,     },     ,     @Override,     public void locomover() {,         System.out.println("Nadando...");,     }, ,     @Override,     public void alimentar() {,         System.out.println("Comendo substâncias");,     }, ,     @Override,     public void emitirSom() {,         System.out.println("Não faz som");,     },     ,     ,     ,     , }]
[package aula12polimorfismoSobrecarga;, , public abstract class Animal {,     ,     private float peso; ,     private int idade;,     private String membros;,     ,     public abstract void locomover();,     public abstract void alimentar();,     public abstract void emitirSom();,     ,     ,     , }]
[, package aula02;, , , public class Aula02 {, ,     ,     public static void main(String[] args) {, ,         Caneta c1 = new Caneta();,         c1.cor = "Azul";,         c1.ponta = 0.5f;,         c1.carga = 100;,         c1.modelo = "Bic";,         //c1.tampada = true; atributo privado,         c1.destampar();,         c1.rabiscar();,         c1.status();,         , ,     },     , }]
[package aula02;, , , public class Caneta {,     ,     String modelo;,     String cor;,     float ponta;,     int carga;,     private boolean tampada;,     ,     void status(){,         System.out.println("Uma caneta " + this.cor);,         System.out.println("Está tampada? " + this.tampada);,     }   ,     ,     void rabiscar(){,         if(this.tampada == true){,             System.out.println("Não pode rabiscar tampada!");,         }else{,             System.out.println("Rabiscando -------------");,         },     },     ,     void tampar(){,         this.tampada = true;,     },     ,     ,     void destampar(){,         this.tampada = false;,     },     ,     ,     , }]
[, package aula04;, , , public class Aula04 {, ,     ,     public static void main(String[] args) {,         ,         Caneta c1 = new Caneta("Bic", "Azul", 0.7f);,         //c1.setCarga(80);,         c1.status();, ,     },     , }]
[package aula04;, , , public class Caneta {,     ,     private String modelo;,     private String cor;,     private float ponta; // padrão de visibilidade,     private int carga = 100;// teste,     private boolean tampada;, ,     public Caneta(String modelo, String cor, float ponta) {,         this.modelo = modelo;,         this.cor = cor;,         this.ponta = ponta;,     }, ,     public String getModelo() {,         return modelo;,     }, ,     public void setModelo(String modelo) {,         this.modelo = modelo;,     }, ,     public String getCor() {,         return cor;,     }, ,     public void setCor(String cor) {,         this.cor = cor;,     }, ,     public float getPonta() {,         return ponta;,     }, ,     public void setPonta(float ponta) {,         this.ponta = ponta;,     }, ,     public int getCarga() {,         return carga;,     }, ,     public void setCarga(int carga) {,         this.carga = carga;,     }, ,     public boolean isTampada() {,         return tampada;,     }, ,     public void setTampada(boolean tampada) {,         this.tampada = tampada;,     },     ,     ,     void status(){,         System.out.println("Caneta: ");,         System.out.println("Modelo da caneta: " + this.getModelo());,         System.out.println("Uma caneta: " + this.getCor());,         System.out.println("Está tampada? " + this.isTampada());,         System.out.println("Ponta: " + this.getPonta());,         System.out.println("Carga: " + this.getCarga() + "%");,         System.out.println("------------------------------------");,     } ,     ,     , }]
[package aula11;, , public class Visitante extends Pessoa{,         ,     , }]
[package aula11;, , public abstract class Pessoa {,     ,     private String nome;,     private int idade;,     private String sexo;,     ,     public void fazAniv(){,         this.setIdade(this.getIdade()+1);,     }, ,     public String getNome() {,         return nome;,     }, ,     public void setNome(String nome) {,         this.nome = nome;,     }, ,     public int getIdade() {,         return idade;,     }, ,     public void setIdade(int idade) {,         this.idade = idade;,     }, ,     public String getSexo() {,         return sexo;,     }, ,     public void setSexo(String sexo) {,         this.sexo = sexo;,     },     ,     ,     , }]
[package aula11;, , public class Aula11 {, ,     public static void main(String[] args) {,         ,         , , , ,     },     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package aula11;, , /**,  *,  * @author willi,  */, public class Aluno {,     , }]
[package projetoyoutube;, , public class ProjetoYouTube {, ,     public static void main(String[] args) {,         ,         Video v[] = new Video[3];,         ,         v[0] = new Video("Curso de POO");,         v[1] = new Video("MySQL");,         v[2] = new Video("Python");,         ,                ,         Gafanhoto p = new Gafanhoto("Gabi", 20, "F", "gabi@gmail");,         Gafanhoto p1 = new Gafanhoto("Maria", 25, "F", "maria@gmail");,         ,         ,         Visualizacao viu = new Visualizacao(p, v[1]);,         viu.avaliar();,         ,         System.out.println(v[0].toString());,         System.out.println(v[1].toString());,         System.out.println(v[2].toString());,         ,         ,         ,     },     , }]
[package projetoyoutube;, , public class Visualizacao {,     ,     private Gafanhoto espectador;,     private Video filme;, ,     public Visualizacao(Gafanhoto espectador, Video filme) {,         this.espectador = espectador;,         this.filme = filme;,         this.filme.views();,         this.espectador.viuMaisUm();,     },     ,     void avaliar(){,         this.filme.setAvaliacao(5);,     },     ,     void avaliar(int nota){,         this.filme.setAvaliacao(nota);,     },     ,     void avaliar(float porcentagem){,         this.filme.setAvaliacao(porcentagem);,     }, ,     //Get Set,     public Gafanhoto getEspectador() {,         return espectador;,     }, ,     public void setEspectador(Gafanhoto espectador) {,         this.espectador = espectador;,     }, ,     public Video getFilme() {,         return filme;,     }, ,     public void setFilme(Video filme) {,         this.filme = filme;,     },     ,     , }]
[package projetoyoutube;, , public interface AcoesVideo {,      ,     public abstract void play();,     public abstract void pause();,     public abstract void like();,     , }]
[package projetoyoutube;, , public class Video implements AcoesVideo{, ,     private String titulo;,     private float avaliacao;,     private int views;,     private int curtidas;,     private boolean reproduzindo;, ,     public Video(String titulo) {,         this.titulo = titulo;,         this.avaliacao = 1;,         this.views = 0;,         this.curtidas = 0;,         this.reproduzindo = false;,     },     ,     void views(){,         this.setViews(this.getViews()+1);,     },     ,     @Override,     public void play() {,         this.setReproduzindo(true);,     }, ,     @Override,     public void pause() {,         this.setReproduzindo(false);,     }, ,     @Override,     public void like() {,         this.setCurtidas(this.getCurtidas()+1);,     }, ,     @Override,     public String toString() {,         return "Video{" + "titulo=" + titulo + ", avaliacao=" + avaliacao + ", views=" + views + ", curtidas=" + curtidas + ", reproduzindo=" + reproduzindo + '}';,     }, ,     ,     ,     //Set Get,     public String getTitulo() {,         return titulo;,     }, ,     public void setTitulo(String titulo) {,         this.titulo = titulo;,     }, ,     public float getAvaliacao() {,         return avaliacao;,     }, ,     public void setAvaliacao(float avaliacao) {,         this.avaliacao = avaliacao;,     }, ,     public int getViews() {,         return views;,     }, ,     public void setViews(int views) {,         this.views = views;,     }, ,     public int getCurtidas() {,         return curtidas;,     }, ,     public void setCurtidas(int curtidas) {,         this.curtidas = curtidas;,     }, ,     public boolean isReproduzindo() {,         return reproduzindo;,     }, ,     public void setReproduzindo(boolean reproduzindo) {,         this.reproduzindo = reproduzindo;,     }, ,     ,     ,     ,     , }]
[package projetoyoutube;, , public class Gafanhoto extends Pessoa{,     ,     private String login;,     private int totalAssistido;, ,     public Gafanhoto(String nome, int idade, String sexo, String login) {,         super(nome, idade, sexo);,         this.login = login;,     },     ,     ,     public void viuMaisUm(){,         this.setTotalAssistido(this.getTotalAssistido()+1);,     }, ,     // Get Set,     public String getLogin() {,         return login;,     }, ,     public void setLogin(String login) {,         this.login = login;,     }, ,     public int getTotalAssistido() {,         return totalAssistido;,     }, ,     public void setTotalAssistido(int totalAssistido) {,         this.totalAssistido = totalAssistido;,     },     ,     , }]
[package projetoyoutube;, , public class Pessoa {,     ,     private String nome;,     private int idade;,     private String sexo;,     private float experiencia;, ,     public Pessoa(String nome, int idade, String sexo) {,         this.nome = nome;,         this.idade = idade;,         this.sexo = sexo;,         this.experiencia = 0;,     },      ,     ,     public void ganharExp(float experiencia){,         this.setExperiencia(experiencia);,     }, ,     // Get Set,     public String getNome() {,         return nome;,     }, ,     public void setNome(String nome) {,         this.nome = nome;,     }, ,     public int getIdade() {,         return idade;,     }, ,     public void setIdade(int idade) {,         this.idade = idade;,     }, ,     public String getSexo() {,         return sexo;,     }, ,     public void setSexo(String sexo) {,         this.sexo = sexo;,     }, ,     public float getExperiencia() {,         return experiencia;,     }, ,     public void setExperiencia(float experiencia) {,         this.experiencia = experiencia;,     }, ,     ,     ,     ,     ,     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package aula03;, , /**,  *,  * @author willi,  */, public class Aula03 {, ,     /**,      * @param args the command line arguments,      */,     public static void main(String[] args) {,        ,         Caneta c1 = new Caneta();,         c1.modelo = "Bic";,         c1.cor = "Azul";,         c1.ponta = 0.5f;,         //c1.carga = 100; // atributo privado, acesso apenas pela própria classe,         c1.carga(90);,         c1.destampar();,         c1.rabiscar();,         c1.status();,     },     , }]
[package aula03;, , , public class Caneta {,     ,     public String modelo;,     public String cor;,     float ponta; // padrão de visibilidade,     private int carga;,     private boolean tampada;,     ,     void status(){,         System.out.println("Modelo da caneta: " + this.modelo);,         System.out.println("Uma caneta: " + this.cor);,         System.out.println("Está tampada? " + this.tampada);,         System.out.println("Ponta: " + this.ponta);,         System.out.println("Carga: " + this.carga + "%");,     }   ,     ,     void rabiscar(){,         if(this.tampada == true){,             System.out.println("Não pode rabiscar tampada!");,         }else{,             System.out.println("Rabiscando -------------");,         },     },     ,     void carga(int carga){,         this.carga = carga;,     },     ,     void tampar(){,         this.tampada = true;,     },     ,     ,     void destampar(){,         this.tampada = false;,     },     ,     ,     , }]
[package aula10heranca;, , public class Aula10Heranca {, ,     public static void main(String[] args) {, ,             Pessoa p1 = new Pessoa();,             Aluno p2 = new Aluno();,             Professor p3 = new Professor();,             Funcionario p4 = new Funcionario();,             ,                        ,             p1.setNome("Pedro"); ,             p1.setIdade(20);,             p1.setSexo("M");,             System.out.println(p1.toString());,             ,             ,             p2.setNome("Maria");,             p2.setIdade(30);,             p2.setSexo("F");,             p2.setCurso("Informatica");,             System.out.println(p2.toString());,             ,             ,             p3.setNome("Claudia");,             p3.setIdade(35);,             p3.setSexo("F");,             p3.setSalario(3500.00f);,             System.out.println(p3.toString());,             ,             ,             p4.setNome("Fabiana");,             p4.setIdade(19);,             p4.setSexo("F");,             p4.setSetor("Estoque");,             System.out.println(p4.toString());,             , ,     },     , }]
[package aula10heranca;, , public class Professor extends Pessoa{,     ,     private String especialidade;,     private float salario;, ,     ,     public void ReceberAumento(float aum){,         this.setSalario(this.getSalario() + aum);,     ,     },     ,     public String getEspecialidade() {,         return especialidade;,     }, ,     public void setEspecialidade(String especialidade) {,         this.especialidade = especialidade;,     }, ,     public float getSalario() {,         return salario;,     }, ,     public void setSalario(float salario) {,         this.salario = salario;,     },     ,     ,     ,     ,     ,     ,     , }]
[package aula10heranca;, , public class Funcionario extends Pessoa{,     ,     private String setor;,     private boolean trabalhando;, ,     ,     public void mudarTrabalho(){,         this.setTrabalhando(false);,     },     ,     public String getSetor() {,         return setor;,     }, ,     public void setSetor(String setor) {,         this.setor = setor;,     }, ,     public boolean isTrabalhando() {,         return trabalhando;,     }, ,     public void setTrabalhando(boolean trabalhando) {,         this.trabalhando = trabalhando;,     },     ,     ,     ,     , }]
[package aula10heranca;, , public class Pessoa {,     ,     private String nome; ,     private int idade;,     private String sexo; , ,     public void fazerAniversario(){,         this.setIdade(this.getIdade()+1);,     }, ,     @Override,     public String toString() {,         return "Pessoa{ " + "nome=" + nome + ", idade=" + idade + ", sexo=" + sexo + " }";,     },     ,     ,     ,     ,     public String getNome() {,         return nome;,     }, ,     public void setNome(String nome) {,         this.nome = nome;,     }, ,     public int getIdade() {,         return idade;,     }, ,     public void setIdade(int idade) {,         this.idade = idade;,     }, ,     public String getSexo() {,         return sexo;,     }, ,     public void setSexo(String sexo) {,         this.sexo = sexo;,     },     ,     , }]
[package aula10heranca;, , public class Aluno extends Pessoa {,     ,     private int matricula;,     private String curso;,     private boolean matriculaAtiva;, ,     ,     public void cancelarMatricula(){,             this.setMatriculaAtiva(false);,     },     ,     ,     public boolean isMatriculaAtiva() {,         return matriculaAtiva;,     }, ,     public void setMatriculaAtiva(boolean matriculaAtiva) {,         this.matriculaAtiva = matriculaAtiva;,     }, ,         ,     public int getMatricula() {,         return matricula;,     }, ,     public void setMatricula(int matricula) {,         this.matricula = matricula;,     }, ,     public String getCurso() {,         return curso;,     }, ,     public void setCurso(String curso) {,         this.curso = curso;,     },     ,     , }]
[, package aula05;, , , public class ContaBanco {,     ,     //Atributos,     public int numConta;,     protected String tipo;,     private String dono;,     private float saldo;,     private boolean status;,     private float mensalidade;,     ,     //Construtor,     public ContaBanco() {,         ,     }, ,     //Metodos Especiais,     public int getNumConta() {,         return this.numConta;,     }, ,     public void setNumConta(int numConta) {,         this.numConta = numConta;,     }, ,     public String getTipo() {,         return this.tipo;,     }, ,     public void setTipo(String tipo) {,         this.tipo = tipo;,     }, ,     public String getDono() {,         return this.dono;,     }, ,     public void setDono(String dono) {,         this.dono = dono;,     }, ,     public float getSaldo() {,         return this.saldo;,     }, ,     public void setSaldo(float saldo) {,         this.saldo = saldo;,     }, ,     public boolean isStatus() {,         return this.status;,     }, ,     public void setStatus(boolean status) {,         this.status = status;,     }, ,     public float getMensalidade() {,         return mensalidade;,     }, ,     public void setMensalidade(float mensalidade) {,         this.mensalidade = mensalidade;,     },     ,     ,     ,     //Metodos personalizados,     ,     public void estadoAtual(){,         ,         System.out.println("-----------------------------");,         System.out.println("Conta: " + this.getNumConta());,         System.out.println("Tipo: " + this.getTipo());,         System.out.println("Dono: " + this.getDono());,         System.out.println("Saldo: " + this.getSaldo());,         System.out.println("Status: " + this.isStatus());,         System.out.println("-------------------------------");,         ,     },     ,     public void abrirConta(String t){,         this.setTipo(t);,         this.setStatus(true);,         ,         if("CC".equals(t)){,             this.setSaldo(50);,         }else{,             this.setSaldo(150);,         },     },     ,     public void fecharConta(){,         if(this.getSaldo() > 0){,             System.out.println("Conta não pode ser fechada, tem saldo " + this.getSaldo());,         }else if(this.getSaldo() < 0){,             System.out.println("Conta não pode ser fechada, tem saldo negativo " + this.getSaldo() );,         }else{,             this.setStatus(false);,             System.out.println("Conta fechada com sucesso");,         },         ,     },     ,     public void depositar(float valor){,         if(this.isStatus()){,             this.setSaldo(this.getSaldo() + valor);,             System.out.println("Deposito realizado " + this.getSaldo());,         }else{,             System.out.println("Impossível realizar deposito");,         },     },     ,     public void sacar(float valor){,         if(this.isStatus()){,             if(this.getSaldo() > valor){,                 this.setSaldo(this.getSaldo() - valor);,                 System.out.println("Saque realizado " + this.getSaldo());,             }else{,                 System.out.println("Saldo insuficiente " + this.getSaldo());,             },         }else{,             System.out.println("Conta inativa");,         },     },     ,     public void pagarMensal(){,         if (this.getTipo().equals("CC")) {,             this.setMensalidade(20);,         } else if(this.getTipo().equals("CP")){,             this.setMensalidade(10);,         },         ,         if (this.isStatus()) {,             this.setSaldo(this.getSaldo() - this.mensalidade);,         }else{,             System.out.println("Sem saldo para pagar mensalidade " + this.getSaldo());,         },         ,     },     ,     ,     ,         , }]
[, package aula05;, , public class Aula05 {,     ,     public static void main(String[] args) {,         ,         ContaBanco p1 = new ContaBanco();,         p1.abrirConta("CC");,         p1.estadoAtual();,         ,         ContaBanco p2 = new ContaBanco();,         p2.abrirConta("CP");,         p2.setDono("Gabriela");,         p2.setNumConta(102030);,         p2.depositar(350);,         p2.estadoAtual();,         ,     },     , }]
[package trycatchfinally;, , import java.util.*;, , public class TryCatchFinally {, ,     public static void main(String[] args) {, ,         // Declaração da variável para realizar a leitura do teclado,         Scanner in = new Scanner(System.in);, ,         // Declaração das variáveis numéricas para receber os valores informados,         double n1, n2;, ,         // Declaração da variável para armazenar o valor lido do teclado,         String entrada;, ,         try {  //início do bloco que será monitorado,             do {,                 // Leitura do primeiro número,                 System.out.print("Digite o primeiro número: ");,                 entrada = in.next();,                 n1 = Integer.parseInt(entrada);, ,                 // Leitura do segundo número,                 System.out.print("Digite o segundo número.: ");,                 entrada = in.next();,                 n2 = Integer.parseInt(entrada);, ,                 // Realiza a operação de divisão e mostra o resultado,                 System.out.print("A divisão entre eles é..: " + (n1 / n2));,                 System.out.println("\n");, ,             } while (n1 != -1);, ,         } catch (ArithmeticException ae) {  // tratamento de erro,             System.out.println("Erro provável:  divisão por zero:" + ae.getMessage());, ,         } catch (NumberFormatException nfe) {  // tratamento de erro,             System.out.println("Tipos de dados incompatíveis:" + nfe.getMessage());, ,         } catch (Exception e) {   // tratamento de erro,             System.out.println("Erro genérico:" + e.getMessage());,             System.out.println("Mostra o pacote, a exceção e mensagem de erro:" + e.toString());, ,         } finally {  // bloco final: é executado independentemente do que aconteceu acima,             n1 = 0;,             n2 = 0;,             System.out.println("Saiu do Programa!");,         },     }, }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package primeiroprograma;, , /**,  *,  * Classe que define o objeto Carro,  * @author Edson Melo de Souza,  */, public class Carro {,     // Atributos da classe,     String chassi;,     String cor;,     String modelo;,    , }]
[package primeiroprograma;, , /**,  *,  * @author Edson Melo de Souza,  */, public class PrimeiroPrograma {, ,     /**,      * @param args the command line arguments,      */,     public static void main(String[] args) {,         // Nova instância de um objeto Carro,         Carro c = new Carro();, ,         /**,          * Atribuindo valores aos atributos de forma direta (sem encapsulamento),          * objeto.atributo = "valor";,          */,         c.chassi = "A123456B";,         c.cor = "Azul";,         c.modelo = "Uno";, ,         // Recuperando os valores armazenados nos atributos e mostrando na tela,         System.out.println("Chassi: " + c.chassi);,         System.out.println("Cor...: " + c.cor);,         System.out.println("Modelo: " + c.modelo);,     }, }]
[package javaestruturascontrole;, , class ExemploIf {, ,     public static void main(String[] args) {,         double n1 = 5, n2 = 8, media = 0;,         media = (n1 + n2) / 2;,         if (media < 6) {,             System.out.println(" Aluno Reprovado");,         } else {,             System.out.println(" Aluno Aprovado");,         },     }, }]
[package javaestruturascontrole;, , class ExemploWhile {, ,     public static void main(String[] args) {,         int n = 8, c = 1;,         int m = n;,         System.out.println("Os múltiplos de " + n + " são:");,         while (m < 100) {,             System.out.println(m);,             c++;,             m = n * c;,         },     }, }]
[package javaestruturascontrole;, , class ExemploFor {, ,     public static void main(String[] args) {,         int n = 8, c, m = n;,         System.out.println("Os multiplos de " + n + " são: ");,         for (c = 2; m < 100; c++) {,             System.out.println(m);,             m = c * n;,         },     }, }]
[package javaestruturascontrole;, , class ExemploDoWhile {, ,     public static void main(String[] args) {,         int n = 8, c = 1;,         int m = n;,         System.out.println("Os múltiplos de " + n + " são:");,         do {,             System.out.println(m);,             c++;,             m = n * c;,         } while (m < 100);,     }, }]
[package javaestruturascontrole;, , class ExemploSwitch {, ,     public static void main(String[] args) {,         int mes = 2;, ,         switch (mes) {,             case 1:,                 System.out.println("Janeiro");,                 break;,             case 2:,                 System.out.println("Fevereiro");,                 break;, ,             default:,                 System.out.println("Mês inexistente");,         },     }, }]
[package javaestruturascontrole;, , class ExemploBreak {, ,     public static void main(String[] args) {,         int n1 = 0;,         while (true) {,             System.out.println(n1);,             n1++;,             if (n1 > 10) {,                 break;,             },         },     }, }]
[package pkg08_tiposcustomizados;, , /**,  *,  * @author Edson Melo de Souza,  */, public class Endereco {, ,     private String logradouro;,     private int numero;,     private String bairro;,     private String cep;, ,     /**,      *,      * Método CONSTRUTOR da classe.,      *,      * <p>,      * Esse método é invocado toda vez em que é criada a instância de um objeto.,      * Com isso é possível já atribuir valores no momento da criação da,      * instância.,      *,      * @param logradouro,      * @param numero,      * @param bairro,      * @param cep,      */,     public Endereco(String logradouro, int numero, String bairro, String cep) {,         this.logradouro = logradouro;,         this.numero = numero;,         this.bairro = bairro;,         this.cep = cep;,     }, ,     public String getLogradouro() {,         return logradouro;,     }, ,     public void setLogradouro(String logradouro) {,         this.logradouro = logradouro;,     }, ,     public int getNumero() {,         return numero;,     }, ,     public void setNumero(int numero) {,         this.numero = numero;,     }, ,     public String getBairro() {,         return bairro;,     }, ,     public void setBairro(String bairro) {,         this.bairro = bairro;,     }, ,     public String getCep() {,         return cep;,     }, ,     public void setCep(String cep) {,         this.cep = cep;,     }, }]
[package pkg08_tiposcustomizados;, , /**,  *,  * @author Edson Melo de Souza,  */, public class Pessoa {, ,     private int id;,     private String nome;,     private String cpf;,     private Endereco endereco;, ,     // Métodos Getter e Setter,     public int getId() {,         return id;,     }, ,     public void setId(int id) {,         this.id = id;,     }, ,     public String getNome() {,         return nome;,     }, ,     public void setNome(String nome) {,         this.nome = nome;,     }, ,     public String getCpf() {,         return cpf;,     }, ,     public void setCpf(String cpf) {,         this.cpf = cpf;,     }, ,     public Endereco getEndereco() {,         return endereco;,     }, ,     public void setEndereco(Endereco endereco) {,         this.endereco = endereco;,     }, , }]
[package pkg08_tiposcustomizados;, , /**,  *,  * @author Edson Melo de Souza,  */, public class Main {, ,     /**,      * @param args the command line arguments,      */,     public static void main(String[] args) {,         // Instância do objeto Pessoa,         Pessoa p = new Pessoa();, ,         // Atribuição dos valores por meio dos métodos,         p.setId(1);,         p.setNome("Edson Melo de Souza");,         p.setCpf("123.456.789-00");, ,         /**,          * O método setEndereco recebe um NOVO objeto "Endereco" Perceba a,          * palavra "new", ela cria uma nova instância do Endereco,          */,         p.setEndereco(new Endereco("Rua Treze de Maio", 25, "Penha", "01234-000"));, ,         // Mostrando os valores atribuidos,         System.out.println("Id...:" + p.getId());,         System.out.println("Nome.:" + p.getNome());,         System.out.println("CPF..:" + p.getCpf());, ,         /**,          * Perceba que os dados do endereço são recuperados usando um método do,          * método, ou seja, o objeto endereço está sendo acessado indiretamente,          */,         System.out.println("Rua....: " + p.getEndereco().getLogradouro());,         System.out.println("Número.: " + p.getEndereco().getNumero());,         System.out.println("Bairro.: " + p.getEndereco().getBairro());,         System.out.println("Cep....: " + p.getEndereco().getCep());,     }, , }]
[package segundoprograma;, , /**,  *,  * @author Edson Melo de Souza,  */, public class SegundoPrograma {, ,     /**,      * @param args the command line arguments,      */,     public static void main(String[] args) {,         // Criando um novo Carro,         Carro c = new Carro();,         ,         /**,          * Atribuindo valores através dos métodos,          * ,          * Perceba que não há mais o sinal de atribuição (=) como no ,          * exemplo anterior PrimeiroPrograma ,          */,         c.setChassi("A12345B");,         c.setCor("Azul");,         c.setModelo("Uno");,         ,         // Apresentando os valores armazenados via método get,         System.out.println("Chassi...: " + c.getChassi());,         System.out.println("Cor......: " + c.getCor());,         System.out.println("Modelo...: " + c.getModelo());,         System.out.println("");,         ,         // Alterando o valor de um atributo do Carro e mostrando o resultado,         c.setCor("Amarelo");,         ,         // Apresentando os valores armazenados via método get,         System.out.println("Chassi...: " + c.getChassi());,         System.out.println("Cor......: " + c.getCor());,         System.out.println("Modelo...: " + c.getModelo());        ,         System.out.println("");,         ,         // Criando um novo Carro,         Carro c2 = new Carro();,         // Atribuindo os valores,         c2.setChassi("F9978R12");,         c2.setCor("Vermelho");,         c2.setModelo("Ferrari");,         ,         // Apresentando os valores armazenados via método get,         System.out.println("Novo Carro");,         System.out.println("Chassi...: " + c2.getChassi());,         System.out.println("Cor......: " + c2.getCor());,         System.out.println("Modelo...: " + c2.getModelo());,     },     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package segundoprograma;, , /**,  *,  * Classe que define o objeto Carro,  *,  * @author Edson Melo de Souza,  */, public class Carro {, ,     // Atributos da classe encapsulados (visibilidade privada),     private String chassi;,     private String cor;,     private String modelo;, ,     // Métodos Getters e Setters,     /**,      * Método para recuperação do valor contido no atributo chassi,      *,      * @return chassi,      */,     public String getChassi() {,         return chassi;,     }, ,     /**,      * Método para atribuição de valor para o atributo chassi,      *,      * @param chassi,      */,     public void setChassi(String chassi) {,         this.chassi = chassi;,     }, ,     /**,      * Método para recuperação do valor contido no atributo cor,      *,      * @return chassi,      */,     public String getCor() {,         return cor;,     }, ,     /**,      * Método para atribuição de valor do atributo cor,      *,      * @param cor,      */,     public void setCor(String cor) {,         this.cor = cor;,     }, ,     /**,      * Método para recuperação do valor contido no atributo modelo,      *,      * @return chassi,      */,     public String getModelo() {,         return modelo;,     }, ,     /**,      * Método para atribuição de valor do atributo modelo,      *,      * @param modelo,      */,     public void setModelo(String modelo) {,         this.modelo = modelo;,     }, , }]
[package pkg07_manipulandoclasses;, , /**,  *,  * @author Edson Melo de Souza,  */, public class OperacoesMatematicas {, ,     // Soma entre dois valores,     public double soma(double n1, double n2) {,         return n1 + n2;,     }, ,     // Soma entre diversos valores (utilização de arrays),     public double soma(double[] n) {,         double retorno = 0.0;,         for (int i = 0; i < n.length; i++) {,             retorno += n[i];,         },         return retorno;,         ,     }, ,     // Multiplicação entre dois valores,     public double multiplica(double n1, double n2) {,         return n1 + n2;,     }, ,     // Multiplicação entre diversos valores (utilização de arrays),     public double multiplica(double[] n) {,         double retorno = 0.0;,         for (int i = 0; i < n.length; i++) {,             retorno += n[i];,         },         return retorno;,     }, }]
[package pkg07_manipulandoclasses;, , /**,  *,  * @author Edson Melo de Souza,  */, public class Main {, ,     public static void main(String[] args) {,         // Declaração da variável,         OperacoesMatematicas calculos = new OperacoesMatematicas();, ,         // Realizando uma soma entre dois números,         System.out.println(calculos.soma(10, 20));, ,         // Declaração de um array de valores,         double[] valores = new double[3];,         valores[0] = 1;,         valores[1] = 2;,         valores[2] = 3;, ,         // Realizando uma soma de vários números,         System.out.println(calculos.soma(valores));,     }, , }]
[package atividade2010;, , import java.util.Scanner;, , /**,  *,  * @author Edson Melo de Souza,  */, public class Ex02 {, ,     public static void main(String[] args) {,         int numero;,         String entrada;, ,         // Cria uma variável para ler os dados do teclado,         Scanner teclado = new Scanner(System.in);, ,         // Início da leitura,         System.out.print("Digite um número: ");,         entrada = teclado.next();,         numero = Integer.parseInt(entrada);,         ,         // Laço de repetição do tipo for em ordem decrescente,         for(int i = numero; i >= 0; i--){,             System.out.println("Número: " + i);,         },     }, , }]
[package atividade2010;, , /**,  *,  * @author Edson Melo de Souza,  */, public class Ex03 {, ,     public static void main(String[] args) {,         long soma = 0;, ,         for (int i = 1; i < 30; i++) {,             if ((i % 2) == 0) {,                 soma += i;,             },         },         System.out.println("Total: " + soma);, ,         long multiplicacao = 1;, ,         for (int i = 2; i < 30; i++) {,             if ((i % 2) == 0) {,                 multiplicacao *= i;,             },         },         System.out.println("Total: " + multiplicacao);,     }, }]
[package atividade2010;, , import java.util.Scanner;, , /**,  *,  * @author Edson Melo de Souza MaiorNumero,  */, public class Ex01 {, ,     public static void main(String[] args) {,         // Variáveis para receber os valores informados,         int n1;,         int n2;,         String entrada;, ,         // Cria uma variável para ler os dados do teclado,         Scanner teclado = new Scanner(System.in);, ,         // Início da leitura,         System.out.print("Digite o primeiro número: ");,         entrada = teclado.next();,         n1 = Integer.parseInt(entrada);, ,         // Leitura do segundo número,         System.out.print("Digite o segundo número.: ");,         entrada = teclado.next();,         n2 = Integer.parseInt(entrada);, ,         // Realiza a comparação,         if (n1 > n2) {,             System.out.println("Números digitados: n1=" +n1 + ", n2=" +n2 + ", maior: " + n1);,         } else {,             System.out.println("Números digitados: n1=" +n1 + ", n2=" +n2 + ", maior: " + n2);,         }, ,     }, }]
[package ex04;, , /**,  *,  * @author Edson Melo de Souza,  */, public class Ingresso {,     double valorIngresso;,     ,     public void setIngresso(double ingresso){,         valorIngresso = ingresso;,     },     ,     public void imprimeValor(){,         System.out.println("Valor do ingresso: R$" + valorIngresso);,     },     , }]
[package ex04;, , /**,  *,  * @author Edson Melo de Souza,  */, public class Vip extends Ingresso {,     private final double valorAdicional = 80;,     ,     public double ingressoVip() {,         valorIngresso = valorIngresso + valorAdicional;,        return valorIngresso;,     }, }    ,  ]
[, package ex04;, , /**,  *,  * @author Edson Melo de Souza,  */, public class CamaroteSuperior extends Vip {,     private double taxaSuperior = 30;,     //private double valor = valorIngresso + taxaSuperior;,     private String localizacaoIngresso;,     ,     public void setLocalizacao(String localizacao){,         localizacaoIngresso = localizacao;,     },     ,     public String getLocalizacao() {,         return localizacaoIngresso;,     },     ,     public double camaroteSuperior() {,         return ingressoVip() + taxaSuperior;,     }  , }]
[package ex04;, , /**,  *,  * @author Edson Melo de Souza,  */, public class CamaroteInferior extends Vip {, ,     private String localizacaoIngresso;, ,     public void setLocalizacao(String localizacao) {,         localizacaoIngresso = localizacao;,     }, ,     public String getLocalizacao() {,         return localizacaoIngresso;,     }, }]
[package ex04;, , /**,  *,  * @author Edson Melo de Souza,  */, public class Principal {, ,     public static void main(String[] args) {,         Normal n = new Normal();,         n.setIngresso(250.00);,         System.out.println(n.ingressoNormal());, ,         CamaroteInferior ci = new CamaroteInferior();,         ci.setIngresso(250);,         ci.setLocalizacao("Camarote Inferior");,         System.out.println(ci.getLocalizacao() + " -> " + ci.ingressoVip());, ,         CamaroteSuperior cs = new CamaroteSuperior();,         cs.setIngresso(250);,         cs.setLocalizacao("Camarote Superior");,         System.out.println(cs.getLocalizacao() + " -> " + cs.camaroteSuperior());,     }, }]
[package ex04;, , /**,  *,  * @author Edson Melo de Souza,  */, public class Normal extends Ingresso {,     ,     public String ingressoNormal() {,         return "Ingresso normal   -> " + valorIngresso;,     }, }]
[package leiturapeloteclado;, , import java.util.*;, , public class LeituraPeloTeclado {, ,     public static void main(String[] args) {, ,         // Declaração da variável para realizar a leitura do teclado,         Scanner in = new Scanner(System.in);, ,         // Declaração das variáveis numéricas para receber os valores informados,         double n1, n2;, ,         // Declaração da variável para armazenar o valor lido do teclado,         String entrada;, ,         // Inicio do laço de repetição,         do {,             // Leitura do primeiro número,             System.out.print("Digite o primeiro número: ");,             entrada = in.next();,             n1 = Integer.parseInt(entrada);, ,             // Leitura do segundo número,             System.out.print("Digite o segundo número.: ");,             entrada = in.next();,             n2 = Integer.parseInt(entrada);, ,             // Realiza a operação de divisão e mostra o resultado,             System.out.print("A divisão entre eles é..: " + (n1 / n2));,             System.out.println("\n\n");, ,         } while (n1 != -1); // Realiza o loop até que n1 seja diferente de (-1), ,         System.out.println("Fim do Programa!");,     }, }]
[package heranca;, , public class ContaCorrente extends Conta {, ,     // Reescrevendo o método atualizar,     @Override,     public void atualizar(double taxa) {,         this.saldo += this.saldo * taxa * 2;,     }, , }]
[package heranca;, , public class ContaPoupanca extends Conta {, ,     // Reescrevendo o método atualizar,     @Override,     public void atualizar(double taxa) {,         this.saldo += this.saldo * taxa * 3;,     }, , }]
[package heranca;, , public class Heranca01 {, ,     /**,      * @param args the command line arguments,      */,     public static void main(String[] args) {, ,         // Variáveis para saques e depósitos,         double deposito;,         double saque;, ,         // Declara uma conta,         Conta c = new Conta();,         c.setNumero(123);,         c.setCorrentista("Edson Melo de Souza");,         c.setSaldo(3000);, ,         // Mostra o saldo atual,         System.out.println("Saldo Atual: " + c.saldo());, ,         System.out.println("");, ,         // Tenta realizar um saque,         saque = 1200;,         c.sacar(saque);,         System.out.println("Saque (-):" + saque);, ,         // Mostra o saldo atual + o limite,         System.out.println("Saldo Atual: " + c.saldo());, ,         System.out.println("");, ,         // Realizando um depósito,         deposito = 350;,         c.depositar(deposito);,         System.out.println("Depósito (+): " + deposito);, ,         // Mostra o saldo atual + o limite,         System.out.println("Saldo Atual: " + c.saldo());,     }, , }]
[package heranca;, , public class Conta {, ,     private int numero;,     private String correntista;,     protected double saldo;, ,     // Métodos Getters e Setters,     public int getNumero() {,         return numero;,     }, ,     public void setNumero(int numero) {,         this.numero = numero;,     }, ,     public String getCorrentista() {,         return correntista;,     }, ,     public void setCorrentista(String correntista) {,         this.correntista = correntista;,     }, ,     public double getSaldo() {,         return saldo;,     }, ,     public void setSaldo(double saldo) {,         this.saldo = saldo;,     }, ,     // Métodos de manipulação,     public void depositar(double valor) {,         this.saldo += valor - 0.10;,     }, ,     public void sacar(double valor) {,         this.saldo -= valor;,     }, ,     public double saldo() {,         return saldo;,     }, ,     public void atualizar(double taxa) {,         this.saldo += this.saldo * taxa;,     }, }]
[package heranca;, , public class Heranca02 {, ,     public static void main(String[] args) {,         Conta c = new Conta();,         ContaCorrente cc = new ContaCorrente();,         ContaPoupanca cp = new ContaPoupanca();, ,         c.depositar(1000);,         cc.depositar(1000);,         cp.depositar(1000);, ,         c.atualizar(0.01);,         cc.atualizar(0.01);,         cp.atualizar(0.01);, ,         System.out.println(c.getSaldo());,         System.out.println(cc.getSaldo());,         System.out.println(cp.getSaldo());,     }, }]
[package Atividade4_0;, , , public class Estudante extends Pessoa, {,     protected String graduacao;,     ,     public Estudante(),     {,         super();,         this.graduacao = "-";,     },     ,     public Estudante(String nome, String endereco, String telefone, String email, String graduacao),     {,         super(nome, endereco, telefone, email);,         if (!graduacao.equalsIgnoreCase("bixo") && !graduacao.equalsIgnoreCase("veterano") && !graduacao.equalsIgnoreCase("quase graduado")) {,             graduacao = "-";,         },         this.graduacao = graduacao;,     },     ,     public String toString(),     {,         return "Estudante - "+this.nome;,     }, }]
[package Atividade4_0;, , , public class Data, {,     private int dia;,     private int mes;,     private int ano;,     ,     public Data(),     {,         this.dia = 1;,         this.mes = 1;,         this.ano = 1;,     }, ,     public Data(int dia, int mes, int ano),     {,         this.dia = dia;,         this.mes = mes;,         this.ano = ano;,     }, }]
[package Atividade4_0;, , , public class Professor extends Funcionario, {,     protected double horas_aula;,     protected double horas_pesquisa;,     ,     public Professor(),     {,         super();,         this.horas_aula = 0;,         this.horas_pesquisa = 0;,     },     ,     public Professor(String nome, String endereco, String telefone, String email, int escritorio, double salario, Data admissao, double horas_aula, double horas_pesquisa),     {,         super(nome, endereco, telefone, email, escritorio, salario, admissao);,         this.horas_aula = horas_aula;,         this.horas_pesquisa = horas_pesquisa;,     },     ,     public String toString(),     {,         return "Professor - "+this.nome;,     }, }]
[package Atividade4_0;, , , public class Servidor extends Funcionario, {,     protected int carga_horaria;,     protected String titulacao;,     ,     public Servidor(),     {,         super();,         this.carga_horaria = 20;,         this.titulacao = "Secretário";,     },     ,     public Servidor(String nome, String endereco, String telefone, String email, int escritorio, double salario, Data admissao, int carga_horaria, String titulacao),     {,         super(nome, endereco, telefone, email, escritorio, salario, admissao);,         if (carga_horaria == 20 || carga_horaria == 40) {,             this.carga_horaria = carga_horaria;,         },         this.titulacao = titulacao;,     },     ,     public String toString(),     {,         return "Servidor - "+this.nome;,     }, }]
[package Atividade4_0;, , , public class Funcionario extends Pessoa, {,     protected int escritorio;,     protected double salario;,     protected Data admissao;,     ,     public Funcionario(),     {,         super();,         this.escritorio = 0;,         this.salario = 0;,         this.admissao = new Data();,     },     ,     public Funcionario(String nome, String endereco, String telefone, String email, int escritorio, double salario, Data admissao),     {,         super(nome, endereco, telefone, email);,         this.escritorio = escritorio;,         this.salario = salario;,         this.admissao = admissao;,     },     ,     public String toString(),     {,         return "Funcionario - "+this.nome;,     }, }]
[package Atividade4_0;, , , public class Pessoa, {,     protected String nome;,     protected String endereco;,     protected String telefone;,     protected String email;,     ,     public Pessoa(),     {,         this.nome = "-";,         this.endereco = "-";,         this.telefone = "-";,         this.email = "-";,     },     ,     public Pessoa(String nome, String endereco, String telefone, String email),     {,         this.nome = nome;,         this.endereco = endereco;,         this.telefone = telefone;,         this.email = email;,     },     ,     public String toString(),     {,         return "Pessoa - "+this.nome;,     }, }]
[package Atividade4_0;, , , public class TestePessoa, {,     public TestePessoa(),     {,     },     ,     public void mostraPessoa(Pessoa p),     {,         System.out.print(p);,     }, }]
[package Atividade2.q1;, , , public class DiasEmHoras, {,     private int mes;,     private int dia;,     private int hora;,     private int minutos;, ,     public DiasEmHoras(),     {,         this.mes = 1;,         this.dia = 1;,         this.hora = 0;,         this.minutos = 0;,     }, ,     public DiasEmHoras(int mes, int dia, int hora, int minutos),     {,         this.mes = mes;,         this.dia = dia;,         this.hora = hora;,         this.minutos = minutos;,     },     ,     public boolean configurarMes(int mes),     {,         if ( mes > 0 && mes <= 12 ) {,             this.mes = mes;,             return true;,         } else {,             return false;,         },     },     ,     public boolean configurarDia(int dia),     {,         int maximoDias = 31;,         if ( this.mes == 2 ) {,             maximoDias = 28;,         } else if ( this.mes == 4 || this.mes == 6 || this.mes == 9 || this.mes == 10 ) {,             maximoDias = 30;,         }, ,         if ( dia > 0 && dia <= maximoDias ) {,             this.dia = dia;,             return true;,         } else {,             return false;,         },     },     ,     public boolean configurarHora(int hora),     {,         if ( hora > 0 && hora <= 24 ) {,             this.hora = hora;,             return true;,         } else {,             return false;,         },     },     ,     public boolean configurarMinutos(int minutos),     {,         if ( minutos > 0 && minutos <= 60 ) {,             this.minutos = minutos;,             return true;,         } else {,             return false;,         },     },     ,     public int converteEmHoras(),     {,         int mesesCalculados = 0;,         int totalHoras = this.hora;,         if ( this.mes > 2 ) {,             totalHoras = totalHoras + (28 * 24);,             mesesCalculados = mesesCalculados + 1;,         } else if ( this.mes > 4 ) {,             totalHoras = totalHoras + (30 * 24);,             mesesCalculados = mesesCalculados + 1;,             if ( this.mes > 6 ) {,                 totalHoras = totalHoras + (30 * 24);,                 mesesCalculados = mesesCalculados + 1;,                 if ( this.mes > 9 ) {,                     totalHoras = totalHoras + (30 * 24);,                     mesesCalculados = mesesCalculados + 1;,                     if ( this.mes > 11 ) {,                         totalHoras = totalHoras + (30 * 24);,                         mesesCalculados = mesesCalculados + 1;,                     },                 },             },         },         return this.hora + (this.mes * (31 - mesesCalculados) * 24) + (this.dia * 24);,     }, }]
[package Atividade2_1;, , , public class Enquanto, {,     public Enquanto() {}, ,     /**,      * Apresenta para o usuário (em modo texto) os quadrados dos números inteiros de 15 a 200,      */,     public void quadrados(),     {,         int i = 15;,         while (i <= 200) {,             System.out.println(i+"*"+i+"= "+ (i*i) );,             i = i + 1;,         },     },     ,     /**,      * Apresenta para o usuário (em modo texto) o resultado da soma dos valores pares de 1 até 500.,      */,     public void somaPares(),     {,         int i = 1;,         int total = 0;,         while (i <= 500) {,             ,             if (i % 2 == 0) {,                 total = total + i;,             },             i = i + 1;,             ,         },     }, ,     /**,      * Apresenta para o usuário (em modo texto) uma tabela de conversão de graus Celsius ,      * para graus Fahrenheit (a fórmula de conversão é F = C*9.0/5.0+32, onde F é a temperatura,      * em Fahrenheit e C é a temperatura em Celsius). A tabela deve iniciar em 0o C até 30o C, ,      * com incrementos de 0,5o,      */,     public void converteCemF(),     {,         double c = 0;,         double f = 0;,         while (c <= 30) {,             ,             f = (c * 9 / 5) + 32;,             c = c + 0.5;,             ,         },     },     ,     /**,      * Recebe via parâmetro um número inteiro positivo qualquer (entre 1 e 10) e ,      * retorna o somatório dos fatoriais de 1 até o número informado via parâmetro. ,      * O tipo do retorno deve ser long. Sugestão: criar primeiro o método fatorial ,      * e depois o somatório de fatoriais.,      */,     public long fatorial(int n),     {,         long total = 1;, ,         while (n > 0) {, ,             total = total * n;,             n = n - 1;,             ,         },         ,         return total;,     },     ,     public long somaFatoriais(int n),     {,         long total = 0;,         int i = 1;,         while (i <= n) {,         ,             total = total + this.fatorial(i);,             i = i + 1;,         ,         },         return total;,     },     ,     /**,      * Apresenta o somatório dos fatoriais dos números ímpares entre 1 e 10.,      */,     public void somaFatoriaisImpares(),     {,         long total = 0;,         int i = 1;,         while (i < 10) {,         ,             total = total + this.fatorial(i);,             i = i + 2;,         ,         },         System.out.println("Soma dos fatoriais dos ímpares: "+total+".");,     },     ,     /**,      * Recebe via parâmetro dois números inteiros positivos. ,      * O primeiro (n1) deve ser um número no intervalo de 2 a 9 e o segundo (n2), ,      * deve ser um número inteiro entre 0 e 30. O método retorna um número do tipo,      * long representando n1n2 (n1 elevado na potencia n2). ,      * Utilize estruturas de repetição.,      */,     public long potencia(int b, int e),     {,         if (b >= 2 && b <= 9 && e >= 0 && e <= 30 ) {,             while (e > 0) {,                 b = b * b;,                 e = e - 1;,             },             ,             return b;,             ,         } else return 0;,     },     ,     /**,      * Recebe via parâmetro um número inteiro na faixa de 1 até 9 (inclusive) (n1) ,      * e um segundo número inteiro positivo (n2). ,      * O método deve retornar o total de números divisíveis por n1, na faixa de 1 até n2.,      */,     public int totalDivisoes(int n1, int n2),     {,         int total = 0;,         ,         if (n1 >= 1 && n1 <= 9) {, ,             while (n2 > 0) {,                 if (n1 % n2 == 0) {,                     total = total + 1;,                 },                 n2 = n2 - 1;,             },             ,         },         ,         return total;,     },     ,     /**,      * Apresenta para o usuário (em modo texto) o somatório de número de ,      * grãos de trigo que pode-se obter num tabuleiro de xadrez, ,      * obedecendo à seguinte regra: colocar um grão de trigo no ,      * primeiro quadro e, nos quadros seguintes, o dobro do quadro anterior. ,      * Ou seja, no 1o quadro coloca-se 1 grão, no segundo 2 grãos (neste momento temos 3 grãos), ,      * no 3o quadro colocam-se 4 grãos (agora temos 7 grãos), no 4o quadro ,      * colocam-se 8 grãos (agora temos 15 grãos) até atingir o sexagésimo quarto quadro.,      */,     public void somaGraosXadrez(),     {,         long total = 1;,         long x = 1;,         int i = 2;,         while (i <= 64) {, ,             x = x * 2;,             System.out.println(total);,             total = total + x;,             System.out.println("+"+x);,             i = i + 1;,         },         ,         System.out.println("Total Grãos: "+total);,     },     ,     /**,      * Implemente uma classe em Java para contar o número de dias decorridos,      * entre duas datas. As datas devem ser informadas através de 4 parâmetos (d1, m1, d2, m2), ,      * representando o 1o dia e seu mês e o 2o dia e seu mês, respectivamente. ,      * O programa deve verificar se as datas são válidas (mês e número de dias do mês), ,      * e se a segunda data é realmente posterior a primeira (caso contrário informar que ,      * houve um erro ao fornecer as datas).,      * OBS.: O número de dias de cada mês a ser considerado no cálculo é o seguinte:,      * i. 1 e 28 – fevereiro,      * ii. 1 e 31 - janeiro, março, maio, julho, agosto, outubro e dezembro,      * iii. 1 e 30 – abril, junho, setembro e novembro,      * Obs2.: apesar deste problema poder ser resolvido sem estruturas de repetição, ,      * neste caso, utilize-as.,      */,     public void contarDias(int d1, int m1, int d2, int m2),     {,         int total = 0;,         int diasMes = 31;,         d1 = d1 - 1;,         ,         if (m1 <= 12 && m2 <= 12 && (m1 < m2 || (m1 == m2 && d1 < d2))) {,             if (d1 < d2 && m1 == m2) {,                 // Mesmo mês...,                 if (d2 > 30 && (m1 == 4 || m1 == 6 || m1 == 9 || m1 == 11)) {,                     d2 = 30;,                 } else if (d2 > 28 && m1 == 2) {,                     d2 = 28;,                 } else if (d2 > 31) {,                     d2 = 31;,                 },                 System.out.println("Total de dias percorridos: "+(d2 - d1));,             } else {,                 // Primeiro mês,                 if (d1 >= 0) {,                     if (m1 == 4 || m1 == 6 || m1 == 9 || m1 == 11) {,                         total = 30 - d1;,                     } else if (m1 == 2) {,                         total = 28 - d1;,                     } else {,                         total = 31 - d1;,                     },                     ,                     m1 = m1 + 1;,                 }, ,                 // Meses sequentes,                 while (m1 <= m2) {,                     if (m1 == m2) {,                         diasMes = d2;,                     } else {,                         diasMes = 31;,                     }, ,                     // Ajuste do dia limite,                     if (diasMes > 31) {,                         diasMes = 31;,                     },                     if (diasMes > 30 && (m1 == 4 || m1 == 6 || m1 == 9 || m1 == 11)) {,                         diasMes = 30;,                     } else if (diasMes > 28 && m1 == 2) {,                         diasMes = 28;,                     }, ,                     total = total + diasMes;,                     m1 = m1 + 1;,                 },                 ,                 System.out.println("Total de dias percorridos: "+total);,             },         } else {,             System.out.println("Dados informados incorretamente.");,         },     }, }]
[package Atividade2_2;, , import java.util.Random;, , /**,  * Escreva a descrição da classe Primos aqui.,  * ,  * @author (seu nome) ,  * @version (número de versão ou data),  */, public class Primos, {,     private boolean primos;,     ,     /**,      * Construtor para objetos da classe Primos,      */,     public Primos(),     {,         this.setPrimos(false);,     },     ,     public void setPrimos(boolean p),     {,         this.primos = p;,     },     ,     public boolean getPrimos(),     {,         return this.primos;,     },     ,     /**,      * contarDivisores,      */,     public int contarDivisores(int n, boolean primos),     {,         this.setPrimos(primos);,         int count = 2;,         int down = 0;,         int up = 2;,         ,         if (n == 1) {,             return 1;,         },         ,         if (n <= 0) {,             return 0;,         },         ,         if (n % 2 == 0) {,             down = n / 2;,         } else {,             down = (n + 1) / 2;,         },         ,         while (down >= up) {,             if (down == up) {,                 // Count ++,                 if (n % down == 0) {,                     count = count + 1;,                 },             } else {,                 // Count down ++,                 if (n % down == 0) {,                     count = count + 1;,                 },                 ,                 // Count up ++,                 if (n % up == 0) {,                     count = count + 1;,                 },             },             ,             if (this.getPrimos() && count > 2) {,                 return 0;,             },             ,             down = down - 1;,             up = up + 1;,         },         ,         return count;,     },     ,     /**,      * proximoPrimo,      */,     public int proximoPrimo(int n),     {,         int prox = n + 1;,         ,         while (this.contarDivisores(prox, true) != 2) {,             prox = prox + 1;,         },         ,         return prox;,     },     ,     /**,      * somaPrimos,      */,     public long somaPrimos(int ini, int fim),     {,         long total = 0;,         if (this.contarDivisores(ini, true) != 2) {,             ini = this.proximoPrimo(ini);,         }, ,         while (ini <= fim) {,             total = total + ini;,             ini = this.proximoPrimo(ini);,         },         ,         return total;,     }, ,    /**,     * primosAleatorios,     */,    public void primosAleatorios(),    {,        Random random = new Random();,        int n;,        ,        this.setPrimos(true);,        ,        for (int i = 0;i < 20;i = i + 1) {,            n = random.nextInt();,            if (n < 0) {,                n = n * -1;,            },            ,            if (this.contarDivisores(n, true) == 2) {,                System.out.println("["+n+"] é um número primo.");,            } else {,                System.out.println("["+n+"] NÃO é um número primo.");,            },        },    }, }]
[package Atividade1.q1;, , , public class Cliente, {,     private String nome;,     private String cpf;,     private String rg;,     private String dataNascimento;,     ,     public Cliente(String nome, String cpf, String rg, String dataNascimento) {,         this.nome = nome;,         this.cpf = cpf;,         this.rg = rg;,         this.dataNascimento= dataNascimento;,     },     ,     public Cliente(String nome, String cpf, String rg) {,         this.nome = nome;,         this.cpf = cpf;,         this.rg = rg;,         this.dataNascimento= "";,     },     ,     public Cliente() {,         this.nome = "";,         this.cpf = "";,         this.rg= "";,         this.dataNascimento= "";,     }, }]
[package Atividade1.q1;, , public class Conta, {,     private int numero;,     private int agencia;,     private float saldo;,     private String senha;,     private Cliente titular;, ,     public Conta(),     {,         this.numero = 0;,         this.agencia = 0;,         this.saldo = 0;,         this.senha = "";,         this.titular = new Cliente();,     }, ,     public Conta(int numero, int agencia, String senha, Cliente titular),     {,         this.numero = numero;,         this.agencia = agencia;,         this.saldo = 0;,         this.senha = senha;,         this.titular = titular;,     },     ,     public void adicionarSaldo(float valor) {,         this.saldo = (this.consultarSaldo() + valor);,     }, ,     public void removerSaldo(float valor) {,         this.saldo = (this.consultarSaldo() - valor);,     },     ,     public float consultarSaldo() {,         return this.saldo;,     }, }]
[package Atividade1.q1;, , , , public class Caixa, {,     private Conta conta;,     private int qtdeCedulas10;,     private int qtdeCedulas20;,     private int qtdeCedulas50;,     private boolean contaAutenticada;,     ,     public Caixa() {,         this.conta = new Conta();,         this.qtdeCedulas10 = 0;,         this.qtdeCedulas20 = 0;,         this.qtdeCedulas50 = 0;,         this.contaAutenticada = false;,     },     ,     public Caixa(int qtdeCedulas10, int qtdeCedulas20, int qtdeCedulas50) {,         this.conta = new Conta();,         this.qtdeCedulas10 = qtdeCedulas10;,         this.qtdeCedulas20 = qtdeCedulas20;,         this.qtdeCedulas50 = qtdeCedulas50;,         this.contaAutenticada = false;,     }, ,     public boolean depositar() {,         return true;,     },     public boolean sacar() {,         return true;,     },     public float consultar() {,         return 0;,     },     public boolean autenticar() {,         return true;,     }, }]
[package Atividade1.q5;, , public class Urna, {,     private int candidatoA;,     private int candidatoB;,     private int candidatoC;,     private int nulos;,     private int brancos;, ,     public Urna(),     {,         this.candidatoA = 0;,         this.candidatoB = 0;,         this.candidatoC = 0;,         this.nulos = 0;,         this.brancos = 0;,     }, ,     public int contarCandidatoA() {,         return this.candidatoA;,     }, ,     public int contarCandidatoB() {,         return this.candidatoB;,     }, ,     public int contarCandidatoC() {,         return this.candidatoC;,     }, ,     public int contarNulos() {,         return this.nulos;,     }, ,     public int contarBrancos() {,         return this.brancos;,     },     ,     public int contarVotos() {,         return (this.contarCandidatoA() + this.contarCandidatoB() + this.contarCandidatoC() + this.contarNulos() + this.contarBrancos());,     },     ,     public void votar(char candidato) {,         if (candidato == 'a' || candidato == 'A') {,             this.candidatoA = this.contarCandidatoA() + 1;,         } else if (candidato == 'b' || candidato == 'B') {,             this.candidatoB = this.contarCandidatoB() + 1;,         } else if (candidato == 'c' || candidato == 'C') {,             this.candidatoC = this.contarCandidatoC() + 1;,         } else if (candidato == ' ') {,             this.brancos = this.contarBrancos() + 1;,         } else {,             this.nulos = this.contarNulos() + 1;,         },     }, }]
[package Atividade1.q5;, , /**,  *   Ao  final  da  votação,  a  zona  eleitoral  deve  ser  capaz  de  informar:,  *   Total de votos;,  *   Total de votos para cada candidato, branco e nulo;,  *   Percentual de votos para cada candidato, branco e nulo;,  *   Vencedor;,  */, public class Zona, {,     private Urna u1;,     private Urna u2;,     private Urna u3;, ,     public Zona(),     {,         this.u1 = new Urna();,         this.u2 = new Urna();,         this.u3 = new Urna();,     }, ,     public Zona(Urna u1, Urna u2, Urna u3),     {,         this.u1 = u1;,         this.u2 = u2;,         this.u3 = u3;,     }, ,     public int contarVotos(){,         return (u1.contarVotos() + u2.contarVotos() + u3.contarVotos());,     }, ,     public int contarVotosCA() {,         return (u1.contarCandidatoA() + u2.contarCandidatoA() + u3.contarCandidatoA());,     }, ,     public int contarVotosCB() {,         return (u1.contarCandidatoB() + u2.contarCandidatoB() + u3.contarCandidatoB());,     }, ,     public int contarVotosCC() {,         return (u1.contarCandidatoC() + u2.contarCandidatoC() + u3.contarCandidatoC());,     }, ,     public int contarVotosNulos() {,         return (u1.contarNulos() + u2.contarNulos() + u3.contarNulos());,     }, ,     public int contarVotosBrancos() {,         return (u1.contarBrancos() + u2.contarBrancos() + u3.contarBrancos());,     },     ,     public String contarPercentualVotosCA() {,         return ( ( this.contarVotosCA() * 100 ) / this.contarVotos() ) + "%";,     }, ,     public String contarPercentualVotosCB() {,         return ( ( this.contarVotosCB() * 100 ) / this.contarVotos() ) + "%";,     }, ,     public String contarPercentualVotosCC() {,         return ( ( this.contarVotosCC() * 100 ) / this.contarVotos() ) + "%";,     }, ,     public String contarPercentualVotosNulos() {,         return ( ( this.contarVotosNulos() * 100 ) / this.contarVotos() ) + "%";,     }, ,     public String contarPercentualVotosBrancos () {,         return ( ( this.contarVotosBrancos() * 100 ) / this.contarVotos() ) + "%";,     }, ,     public String verificarVencedor() {,         char vencedor;,         if ( this.contarVotosCA() == this.contarVotosCB() && this.contarVotosCA() == this.contarVotosCC() ),             return "Empate";,         if ( this.contarVotosCA() == this.contarVotosCB() && this.contarVotosCA() > this.contarVotosCC() ),             return "Empate";,         if ( this.contarVotosCA() == this.contarVotosCC() && this.contarVotosCA() > this.contarVotosCB() ),             return "Empate";,         if ( this.contarVotosCB() == this.contarVotosCC() && this.contarVotosCB() > this.contarVotosCA() ),             return "Empate";,         ,         vencedor = (this.contarVotosCA() > this.contarVotosCB()) ? 'A' : 'B';,         if (vencedor == 'A') {,             vencedor = (this.contarVotosCA() > this.contarVotosCC()) ? 'A' : 'C';,         } else {,             vencedor = (this.contarVotosCB() > this.contarVotosCC()) ? 'B' : 'C';,         },         ,         return "Vencedor da eleição: Candidato "+vencedor;,     }, }]
[package Atividade1.q2;, , public class Carro, {,     private float capacidadeTanque;,     private float gasAtual;,     private float consumoMedio;, ,     /**,      * Constructor for objects of class Carro,      */,     public Carro(),     {,         this.capacidadeTanque = 45;,         this.gasAtual = 0;,         this.consumoMedio = 12;,     },     ,     public Carro(float capacidade),     {,         this.capacidadeTanque = capacidade;,         this.gasAtual = 0;,         this.consumoMedio = 12;,     }, ,     public Carro(float capacidade, float consumo),     {,         this.capacidadeTanque = capacidade;,         this.gasAtual = 0;,         this.consumoMedio = consumo;,     }, ,     public void abastece(int litrosGas) {,         if (this.informaGas() < this.capacidadeTanque) {,             float qtdeAbastecer = (litrosGas + this.informaGas());,             if (qtdeAbastecer < this.capacidadeTanque) {,                 this.gasAtual = qtdeAbastecer;,             } else {,                 this.gasAtual = this.capacidadeTanque;,             },         },     },     ,     public float informaGas() {,         return this.gasAtual;,     },     ,     public void consomeGas(float distancia) {,         float qtdeConsumo = ( distancia/this.consumoMedio );,         if (this.informaGas() >= qtdeConsumo) {,             this.gasAtual = (this.gasAtual - qtdeConsumo);,         },     },     ,     public boolean estahNoReserva() {,         if (this.informaGas() <= (this.capacidadeTanque * 0.1)) {,             return true;,         } else {,             return false;,         },     }, , }]
[package Atividade1.q3;, , , public class Calculadora, {,     private float cotacao;,     private float resultado;,     ,     public Calculadora() {,         this.cotacao = 2;,     },     ,     public void definirCotacao(float cotacao) {,         this.cotacao = cotacao;,     }, ,     public float retornarCotacao() {,         return this.cotacao;,     }, ,     public void definirResultado(float cotacao) {,         this.cotacao = cotacao;,     }, ,     public float retornarResultado() {,         return this.cotacao;,     },     ,     public float somar(float x, float y){,         return (x + y);,     },     ,     public float subtrair(float x, float y) {,         return (x - y);,     },     ,     public float multiplicar(float x, float y) {,         return (x * y);,     }, ,     public float dividir(float dividendo, float divisor) {,         return (dividendo / divisor);,     },     ,     public void calcular(float x) {,         this.definirResultado(this.multiplicar(x, this.retornarCotacao()));,     },     ,     public void calcular(char op, float x, float y) {,         if (op == '+') {,             // somar,             this.definirResultado(this.somar(x, y));,         } else if (op == '-') {,             // subtrair,             this.definirResultado(this.subtrair(x, y));,         } else if (op == '*') {,             // multiplicar,             this.definirResultado(this.multiplicar(x, y));,         } else if (op == '/') {,             // dividir,             this.definirResultado(this.dividir(x, y));,         },     }, }]
[package Atividade1.q4;, , /**,  *   Implemente  métodos  para  as  seguintes  funcionalidades: ,  *   (em  uma  classe chamada  AjudanteMatemático),  *   1. Verificar  se  um  número  é  par;,  *   2. Verificar  se  um  número  é  ímpar;,  *   3. Calcular  a  soma  dos  quadrados  de  4  números  informados  via  parâmetro;,  *   4. Qual  é  o  maior  número  dentre  3  números  informados  via  parâmetro;,  *   5. Calcular a área de uma circunferência a partir do seu raio e considerando a ,  *   seguinte fórmula:  Área  =  3,14159  *  (raio*raio),  *   6. Verificar  se  um  número  é  primo,  */, public class AjudanteMatematico, {,     public boolean verificarPar(int x),     {,         return (x % 2 == 0);,     }, ,     public boolean verificarImpar(int x),     {,         return (x % 2 != 0);,     }, ,     public float somarQuadrados(float x, float y, float z, float w),     {,         return ( (x*x) + (y*y) + (z*z) + (w*w)  );,     },     ,     public String verificarMaiorNumero(int x, int y, int z),     {,         if (x == y && x == z),             return "Números iguais";,         ,         int maior;,         maior = (x > y) ? x : y;,         return (maior > z) ? maior+" é o maior número." : z+" é o maior número.";,     },     ,     public double calcularArea(double raio),     {,         return ( 3.14159 * (raio*raio) );,     },     ,     public boolean verificarPrimo(int x),     {,         return !( ( (x > 2) && (x % 2) == 0 ) || ,                   ( (x > 3) && (x % 3) == 0 ) || ,                   ( (x > 5) && (x % 5) == 0 ) || ,                   ( (x > 7) && (x % 7) == 0 ) || ,                   ( (x > 11) && (x % 11) == 0 ) ||,                   ( x <= 1 ));,     }, }]
[package Prova20141_3;, , , public class Prova, {,     public Prova() {},     ,     /**,      * retorna o indice encontrado ou último indice vazio,      */,     public int existeNaMatriz(int n, int[][] matriz),     {,         for (int l = 0;l < matriz.length;l = l + 1) {,             /**,              * Retorna o Índice quando encontrar o número ou,              * Para quando o count([l][1]) for 0,              */,             if (matriz[l][0] == n || matriz[l][1] == 0) {,                 return l;,             },         },         ,         return 0;,     }, ,     /**,     * Elabore um método (assinatura e implementação) que recebe um vetor de números ,     * inteiros (tamanho qualquer) e apresenta para o usuário, em modo texto, quantas vezes ,     * cada número informado aparece. As informações da saída não podem ser repetidas. ,     * Exemplo: entrada: {1, 2, 8, 1, 1, 5, 8} (3,0) ,     * saída: N. 1 —> 3 vezes | N. 2 —> 1 vez | N. 8 —> 2 vezes | N. 5 —> 1 vez,     * {1,1,1,2,8,8,5,5,5,7,7,7,9,9,8},     */,     public void q1(int[] numeros),     {,        int[][] count = new int[numeros.length][2];,        int indice = 0;,        ,        for (int l = 0;l < numeros.length;l = l + 1) {,            indice = this.existeNaMatriz(numeros[l], count);,            count[indice][0] = numeros[l];,            count[indice][1] = count[indice][1] + 1;,        },        ,        for (int l = 0;l < count.length;l = l + 1) {,            if (count[l][1] == 0) {,                break;,            },            System.out.println(count[l][0]+" => "+count[l][1]);,        },     },    ,     /**,     * Elabore um método (assinatura e implementação) que recebe uma matriz quadrada ,     * (não é necessário verificar as dimensões) de números inteiros positivos e informa, para ,     * o usuário, em modo texto, os fatoriais de cada elemento da diagonal principal e os ,     * próximos números primos após cada elemento da diagonal secundária. Primeiro ,     * devem ser exibidos todos os fatoriais e, após isso, todos os próximos números ,     * primos. Considere que estão prontos e disponíveis (na mesma classe em que você ,     * está elaborando o método) os métodos public double fatorial(int n) - retorna o fatorial de ,     * n - e public int proximoPrimo(int n) - retorna o próximo número primo depois de n.,     */,     /**,      * Método auxiliar,      * Fatorial,      */,     public double fatorial(int n),     {,        double total = n;,        n = n - 1;,        while (n > 1) {,            total = total * n;,            n = n - 1;,        },        ,        return total;,     }, ,     /**,      * Método auxiliar.,      * Primos,      */,     public boolean primo(int numero),     {,         int up = 2;,         int down = 0;,         ,         if (numero % 2 == 0) {,             down = (numero / 2);,         } else {,             down = (numero + 1) / 2;,         },         ,         while (down >= up) {,             if ( (numero % down == 0) || (numero % up == 0) ) {,                 return false;,             },             ,             down = down - 1;,             up = up + 1;,         },         ,         if (numero > 1) {,             return true;,         } else {,             return false;,         },     },     ,     /**,      * Método auxiliar,      * Próximo primo,      */,     public int proximoPrimo(int n),     {,         n = n + 1;,         while (!this.primo(n)) {,             n = n + 1;,         },         ,         return n;,     },     ,     public void q2(int[][] numeros),     {,         System.out.println("D.Principal: ");,         for(int l = 0;l < numeros.length;l = l + 1) {,             System.out.println(numeros[l][l]+" -> "+this.fatorial(numeros[l][l])+" ");,         },         System.out.println();,         System.out.println("D.Secundaria: ");,         for(int l = (numeros.length - 1);l >= 0;l = l - 1) {,             System.out.println(numeros[l][(numeros.length - 1) - l]+" -> "+this.proximoPrimo(numeros[l][(numeros.length - 1) - l])+" ");,         },     },    ,     /**,     * Elabore um método (assinatura e implementação) que recebe uma matriz de tamanho ,     * mínimo 2x2 (a matriz deve sempre conter no mínimo duas linhas e duas colunas, ,     * realize essa verificação e prossiga apenas caso a matriz esteja ok) e retorna uma ,     * matriz com duas colunas e mesma quantidade de linhas da matriz de entrada. Cada ,     * posição da primeira coluna da saída contem o maior elemento da respectiva linha da ,     * matriz de entrada e cada posição da segunda coluna contem o segundo maior ,     * elemento. (verificação: 1pt, restante: 3pts),     * Exemplo:,     * 1 3 2 4,     * 9 8,     * -1 0 1 retorno: { {4,3}, {9,8}, {1,0} },     */,     public int[][] q3(int[][] numeros),     {,         if (numeros.length < 2) {,             return new int[1][1];,         },         for (int l = 0;l < numeros.length;l = l + 1) {,            if (numeros[l].length < 2) {,                return new int[1][1];,            },         },         ,         int[][] matriz = new int[numeros.length][2];,         for (int l = 0;l < numeros.length;l = l + 1) {,             for (int c = 0;c < numeros[l].length;c = c + 1) {,                 if (c == 0) {,                     matriz[l][1] = Integer.MIN_VALUE;,                     matriz[l][0] = Integer.MIN_VALUE;,                 },                 if (numeros[l][c] >= matriz[l][0]) {,                     matriz[l][1] = matriz[l][0];,                     matriz[l][0] = numeros[l][c];,                 } else if (numeros[l][c] >= matriz[l][1]) {,                     matriz[l][1] = numeros[l][c];,                 },             },         },         ,         return matriz;,     }, }]
[package Atividades3;, , , /**,  * Arquivo: Lista de Exercícios 3.2: Matrizes,  */, public class Matrizes, {,     public Matrizes() {},     ,     /**,      * Método auxiliar.,      * Retorna a ordem da matriz quadrada ou 0 caso não for quadrada,      */,     public int matrizQuadrada(int[][] numeros),     {,         for (int linha = 0;linha < numeros.length;linha = linha + 1) {,             if (numeros.length != numeros[linha].length) {,                 return 0;,             },         },         ,         return numeros.length;,     },     ,     /**,      * Método auxiliar.,      * Mostrar Matrizes.,      */,     public void mostrarMatriz(int[][] numeros, String separador),     {,         for (int linha = 0;linha < numeros.length;linha = linha + 1) {,             for (int coluna = 0;coluna < numeros[linha].length;coluna = coluna + 1) {,                 System.out.print(numeros[linha][coluna]);,                 if (coluna < (numeros[linha].length - 1)) {,                     System.out.print(separador);,                 },             },             System.out.println();,         },     }, ,     public void mostrarMatriz(String[][] textos, String separador),     {,         for (int linha = 0;linha < textos.length;linha = linha + 1) {,             for (int coluna = 0;coluna < textos[linha].length;coluna = coluna + 1) {,                 System.out.print(textos[linha][coluna]);,                 if (coluna < (textos[linha].length - 1)) {,                     System.out.print(separador);,                 },             },             System.out.println();,         },     }, ,     public void mostrarMatriz(char[][] caracteres, String separador),     {,         for (int linha = 0;linha < caracteres.length;linha = linha + 1) {,             for (int coluna = 0;coluna < caracteres[linha].length;coluna = coluna + 1) {,                 System.out.print(caracteres[linha][coluna]);,                 if (coluna < (caracteres[linha].length - 1)) {,                     System.out.print(separador);,                 },             },             System.out.println();,         },     },     ,     /**,      * Método auxiliar.,      * Fatorial.,      */,     public int fatorial(int numero),     {,         int controle = numero - 1;,         ,         while (controle > 1) {,             numero = numero * controle;,             controle = controle - 1;,         },         ,         return numero;,     },     ,     /**,      * Método auxiliar.,      * Potência.,      */,     public int potencia(int base, int expoente),     {,         int total = 1;, ,         for (int i = 0;i < expoente;i = i + 1) {,             total = total * base;,         },         ,         return total;,     },     ,     /**,      * Método auxiliar.,      * Primos,      */,     public boolean primo(int numero),     {,         int up = 2;,         int down = 0;,         ,         if (numero % 2 == 0) {,             down = (numero / 2);,         } else {,             down = (numero + 1) / 2;,         },         ,         while (down >= up) {,             if ( (numero % down == 0) || (numero % up == 0) ) {,                 return false;,             },             ,             down = down - 1;,             up = up + 1;,         },         ,         if (numero > 1) {,             return true;,         } else {,             return false;,         },     }, ,     /**,      * Recebe uma matriz 3x4 por parâmetro e retorna o somatório de todos os elementos da matriz.,      */,     public int somarElementos(int[][] numeros),     {,         int total = 0;,         ,         for (int linha = 0;linha < 3;linha = linha + 1) {,             for (int coluna = 0;coluna < 4;coluna = coluna + 1) {,                 total = total + numeros[linha][coluna];,             },         },         ,         return total;,     },     ,     /**,      * Recebe uma matriz 3x4 por parâmetro e impreme-a (em modo texto, linhas e colunas).,      */,     public void mostrarElementos(int[][] numeros),     {,         for (int linha = 0;linha < 3;linha = linha + 1) {,             for (int coluna = 0;coluna < 4;coluna = coluna + 1) {,                 System.out.print(numeros[linha][coluna] + "  ");,             },             System.out.println();,         },     },     ,     /**,      * Recebe uma matriz (tamanho qualquer) por parâmetro e imprime-a (em modo texto, linhas e colunas).,      */,     public void mostrarElementosB(int[][] numeros),     {,         for (int linha = 0;linha < numeros.length;linha = linha + 1) {,             for (int coluna = 0;coluna < numeros[linha].length;coluna = coluna + 1) {,                 System.out.print(numeros[linha][coluna] + "  ");,             },             System.out.println();,         },     },     ,     /**,      * Recebe uma matriz 5x5 por parâmetro e retorna uma nova matriz onde todos os elementos devem ,      * ser multiplicados por 10, com exceção da diagonal principal, onde todos os elementos devem ser 0. ,      * Apresente (em modo texto) a matriz resultante para o usuário.,      */,     public void elementosX10(int[][] numeros),     {,         if (this.matrizQuadrada(numeros) != 5) {,             System.out.print("Matriz inválida! Você deve apresentar uma matriz quadrada de ordem 5");,         } else {,             for (int linha = 0;linha < numeros.length;linha = linha + 1) {,                 for (int coluna = 0;coluna < numeros[linha].length;coluna = coluna + 1) {,                     if (linha == coluna) {,                         numeros[linha][coluna] = 0;,                     } else {,                         numeros[linha][coluna] = numeros[linha][coluna] * 10;,                     },                 },             },             ,             this.mostrarMatriz(numeros, " | ");,         },     },     ,     /**,      * Recebe uma matriz 3x3 por parâmetro e apresente (para o usuário, em modo texto) a ,      * matriz resultante dos seguintes cálculos: ,      * a) 1a coluna: multiplicar todos os elementos da 1a coluna por 10; ,      * b) 2a coluna: calcular o fatorial de cada elemento desta coluna da matriz original; ,      * c) 3a coluna: elevar cada elemento desta coluna da matriz original na 3a potencia.,      */,     public void formatandoMatriz3x3(int[][] numeros),     {,         if (this.matrizQuadrada(numeros) != 3) {,             System.out.print("Matriz inválida! Você deve apresentar uma matriz quadrada de ordem 3");,         } else {,             for (int linha = 0;linha < numeros.length;linha = linha + 1) {,                 for (int coluna = 0;coluna < numeros[linha].length;coluna = coluna + 1) {,                     if (coluna == 0) {,                         numeros[linha][coluna] = numeros[linha][coluna] * 10;,                     } else if (coluna == 1) {,                         numeros[linha][coluna] = this.fatorial(numeros[linha][coluna]);,                     } else {,                         numeros[linha][coluna] = this.potencia(numeros[linha][coluna], 3);,                     },                 },             },             ,             this.mostrarMatriz(numeros, " | ");,         },     },     ,     /**,      * Recebe uma matriz 2x2 por parâmetro e apresente (para o usuário, em modo texto) uma nova ,      * matriz 2x2 com os valores 1 caso o elemento da matriz original seja primo ou 0 caso contrário.,      */,     public void formatandoMatriz2x2(int[][] numeros),     {,         if (this.matrizQuadrada(numeros) != 2) {,             System.out.print("Matriz inválida! Você deve apresentar uma matriz quadrada de ordem 2");,         } else {,             for (int linha = 0;linha < numeros.length;linha = linha + 1) {,                 for (int coluna = 0;coluna < numeros[linha].length;coluna = coluna + 1) {,                     if (this.primo(numeros[linha][coluna])) {,                         numeros[linha][coluna] = 1;,                     } else {,                         numeros[linha][coluna] = 0;,                     },                 },             },             ,             this.mostrarMatriz(numeros, " | ");,         },     },     ,     /**,      * Recebe uma matriz 4x4 e informe (para o usuário, em modo texto), quais linhas, colunas e ,      * diagonais possuem valores nulos (0).,      */,     public void formatandoMatriz4x4A(int[][] numeros),     {,         String linComNull = "";,         String colComNull = "";,         String diaComNull = "";,         if (this.matrizQuadrada(numeros) != 4) {,             System.out.print("Matriz inválida! Você deve apresentar uma matriz quadrada de ordem 4");,         } else {,             for (int linha = 0;linha < numeros.length;linha = linha + 1) {,                 for (int coluna = 0;coluna < numeros[linha].length;coluna = coluna + 1) {,                     // Linhas / Colunas,                     if (numeros[linha][coluna] == 0) {,                         if (linComNull.equals("")) {,                             linComNull = ""+linha;,                         } else {,                             linComNull = linComNull + ", " + linha;,                         }, ,                         if (colComNull.equals("")) {,                             colComNull = ""+coluna;,                         } else {,                             colComNull = colComNull + ", " + coluna;,                         },                         ,                         // Diagonal principal,                         if (linha == coluna && !diaComNull.contains("Principal")) {,                             if (!diaComNull.equals("")) {,                                 diaComNull = diaComNull + ", ";,                             },                             diaComNull = diaComNull + "Principal";,                         },                         ,                         // Diagonal secundária,                         if ((linha + coluna) == (numeros.length - 1) && !diaComNull.contains("Secundaria")) {,                             if (!diaComNull.equals("")) {,                                 diaComNull = diaComNull + ", ";,                             },                             diaComNull = diaComNull + "Secundaria";,                         },                         ,                     },                 },             }, ,             if (!linComNull.equals("")) {,                 System.out.println("Linhas com valores nullos(0): " + linComNull);,             },             if (!colComNull.equals("")) {,                 System.out.println("Colunas com valores nullos(0): " + colComNull);,             },             if (!diaComNull.equals("")) {,                 System.out.println("Diagonais com valores nullos(0): " + diaComNull);,             },         },     },     ,     /**,      * Recebe uma matriz 4x4 e informe (para o usuário, em modo texto), quais linhas, colunas e ,      * diagonais possuem somente valores nulos (0).,      */,     public void formatandoMatriz4x4B(int[][] numeros),     {,         int[] linhas = {0,0,0,0};,         int[] colunas = {0,0,0,0};,         int dPrincipal = 0;,         int dSecundaria = 0;,         if (this.matrizQuadrada(numeros) != 4) {,             System.out.print("Matriz inválida! Você deve apresentar uma matriz quadrada de ordem 4");,         } else {,             for (int linha = 0;linha < numeros.length;linha = linha + 1) {,                 for (int coluna = 0;coluna < numeros[linha].length;coluna = coluna + 1) {,                     // Linhas / Colunas,                     if (numeros[linha][coluna] == 0) {,                         linhas[linha] = linhas[linha] + 1;,                         colunas[coluna] = colunas[coluna] + 1;, ,                         // Diagonal principal,                         if (linha == coluna) {,                             dPrincipal = dPrincipal + 1;,                         },                         ,                         // Diagonal secundária,                         if ( (linha + coluna) == (numeros.length - 1) ) {,                             dSecundaria = dSecundaria + 1;,                         },                         ,                     },                 },             },             ,             System.out.print("Linhas com todos valores nulos(0): ");,             for (int i = 0;i < linhas.length;i = i + 1) {,                 if (linhas[i] == 4) {,                     System.out.print(i+" ");,                 },             },             System.out.println(".");, ,             System.out.print("Colunas com todos valores nulos(0): ");,             for (int i = 0;i < colunas.length;i = i + 1) {,                 if (colunas[i] == 4) {,                     System.out.print(i+" ");,                 },             },             System.out.println(".");, ,             System.out.print("Diagonais com todos valores nulos(0): ");,             if (dPrincipal == 4) {,                 System.out.print("Principal ");,             },             if (dSecundaria == 4) {,                 System.out.print("Secundaria ");,             },             System.out.println(".");,         },     }, }]
[package Atividades3;, , /**,  * Arquivo: Lista de Exercícios 3.0: Vetores,  */, public class Vetores, {,     public Vetores() {}, ,     /**,      * Método auxiliar.,      * Mostrar Matrizes.,      */,     public void mostrarVetor(int[] numeros, String separador),     {,         for (int indice = 0;indice < numeros.length;indice = indice + 1) {,             System.out.print(numeros[indice]);,             if (indice < (numeros.length - 1)) {,                 System.out.print(separador);,             },         },     },     ,     /**,      * Recebe um vetor com 20 valores e, após a leitura, informa quais deles são ,      * pares e quais deles são ímpares,      */,     public void identificarNumeros(int[] numeros),     {,         for (int i = 0;i < numeros.length;i = i + 1) {,             if (numeros[i] % 2 == 0) {,                 System.out.println(numeros[i]+" - PAR");,             } else {,                 System.out.println(numeros[i]+" - IMPAR");,             },         },     },     ,     /**,      * Recebe um vetor com 10 caracteres e mostra-os para o usuário em ordem inversa,      */,     public void mostrarInvertido(char[] caracteres),     {,         for (int i = (caracteres.length - 1);i >= 0;i = i - 1) {,             System.out.print(caracteres[i]);,         },     },     ,     /**,      * Recebe um vetor com 10 valores inteiros e apresenta o fatorial de cada um deles,      */,     public int fatorial(int numero),     {,         int count = numero - 1;,         while (count > 1) {,             numero = numero * count;,             count = count - 1;,         }, ,         return numero;,     },     ,     public void calcularFatoriais(int[] numeros),     {,         for (int i = 0;i < numeros.length;i = i + 1) {,             System.out.println(numeros[i]+"! = "+this.fatorial(numeros[i]));,         },     },     ,     /**,      * Recebe por parâmetro um vetor com 10 valores inteiros e informa (para o usuário,em modo texto),      * qual	é o maior e o menor valor lido, bem como suas posições no vetor,      */,     public void mostrarMaiorMenor(int[] numeros),     {,         int indiceMenor = -1;,         int indiceMaior = -1;,         int numeroMaior = 0;,         int numeroMenor = 0;,         for (int i = 0;i < numeros.length;i = i + 1) {,             if (numeros[i] > numeroMaior || indiceMaior == -1) {,                 indiceMaior = i;,                 numeroMaior = numeros[i];,             }, ,             if (numeros[i] < numeroMenor || indiceMenor == -1) {,                 indiceMenor = i;,                 numeroMenor = numeros[i];,             },         },         ,         System.out.print("Menor valor Vetor["+indiceMenor+"]: "+numeroMenor+" - Maior valor Vetor["+indiceMaior+"]: "+numeroMaior);,     },     ,     /**,      * Repita o mesmo exercício da letra d, porém informe agora os dois maiores e os dois menores valores,,      * bem como suas posições,      */,     public void mostrarMaiorMenor2(int[] numeros),     {,         int[] maioresIndices = {-1, -1};,         int[] menoresIndices = {-1, -1};,         int[] maioresNumeros = {0, 0};,         int[] menoresNumeros = {0, 0};,         int k;,         for (int i = 0;i < numeros.length;i = i + 1) {,             for (k = 0;k < 2;k = k + 1) {,                 ,             },             ,             for (k = 0;k < 2;k = k + 1) {,             },         },     },     ,     /**,      * Recebe por parâmetro um vetor com 20 valores inteiros (positivos e negativos) e retorna um novo ,      * vetor somente com os valores negativos.,      */,     public int[] transformarEmNegativos(int[] numeros),     {,         for (int i = 0;i < numeros.length;i = i + 1) {,             if (numeros[i] > 0) {,                 numeros[i] = numeros[i] * -1;,             },         },         ,         return numeros;,     },     ,     /**,      * Dado um gabarito de uma prova com 10 questões cujas respostas podem ser A, B, C, D ou E, ,      * elabore um método que receba uma prova por parâmetro retorna a quantidade de acertos. ,      * Gabarito: {A,A,C,E,D,B,C,E,B,D}.,      */,     public int corrigirProva(char[] respostas),     {,         char[] gabarito = {'A','A','C','E','D','B','C','E','B','D'};,         int acertos = 0;,         ,         for (int questao = 0;questao < gabarito.length;questao = questao + 1) {,             if (respostas[questao] == gabarito[questao]) {,                 acertos = acertos + 1;,             },         },         ,         return acertos;,     },     ,     /**,      * Recebe um vetor com 15 valores inteiros e: 1. divide todos os elementos deste vetor pelo ,      * maior valor e 2. Divide todos os elementos pelo menor valor. Apresente os vetores resultantes.,      */,     public void processarVetor(float[] numeros),     {,         float maiorValor;,         float menorValor;,         ,         for (int i = 0;i < numeros.length;i = i + 1) {,             if (i == 0) {,                 maiorValor = numeros[i];,                 menorValor = numeros[i];,                 continue;,             },             ,             if (numeros[i] > maiorValor) {,                 maiorValor = numeros[i];,             },             ,             if (numeros[i] < menorValor) {,                 menorValor = numeros[i];,             },         },         ,         float vetorA = new float[numeros.length];,         float vetorB = new float[numeros.length];,         for (int i = 0;i < numeros.length;i = i + 1) {,             vetorA[i] = numeros[i] / maiorValor;,             vetorB[i] = numeros[i] / menorValor;,         },         ,         this.mostrarVetor(vetorA, " | ");,         System.out.println();,         System.out.println();,         this.mostrarVetor(vetorB, " | ");,     },     ,     /**,      * Gere os 30 primeiros números primos a partir de 100 e armazene-os em um vetor. No final, ,      * imprima o vetor com os números primos.,      */,     ,     /**,      * Dados dois vetores, cada um com 5 valores inteiros, realize a multiplicação dos elementos ,      * com o mesmo índice e, ao final, exiba o vetor resultante para o usuário.,      */,     ,     /**,      * Dado um vetor com 20 elementos (parâmetro), primeiro imprima-o (com os valores lado-a-lado) e, ,      * em seguida, troque o primeiro elemento com o último, o segundo com o penúltimo, o terceiro com ,      * o antepenúltimo, e assim sucessivamente. Mostre o novo vetor depois da troca.,      */,     ,     /**,      * Dado um vetor de 15 números inteiros, apresentar quantas vezes cada número informado aparece.,      */,     ,     /**,      * Calcule o número de dias decorridos entre duas datas. As datas devem ser lidas no formato ,      * dia-mês (considerando que ambas estão no ano corrente). O programa deve verificar se as datas ,      * são válidas (mês e número de dias do mês), e se a segunda data é realmente posterior a primeira ,      * (caso contrário informar que houve um erro ao fornecer as datas). Considere a quantidade correta,      * de dias para cada mês. Utilize um vetor para representar os dias de cada mês.,      */, }]
[package Atividades3;, , , /**,  * Arquivo: Lista de Exercícios 3.1: Strings,  */, public class Strings, {,     public Strings() {}, ,     /**,      * Recebe duas strings (vetor de caracteres) por parâmetro e retorna verdadeiro caso elas sejam ,      * iguais ou falso caso contrário.,      */,     public boolean compararChar(char[] c1, char[] c2),     {,         if (c1.length != c2.length) {,             return false;,         },         ,         for (int i = 0;i < c1.length;i = i + 1) {,             if (c1[i] != c2[i]) {,                 return false;,             },         },         ,         return true;,     },     ,     /**,      * Recebe duas strings (tipo String) por parâmetro e retorna verdadeiro caso elas sejam iguais ,      * ou falso caso contrário.,      */,     public boolean compararStrings(String t1, String t2),     {,         return (t1.equals(t2));,     },     ,     /**,      * Recebe duas strings (vetor de caracteres) por parâmetro e retorna a maior das duas strings.,      */,     public char[] maiorChar(char[] c1, char[] c2),     {,         if (c1.length > c2.length) {,             return c1;,         } else {,             return c2;,         },     },     ,     /**,      * Recebe uma string (vetor de caracteres) por parâmetro e informa (em modo texto), a quantidade ,      * de vogais, de consoantes e de números presentes na string.,      */,     public void contarCaracteres(char[] texto),     {,         int consoantes = 0;,         int vogais = 0;,         int numeros = 0;,         for (int i = 0;i < texto.length;i = i + 1) {,             if (texto[i] >= 48 && texto[i] <= 57) {,                 numeros = numeros + 1;,             } else if (,                 texto[i] == 65 || texto[i] == 69 || texto[i] == 73 || texto[i] == 79 || texto[i] == 85 ||,                 texto[i] == 97 || texto[i] == 101 || texto[i] == 105 || texto[i] == 111 || texto[i] == 117,             ) {,                 vogais = vogais + 1;,             } else {,                 consoantes = consoantes + 1;,             },         },         ,         System.out.println("Total de consoantes: "+consoantes);,         System.out.println("Total de vogais: "+vogais);,         System.out.println("Total de números: "+numeros);,     },     ,     /**,      * Um palíndromo é uma frase ou palavra que mantém o mesmo sentido quando lida de trás pra frente. ,      * Exemplos: reger, rir, radar, ele, esse, ama, aia, etc. Construa um método que recebe uma string ,      * por parâmetro e retorna verdadeiro caso a palavra seja um palíndromo ou falso caso contrario.,      */,     public boolean palindromo(String texto),     {,         String inverso = "";,         for (int i = (texto.length() - 1);i >= 0;i = i - 1) {,             inverso = inverso + texto.charAt(i);,         },         ,         return (texto.equalsIgnoreCase(inverso));,     }, }]
[package Prova20131_1;, , , public class ContaCorrente, {,     private String nome;,     private double saldo;,     private String nConta;,     ,     public ContaCorrente(),     {,         this.nome = "Nome";,         this.saldo = 0.00;,         this.nConta = "XXXX-x";,     }, ,     public ContaCorrente(String nome, double saldo, String nConta),     {,         this.nome = nome;,         this.saldo = saldo;,         this.nConta = nConta;,     }, ,     public String informaNome(),     {,         return this.nome;,     },     ,     public double informaSaldo(),     {,         return this.saldo;,     },     ,     public String informaNConta(),     {,         return this.nConta;,     }, }]
[package Prova20131_1;, , , public class Prova, {,     public Prova() {}, ,     /**,      * Elabore o seguinte método public void maioresSaldos (ContaCorrente [] contas), o ,      * qual recebe um vetor de contas correntes e informa, para o usuário, em modo texto, os ,      * nomes e os números das contas das pessoas com os três maiores saldos (apresente ,      * 1o o maior saldo, depois o 2o maior e por último o 3o). A classe ContaCorrente possui ,      * os seguintes métodos: public String informaNome() - retorna o nome do dono da conta; ,      * public double informaSaldo () - retorna o saldo da conta; public String informaNConta() - ,      * retorna o número da conta.,      * ,      * Entrada,      */,     public void maioresSaldos (ContaCorrente[] contas),     {,         int[] mContas = new int[3];,         double[] mValores = new double[3];,         ,         for (int conta = 0;conta < contas.length;conta = conta + 1) {,             if (contas[conta].informaSaldo() >= mValores[0]) {,                 mValores[2] = mValores[1];,                 mContas[2] = mContas[1];,                 mValores[1] = mValores[0];,                 mContas[1] = mContas[0];,                 mValores[0] = contas[conta].informaSaldo();,                 mContas[0] = conta;,             } else if (contas[conta].informaSaldo() >= mValores[1]) {,                 mValores[2] = mValores[1];,                 mContas[2] = mContas[1];,                 mValores[1] = contas[conta].informaSaldo();,                 mContas[1] = conta;,             } else if (contas[conta].informaSaldo() >= mValores[2]) {,                 mValores[2] = contas[conta].informaSaldo();,                 mContas[2] = conta;,             },         },         ,         System.out.println("Contas com maiores saldos:");,         for (int i = 0;i < mContas.length;i = i + 1) {,             System.out.print( (i+1) );,             System.out.print( " - Nome: " + contas[mContas[i]].informaNome() );,             System.out.println( " Conta: " + contas[mContas[i]].informaNConta());,         },     },     ,     /**,      * Elabore um método (assinatura e implementação) que recebe uma matriz quadrada,      * (verifique se as dimensões estão corretas - uma matriz quadrada possui a mesma ,      * quantidade de linhas e colunas) de números inteiros positivos e informa, para o usuário, ,      * em modo texto, os fatoriais de cada elemento da diagonal principal e os próximos ,      * números primos após cada elemento da diagonal secundária. Considere que estão ,      * prontos e disponíveis (na mesma classe em que você está elaborando o método) os ,      * métodos public double fatorial(int n) - retorna o fatorial de n - e public int ,      * proximoPrimo(int n) - retorna o próximo número primo depois de n.,      */,     ,     /**,      * Um palíndromo é uma frase ou palavra que mantém o mesmo sentido quando lida de ,      * trás pra frente. Exemplos: reger, rir, radar, ele, esse, ama, aia. Construa um método ,      * (assinatura e implementação) que recebe um vetor de caracteres por parâmetro e ,      * retorna verdadeiro caso o vetor represente um palíndromo ou falso caso contrario,      */, }]
[package Prova20141;, , , public class Fabrica, {,     private int funcionariosOcupados;,     ,     public Fabrica(),     {,         this.funcionariosOcupados = 0;,     },     ,     public void ocuparFuncionario(),     {,         this.funcionariosOcupados = (this.buscarFuncionariosOcupados() + 1);,     }, ,     public void desocuparFuncionario(),     {,         if (this.buscarFuncionariosOcupados() > 0) {,             this.funcionariosOcupados = (this.buscarFuncionariosOcupados() - 1);,         },     }, ,     public int buscarFuncionariosOcupados(),     {,         return this.funcionariosOcupados;,     }, ,     /**,      * recebePedido ,      * Este método recebe como entrada uma prancha, ,      * a quantidade desejada desta prancha ,      * e uma descrição textual do contato do cliente que fez a encomenda. ,      * ,      * A fábrica possui apenas dois funcionários, portanto, ,      * o pedido só é aceito caso um dos dois funcionários esteja livre. ,      * Caso seja aceito o método retorna verdadeiro e falso caso contrário.,      */,     public boolean recebePedido(Prancha prancha, int quantidade, String cliente),     {,         return (funcionariosOcupados < 2);,     },     ,     /**,      * Este método recebe como entrada uma prancha ,      * e retorna o valor em R$ do custo para produção da prancha de acordo com as regras a seguir: ,      * Caso o tipo do bloco da prancha seja fibra (identificado por f) ou epoxi (identificado por e) o custo é de R$ 200,00. ,      * Qualquer outro material possui custo de R$ 350,00.,      * ,      * Cada quilha da prancha custa R$ 25,00. ,      * ,      * Pranchas com até 150cm de comprimento acrescentam R $ 50,00 ao custo, ,      * entre 150cm e 180cm acrescentam R$ 75,00 ,      * e acima de 180cm acrescentam R$ 100.,      * ,      * O custo base da prancha é a soma do custo do bloco mais o valor das quilhas mais o adicional do comprimento. ,      * O custo total da prancha é o custo base mais 30% do valor do custo base.,      */,     public float calcularCustoPrancha(Prancha prancha),     {,         float custoTotal = 0;,         // Quilhas,         custoTotal = custoTotal + (prancha.buscarQtQuilhas() * 25);,         ,         // Tipo de bloco,         if (prancha.buscarTipoBloco() == 'f' || prancha.buscarTipoBloco() == 'e') {,             custoTotal = custoTotal + 200;,         } else {,             custoTotal = custoTotal + 350;,         },         ,         // Comprimento,         if (prancha.buscarComprimento() <= 150) {,             custoTotal = custoTotal + 50;,         } else if (prancha.buscarComprimento() > 150 && prancha.buscarComprimento() <= 180) {,             custoTotal = custoTotal + 75;,         } else {,             custoTotal = custoTotal + 100;,         },             ,         return (custoTotal * (130 / 100));,     },     ,     /**,      * Este método recebe como entrada um valor em R$ e retorna o seu valor arredondado. ,      * O arredondamento é feito de forma a sempre retornar um valor inteiro, ou seja, sem centavos. ,      * Caso o valor dos centavos seja igual ou superior a 0,5 é retornado o arredondamento para cima. ,      * Caso seja inferior a 0,5 retorna-se o arredondamento para baixo. Exemplo: R$ 723,54 —> 724; R$ 55,32 —> 55,      */,     public float arredondar(float valor),     {,         float valorArredondado = valor * 100;,         int quantidadeDezenas = 0;, ,         // Unidades,         if (valorArredondado % 10 != 0) {,             valorArredondado = valorArredondado - 1;,         },         if (valorArredondado % 10 != 0) {,             valorArredondado = valorArredondado - 1;,         },         if (valorArredondado % 10 != 0) {,             valorArredondado = valorArredondado - 1;,         },         if (valorArredondado % 10 != 0) {,             valorArredondado = valorArredondado - 1;,         },         if (valorArredondado % 10 != 0) {,             valorArredondado = valorArredondado - 1;,         },         if (valorArredondado % 10 != 0) {,             valorArredondado = valorArredondado - 1;,         },         if (valorArredondado % 10 != 0) {,             valorArredondado = valorArredondado - 1;,         },         if (valorArredondado % 10 != 0) {,             valorArredondado = valorArredondado - 1;,         },         if (valorArredondado % 10 != 0) {,             valorArredondado = valorArredondado - 1;,         },         valorArredondado = valorArredondado / 10;, ,         // Dezenas,         if (valorArredondado % 10 != 0) {,             valorArredondado = valorArredondado - 1;,             quantidadeDezenas = quantidadeDezenas +1;,         },         if (valorArredondado % 10 != 0) {,             valorArredondado = valorArredondado - 1;,             quantidadeDezenas = quantidadeDezenas +1;,         },         if (valorArredondado % 10 != 0) {,             valorArredondado = valorArredondado - 1;,             quantidadeDezenas = quantidadeDezenas +1;,         },         if (valorArredondado % 10 != 0) {,             valorArredondado = valorArredondado - 1;,             quantidadeDezenas = quantidadeDezenas +1;,         },         if (valorArredondado % 10 != 0) {,             valorArredondado = valorArredondado - 1;,             quantidadeDezenas = quantidadeDezenas +1;,         },         if (valorArredondado % 10 != 0) {,             valorArredondado = valorArredondado - 1;,             quantidadeDezenas = quantidadeDezenas +1;,         },         if (valorArredondado % 10 != 0) {,             valorArredondado = valorArredondado - 1;,             quantidadeDezenas = quantidadeDezenas +1;,         },         if (valorArredondado % 10 != 0) {,             valorArredondado = valorArredondado - 1;,             quantidadeDezenas = quantidadeDezenas +1;,         },         if (valorArredondado % 10 != 0) {,             valorArredondado = valorArredondado - 1;,             quantidadeDezenas = quantidadeDezenas +1;,         },         // Arruma o valor,         valorArredondado = valorArredondado / 10;, ,         if (quantidadeDezenas >= 5) {,             valorArredondado = valorArredondado + 1;,         }, ,         return valorArredondado;,     }, ,     /**,      * Este método recebe como entrada uma prancha e a quantidade destas pranchas, ,      * retorna o preço do pedido e libera um funcionário ,      * (tendo em vista que, como a prancha está pronta, agora este funcionário pode trabalhar em um novo pedido). ,      * ,      * O preço de cada prancha é o custo total da prancha (método calcularCustoPrancha) ,      * mais R$ 50,00 da embalagem e mais 15% do custo total. ,      * ,      * Caso a quantidade de pranchas seja superior a 5 porém inferior a 10, o preço recebe um desconto de 10%. ,      * Caso seja superior a 10 porém inferior a 15, há um desconto de 15% e caso a quantidade seja superior a 15 fornece-se um desconto de 20%. ,      * ,      * O Tiozinho habituado a lidar com grandes quantias não trabalha com moedas, portanto, ,      * o preço final é sempre arredondado através do método arredondar,      */,     public float entregarPrancha(Prancha prancha, int quantidade),     {,         float totalPedido = 0;, ,         // Calculando total,         totalPedido = ( ( (this.calcularCustoPrancha(prancha) + 50) * (115 / 100) ) * quantidade );,         ,         // Verificação de desconto,         if (quantidade > 5 && quantidade <= 10) {,             totalPedido = totalPedido * (90 / 100);,         } else if (quantidade > 10 && quantidade <= 15) {,             totalPedido = totalPedido * (85 / 100);,         } else if (quantidade > 15) {,             totalPedido = totalPedido * (80 / 100);,         }, ,         return this.arredondar(totalPedido);,     }, }]
[package Prova20141;, , public class Prancha, {,     /**,      * tipoBloco, modelo, qtQuilhas, comprimento, espessura (0,5). ,      * tipoBloco armazena um caracter representando o material da prancha, ,      * modelo descreve textualmente o formato da prancha, ,      * qtQuilhas informa a quantidade de quilhas, ,      * comprimento e espessura, as respectivas medidas em centímetros,      */,     private char tipoBloco;,     private String modelo;,     private int qtQuilhas;,     private float comprimento;,     private float espessura;, ,     /**,      * esta classe possui dois construtores, ,      * o primeiro possui 4 parâmetros utilizados para inicializar ,      * todos os atributos da classe Prancha.,      * O segundo não tem parâmetro a!lgum e atribui valores padrão ,      * (definidos por você) para todos os atributos.,      */,     public Prancha(char tipoBloco, String modelo, int qtQuilhas, float comprimento, float espessura),     {,         this.tipoBloco = tipoBloco;,         this.modelo = modelo;,         this.qtQuilhas = qtQuilhas;,         this.comprimento = comprimento;,         this.espessura = espessura;,     },     ,     public Prancha(),     {,         this.tipoBloco = ' ';,         this.modelo = "Não definido";,         this.qtQuilhas = 0;,         this.comprimento = 0;,         this.espessura = 0;,     },     ,     public void definirTipoBloco(char tipoBloco),     {,         this.tipoBloco = tipoBloco;,     }, ,     public void definirModelo(String modelo),     {,         this.modelo = modelo;,     }, ,     public void definirQtQuilhas(int qtQuilhas),     {,         this.qtQuilhas = qtQuilhas;,     }, ,     public void definirComprimento(float comprimento),     {,         this.comprimento = comprimento;,     }, ,     public void definirEspessura(float espessura),     {,         this.espessura = espessura;,     },     ,     public char buscarTipoBloco(),     {,         return this.tipoBloco;,     }, ,     public String buscarModelo(),     {,         return this.modelo;,     }, ,     public int buscarQtQuilhas(),     {,         return this.qtQuilhas;,     }, ,     public float buscarComprimento(),     {,         return this.comprimento;,     }, ,     public float buscarEspessura(),     {,         return this.espessura;,     }, }]
[package Fibonacci;, , , /**,  * Escreva a descrição da classe Fibonacci aqui.,  * ,  * @author (seu nome) ,  * @version (número de versão ou data),  */, public class Fibonacci, {,     /**,      * Construtor para objetos da classe Fibonacci,      */,     public Fibonacci(),     {,     },     ,     /**,      * verificaTermo,      */,     public int verificaTermo(int n),     {,         if (i > 0) {,             int ant = 0;,             int atual = 1;,             int aux = 0;,             ,             if (i == 1) {,                 return 0;,             } else if (i == 2) {,                 return 1;,             } else {,                 for(int i = 0;i < n;i = i + 1) {,                     aux = ant;,                     ant = atual;,                     atual = aux + atual;,                 },                 ,                 return atual;,             },         },     }, }]
[package Atividade_Estrutura_Repeticao;, , , /**,  * Write a description of class MostraNumeros here.,  * ,  * @author (your name) ,  * @version (a version number or a date),  */, public class MostraNumeros, {,     /**,      * Constructor for objects of class MostraNumeros,      */,     public MostraNumeros() {}, ,     public void maioresADireita(),     {,         int sub = 0;,         for (int i = 1;i <= 9;i = i + 1) {,             for (int j = 1;j <= 9;j = j + 1) {,                 if ((j - sub) <= 0) {,                     System.out.print("  ");,                 } else {,                     System.out.print((j - sub)+" ");,                 },             },             System.out.println("");,             sub = sub + 1;,         },     },     ,     public void menoresADireita(),     {,         int print = 1;,         for (int i = 1;i <= 9;i = i + 1) {,             print = i;,             for (int j = 8;j >= 0;j = j - 1) {,                 if (print - j <= 0) {,                     System.out.print("  ");,                 } else {,                      System.out.print((print)+" ");,                      print = print - 1;,                 },             },             System.out.println("");,         },     },     ,     public void numerosADireita(int n),     {,         int sub = 0;,         int spaces = this.numeroDigitos(n) + 1;,         for (int i = 1;i <= n;i = i + 1) {,             for (int j = 1;j <= n;j = j + 1) {,                 for(int k = 0;k < (spaces - this.numeroDigitos(j - sub));k = k + 1){,                     if (j > 1) {,                         System.out.print(" ");,                     },                 },                 if ( (j - sub) <= 0 ) {,                     System.out.print(" ");,                 } else {,                     System.out.print(j - sub);,                 },             },             System.out.println("");,             sub = sub + 1;,         },     },     ,     public int numeroDigitos(int n),     {,         int count = 1;,         int i = 10;,         ,         while(i >= 10) {,             if (n - i < 0) {,                 i = 0;,             } else {,                 count = count + 1;,             },             ,             i = i * 10;,         },         ,         return count;,     }, }]
[package Prova20141_2;, , , /**,  * @author Ignácio, Rafael ,  */, public class Cadastro, {,     /**,      * Construtor para objetos da classe Cadastro,      */,     public Cadastro() {},     ,     public ContaCorrente proxConta(),     {,         return new ContaCorrente();,     },     ,     public int qtContas(),     {,         return 0;,     }, }]
[package Prova20141_2;, , , /**,  * @author Ignácio, Rafael,  */, public class ContaCorrente, {,     /**,      * Construtor para objetos da classe ContaCorrente,      */,     public ContaCorrente() {}, ,     public double informaSaldo(),     {,         return 0.00;,     },     ,     public String informaNConta(),     {,         return "00000-0";,     }, }]
[package Prova20141_2;, , /**,  * Classe principal,  * ,  * @author Ignácio, Rafael,  */, public class Prova, {,     /**,      * Construtor para objetos da classe Prova,      */,     public Prova() {}, ,     /**,      * Elabore um método (assinatura e implementação) que recebe um número inteiro e maior do que zero,      * (n) por parâmetro e mostra para o usuário, em modo texto, n termos da série abaixo:,      * Série = 2, 7, 3, 4, 21, 12, 8, 63, 48, 16, 189, 192, 32, 567, 768, ....!,      * Dica: atenção para a relação entre os termos 2, , , 4, , , 8 o mesmo vale para,      * 7, , 21, , 63 e também 3, , ,12, , 48 ou seja, são 3 seqüências dentro de uma só. (3,0)!,      */,     public void mostrarTermosSerie(int n),     {,         String termos = "2";,         int tA = 4;,         int tB = 7;,         int tC = 3;,         char proxTermo = 'b';,         ,         for(int i = 0;i < (n - 1);i = i + 1) {,             if (proxTermo == 'a') {,                 termos = termos + ", " + tA;,                 tA = tA * 2;,                 proxTermo = 'b';,             } else if (proxTermo == 'b') {,                 termos = termos + ", " + tB;,                 tB = tB * 3;,                 proxTermo = 'c';,             } else if (proxTermo == 'c') {,                 termos = termos + ", " + tC;,                 tC = tC * 4;,                 proxTermo = 'a';,             },         },         ,         System.out.println(termos);,     },     ,     /**,      * Construa dois métodos,,      * ,      * o primeiro (chamado ehPrimo) recebe um número inteiro positivo ,      * por parâmetro e retorna verdadeiro caso o número seja primo e falso caso contrário. ,      * Um número primo é um número somente divisível por 1 e por ele mesmo. ,      * ,      * O segundo método (chamado proxPrimo) recebe um número inteiro positivo por parâmetro e ,      * retorna o próximo número primo após o parâmetro (ex.: 8 —> 11; 10 —> 11; 3 —> 5). ,      * ,      * Considere que ambos métodos estão na mesma classe e a implementação do método proxPrimo deve, ,      * obrigatoriamente, utilizar o método ehPrimo.,      */,     public boolean ehPrimo(int n),     {,         int aux = 0;,         if (n % 2 == 0) {,             aux = n / 2;,         } else {,             aux = (n + 1) / 2;,         }, ,         for(int i = aux;i > 1;i = i - 1) {,             if (n % i == 0) {,                 return false;,             },         },         ,         return true;,     },     ,     public int proxPrimo(int n),     {,         n = n + 1;,         ,         while (!this.ehPrimo(n)) {,             n = n + 1;,         },         ,         return n;,     },     ,     /**,      * Elabore o seguinte método em Java (implementação): ,      * public int saldosNaFaixa (Cadastro cad, double inicio, double fim). ,      * Este método recebe por parâmetro um objeto do tipo Cadastro. A classe Cadastro possui o método ,      * public ContaCorrente proxConta(), ,      * o qual, sempre que for executado, retorna a próxima conta corrente do cadastro. ,      * Esta classe possui também o método ,      * public int qtContas() ,      * o qual retorna a quantidade de contas cadastradas. ,      * ,      * O método saldosNaFaixa deve retornar a quantidade de contas correntes, do cadastro, ,      * cujo saldo está na faixa definida pelos parâmetros inicio (inclusive) e fim (inclusive). ,      * A classe ContaCorrente possui os seguintes métodos: ,      * public double informaSaldo() - retorna o saldo da conta; ,      * public String informaNConta() - retorna o número da conta.,      * As classes Cadastro e ContaCorrente já estão prontas, não é necessário implementá-las, ,      * implemente apenas o método saldosNaFaixa, o qual está em outra classe qualquer.,      */,     public int saldosNaFaixa (Cadastro cad, double inicio, double fim),     {,         int contas = 0;,         ContaCorrente contaAtual;,         for (int i = 0;i < cad.qtContas();i = i + 1) {,             contaAtual = cad.proxConta();,             if (contaAtual.informaSaldo() >= inicio && contaAtual.informaSaldo() <= fim) {,                 contas = contas + 1;,             },         },         ,         return contas;,     }, }]
[package Prova20132_1;, , , public class Prova, {,     public Prova() {}, ,     /**,      * Elabore um método (assinatura e implementação) que recebe uma matriz NxN (ou ,      * seja, uma matriz quadrada, na qual a quantidade de linhas é a mesma que a de ,      * colunas) por parâmetro e retorna um vetor onde cada elemento representa o somatório ,      * de uma diagonal acima da secundária. Não é necessário verificar se a matriz é ,      * quadrada. (4,0),      * Exemplo:,      *     d0 d1 d2,      * 1  2  3 10 d0 = 1 = 1,      * 1  2  10 0 d1 = 2 + 1 = 3,      * 1  10 0 0 d2 = 3 + 2 + 1 = 6,      * 10 0 0 0 retorno: {1, 3, 6} - vetor com 3 posições,      * ,      * {{1,2,3,10},{1,2,10,0},{1,10,0,0},{10,0,0,0}},      */,     public int[] somaDiagonais(int[][] numeros),     {,         int[] diagonais = new int[numeros.length - 1];,         int d;,         int c;,         ,         // d0 == 0,0,         // d1 == 1,0 + 0,1,         // d2 == 2,0 + 1,1 + 0,2,         ,         for (int dP = 0;dP < diagonais.length;dP = dP + 1) {,             d = dP;,             c = 0;,             while ( (d + c) <= dP && d >= 0) {,                 diagonais[dP] = diagonais[dP] + numeros[d][c];,                 ,                 d = d - 1;,                 c = c + 1;,             },         }, ,         return diagonais;,     },     ,     /**,      * Elabore o seguinte método public ContaCorrente[][] contasNegEPos ,      * (ContaCorrente [] contas), o qual recebe um vetor de contas correntes e retorna um ,      * vetor de vetores de contas. O primeiro (índice 0 do retorno) deve conter todas as ,      * contas com saldos negativos e o segundo (índice 1 do retorno) todas as contas com ,      * saldos positivos. Os vetores devem ter o mesmo tamanho que a sua quantidade de ,      * elementos. A classe ContaCorrente possui os seguintes métodos: public String ,      * informaNome() - retorna o nome do dono da conta; public double informaSaldo () - ,      * retorna o saldo da conta; public String informaNConta() - retorna o número da conta,      */,     ,     /**,      * Elabore um método (assinatura e implementação) que recebe uma matriz quadrada ,      * por parâmetro e apresenta para o usuário, em modo texto, qual é o maior e qual é o 2o ,      * maior elemento de cada coluna. Apresente o resultado somente se a matriz for ,      * quadrada, ou seja, faça essa verificação no início do método,      */, }]
[package com.company;, , public class Secretaria {,     private String telefone;,     private String ramal;, ,     public String getTelefone() {,         return telefone;,     }, ,     public void setTelefone(String telefone) {,         this.telefone = telefone;,     }, ,     public String getRamal() {,         return ramal;,     }, ,     public void setRamal(String ramal) {,         this.ramal = ramal;,     }, }]
[package com.company;, , public class Gerente extends Funcionario {,     private String login;,     private String senha;, ,     public String getLogin() {,         return login;,     }, ,     public void setLogin(String login) {,         this.login = login;,     }, ,     public String getSenha() {,         return senha;,     }, ,     public void setSenha(String senha) {,         this.senha = senha;,     }, }]
[package com.company;, , import javax.swing.text.DateFormatter;, import java.time.LocalDate;, import java.time.LocalDateTime;, import java.time.LocalTime;, , public class RegistroPonto {,     private long idRegPonto;,     private Funcionario func;,     private LocalDate dataRegistro;,     private LocalTime horaEntrada;,     private  LocalTime horaSaida;, ,     public long getIdRegPonto() {,         return idRegPonto;,     }, ,     public void setIdRegPonto(long idRegPonto) {,         this.idRegPonto = idRegPonto;,     }, ,     public Funcionario getFunc() {,         return func;,     }, ,     public void setFunc(Funcionario func) {,         this.func = func;,     }, ,     public LocalDate getDataRegistro() {,         return dataRegistro;,     }, ,     public void setDataRegistro(LocalDate dataRegistro) {,         this.dataRegistro = dataRegistro;,     }, ,     public LocalTime getHoraEntrada() {,         return horaEntrada;,     }, ,     public void setHoraEntrada(LocalTime time) {,         this.horaEntrada = time;,     }, ,     public LocalTime getHoraSaida() {,         return horaSaida;,     }, ,     public void setHoraSaida(LocalTime time) {,         this.horaSaida = time;,     }, , ,     public String apresentarRegistroPonto() {,         return "\n func=" + func.getNome() +,                 "\n dataRegistro=" +,                 "\n horaEntrada=" + horaEntrada +,                 "\n horaSaida=" + horaSaida;,     }, , , }]
[package com.company;, , public class Funcionario {,     private int idFunc;,     private String nome;,     private String email;,     private String documento;, ,     public int getIdFunc() {,         return idFunc;,     }, ,     public void setIdFunc(int idFunc) {,         this.idFunc = idFunc;,     }, ,     public String getNome() {,         return nome;,     }, ,     public void setNome(String nome) {,         this.nome = nome;,     }, ,     public String getEmail() {,         return email;,     }, ,     public void setEmail(String email) {,         this.email = email;,     }, ,     public String getDocumento() {,         return documento;,     }, ,     public void setDocumento(String documento) {,         this.documento = documento;,     }, }]
[package com.company;, , import java.sql.Time;, import java.time.LocalDate;, import java.time.LocalDateTime;, import java.time.LocalTime;, , public class GerenciarControlePonto {, ,     public static void main(String[] args) throws InterruptedException {, 	    Gerente gerente = new Gerente();, 	    gerente.setNome("Carlos");, 	    gerente.setDocumento("34324324");, 	    RegistroPonto rg = new RegistroPonto();, 	    rg.setFunc(gerente);, 	    rg.setDataRegistro(LocalDate.of(2019,05,01));, 	    rg.setHoraEntrada(LocalTime.now());, , ,         System.out.println(rg.apresentarRegistroPonto());, , 		Thread.sleep(2000);, , , 		Gerente gerente1 = new Gerente();, 		gerente1.setNome("Rafael");, 		gerente1.setDocumento("34324324");, 		RegistroPonto rg1 = new RegistroPonto();, 		rg1.setFunc(gerente);, 		rg1.setDataRegistro(LocalDate.now());, 		rg1.setHoraEntrada(LocalTime.now());, 		System.out.println(rg1.apresentarRegistroPonto());, 		Thread.sleep(2000);, 		rg.setHoraSaida(LocalTime.now());, 		System.out.println(rg.apresentarRegistroPonto());, 		Thread.sleep(2000);, 		rg1.setHoraSaida(LocalTime.now());, 		System.out.println(rg1.apresentarRegistroPonto());, ,     }, }]
[package com.company;, , public class Operador {,     private double valorHora;, ,     public double getValorHora() {,         return valorHora;,     }, ,     public void setValorHora(double valorHora) {,         this.valorHora = valorHora;,     }, }]
[package Trabalhos.Cinema;, , public class EntradaDeCinema {, ,     private String titulo;,     private String horario;,     private String sala;,     private String poltrona;,     private double valor;,     private boolean disponivel;, ,     public EntradaDeCinema(String titulo, String horario, String sala,,                            String poltrona, double valor, boolean disponivel) {,         this.titulo = titulo;,         this.horario = horario;,         this.sala = sala;,         this.poltrona = poltrona;,         this.valor = valor;,         this.disponivel = disponivel;,     }, ,     public double getValor() {,         return valor;,     }, ,     public String getHorario() {,         return horario;,     }, ,     public String getPoltrona() {,         return poltrona;,     }, ,     public String getSala() {,         return sala;,     }, ,     public String getTitulo() {,         return titulo;,     }, ,     public double calculaValorComDesconto(int dia, int mes, int ano) {, ,         int idade;, ,         if(mes < 9 || (mes == 9 && dia <= 8)) idade = 2018 - ano;,         else idade = (2018 - ano) - 1;, ,         if(idade < 12) {,             this.valor = this.valor * 0.5;,         }, ,         return this.valor;,     }, ,     public double calculaValorComDesconto(int dia, int mes, int ano, int carteira) {, ,         int idade;,         if(mes < 9 || (mes == 9 && dia <= 8)) idade = 2018 - ano;,         else idade = (2018 - ano) - 1;, ,         if(idade < 15 && idade > 12) {,             this.valor = this.valor * 0.4;,         },         if(idade < 21 && idade > 15) {,             this.valor = this.valor * 0.3;,         },         if(idade > 20) {,             this.valor = this.valor * 0.2;,         }, ,         return this.valor;,     }, ,     public void realizarVenda() {,         if(disponivel) {,             this.disponivel = false;,         } else {,             System.out.println("Venda realizada com sucesso!");,         },     }, ,     public String toString() {,         return "\nTítulo: " + this.titulo + "\nHorário: " + this.horario + "\nSala: " + this.sala + "\nValor: " + this.valor + "\nPoltrona: " + this.poltrona + "\nDisponível: " + this.disponivel;,     }, }]
[package Trabalhos.Cinema;, , public class ProgramaEntradaDeCinema {, ,     public static void main(String[] args) {, ,         EntradaDeCinema entrada1 = new EntradaDeCinema("A onda", "12:00", "A", "B1", 20.0, true);,         EntradaDeCinema entrada2 = new EntradaDeCinema("A onda", "12:00", "A", "B2", 20.0, true);,         EntradaDeCinema entrada3 = new EntradaDeCinema("A onda", "12:00", "A", "B3", 20.0, true);, ,         System.out.println("\nEntrada1 - " + entrada1.toString());,         System.out.println("\nEntrada2 - " + entrada2.toString());,         System.out.println("\nEntrada3 - " + entrada3.toString());, ,         System.out.println();, ,         //Desconto comum por idade.,         double A, B, C;, ,         //Desconto especial com matrícula.,         double D, E, F;, ,         A = entrada1.calculaValorComDesconto(4, 8, 2007);,         B = entrada2.calculaValorComDesconto(2, 5, 2005);,         C = entrada3.calculaValorComDesconto(11, 10, 1993);, ,         D = entrada1.calculaValorComDesconto(20, 2, 2002, 8375);,         E = entrada2.calculaValorComDesconto(2, 5, 2005, 3456);,         F = entrada3.calculaValorComDesconto(11, 10, 1993, 85413);, ,         System.out.println("Desconto comum de entrada1: " + A + " R$");,         System.out.println("Desconto comum de entrada2: " + B + " R$");,         System.out.println("Desconto comum de entrada3: " + C + " R$");, ,         System.out.println();, ,         System.out.println("Desconto especial de entrada1: " + D + " R$");,         System.out.println("Desconto especial de entrada2: " + E + " R$");,         System.out.println("Desconto especial de entrada3: " + F + " R$");, ,         System.out.println();, ,         entrada1.realizarVenda();,         entrada2.realizarVenda();,         entrada3.realizarVenda();,     }, }]
[package Trabalhos.HerançaDoNewton;, , public class Vendedor extends Empregado {, ,     private double valorVendas;,     private double comissao;, ,     public Vendedor( String nome, String endereco, int telefone, int codigoSetor, double salarioBase, double valorVendas ) {,         super( nome, endereco, telefone, codigoSetor, salarioBase );,         this.valorVendas = valorVendas;,         this.comissao = valorVendas * 0.25;,     }, ,     public double calcularSalario() {,         return super.calcularSalario() + this.comissao;,     }, ,     @Override,     public String toString() {,         return super.toString() + "Vendedor{" +,                "valorVendas=" + valorVendas +,                ", comissao=" + comissao +,                '}';,     }, }]
[package Trabalhos.HerançaDoNewton;, , public class Fornecedor extends Pessoa {, ,     private double valorCredito;,     private double valorDivida;, ,     public Fornecedor() {,     }, ,     Fornecedor( String nome, String endereco, int telefone, double valorCredito, double valorDivida ) {,         super( nome, endereco, telefone );,         this.valorCredito = valorCredito;,         this.valorDivida = valorDivida;,     }, ,     public double getValorCredito() {,         return valorCredito;,     }, ,     public void setValorCredito( double valorCredito ) {,         this.valorCredito = valorCredito;,     }, ,     public double getValorDivida() {,         return valorDivida;,     }, ,     public void setValorDivida( double valorDivida ) {,         this.valorDivida = valorDivida;,     }, ,     public double obterSaldo() {,         return this.valorCredito - this.valorDivida;,     }, ,     @Override,     public String toString() {,         return super.toString() + "Fornecedor{" +,                "valorCredito=" + valorCredito +,                ", valorDivida=" + valorDivida +,                '}';,     }, }]
[package Trabalhos.HerançaDoNewton;, , public class Operario extends Empregado {, ,     private double valorProducao;,     private double comissao;, ,     public Operario( String nome, String endereco, int telefone, int codigoSetor, double salarioBase, double valorProducao ) {,         super( nome, endereco, telefone, codigoSetor, salarioBase );,         this.valorProducao = valorProducao;,         this.comissao = valorProducao * 0.3;,     }, ,     public double calcularSalario() {,         return super.calcularSalario() + this.comissao;,     }, ,     @Override,     public String toString() {,         return super.toString() + "Operario{" +,                "valorProducao=" + valorProducao +,                ", comissao=" + comissao +,                '}';,     }, }]
[package Trabalhos.HerançaDoNewton;, , public class Empregado extends Pessoa {, ,     private int    codigoSetor;,     private double salarioBase;,     private double imposto;, ,     public Empregado( String nome, String endereco, int telefone, int codigoSetor, double salarioBase ) {,         super( nome, endereco, telefone );,         this.codigoSetor = codigoSetor;,         this.salarioBase = salarioBase;,         this.imposto = salarioBase * 0.6;,     }, ,     public int getCodigoSetor() {,         return codigoSetor;,     }, ,     public void setCodigoSetor( int codigoSetor ) {,         this.codigoSetor = codigoSetor;,     }, ,     public double getSalarioBase() {,         return salarioBase;,     }, ,     public void setSalarioBase( double salarioBase ) {,         this.salarioBase = salarioBase;,     }, ,     public double getImposto() {,         return imposto;,     }, ,     public void setImposto( int imposto ) {,         this.imposto = imposto;,     }, ,     public double calcularSalario() {,         return this.salarioBase - this.imposto;,     }, ,     @Override,     public String toString() {,         return super.toString() +,                "Empregado{" +,                "codigoSetor=" + codigoSetor +,                ", salarioBase=" + salarioBase +,                ", imposto=" + imposto +,                '}';,     }, }]
[package Trabalhos.HerançaDoNewton;, , public class Pessoa {, ,     private String nome;,     private String endereco;,     private int telefone;, ,     Pessoa() {,     }, ,     Pessoa( String nome, String endereco, int telefone ) {,         this.nome = nome;,         this.endereco = endereco;,         this.telefone = telefone;,     }, ,     public Pessoa( String nome, String endereco ) {,         this.nome = nome;,         this.endereco = endereco;,     }, ,     public String getNome() {,         return this.nome;,     }, ,     public String getEndereco() {,         return this.endereco;,     }, ,     public int getTelefone() {,         return this.telefone;,     }, ,     @Override,     public String toString() {,         return "Pessoa{" +,                "nome='" + nome + '\'' +,                ", endereco='" + endereco + '\'' +,                ", telefone=" + telefone +,                '}';,     }, }]
[package Trabalhos.HerançaDoNewton;, , public class Administrador extends Empregado {, ,     private double ajudaDeCusto;, ,     public Administrador( String nome, String endereco, int telefone, int codigoSetor, double salarioBase, double ajudaDeCusto ) {,         super( nome, endereco, telefone, codigoSetor, salarioBase );,         this.ajudaDeCusto = ajudaDeCusto;,     }, ,     public double calcularSalario() {,         return super.calcularSalario() + this.ajudaDeCusto;,     }, ,     public String toString() {,         return super.toString() + "Administrador{" +,                "ajudaDeCusto=" + ajudaDeCusto +,                '}';,     }, }]
[package Trabalhos.HerançaDoNewton;, , public class Main {, ,     public static void main( String[] args ) {, ,         Pessoa P1 = new Pessoa( "Júlia", "Rua do macaco!", 76552312 );,         Fornecedor P2 = new Fornecedor( "Mark", "Rua Amazonas", 356532, 600, 200 );,         Empregado P3 = new Empregado( "Jão", "Laete Lifht", 347340, 4, 2600 );,         Administrador P4 = new Administrador( "Jonas", "Caco Lacerda", 26540, 6, 4000, 200 );,         Operario P5 = new Operario( "Lek", "Tranquillo", 46346, 34, 2700, 3000 );,         Vendedor P6 = new Vendedor( "Bambu", "Que bambu?", 46462, 69, 3211, 4060 );, ,         System.out.println( P1.toString() );,         System.out.println( P2.toString() + P2.obterSaldo() );,         System.out.println( P3.toString() + P3.calcularSalario() );,         System.out.println( P4.toString() + P4.calcularSalario() );,         System.out.println( P5.toString() + P5.calcularSalario() );,         System.out.println( P6.toString() + P6.calcularSalario() );,     }, }]
[package Trabalhos.ContaBancaria;, , import java.util.Scanner;, , public class Executavel {, ,     private static void menu_principal(Banco banco) {, ,         Scanner input = new Scanner(System.in);, ,         int criar_conta      = 1;,         int selecionar_conta = 2;,         int remover_conta    = 3;,         int gerar_relatorio  = 4;, ,         System.out.println(,                 "\nMENU DO BANCO" +,                 "\nDigite uma das opções abaixo: " +,                 "\n1 : Criar conta" +,                 "\n2 : Selecionar conta" +,                 "\n3 : Remover conta" +,                 "\n4 : Gerar relatório" +,                 "\n5 : Finalizar");, ,         int entrada_do_cliente = input.nextInt();, ,         if(entrada_do_cliente == criar_conta) {, ,             menu_criar_conta(banco);,         },         else if(entrada_do_cliente == selecionar_conta) {, ,             menu_selecionar_conta(banco);,         },         else if(entrada_do_cliente == remover_conta) {, ,             remover_conta(banco);,         },         else if(entrada_do_cliente == gerar_relatorio) {, ,             banco.mostrarDados();,             menu_principal(banco);,         },     }, ,     private static void menu_criar_conta(Banco banco) {, ,         Scanner input = new Scanner(System.in);, ,         System.out.println("Digite o tipo de conta:" +,                            "\n1 : Conta Poupança" +,                            "\n2 : Conta Corrente");, ,         int entrada_do_cliente = input.nextInt();, ,         String numero_da_conta = criar_conta_entrada(entrada_do_cliente, banco);, ,         if(banco.procurarConta(numero_da_conta) != null) {, ,             System.out.println("Conta criada com sucesso.");,             menu_principal(banco);,         },         else System.out.println("Houve erro ao criar a conta.");,         menu_principal(banco);,     }, ,     private static String criar_conta_entrada(int entrada_do_cliente, Banco banco) {, ,         Scanner input = new Scanner(System.in);, ,         int conta_poupanca = 1;,         int conta_corrente = 2;, ,         if(entrada_do_cliente == conta_corrente) {, ,             System.out.println("Digite o número da conta: ");,             String numero_da_conta = input.next();, ,             System.out.println("Digite o saldo da conta: ");,             double saldo_da_conta = input.nextDouble();, ,             ContaCorrente conta = new ContaCorrente(numero_da_conta, saldo_da_conta);,             banco.inserir(conta);, ,             return numero_da_conta;,         },         else if(entrada_do_cliente == conta_poupanca) {, ,             System.out.println("Digite o número da conta: ");,             String numero_da_conta = input.next();, ,             System.out.println("Digite o saldo da conta: ");,             double saldo_da_conta = input.nextDouble();,             ContaPoupanca conta = new ContaPoupanca(numero_da_conta, saldo_da_conta);,             banco.inserir(conta);, ,             return numero_da_conta;,         },         else {,             System.out.println("Erro ao encontrar o tipo de conta digitado.");,             menu_principal(banco);, ,             return null;,         },     }, ,     private static void menu_selecionar_conta(Banco banco) {, ,         Scanner input = new Scanner(System.in);, ,         System.out.println("Informe o número da conta: ");,         String numeroDaConta = input.next();, ,         int depositar       = 1;,         int sacar           = 2;,         int transferir      = 3;,         int gerar_relatorio = 4;,         int voltar          = 5;, ,         if(banco.procurarConta(numeroDaConta) != null) {, ,             System.out.println("Digite uma das opcões abaixo:" +,                                "\n1 : Depositar" +,                                "\n2 : Sacar" +,                                "\n3 : Tranferir" +,                                "\n4 : Gerar relatório" +,                                "\n5 : Voltar");, ,             int entrada_do_cliente = input.nextInt();, ,             if(entrada_do_cliente == depositar) {, ,                 System.out.println("Digite a quantia desejada: ");,                 double quantia = input.nextDouble();,                 banco.procurarConta(numeroDaConta).depositar(quantia);, ,                 System.out.println("A quantia foi depositada.");,                 menu_principal(banco);,             },             else if(entrada_do_cliente == sacar) {, ,                 System.out.println("Digite a quantia desejada: ");,                 double quantia = input.nextDouble();,                 banco.procurarConta(numeroDaConta).sacar(quantia);, ,                 System.out.println("A quantia foi sacada.");,                 menu_principal(banco);,             },             else if(entrada_do_cliente == transferir) {, ,                 System.out.println("Digite o numero da conta que vai receber a tranferência: ");,                 String conta_receptora = input.next();, ,                 if(banco.procurarConta(conta_receptora) != null) {, ,                     System.out.println("Digite a quantia: ");,                     double quantia = input.nextDouble();,                     banco.procurarConta(numeroDaConta).transferir(quantia, banco.procurarConta(conta_receptora));, ,                     System.out.println("A quantia foi tranferida.");,                     menu_principal(banco);,                 },                 else {,                     System.out.println("Esta conta não foi encontrada.");,                     menu_principal(banco);,                 },             },             else if(entrada_do_cliente == gerar_relatorio) {,                 banco.procurarConta(numeroDaConta).mostrarDados();,                 menu_principal(banco);,             },             else if(entrada_do_cliente == voltar) {,                 menu_principal(banco);,             },         },         else {,             System.out.println("Conta não encontrada.");,             menu_principal(banco);,         },     }, ,     private static void remover_conta(Banco banco) {, ,         Scanner input = new Scanner(System.in);, ,         System.out.println("Informe o número da conta: ");,         String conta = input.next();, ,         if(banco.procurarConta(conta) != null) {,             banco.remover(banco.procurarConta(conta));, ,             if(banco.procurarConta(conta) == null) {, ,                 System.out.println("Conta removida.");,                 menu_principal(banco);,             },             else {,                 System.out.println("Houve um erro na remoção.");,                 menu_principal(banco);,             },         },         else {,             System.out.println("Conta não encontrada.");,             menu_principal(banco);,         },     }, ,     public static void main(String[] args) {, ,         Banco banco = new Banco();,         menu_principal(banco);,     }, }]
[package Trabalhos.ContaBancaria;, , public class ContaCorrente extends ContaBancaria implements Imprimivel {, ,     private double limite = 50;, ,     ContaCorrente( String conta, double saldo ) {,         super( conta, saldo );,     }, ,     @Override,     public void sacar( double a ) {,         if ( a <= this.getSaldo()+this.limite ) {,             this.setSaldo ( this.getSaldo() - a );,         },         else System.out.println("Erro. Você passou do seu limite de saque.");,     }, ,     @Override,     public void depositar( double a ) {,         this.setSaldo( this.getSaldo() + a );,     }, ,     @Override,     public void mostrarDados() {,         System.out.println(,                 "Conta: " + this.getNumeroDaConta() +,                 "\nSaldo: " + this.getSaldo() +,                 "\nLimite: " + this.limite + "\n",         );,     }, }]
[package Trabalhos.ContaBancaria;, , public interface Imprimivel {, ,     void mostrarDados (  );, }]
[package Trabalhos.ContaBancaria;, , import java.util.ArrayList;, , public class Banco implements Imprimivel {, ,     private ArrayList<ContaBancaria> contas = new ArrayList <>();, ,     void inserir ( ContaBancaria conta ) {,         contas.add( conta );,     }, ,     void remover ( ContaBancaria conta ) {,        contas.remove( conta );,    }, ,    ContaBancaria procurarConta (String conta) {,         for(ContaBancaria aux : contas){,             if(aux.getNumeroDaConta().equals( conta )){,                 return aux;,             },         },         return null;,     }, ,     @Override,     public void mostrarDados() {,         for (ContaBancaria conta : contas) {,             System.out.println(conta.getNumeroDaConta());,         },     }, }]
[package Trabalhos.ContaBancaria;, , class Relatorio {, ,     void gerarRelatorio( Imprimivel a ) {,         a.mostrarDados();,     }, }]
[package Trabalhos.ContaBancaria;, , public class ContaPoupanca extends ContaBancaria implements Imprimivel {, ,     private double taxaDeOperacao = 0.055;, ,     ContaPoupanca( String conta, double saldo ) {,         super( conta, saldo );,     }, ,     @Override,     public void sacar( double a ) {,         if ( a <= this.getSaldo() ) {,             this.setSaldo( this.getSaldo() - a );,             this.setSaldo(this.getSaldo() - a * taxaDeOperacao);,         },         else System.out.println("Erro.\nInsira um valor igual ou menor que o seu saldo.");,     }, ,     @Override,     public void depositar( double a ) {,         this.setSaldo( this.getSaldo() + a );,         this.setSaldo(this.getSaldo() - a * taxaDeOperacao);,     }, ,     @Override,     public void mostrarDados () {,         System.out.println(,                 "Conta: " + this.getNumeroDaConta() +,                 "\nSaldo: " + this.getSaldo() +,                 "\nTaxa: " + this.taxaDeOperacao * 100 + "%\n",         );,     }, }]
[package Trabalhos.ContaBancaria;, , public class TesteExecutavel {, ,     public static void main( String[] args ) {, ,         ContaCorrente pessoa1 = new ContaCorrente( "2346-4", 2300.50 );,         ContaPoupanca pessoa2 = new ContaPoupanca( "546789-3", 4620 );, ,         pessoa1.sacar( 2350.50 );,         pessoa2.sacar( 5000 );, ,         Relatorio rela1 = new Relatorio();,         rela1.gerarRelatorio( pessoa1 );,         rela1.gerarRelatorio( pessoa2 );, , ,     }, }]
[package Trabalhos.ContaBancaria;, , public abstract class ContaBancaria {, ,     private String numeroDaConta;,     private double saldo;, ,     ContaBancaria(String conta, double saldo) {,         this.numeroDaConta = conta;,         this.saldo = saldo;,     }, ,     public abstract void sacar(double a);, ,     public abstract void depositar(double a);, ,     String getNumeroDaConta() {,         return numeroDaConta;,     }, ,     void setNumeroDaConta(String numeroDaConta) {,         this.numeroDaConta = numeroDaConta;,     }, ,     double getSaldo() {,         return saldo;,     }, ,     void setSaldo(double saldo) {,         this.saldo = saldo;,     }, ,     void transferir(double valor, ContaBancaria conta) {,         this.sacar(valor);,         conta.setSaldo(conta.getSaldo() + valor);,     }, ,     public void mostrarDados() {,         System.out.println(,                 "Conta: " + this.getNumeroDaConta() +,                 "\nSaldo: " + this.getSaldo());,     }, }]
[package Provas.AP2.br.ufc.quixada.si.view;, , import Provas.AP2.br.ufc.quixada.si.model.*;, , import java.time.LocalDate;, import java.util.ArrayList;, import java.util.List;, import java.util.Scanner;, , import static java.lang.System.in;, , public class Principal {, ,     private static List<Pessoa>    pessoas    = new ArrayList<>();,     private static List<Operadora> operadoras = new ArrayList<>();, ,     public static void main(String[] args) {,         menu();,     }, ,     public static void menu() {, ,         Scanner read = new Scanner(in);, ,         while(true) {,             System.out.print("Ana Saúde" +,                     "\n1: Cadastrar Operadora    2: Cadastrar Cliente" +,                     "\n3: Cadastrar Funcionário    4: Cadastrar Contrato    0: Sair" +,                     "\nDigite uma das opções: ");,             int entradaPrincipal = read.nextInt();, ,             switch(entradaPrincipal) {,                 case 1: {,                     System.out.print("Digite o código: ");,                     int codOperadora = read.nextInt();,                     System.out.print("Digite o nome: ");,                     read.nextLine();,                     String nome = read.nextLine();, ,                     Operadora operadora = new Operadora(codOperadora, nome, new ArrayList<>(), new ArrayList<>());,                     operadoras.add(operadora);,                 },                 break;,                 case 2: {,                     System.out.print("1: Pessoa Física    2: Pessoa Jurídica" +,                             "\nDigite uma das opções: ");,                     int entrada = read.nextInt();, ,                     read.nextLine();,                     System.out.print("Digite o nome: ");,                     String nome = read.nextLine();,                     System.out.print("Digite o endereço: ");,                     String endereco = read.nextLine();,                     System.out.print("Digite o cpf: ");,                     String cpf = read.nextLine();, ,                     if(entrada == 1) {,                         System.out.print("Digite a data de nascimento, ano - mês - dia, separado por um espaço: ");,                         LocalDate dataNascimento = LocalDate.of(read.nextInt(), read.nextInt(), read.nextInt());, ,                         Cliente cliente = new ClientePessoaFisica(nome, endereco, cpf, dataNascimento);,                         pessoas.add(cliente);,                     } else if(entrada == 2) {,                         System.out.print("Digite a data de abertura, ano - mês - dia, separado por um espaço: ");,                         LocalDate dataAbertura = LocalDate.of(read.nextInt(), read.nextInt(), read.nextInt());, ,                         Cliente cliente = new ClientePessoaJuridica(nome, endereco, cpf, dataAbertura);,                         pessoas.add(cliente);,                     },                     break;,                 },                 case 3: {,                     System.out.print("1: Vendedor    2: Serviços Gerais    3: Analista" +,                             "\nDigite uma opção: ");,                     int entrada = read.nextInt();,                     read.nextLine();,                     System.out.print("Digite o nome: ");,                     String nome = read.nextLine();,                     System.out.print("Digite o CPF: ");,                     String cpf = read.nextLine();,                     System.out.print("Digite a matrícula: ");,                     String matricula = read.nextLine();,                     System.out.print("Digite o salário: ");,                     float salario = read.nextFloat();, ,                     if(entrada == 1) {,                         Funcionario funcionario = new Vendedor(nome, cpf, matricula, salario);,                         pessoas.add(funcionario);,                     } else if(entrada == 2) {,                         Funcionario funcionario = new ServicosGerais(nome, cpf, matricula, salario);,                         pessoas.add(funcionario);,                     } else if(entrada == 3) {,                         Funcionario funcionario = new Analista(nome, cpf, matricula, salario);,                         pessoas.add(funcionario);,                     }, ,                     break;,                 },                 case 4: {,                     System.out.print("Digite o código do contrato: ");,                     int codContrato = read.nextInt();,                     read.nextLine();,                     System.out.print("Digite o CPF do cliente: ");,                     String cpfCliente = read.nextLine();, ,                     System.out.print("Digite o CPF do vendedor: ");,                     String cpfVendedor = read.nextLine();, ,                     System.out.print("Digite a data de início, ano - mês - dia, separado por um espaço: ");,                     LocalDate dataInicio = LocalDate.of(read.nextInt(), read.nextInt(), read.nextInt());, ,                     System.out.print("Digite o valor do contrato: ");,                     float valorContrato = read.nextFloat();, ,                     System.out.print("Digite o código da operadora: ");,                     int codOperadora = read.nextInt();, ,                     Cliente cliente = new ClientePessoaFisica();,                     for(Pessoa c : pessoas) {,                         if(c instanceof ClientePessoaFisica) {,                             if(((ClientePessoaFisica) c).getCpf().equals(cpfCliente)) {,                                 cliente = (ClientePessoaFisica) c;,                             },                         }, ,                     }, ,                     Vendedor vendedor = new Vendedor();,                     for(Pessoa c : pessoas) {,                         if(c instanceof Vendedor) {,                             if(((Vendedor) c).getCpf().equals(cpfVendedor)) {,                                 vendedor = (Vendedor) c;,                             },                         },                     }, ,                     Contrato contrato = new Contrato(codContrato, cliente, vendedor, dataInicio, valorContrato);,                     vendedor.realizarVenda(valorContrato);, ,                     Operadora operadora = new Operadora();,                     for(Operadora c : operadoras) {,                         if(c.getCodOperadora() == codOperadora) {,                             operadora = c;,                         },                     }, ,                     read.nextLine();,                     System.out.print("Digite o CPF do analista: ");,                     String cpfAnalista = read.nextLine();, ,                     for(Pessoa d : pessoas) {,                         if(d instanceof Analista) {,                             if(((Analista) d).getCpf().equals(cpfAnalista)) {,                                 ((Analista) d).processarContrato(operadora, contrato);,                             },                         },                     }, ,                     operadora.mostrarContratos();,                     System.out.println();,                     System.out.println(vendedor.getSalario());,                     break;,                 },                 case 0:,                     return;,                 default:,                     System.out.println("Inválido.");,             },         }, ,     }, }]
[package Provas.AP2.br.ufc.quixada.si.view;, , import Provas.AP2.br.ufc.quixada.si.model.*;, , import java.time.LocalDate;, import java.util.ArrayList;, import java.util.List;, , public class PrincipalImprimivel {, ,     public static void main(String[] args) {, ,         Cliente cliente1 = new ClientePessoaFisica("João", "R Da'Vinci", "4565432-67", LocalDate.of(2000, 11, 27));,         Cliente cliente2 = new ClientePessoaFisica("Maria", "R Burgs", "45424532-67", LocalDate.of(1980, 6, 22));,         Cliente cliente3 = new ClientePessoaJuridica("Andrey", "R Here", "23342-2435.3", LocalDate.of(1997, 2, 13));, ,         Vendedor vendedor1 = new Vendedor("Rey", "423123-4", "2345", 2000);,         Vendedor vendedor2 = new Vendedor("Thom", "94812-5", "43132", 1000);,         Vendedor vendedor3 = new Vendedor("Correy", "3145536-5", "3434", 1500);, ,         Contrato contrato1 = new Contrato(1, cliente1, vendedor1, LocalDate.of(2018, 11, 29), 200);,         Contrato contrato2 = new Contrato(2, cliente2, vendedor2, LocalDate.of(2018, 10, 13), 400);,         Contrato contrato3 = new Contrato(3, cliente3, vendedor3, LocalDate.of(2018, 4, 18), 800);, ,         List<Contrato> contratos = new ArrayList<>();,         contratos.add(contrato1);,         contratos.add(contrato2);,         contratos.add(contrato3);, ,         List<Cliente> clientes = new ArrayList<>();,         clientes.add(cliente1);,         clientes.add(cliente2);,         clientes.add(cliente3);, ,         Operadora  operadora1  = new Operadora(69, "AwaysDead", new ArrayList<>(), new ArrayList<>());,         Imprimivel imprimivel1 = new Operadora(12, "AwaysAlive", contratos, clientes);, ,         imprimivel1.mostrarContratos();,         operadora1.mostrarContratos();,     }, }]
[package Provas.AP2.br.ufc.quixada.si.model;, , public class Vendedor extends Funcionario {, ,     public Vendedor() {,     }, ,     public Vendedor(String nome, String cpf, String matricula, float salario) {,         super(nome, cpf, matricula, salario);,     }, ,     @Override,     public void darBonificacao() {,         setSalario(getSalario() + getSalario() * 0.05f);,     }, ,     public void realizarVenda(float valorContrato) {,         setSalario(getSalario() + valorContrato * 0.5f);,         darBonificacao();,     }, ,     @Override,     public String toString() {,         return "Vendedor " + super.toString();,     }, }]
[package Provas.AP2.br.ufc.quixada.si.model;, , import java.time.LocalDate;, , public class ClientePessoaFisica extends Cliente {, ,     private String    cpf;,     private LocalDate dataNascimento;, ,     public ClientePessoaFisica() {,     }, ,     public ClientePessoaFisica(String nome, String endereco, String cpf, LocalDate dataNascimento) {,         super(nome, endereco);,         this.cpf = cpf;,         this.dataNascimento = dataNascimento;,     }, ,     public String getCpf() {,         return cpf;,     }, ,     public void setCpf(String cpf) {,         this.cpf = cpf;,     }, ,     public LocalDate getDataNascimento() {,         return dataNascimento;,     }, ,     public void setDataNascimento(LocalDate dataNascimento) {,         this.dataNascimento = dataNascimento;,     }, ,     @Override,     public String toString() {,         return "ClientePessoaFisica cpf = " + cpf +,                 ", dataNascimento = " + dataNascimento +,                 super.toString();,     }, }]
[package Provas.AP2.br.ufc.quixada.si.model;, , import java.time.LocalDate;, , public class Contrato {, ,     private int         codContrato;,     private Cliente     cliente;,     private Funcionario vendedor;,     private LocalDate   dataInicio;,     private float       valorContrato;, ,     public Contrato() {,     }, ,     public Contrato(int codContrato, Cliente cliente, Funcionario vendedor, LocalDate dataInicio, float valorContrato) {,         this.codContrato = codContrato;,         this.cliente = cliente;,         this.vendedor = vendedor;,         this.dataInicio = dataInicio;,         this.valorContrato = valorContrato;,     }, ,     public int getCodContrato() {,         return codContrato;,     }, ,     public void setCodContrato(int codContrato) {,         this.codContrato = codContrato;,     }, ,     public Cliente getCliente() {,         return cliente;,     }, ,     public void setCliente(Cliente cliente) {,         this.cliente = cliente;,     }, ,     public Funcionario getVendedor() {,         return vendedor;,     }, ,     public void setVendedor(Funcionario vendedor) {,         this.vendedor = vendedor;,     }, ,     public LocalDate getDataInicio() {,         return dataInicio;,     }, ,     public void setDataInicio(LocalDate dataInicio) {,         this.dataInicio = dataInicio;,     }, ,     public float getValorContrato() {,         return valorContrato;,     }, ,     public void setValorContrato(float valorContrato) {,         this.valorContrato = valorContrato;,     }, ,     @Override,     public String toString() {,         return "Contrato codContrato = " + codContrato +,                 ", cliente = " + cliente + ", vendedor = " + vendedor +,                 ", dataInicio = " + dataInicio + ", valorContrato = " + valorContrato;,     }, }]
[package Provas.AP2.br.ufc.quixada.si.model;, , public abstract class Funcionario extends Pessoa {, ,     private String cpf;,     private String matricula;,     private float  salario;, ,     public Funcionario() {,     }, ,     public Funcionario(String nome, String cpf, String matricula, float salario) {,         super(nome);,         this.cpf = cpf;,         this.matricula = matricula;,         this.salario = salario;,     }, ,     public abstract void darBonificacao();, ,     public String getCpf() {,         return cpf;,     }, ,     public void setCpf(String cpf) {,         this.cpf = cpf;,     }, ,     public String getMatricula() {,         return matricula;,     }, ,     public void setMatricula(String matricula) {,         this.matricula = matricula;,     }, ,     public float getSalario() {,         return salario;,     }, ,     public void setSalario(float salario) {,         this.salario = salario;,     }, ,     @Override,     public String toString() {,         return "Funcionario cpf = " + cpf + ", matricula = " + matricula + ", salario = " + salario + super.toString();,     }, }]
[package Provas.AP2.br.ufc.quixada.si.model;, , public interface Imprimivel {, ,     void mostrarContratos();, }]
[package Provas.AP2.br.ufc.quixada.si.model;, , public abstract class Pessoa {, ,     private String nome;, ,     public Pessoa() {,     }, ,     public Pessoa(String nome) {,         this.nome = nome;,     }, ,     public String getNome() {,         return nome;,     }, ,     public void setNome(String nome) {,         this.nome = nome;,     }, ,     @Override,     public String toString() {,         return "Pessoa nome = " + nome;,     }, }]
[package Provas.AP2.br.ufc.quixada.si.model;, , public class ServicosGerais extends Funcionario {, ,     public ServicosGerais() {,     }, ,     public ServicosGerais(String nome, String cpf, String matricula, float salario) {,         super(nome, cpf, matricula, salario);,     }, ,     @Override,     public void darBonificacao() {,         setSalario(getSalario() + 3);,     }, ,     public void limpar() {,         darBonificacao();,     }, ,     @Override,     public String toString() {,         return "ServicosGerais " + super.toString();,     }, }]
[package Provas.AP2.br.ufc.quixada.si.model;, , public abstract class Cliente extends Pessoa {, ,     private String endereco;, ,     public Cliente() {,     }, ,     public Cliente(String nome, String endereco) {,         super(nome);,         this.endereco = endereco;,     }, ,     public String getEndereco() {,         return endereco;,     }, ,     public void setEndereco(String endereco) {,         this.endereco = endereco;,     }, ,     @Override,     public String toString() {,         return "Cliente endereco = " + endereco + super.toString();,     }, }]
[package Provas.AP2.br.ufc.quixada.si.model;, , public class Analista extends Funcionario {, ,     public Analista() {,     }, ,     public Analista(String nome, String cpf, String matricula, float salario) {,         super(nome, cpf, matricula, salario);,     }, ,     @Override,     public void darBonificacao() {,         setSalario(getSalario() + getSalario() * 0.02f);,     }, ,     public void processarContrato(Operadora op, Contrato c) {,         op.cadastrarContratoCliente(c);,         darBonificacao();,     }, ,     @Override,     public String toString() {,         return "Analista " + super.toString();,     }, }]
[package Provas.AP2.br.ufc.quixada.si.model;, , import java.util.ArrayList;, import java.util.List;, , public class Operadora implements Imprimivel {, ,     private int            codOperadora;,     private String         nome;,     private List<Contrato> contratos;,     private List<Cliente>  clientes;, ,     public Operadora() {,         contratos = new ArrayList<>();,         clientes = new ArrayList<>();,     }, ,     public Operadora(int codOperadora, String nome, List<Contrato> contratos, List<Cliente> clientes) {,         this.codOperadora = codOperadora;,         this.nome = nome;,         this.contratos = contratos;,         this.clientes = clientes;,     }, , ,     public void cadastrarContratoCliente(Contrato c) {,         clientes.add(c.getCliente());,         contratos.add(c);,     }, ,     @Override,     public void mostrarContratos() {,         for(Contrato c : contratos) {,             System.out.println(c.toString());,         },     }, ,     public int getCodOperadora() {,         return codOperadora;,     }, ,     public void setCodOperadora(int codOperadora) {,         this.codOperadora = codOperadora;,     }, ,     public String getNome() {,         return nome;,     }, ,     public void setNome(String nome) {,         this.nome = nome;,     }, ,     public List<Contrato> getContratos() {,         return contratos;,     }, ,     public void setContratos(List<Contrato> contratos) {,         this.contratos = contratos;,     }, ,     public List<Cliente> getClientes() {,         return clientes;,     }, ,     public void setClientes(List<Cliente> clientes) {,         this.clientes = clientes;,     }, ,     @Override,     public String toString() {,         return "Operadora codOperadora = " + codOperadora +,                 ", nome = " + nome + ", contratos = " + contratos +,                 ", clientes = " + clientes;,     }, }]
[package Provas.AP2.br.ufc.quixada.si.model;, , import java.time.LocalDate;, , public class ClientePessoaJuridica extends Cliente {, ,     private String    cnpj;,     private LocalDate dataAbertura;, ,     public ClientePessoaJuridica() {, ,     }, ,     public ClientePessoaJuridica(String nome, String endereco, String cnpj, LocalDate dataAbertura) {,         super(nome, endereco);,         this.cnpj = cnpj;,         this.dataAbertura = dataAbertura;,     }, ,     public String getCnpj() {,         return cnpj;,     }, ,     public void setCnpj(String cnpj) {,         this.cnpj = cnpj;,     }, ,     public LocalDate getDataAbertura() {,         return dataAbertura;,     }, ,     public void setDataAbertura(LocalDate dataAbertura) {,         this.dataAbertura = dataAbertura;,     }, ,     @Override,     public String toString() {,         return "ClientePessoaJuridica cnpj = " + cnpj +,                 ", dataAbertura = " + dataAbertura + super.toString();,     }, }]
[package Provas.AP1.exec;, import Provas.AP1.model.*;, , public class Principal {, ,     public static void main ( String[] args ) {, ,         MotoTaxi motoTaxi1 = new MotoTaxi ( "João", "HK2859", "POC123", 4.8f );,         MotoTaxi motoTaxi2 = new MotoTaxi ( "Antônio", "HG9069", "YAOI23", 3.6f );, ,         Corrida corrida1 = new Corrida ( "Praça do Leão", "Campus UFC", 2f );,         Corrida corrida2 = new Corrida ( "Hospital", "Rua Damasceno", 3f );,         Corrida corrida3 = new Corrida ( "Itajubá", "Alagoinha", 1f );, ,         Cliente cliente1 = new Cliente ( "Tércio", "070.376.230.06", "professor" );,         Cliente cliente2 = new Cliente ( "Max", "040.356.290.01", "estudante" );,         Cliente cliente3 = new Cliente ( "Róy Keany", "024.311.202.69", "idoso" );, ,         motoTaxi1.realizarCorrida ( cliente2, corrida1 );,         motoTaxi2.realizarCorrida ( cliente3, corrida2 );,         motoTaxi2.realizarCorrida ( cliente1, corrida3 );, ,         corrida1.calcularValorCorrida ( 5 );,         corrida2.calcularValorCorrida ( 20 );,         corrida3.calcularValorCorrida ( 10 );, ,         float cor1 = corrida1.getPrecoCorrida ( ) - cliente2.solicitarDesconto ( 10 );,         float cor2 = corrida2.getPrecoCorrida ( ) - cliente3.solicitarDesconto ( 20 );,         float cor3 = corrida3.getPrecoCorrida ( ) - cliente1.solicitarDesconto ( 15 );, ,         System.out.println ( "\nValor final da corrida 1: " + cor1 );,         System.out.println ( "\nValor final da corrida 2: " + cor2 );,         System.out.println ( "\nValor final da corrida 3: " + cor3 );,     }, }]
[package Provas.AP1.model;, , public class MotoTaxi {, ,     private String nome;,     private String cnh;,     private String placa;,     private float  nota;, ,     public MotoTaxi ( String nome, String cnh, String placa, float nota ) {,         this.nome = nome;,         this.cnh = cnh;,         this.placa = placa;,         this.nota = nota;,     }, ,     public MotoTaxi ( ) {,     }, ,     public String getNome ( ) {,         return nome;,     }, ,     public void setNome ( String nome ) {,         this.nome = nome;,     }, ,     public String getCnh ( ) {,         return cnh;,     }, ,     public void setCnh ( String cnh ) {,         this.cnh = cnh;,     }, ,     public String getPlaca ( ) {,         return placa;,     }, ,     public void setPlaca ( String placa ) {,         this.placa = placa;,     }, ,     public float getNota ( ) {,         return nota;,     }, ,     public void setNota ( float nota ) {,         this.nota = nota;,     }, ,     public void realizarCorrida ( Cliente cliente, Corrida corrida ) {,         System.out.println ( "\nCliente: " + cliente.getNome ( ),                              + "\nMotoTaxi: " + this.getNome ( ),                              + "\nNota: " + this.getNota ( ),                              + "\nPartida: " + corrida.getPartida ( ),                              + "\nDestino: " + corrida.getDestido ( ) );,     }, ,     public String toString ( ) {,         return "MotoTaxi{" +,                "nome='" + nome + '\'' +,                ", cnh='" + cnh + '\'' +,                ", placa='" + placa + '\'' +,                ", nota=" + nota +,                '}';,     }, }]
[package Provas.AP1.model;, , public class Corrida {, ,     private String partida;,     private String destido;,     private float  precoKm;,     private float  precoCorrida;, ,     public Corrida ( String partida, String destido, float precoKm ) {,         this.partida = partida;,         this.destido = destido;,         this.precoKm = precoKm;,     }, ,     public Corrida ( ) {,     }, ,     public String getPartida ( ) {,         return partida;,     }, ,     public void setPartida ( String partida ) {,         this.partida = partida;,     }, ,     public String getDestido ( ) {,         return destido;,     }, ,     public void setDestido ( String destido ) {,         this.destido = destido;,     }, ,     public float getPrecoKm ( ) {,         return precoKm;,     }, ,     public void setPrecoKm ( float precoKm ) {,         this.precoKm = precoKm;,     }, ,     public float getPrecoCorrida ( ) {,         return precoCorrida;,     }, ,     public void setPrecoCorrida ( float precoCorrida ) {,         this.precoCorrida = precoCorrida;,     }, ,     public String toString ( ) {,         return "Corrida{" +,                "partida='" + partida + '\'' +,                ", destido='" + destido + '\'' +,                ", precoKm=" + precoKm +,                ", precoCorrida=" + precoCorrida +,                '}';,     }, ,     public float calcularValorCorrida ( int distancia ) {, ,         this.precoCorrida = ( distancia * this.precoKm ) + 5;, ,         return this.precoCorrida;,     }, }]
[package Provas.AP1.model;, , public class Cliente {, ,     private String nome;,     private String cpf;,     private String tipo;, ,     public Cliente ( String nome, String cpf, String tipo ) {,         this.nome = nome;,         this.cpf = cpf;,         this.tipo = tipo;,     }, ,     public Cliente ( ) {,     }, ,     public String getNome ( ) {,         return nome;,     }, ,     public void setNome ( String nome ) {,         this.nome = nome;,     }, ,     public String getCpf ( ) {,         return cpf;,     }, ,     public void setCpf ( String cpf ) {,         this.cpf = cpf;,     }, ,     public String getTipo ( ) {,         return tipo;,     }, ,     public void setTipo ( String tipo ) {,         this.tipo = tipo;,     }, ,     public String toString ( ) {,         return "Cliente{" +,                "nome='" + nome + '\'' +,                ", cpf='" + cpf + '\'' +,                ", tipo='" + tipo + '\'' +,                '}';,     }, ,     public float solicitarDesconto ( float valor ) {, ,         switch ( this.tipo ) {, ,             case "estudante":,                 valor = valor - valor * 0.2f;,                 break;, ,             case "idoso":,                 valor = valor - valor * 0.5f;,                 break;, ,             case "policial":,                 valor = valor - valor * 0.2f;,                 break;, ,             case "professor":,                 valor = valor - valor * 0.1f;,                 break;,         }, ,         return valor;,     }, }]
[package Exercícios.Agenda;, import java.time.LocalDate;, , public class PessoaFisica extends Pessoa {, ,     private int cpf;,     private LocalDate nascimento;,     private String estadoCivil;, ,     @Override,     public String toString() {,         super.toString();,         return "PessoaFisica{" +,                "cpf=" + cpf +,                ", nascimento=" + nascimento +,                ", estadoCivil='" + estadoCivil + '\'' +,                '}';,     }, ,     public PessoaFisica( String nome, String endereco, String email, int cpf, LocalDate nascimento, String estadoCivil ) {,         super( nome, endereco, email );,         this.cpf = cpf;,         this.nascimento = nascimento;,         this.estadoCivil = estadoCivil;,     }, ,     public int getCpf() {,         return cpf;,     }, ,     public void setCpf( int cpf ) {,         this.cpf = cpf;,     }, ,     public LocalDate getNascimento() {,         return nascimento;,     }, ,     public void setNascimento( LocalDate nascimento ) {,         this.nascimento = nascimento;,     }, ,     public String getEstadoCivil() {,         return estadoCivil;,     }, ,     public void setEstadoCivil( String estadoCivil ) {,         this.estadoCivil = estadoCivil;,     }, }]
[package Exercícios.Agenda;, , public class Agenda {, ,     Pessoa[] pessoas = new Pessoa[50];,     private int contador = 0;, ,     public void procurar (int cpf) {,         for (int i = 0; i < pessoas.length; i++) {,             if (pessoas[i] instanceof PessoaFisica) {,                 if (((PessoaFisica)pessoas[i]).getCpf() == cpf) {,                     System.out.println(((PessoaFisica)pessoas[i]).toString());,                 },             },         },     }, ,     public void adicionar (Pessoa pessoa) {,         pessoas[contador] = pessoa;,         contador++;,     }, ,     public void remover (Pessoa pessoa) {, ,     }, }]
[package Exercícios.Agenda;, , public class PessoaJuridica extends Pessoa {, ,     private int cnpj;,     private String inscricaoEstadual;,     private String razaoSocial;, ,     @Override,     public String toString() {,         super.toString();,         return "PessoaJuridica{" +,                "cnpj=" + cnpj +,                ", inscricaoEstadual='" + inscricaoEstadual + '\'' +,                ", razaoSocial='" + razaoSocial + '\'' +,                '}';,     }, ,     public PessoaJuridica( String nome, String endereco, String email, int cnpj, String inscricaoEstadual, String razaoSocial ) {,         super( nome, endereco, email );,         this.cnpj = cnpj;,         this.inscricaoEstadual = inscricaoEstadual;,         this.razaoSocial = razaoSocial;,     }, ,     public int getCnpj() {,         return cnpj;,     }, ,     public void setCnpj( int cnpj ) {,         this.cnpj = cnpj;,     }, ,     public String getInscricaoEstadual() {,         return inscricaoEstadual;,     }, ,     public void setInscricaoEstadual( String inscricaoEstadual ) {,         this.inscricaoEstadual = inscricaoEstadual;,     }, ,     public String getRazaoSocial() {,         return razaoSocial;,     }, ,     public void setRazaoSocial( String razaoSocial ) {,         this.razaoSocial = razaoSocial;,     }, }]
[package Exercícios.Agenda;, , public class Pessoa {, ,     private String nome;,     private String endereco;,     private String email;, ,     @Override,     public String toString() {,         return "Pessoa{" +,                "nome='" + nome + '\'' +,                ", endereco='" + endereco + '\'' +,                ", email='" + email + '\'' +,                '}';,     }, ,     public Pessoa( String nome, String endereco, String email ) {,         this.nome = nome;,         this.endereco = endereco;,         this.email = email;,     }, ,     public String getNome() {,         return nome;,     }, ,     public void setNome( String nome ) {,         this.nome = nome;,     }, ,     public String getEndereco() {,         return endereco;,     }, ,     public void setEndereco( String endereco ) {,         this.endereco = endereco;,     }, ,     public String getEmail() {,         return email;,     }, ,     public void setEmail( String email ) {,         this.email = email;,     }, }]
[package Exercícios.Agenda;, , public class Principal {, ,     public static void main( String[] args ) {, , ,     }, }]
[package Exercícios.Herança.Exercício;, , import java.time.LocalDate;, , public class Funcionário extends Pessoa {, ,     private String matricula;,     private LocalDate dataAdmissao;,     private double salario;, ,     public Funcionário(String nome, String cpf, LocalDate dataNasc, String matricula, LocalDate dataEmissao, double salario) {,         super(nome, cpf, dataNasc);,         this.matricula = matricula;,         this.dataAdmissao = dataEmissao;,         this.salario = salario;,     }, ,     public void mostrarFuncionario(){,         super.mostrarPessoa();,         System.out.println(this.matricula);,         System.out.println(this.dataAdmissao);,         System.out.println(this.salario);,     }, }]
[package Exercícios.Herança.Exercício;, , import java.time.LocalDate;, , public class ChefeDepartamento extends Funcionário {, ,     private String departamento;,     private LocalDate dataPromocao;,     private double gratificacao;, ,     public ChefeDepartamento(String nome, String cpf, LocalDate dataNasc, String matricula, LocalDate dataAdmissao, double salario, String departamento, LocalDate dataPromocao, double gratificacao) {,         super(nome, cpf, dataNasc, matricula, dataAdmissao, salario);,         this.departamento = departamento;,         this.dataPromocao = dataPromocao;,         this.gratificacao = gratificacao;,     }, ,     public void mostrarChefeDepartamento(){,         super.mostrarFuncionario();,         System.out.println(this.departamento);,         System.out.println(this.dataPromocao);,         System.out.println(this.gratificacao);,     }, }]
[package Exercícios.Herança.Exercício;, , import java.time.LocalDate;, , public class Pessoa {, ,     private String nome;,     private String cpf;,     private LocalDate dataNasc;, ,     public Pessoa(String nome, String cpf, LocalDate dataNasc) {,         this.nome = nome;,         this.cpf = cpf;,         this.dataNasc = dataNasc;,     }, ,     public void mostrarPessoa(){,         System.out.println(this.nome);,         System.out.println(this.cpf);,         System.out.println(this.dataNasc);,     }, }]
[package Exercícios.Herança.Exercício;, , import java.time.LocalDate;, , public class Aluno extends Pessoa {, ,     private String matricula;, ,     public Aluno(String nome, String cpf, LocalDate dataNasc, String matricula) {,         super(nome, cpf, dataNasc);,         this.matricula = matricula;,     }, ,     public void mostrarAluno(){,         super.mostrarPessoa();,         System.out.println(this.matricula);,     }, }]
[package Exercícios.Herança.Exercício;, , import java.time.LocalDate;, , public class Main {, ,     public static void main(String[] args) {, ,         Pessoa P1 = new Pessoa("Andreazo","070.23.123",LocalDate.of(2000,11,23));,         Aluno P2 = new Aluno("Anderson","070.324.35.211",LocalDate.of(1997,9,17),"A765321235");,         Funcionário P3 = new Funcionário("Luiz Espalha Lixo","69.uni.123.02",LocalDate.of(1990,3,27),"520756",LocalDate.of(2017,8,16),3400);,         ChefeDepartamento P4 = new ChefeDepartamento("Roy Roy Roy","193.352.256.2",LocalDate.of(1999,6,14),"B39863",LocalDate.of(2018,2,26),2300,"Monitoria",LocalDate.of(2018,3,18),500);, ,         P1.mostrarPessoa();,         System.out.println();, ,         P2.mostrarAluno();,         System.out.println();, ,         P3.mostrarFuncionario();,         System.out.println();, ,         P4.mostrarChefeDepartamento();,     }, }]
[package Exercícios.Herança.Aula.exec;, import Exercícios.Herança.Aula.model.*;, , public class Principal {, ,     public static void main(String[] args) {, ,         Automovel auto = new Automovel(50,6,"azul",2,"POC69");,         Automovel novo = new Automovel();,     }, }]
[package Exercícios.Herança.Aula.model;, , public class Terrestre extends Transporte {, ,     private int numRodas;, ,     public Terrestre(int capacidade, int numRodas) {,         super(capacidade);,         this.numRodas = numRodas;,     }, ,     public Terrestre () {,         super();,     }, ,     public int getNumRodas() {,         return numRodas;,     }, ,     public void setNumRodas(int numRodas) {,         this.numRodas = numRodas;,     }, }]
[package Exercícios.Herança.Aula.model;, , public class Transporte {, ,     private int capacidade;, ,     public Transporte(int capacidade) {,         this.capacidade = capacidade;,     }, ,     public Transporte () { }, ,     public int getCapacidade() {,         return capacidade;,     }, ,     public void setCapacidade(int capacidade) {,         this.capacidade = capacidade;,     }, }]
[package Exercícios.Herança.Aula.model;, , public class Automovel extends Terrestre {, ,     private String cor;,     private int numPortas;,     private String placa;, ,     public Automovel(int capacidade, int numRodas, String cor, int numPortas, String placa) {,         super(capacidade, numRodas);,         this.cor = cor;,         this.numPortas = numPortas;,         this.placa = placa;,     }, ,     public Automovel() {,         super();,     }, ,     public String getCor() {,         return cor;,     }, ,     public void setCor(String cor) {,         this.cor = cor;,     }, ,     public int getNumPortoas() {,         return numPortas;,     }, ,     public void setNumPortoas(int numPortoas) {,         this.numPortas = numPortoas;,     }, ,     public String getPlaca() {,         return placa;,     }, ,     public void setPlaca(String placa) {,         this.placa = placa;,     }, }]
[package Exercícios.Interface;, , public class CalculadoraImpl implements Calculadora {, ,     @Override,     public int soma( int a, int b ) {,         return a+b;,     }, ,     @Override,     public int sub( int a, int b ) {,         return a-b;,     }, ,     @Override,     public int mult( int a, int b ) {,         return a*b;,     }, ,     @Override,     public int div( int a, int b ) {,         if(b != 0) return a/b;,         else System.out.println("Não é possível divir por zero!");,         return 0;,     }, }]
[package Exercícios.Interface;, , public interface Calculadora {, ,     public int soma(int a, int b);,     public int sub(int a, int b);,     public int mult(int a, int b);,     public int div(int a, int b);, }]
[package Exercícios.Polimorfismo.Aluno;, , public class Principal {, }]
[package Exercícios.Polimorfismo.Aluno;, , public class Aluno {, ,     private String nome;,     private String instituicao;,     private int    idade;, ,     public Aluno() {,         this( "Nenhum", "UFC", 18 );,     }, ,     public Aluno( String nome ) {,         this( nome, "UFC", 18 );,     }, ,     public Aluno( String nome, String instituicao ) {,         this( nome, instituicao, 18 );,     }, ,     public Aluno( String nome, String instituicao, int idade ) {,         this.nome = nome;,         this.instituicao = instituicao;,         this.idade = idade;,     }, }, ]
[package Exercícios.Polimorfismo.Brinquedo;, , public class Brinquedo {, ,     private String nome;,     private double velocidade;,     private double aceleracao;, ,     public Brinquedo(){}, ,     public Brinquedo( String nome, double velocidade, double aceleracao ) {,         this.nome = nome;,         this.velocidade = velocidade;,         this.aceleracao = aceleracao;,     }, ,     public void mover(){}, ,     public void velocidade(int velocidade){}, ,     public void velocidade(double velocidade){}, ,     public void velocidade(float velocidade, double aceleracao){}, , }]
[package Exercícios.Polimorfismo.Brinquedo;, , public class Barco extends Brinquedo {, ,     @Override,     public void mover(){,         System.out.println("O barco nadou!");,     }, }]
[package Exercícios.Polimorfismo.Brinquedo;, , public class Carro extends Brinquedo {, ,     @Override,     public void mover(){,         System.out.println("O carro andou!");,     }, }]
[package Exercícios.Polimorfismo.Brinquedo;, , public class Avião extends Brinquedo {, ,     @Override,     public void mover(){,         System.out.println("O avião avuou!");,     }, }]
[package Exercícios.Polimorfismo.Brinquedo;, , public class Principal {, ,     public static void main( String[] args ) {, ,         Brinquedo brinquedo = new Brinquedo();,         Brinquedo carro = new Carro();,     }, }]
[package Exercícios.Polimorfismo.Calculadora;, , public class Main {, ,     public static void main( String[] args ) {, ,         System.out.println( Calculadora.soma( 2,6 ));, ,         System.out.println(Calculadora.soma( 3,7,4 ));,     }, }]
[package Exercícios.Polimorfismo.Calculadora;, , class Calculadora {, ,     static int soma( int a, int b ) {,         return a + b;,     }, ,     static int soma( int a, int b, int c ) {,         return a + b + c;,     }, }]
[package Exercícios.Threads.exec;, , import Exercícios.Threads.control.AreaCritica;, import Exercícios.Threads.model.Consumidor;, , public class PrincipalRegiaoCritica {, ,     public static void main(String[] args) {, ,         AreaCritica ac = new AreaCritica();, ,         Consumidor c1 = new Consumidor(ac, "Pedro", 2000);,         Consumidor c2 = new Consumidor(ac, "Jão", 1500);,         Consumidor c3 = new Consumidor(ac, "Nêgo", 3000);, ,         c1.start();,         c2.start();,         c3.start();,     }, }]
[package Exercícios.Threads.exec;, , import Exercícios.Threads.model.Solo;, , public class Principal {, ,     public static void main(String[] args) {, ,         Solo s1 = new Solo();,         Solo s2 = new Solo();,         Solo s3 = new Solo();, ,         long inicio = getTime();,         s1.start();,         s2.start();,         s3.start();, ,         try {,             s1.join();,             s2.join();,             s3.join();,         } catch (InterruptedException e) {,             e.printStackTrace();,         }, ,         long fim = getTime();,         System.out.println("Tempo de execução:" + (fim - inicio) + "ms");,     }, ,     public static long getTime() {,         return (new java.util.Date().getTime());,     }, , }]
[package Exercícios.Threads.control;, , public class AreaCritica {, ,     public synchronized void acessa(String nome, int tempo) {, ,         System.out.println(nome + " - Entrando na região crítica.");,         try {,             Thread.sleep(tempo);,         } catch (InterruptedException e) {,             e.printStackTrace();,         },     }, }]
[package Exercícios.Threads.model;, , public class Solo extends Thread {, ,     @Override,     public void run() {,         this.processar();,     }, ,     public void processar() {, ,         System.out.println("Início do processamento.");, ,         try {,             Thread.sleep(2000);,         } catch (InterruptedException e) {,             e.printStackTrace();,         }, ,         System.out.println("Fim do processamento.");,     }, }]
[package Exercícios.Threads.model;, , import Exercícios.Threads.control.AreaCritica;, , public class Consumidor extends Thread {, ,     private AreaCritica ac;,     private String      nome;,     private int         tempo;, ,     public Consumidor(AreaCritica ac, String nome, int tempo) {,         this.ac = ac;,         this.nome = nome;,         this.tempo = tempo;,     }, ,     @Override,     public void run() {,         this.ac.acessa(this.nome, this.tempo);,     }, }]
[package Exercícios.Encapsulamento;, , public class Principal {,     public static void main(String[] args){, ,       Aluno Marcus = new Aluno("Marcus",18,"SI",7.1);,       Aluno Joana = new Aluno();, ,         Joana.setNome("Joana");,         Joana.setIdade(22);,         Joana.setCurso("DD");,         Joana.setIRA(8.5);, ,         Marcus.status();,         Joana.status();,     }, }]
[package Exercícios.Encapsulamento;, , public class Aluno {, ,     private String nome;,     private int idade;,     private String curso;,     private double IRA;, ,     Aluno(){}, ,     Aluno(String nome, int idade, String curso, double IRA){,         this.nome = nome;,         this.idade = idade;,         this.curso = curso;,         this.IRA = IRA;,     }, ,     public void estudar(String materia) {,         System.out.println("Estudando "+materia+".");,     }, ,     public void matricular(String materia){,         System.out.println("Matriculado em "+materia+".");,     }, ,     public double getIRA() {,         return this.IRA;,     }, ,     public String getNome() {,         return this.nome;,     }, ,     public int getIdade() {,         return this.idade;,     }, ,     public String getCurso() {,         return this.curso;,     }, ,     public void setCurso(String curso) {,         if (curso == "SI"||curso == "CC"||curso == "DD"||curso == "EC"||curso == "ES"||curso == "RC"){ this.curso = curso;},         else System.out.println("Opção de curso inválida!");,     }, ,     public void setIdade(int idade) {,         if (idade < 0){,             System.out.println("Opção inválida de idade!");,         },         else this.idade = idade;,     }, ,     public void setIRA(double IRA) {,         if (IRA < 0) {,             System.out.println("Opção inválida de IRA!");,         },         else this.IRA = IRA;,     }, ,     public void setNome(String nome) {,         this.nome = nome;,     }, ,     void status() {,         System.out.println("\nNome:\t"+this.nome);,         System.out.println("Idade:\t"+this.idade);,         System.out.println("Curso:\t"+this.curso);,         System.out.println("IRA:\t"+this.IRA);,     }, }]
[package Exercícios.PartidaJogadores.Exec;, import Exercícios.PartidaJogadores.Model.*;, , public class Principal {, ,     public static void main(String[] args){, ,         Time timeA = new Time("Flamengo");,         Time timeB = new Time("Corinthias");, ,         Partida partidaA = new Partida();,         partidaA.gerarResultado(timeA, timeB);,     }, }]
[package Exercícios.PartidaJogadores.Model;, , public class Partida {, ,     private int idPartida;, , ,     public Partida ( ) { }, ,     public void gerarResultado(Time TimeA,Time TimeB){,         System.out.println(TimeA.getNome()+" 1 X 1 "+TimeB.getNome());,     }, , }]
[package Exercícios.PartidaJogadores.Model;, , public class Jogador {, ,     private String nome;,     private String cpf;, ,     public Jogador ( String nome, String cpf ) {,         this.nome = nome;,         this.cpf = cpf;,     }, ,     public Jogador ( ) { }, ,     public void setNome ( String nome ) {,         this.nome = nome;,     }, ,     public void setCpf ( String cpf ) {,         this.cpf = cpf;,     }, ,     public String getNome ( ) {,         return nome;,     }, ,     public String getCpf ( ) {,         return cpf;,     }, }]
[package Exercícios.PartidaJogadores.Model;, , public class Time {, ,     private String nome;,     private String jogadores[];, , ,     public void addJogador(String X[]){,         this.jogadores = X;,     }, ,     public Time ( String nome ) {,         this.nome = nome;,         Jogador Jogadores = new Jogador();,     }, ,     public Time () { }, ,     public String getNome ( ) {,         return nome;,     }, ,     public String[] getJogadores ( ) {,         return jogadores;,     }, ,     public void setNome ( String nome ) {,         this.nome = nome;,     }, ,     public void setJogadores ( String[] jogadores ) {,         this.jogadores = jogadores;,     }, }]
[package Exercícios.Abstracao.Banco;, , public class ContaCorrente extends Conta {, ,     public ContaCorrente( double saldo, int numConta ) {,         super( saldo, numConta );,     }, ,     @Override,     public double Correcao() {,         setCorrecao( this.getSaldo() + this.getSaldo() * 0.013 );,         return this.getCorrecao();,     }, }]
[package Exercícios.Abstracao.Banco;, , public class ContaPoupanca extends Conta {, ,     public ContaPoupanca( double saldo, int numConta ) {,         super( saldo, numConta );,     }, ,     @Override,     public double Correcao() {,         setCorrecao( this.getSaldo() + this.getSaldo() * 0.065 );,         return this.getCorrecao();,     }, }]
[package Exercícios.Abstracao.Banco;, , public abstract class Conta {, ,     private double saldo;,     private int numConta;,     private double correcao;, ,     public Conta( double saldo, int numConta ) {,         this.saldo = saldo;,         this.numConta = numConta;,     }, ,     public abstract double Correcao();, ,     public double getSaldo() {,         return saldo;,     }, ,     public void setSaldo( double saldo ) {,         this.saldo = saldo;,     }, ,     public int getNumConta() {,         return numConta;,     }, ,     public void setNumConta( int numConta ) {,         this.numConta = numConta;,     }, ,     public double getCorrecao() {,         return correcao;,     }, ,     public void setCorrecao( double correcao ) {,         this.correcao = correcao;,     }, }]
[package Exercícios.Abstracao.Banco;, , public class Principal {, ,     public static void main( String[] args ) {, ,         Conta um = new ContaCorrente( 230,543678432 );,         Conta dois = new ContaPoupanca( 352, 965434573 );, ,         System.out.println(um.Correcao());,         System.out.println(dois.Correcao());,     }, }]
[package Exercícios.Abstracao.Servidores;, , public class Psicologo extends Servidor {, ,     private int consultasFeitas;, ,     public Psicologo( String nome, String CPF, Double salario, int consultasFeitas ) {,         super( nome, CPF, salario );,         this.consultasFeitas = consultasFeitas;,     }, ,     @Override,     public double getBonificacao() {,         return this.consultasFeitas * 20;,     }, ,     public int getConsultasFeitas() {,         return consultasFeitas;,     }, ,     public void setConsultasFeitas( int consultasFeitas ) {,         this.consultasFeitas = consultasFeitas;,     }, }]
[package Exercícios.Abstracao.Servidores;, , public class Professor extends Servidor {, ,     private int horasMinistradas;, ,     public Professor( String nome, String CPF, Double salario, int horasMinistradas ) {,         super( nome, CPF, salario );,         this.horasMinistradas = horasMinistradas;,     }, ,     @Override,     public double getBonificacao() {,         return this.horasMinistradas;,     }, ,     public int getHorasMinistradas() {,         return horasMinistradas;,     }, ,     public void setHorasMinistradas( int horasMinistradas ) {,         this.horasMinistradas = horasMinistradas;,     }, }]
[package Exercícios.Abstracao.Servidores;, , import Exercícios.Abstracao.Servidores.Servidor;, , public class STA extends Servidor {, ,     public STA( String nome, String CPF, Double salario ) {,         super( nome, CPF, salario );,     }, ,     @Override,     public double getBonificacao() {,         return super.getSalario();,     }, }]
[package Exercícios.Abstracao.Servidores;, , public abstract class Servidor {, ,     private String nome;,     private String CPF;,     private Double salario;, ,     public Servidor( String nome, String CPF, Double salario ) {,         this.nome = nome;,         this.CPF = CPF;,         this.salario = salario;,     }, ,     public abstract double getBonificacao();, ,     public String getNome() {,         return nome;,     }, ,     public void setNome( String nome ) {,         this.nome = nome;,     }, ,     public String getCPF() {,         return CPF;,     }, ,     public void setCPF( String CPF ) {,         this.CPF = CPF;,     }, ,     public Double getSalario() {,         return salario;,     }, ,     public void setSalario( Double salario ) {,         this.salario = salario;,     }, }]
[package Exercícios.Abstracao.Servidores;, , public class Principal {, ,     public static void main( String[] args ) {, ,         Servidor um = new Professor( "João Paulo", "08643456", 2000.00, 38 );,     }, }]
[package Exercícios.Lista01;, , import java.util.Scanner;, , public class H {,     public static Scanner in = new Scanner(System.in);, ,     public static void main(String[] args) {,         System.out.print("Digite a primeira nota: ");,         double a = in.nextDouble();,         System.out.print("Digite a segunda nota: ");,         double b = in.nextDouble();,         Prova(a,b);,     }, ,     public static void Prova(double a, double b){,         if ((a+b)/2 >= 6.9) System.out.println("\nAprovado por conceito A.");,         else if ((a+b)/2 >= 3.9) {,             System.out.print("\nÉ necessário fazer a prova final.\nDigite a terceira nota: ");,             double c = in.nextDouble();,             if ((((a+b)/2)+c)/2 >= 4.9) System.out.println("\nAprovado por conceito B.");,             else System.out.println("\nReprovado.");,         },         else System.out.println("\nReprovado.");,     }, }]
[package Exercícios.Lista01;, , import java.util.Scanner;, , public class C {,     public static Scanner in = new Scanner(System.in);,     public static void main(String[] args){,         System.out.print("Digite o seu nome: ");,         String a = in.nextLine();,         System.out.println();,         Nome(a);,     },     public static void Nome(String a){,         System.out.print(""+a);,     }, }]
[package Exercícios.Lista01;, , import java.util.Scanner;, , public class F {,     public static Scanner in = new Scanner(System.in);, ,     public static void main(String[] args) {,         System.out.print("Digite o número: ");,         int a = in.nextInt();,         System.out.print("\n"+Fat(a));,     }, ,     public static int Fat(int a){,         int b = a;,         a--;,         do {,             b = b * a;,             a--;,         } while (a>0);, ,         return b;,     }, }]
[package Exercícios.Lista01;, , import java.util.Scanner;, , public class A {, ,     public static Scanner in = new Scanner(System.in);, ,     public static void main(String[] args) {, ,         System.out.print("\nDigite o primeiro número: ");,         int a = in.nextInt();, ,         System.out.print("Digite o segundo número: ");,         int b = in.nextInt();, ,         Maior(a,b);,     }, ,     public static void Maior(int a, int b) {, ,         if (a > b) {, ,             System.out.println("\nO maior destes é o " + a);,         }, ,         else if (a < b) {, ,             System.out.println("\nO maior destes é o "+ b);,         }, ,         else System.out.println("\nAmbos são "+a);, ,     }, , }]
[package Exercícios.Lista01;, , import java.util.Scanner;, , public class E {,     public static Scanner in = new Scanner(System.in);,     public static void main(String[] args){,         System.out.print("Digite a primeira nota: ");,         double a = in.nextDouble();,         System.out.print("Digite a segunda nota: ");,         double b = in.nextDouble();,         System.out.println("\nO aluno "+Media(a,b));,     },     public static String Media(double a, double b){,         if ((a+b)/2 >= 6.9) return "passou!";,         else return "não passou!";,     }, }]
[package Exercícios.Lista01;, , import java.util.Scanner;, , public class B {,     public static Scanner in = new Scanner(System.in);,     public static void main(String[] args){,         System.out.print("Digite o primeiro valor: ");,         int a = in.nextInt();,         System.out.print("Digite o segundo valor: ");,         int b = in.nextInt();,         Menor(a,b);,     },     public static void Menor(int a, int b){,         if (a < b) System.out.println("\nO menor é o "+a);,         else if (a > b) System.out.println("\nO menor é "+b);,         else System.out.println("\nAmbos são iguais.");,     }, }]
[package Exercícios.Lista01;, , import java.util.Scanner;, , public class D {,     public static Scanner in = new Scanner(System.in);,     public static void main(String[] args){,         System.out.print("Digite o seu nome: ");,         String a = in.nextLine();,         System.out.print("Digite o seu sobrenome: ");,         String b = in.nextLine();,         System.out.println();,         Nome(a,b);,     },     public static void Nome(String  a,String b){,         for (int i = 0; i < 50; i++) {,             System.out.print(""+a+"\n"+b+"\n");,         },     }, }]
[package Exercícios.Lista01;, , import java.util.Scanner;, , public class K {,     public static Scanner in = new Scanner(System.in);, ,     public static void main(String[] args) {,         System.out.print("Digite os números: ");,         int a = in.nextInt();,         int b = in.nextInt();,         Cor(a,b);,     },     public static void Cor(int a, int b){,         if (a%2 == 0 && b%2 == 0) System.out.println("\nAZUL");,         else if (a%2 != 0 && b%2 != 0) System.out.println("\nVERMELHO");,         else if ((a%2 != 0 && b%2 == 0) || (a%2 == 0 && b%2 != 0)),             System.out.println("\nAMARELO");,     }, }]
[package Exercícios.Lista01;, , import java.util.Scanner;, , public class I {,     public static Scanner in = new Scanner(System.in);, ,     public static void main(String[] args) {,         System.out.print("---- Calculadora Básica --- \n\nDigite o número: ");,         double a = in.nextDouble();,         System.out.print("\n(1)Soma --- (2)Subtração --- (3)Divisão --- (4)Multiplicação\n" +,                 "Digite o número de uma das operações acima: ");,         int b = in.nextInt();,         Rep(a, b);,     },     public static void Rep(double a, int b){,        double c;,         switch (b){,             case 1:,                 System.out.print("\nDigite o próximo número: ");,                 c = in.nextDouble();,                 System.out.println("Resultado: "+(a+c));,             case 2:,                 System.out.print("\nDigite o próximo número: ");,                 c = in.nextDouble();,                 System.out.println("Resultado: "+(a-c));,             case 3:,                 System.out.print("\nDigite o próximo número: ");,                 c = in.nextDouble();,                 System.out.println("Resultado: "+a/c);,             case 4:,                 System.out.print("\nDigite o próximo número: ");,                 c = in.nextDouble();,                 System.out.println("Resultado: "+a*c);,             default :,                 System.out.println("Opção inválida!");,         },     }, }]
[package Exercícios.Lista01;, , import java.util.Scanner;, , public class J {,     public static Scanner in = new Scanner(System.in);, ,     public static void main(String[] args) {,         System.out.print("Digite o seu dia de nascimento: ");,         int dia = in.nextInt();,         System.out.print("Digite o seu mês de nascimento: ");,         int mes = in.nextInt();,         System.out.print("Digite o seu ano de nascimento: ");,         int ano = in.nextInt();, ,         double safadeza = Fat(mes)+(ano/100)*(50-dia);,         double anjo = 1000 - safadeza;, ,         System.out.print("\nSafado: "+safadeza/10+"%");,         System.out.println("\nAnjo: "+anjo/10+"%");,     },     public static int Fat(int mes){,         int a = mes;,         for (int i = mes-1; i > 0; i--) {,             a = a + i;,         },         return a;,     }, }]
[package Exercícios.Lista01;, , import java.util.Scanner;, , public class G {,     public static Scanner in = new Scanner(System.in);, ,     public static void main(String[] args) {,         System.out.print("Digite o número: ");,         int a = in.nextInt();,         Primo(a);,     },     public static void Primo(int a) {,         for(int i=2; i<a; i++) {,             if (a%i!=0),                 continue;,             else,                 System.out.println("Falso");,         },         System.out.println("Verdadeiro");,     }, }]
[package Exercícios.Calculadora.exec;, , import Exercícios.Calculadora.exeptions.DivisionZeroException;, import Exercícios.Calculadora.model.Calculadora;, , public class Principal {, ,     public static void main(String[] args) {, ,         Calculadora calculadora = new Calculadora();, ,         while(true) {, ,             try {,                 System.out.println(calculadora.divide(1, 0));,             } catch (DivisionZeroException e) {,                 System.out.println(e.getMessage());,             }, ,             try {,                 System.out.println(calculadora.divide(4, 2));,             } catch (DivisionZeroException e) {,                 System.out.println(e.getMessage());,             },         },     }, }]
[package Exercícios.Calculadora.model;, , import Exercícios.Calculadora.exeptions.DivisionZeroException;, , public class Calculadora {, ,     public int soma(int a, int b) {,         return a + b;,     }, ,     public int subtrai(int a, int b) {,         return a - b;,     }, ,     public int divide(int a, int b) throws DivisionZeroException {,             if(b == 0) {,                 throw new DivisionZeroException("Não é possível dividir por zero!");,             } else return a / b;,     }, ,     public int multiplica(int a, int b) {,         return a * b;,     }, }]
[package Exercícios.Calculadora.exeptions;, , public class DivisionZeroException extends Exception {, ,     public DivisionZeroException() {,     }, ,     public DivisionZeroException(String message) {,         super(message);,     }, }]
[package Exercícios.Calculadora.exeptions;, , public class NotAOperationException extends Exception {, ,     public NotAOperationException() {,     }, ,     public NotAOperationException(String message) {,         super(message);,     }, }]
[package Exercícios.Calculadora.exeptions;, , public class NotANumberException extends Exception {, ,     public NotANumberException() {,     }, ,     public NotANumberException(String message) {,         super(message);,     }, }]
[/**,  * Itens do jogo.,  * @author Arthur Piccoli, Ítalo Nolasco,  */, public class Item {, 	private final String name;, 	private final String description;, 	private final int weight;, 	,         /**,          * Método construtor de Item.,          * @param name,          * @param description,          * @param weight ,          */, 	public Item(String name, String description, int weight) {, 		this.name = name;, 		this.description = description;, 		this.weight = weight;, 	}, 	,         /**,          * Pega o nome do item.,          * @return name,          */, 	public String getName() {, 		return name;, 	},         ,         /**,          * Pega a descrição do item.,          * @return description,          */,         public String getDescription() {, 		return description;, 	}, 	,         /**,          * Pesa peso do item.,          * @return weight,          */, 	public int getWeight() {, 		return weight;, 	}       , }]
[/**,  * Palavras de comando.,  * @author Arthur Piccoli, Ítalo Nolasco,  */, public enum CommandWord, {,     //Palavras referentes aos seus comandos.,     GO("go"), QUIT("quit"), HELP("help"), UNKNOWN("?"),,     ATTACK("attack"), PICK("pick"), USE("use"), DROP("drop");,     ,     // A string de comando.,     private String commandString;,     ,     /**,      * Inicializa com a palavra de comando correspondente.,      * @param commandWord,      */,     CommandWord(String commandString),     {,         this.commandString = commandString;,     },     ,     /**,      * @return A palavra de comando como String.,      */,     public String toString(),     {,         return commandString;,     }, }]
[/**,  * Chefes do jogo.,  * @author Arthur Piccoli, Ítalo Nolasco,  */, public class Boss extends Character {, 	private static final int maxEnergy = 1000;,         Item item;,         ,         /**,          * Método construtor de Boss.,          * @param name,          * @param energy,          * @param damage,          * @param item ,          */, 	public Boss(String name, int energy, int damage, Item item) {,             super(name, energy, damage, 0);,             this.item = item;, 	}, 	,         /**,          * Pega a máxima energia do chefe.,          * @return maxEnergy,          */,         @Override, 	public int getMaxEnergy() {,             return maxEnergy;, 	}, ,         /**,          * Printa os dados do chefe.,          */    , 	@Override, 	public void print() {,             System.out.println("#####################");,             System.out.println("# Boss' Data");,             super.print();, 	},         ,         /**,          * Dropa o item do chefe na sala.,          * @param currentRoom ,          */,         @Override,         public void whenDies(Room currentRoom){,             currentRoom.setItem(item);,         }, }]
[import java.util.HashMap;, , /**,  * Mapa com todas as palavras de controle ,  * @author Arthur Piccoli, Ítalo Nolasco,  */, public class CommandWords, {,     private HashMap<String, CommandWord> validCommands;, ,     /**,      * Método construtor da classe CommandWords.,      */,     public CommandWords(),     {,         validCommands = new HashMap<String, CommandWord>();,         for(CommandWord command : CommandWord.values()) {,             if(command != CommandWord.UNKNOWN) {,                 validCommands.put(command.toString(), command);,             },         },     }, ,     /**,      * Encontra o comando associado a CommandWord.,      * @param commandWord,      * @return O comando correspondente ao CommandWord, ou UNKNOWN se for desconhecido.,      */,     public CommandWord getCommandWord(String commandWord),     {,         CommandWord command = validCommands.get(commandWord);,         if(command != null) {,             return command;,         },         else {,             return CommandWord.UNKNOWN;,         },     },     ,     /**,      * Checa se é um comando válido,      * @return Verdadeiro se for um comando válido.,      */,     public boolean isCommand(String aString),     {,         return validCommands.containsKey(aString);,     }, ,     /**,      * Printa na tela todos os comandos válidos.,      */,     public void showAll() ,     {,         for(String command : validCommands.keySet()) {,             System.out.print(command + "  ");,         },         System.out.println();,     }, }]
[/**,  * Classe de itens compráveis.,  * @author Arthur Piccoli, Ítalo Nolasco,  */, public class Buyable {,     int price;,     Item item;,     ,     /**,      * Método construtor de Buyable,      * @param item,      * @param price ,      */,     public Buyable(Item item, int price){,         this.price = price;,         this.item = item;,     },     ,     /**,      * Pega preço referente ao item.,      * @return price,      */,     public int getPrice(){,         return price;,     },     ,     /**,      * Pega item Buyable.,      * @return item,      */,     public Item getItem(){,         return item;,     }, }]
[/**,  * Gerencia os comandos do jogo,  * @author Arthur Piccoli, Ítalo Nolasco,  */, public class Command, {,     private CommandWord commandWord;,     private String secondWord;, ,     /**,      * Método construtor de Command,      * @param commandWord,      * @param secondWord ,      */,     public Command(CommandWord commandWord, String secondWord),     {,         this.commandWord = commandWord;,         this.secondWord = secondWord;,     }, ,     /**,      * Pega a palavra de comando.,      * @return commandWord,      */,     public CommandWord getCommandWord(),     {,         return commandWord;,     }, ,     /**,      * Pega a segunda palavra de comando, ou seja, nome do item, sala ou inimigo a ser atacado.,      * @return secondWord.,      */,     public String getSecondWord(),     {,         return secondWord;,     }, ,     /**,      * @return Verdadeiro se a palavra de comando é desconhecida.,      */,     public boolean isUnknown(),     {,         return (commandWord == CommandWord.UNKNOWN);,     }, ,     /**,      * @return Verdadeiro se há segunda palavra.,      */,     public boolean hasSecondWord(),     {,         return (secondWord != null);,     }, }, ]
[import java.util.HashMap;, import java.util.Map;, , /**,  * Personagem principal, herói.,  * @author Arthur Piccoli, Ítalo Nolasco,  */, public class Hero extends Character {, 	private int maxEnergy;, 	private final int maxWeight;, 	private Map<String, Item> inventory;, 	,         /**,          * Método construtor de Hero.,          * @param name,          * @param energy,          * @param damage,          * @param gold ,          */, 	public Hero(String name, int energy, int damage, int gold) {, 		super(name, energy, damage, gold);,                 maxEnergy = 10;,                 maxWeight = 15;, 		inventory = new HashMap();, 	},         ,         /**,          * Pega uma string contendo o inventário do herói.,          * @return returnString,          */,         public String getInventoryString() {,             String returnString = "You:\nInventory:";,             for(String name : inventory.keySet()) {,                     returnString += " " + name;,             },             returnString += "\nGold: " + gold;,             returnString += "\nEnergy: " + energy;,             returnString += "\nWeight: " + calculateWeight();,             return returnString;,         }, 	,         /**,          * Calacula o peso do inventário.,          * @return Peso total.,          */, 	public int calculateWeight() {, 		int totalWeight = 0 ,goldWeight =0 ;, 		for(Item item : inventory.values()) {, 			totalWeight += item.getWeight();, 		},                 if(gold!=0),                 goldWeight = (gold/1000)+1;, 		return (totalWeight + goldWeight);, 	}, 	,         /**,          * Adiciona um item ao inventário.,          * @param item,          * @param room ,          */, 	public void setItem(Item item, Room room) {,             if("store".equals(room.getShortDescription())){,                 inventory.put(item.getName(), item);,             }else{, 		if (calculateWeight() + item.getWeight() <= getMaxWeight()) {, 			inventory.put(item.getName(), item);,                         System.out.println(room.getLongDescription());,                     System.out.println(getInventoryString());,             System.out.println("\nYou've got " + item.getDescription() + "!");, 		} else {,                     ,                     room.setItem(item);,                     ,                     System.out.println(room.getLongDescription());,                     System.out.println(getInventoryString());, 			System.out.println("You can't carry more items, you're too heavy!\n",                                 + "Like a diet is not in your plans drop something from your inventory.");,                         , 		},             },         }, 	,         /**,          * Remove item do inventário,          * @param nome,          * @return item,          */, 	public Item removeItem(String nome) {, 		Item item = inventory.get(nome);, 		if (item != null), 			inventory.remove(nome);, 		else, 			System.out.println("'" + nome + "' is not in your inventory!\n");, 		return item;, 	},         ,         /**,          * Pega item do inventário.,          * @param nome,          * @return item,          */,         public Item getItem(String nome) {, 		Item item = inventory.get(nome);, 		if (item == null),                     if(!"controller".equals(nome)), 			System.out.println("'" + nome + "' is not in your inventory!\n");, 		return item;, 	}, 	,         /**,          * Restaura a vida do herói.,          * @param energyRestore ,          */,         public void setEnergyRestore(int energyRestore) {,             energy += energyRestore;,             System.out.println("You've restored your energy in " + energyRestore + " points!");,             if(energy >= getMaxEnergy()){,                 energy = getMaxEnergy();,                 System.out.println("Your energy is full!");,             }else{,                 System.out.println("Your energy is now " + energy + "!");,             } , 	},         ,         /**,          * Seta o novo dano do herói,          * @param damage ,          */,         public void setDamage(int damage){,             this.damage = damage;,         }, 	,         /**,          * Método que desenvolve a luta entre heróis e inimigos.,          * @param enemy ,          */, 	public void fight(Character enemy) {,             enemy.decrease(getDamage());,             int heroData = luck(6);,             int enemyData = luck(6);,             if (heroData < enemyData)  // Quando o oponente vence, 		decrease(enemy.getDamage()); // Na energy do proprio heroi, 	} ,         ,         /**,          * Equipa arma no personagem.,          * @param weapon ,          */,         public void useWeapon(Weapon weapon){            ,             setDamage(weapon.getDamage());,             System.out.println("Now you are using a " + weapon.getName() + " as your weapon!");        ,             System.out.println("Your damage is now " + weapon.getDamage() + ".");,         },         ,         /**,          * Usa uma chave.,          * @param key,          * @param currentRoom ,          */,         public void useKey(Key key, Room currentRoom){,             String message;,             if(currentRoom==key.getEntry()){,                 message=key.getMessage();,                 currentRoom.setExit(key.getDestinyName(), key.getDestiny());,                 System.out.println(currentRoom.getLongDescription());,                 removeItem(key.getName());,                 System.out.println(getInventoryString());,                 System.out.println(message);, ,             }else,                 System.out.println("The "+ key.getName() +" cannot be used here.");,         }, 	,         /**,          * Equipa a armardura no herói.,          * @param armor ,          */,         public void useArmor(Armor armor){,             setMaxEnergy(armor.getNewMaxEnergy());,             System.out.println("Now you are using a " + armor.getName() + " as your armor!");,             System.out.println("Your max energy is now " + armor.getNewMaxEnergy() + ".");,         },         ,         /**,          * Usa um item consumível.,          * @param consumable ,          */,         public void useConsumable(Consumable consumable){,             setEnergyRestore(consumable.getEnergyRestore());,             removeItem(consumable.getName());,         },         ,         /**,          * Seta a energia inicial do herói.,          */,         public void setDefaultArmor(){,             setMaxEnergy(10);,             if(energy > getMaxEnergy()),                 energy = getMaxEnergy();,             System.out.println("Your energy is now " + energy + "!");,         },         ,         /**,          * Seta o dano inicial do herói.,          */,         public void setDefaultDamage(){,             setDamage(1);,             System.out.println("Your damage is now 1!");,         },         ,         /**,          * Imprime os dados do herói na tela.,          */,         @Override, 	public void print() {, 		System.out.println("#####################");, 		System.out.println("# Hero's Data");, 		super.print();, 	},         , 	/**,          * Pega a energia máxima do herói.,          * @return maxEnergy,          */,         @Override, 	public int getMaxEnergy() {, 		return maxEnergy;,         },         ,         /**,          * Define a energia máxima do herói.,          * @param maxEnergy ,          */,         public void setMaxEnergy(int maxEnergy){,             this.maxEnergy=maxEnergy;,         },         ,         public int getMaxWeight(){,             return maxWeight;,         }, }]
[import java.util.Random;, , /**,  * Personagens do jogo.,  * @author Arthur Piccoli, Ítalo Nolasco,  */, public abstract class Character {, 	private String name;, 	int energy, damage, gold;, , 	private static Random data = new Random();, 	,         /**,          * Método construtor de Character.,          * @param name,          * @param energy,          * @param damage,          * @param gold ,          */, 	public Character(String name, int energy, int damage, int gold) {, 		this.name = name;,                 this.damage = damage;, 		this.energy = energy;,                 this.gold = gold;, 	}, 	,         /**,          * Pega nome do personagem.,          * @return name,          */, 	public String getName() {, 		return name;, 	},         ,         /**,          * Pega dano causado pelo persoangem.,          * @return damage,          */,         public int getDamage(){,             return damage;,         },         ,         /**,          * Pega a quantidade de Gold do personagem.,          * @return gold,          */,         public int getGold() {, 		return gold;, 	},         ,         /**,          * Adiciona gold ao personagem.,          * @param gold ,          */,         public void addGold(int gold) {, 		this.gold+=gold;, 	}, 	,         /**,          * Pega energia atual do personagem.,          * @return energy,          */, 	public int getEnergy() {, 		return energy;, 	}, 	,         /**,          * Flag para saber se o personagem está morto.,          * @return true ou falso,          */, 	public boolean isDead() {, 		if (energy == 0), 			return true;, 		else, 		    return false;, 	}, 	,         /**,          * Método abstrato para pegar a energia máxima do personagem.,          * @return Energia máxima,          */, 	public abstract int getMaxEnergy();, 	,         /**,          * Decrementa a energia do personagem dependendo do dano.,          * @param dano ,          */, 	public void decrease(int dano) {, 		if (energy > 0), 			energy-= dano;, 		if (energy < 0),                     energy = 0;, 	}, 	,         /**,          * Sorte utilizada para o método luta.,          * @param valorMaximo,          * @return Valor aleatório,          */, 	public int luck(int valorMaximo) {, 		return data.nextInt(valorMaximo) + 1;, 	},         ,         /**,          * Mata o personagem.,          */,         public void kill(){,             energy=0;,         },         ,         /**,          * Método que define o que acontece quando o personagem morre.,          * @param currentRoom ,          */,         public void whenDies(Room currentRoom){}, 	,         /**,          * Printa nome e energia do personagem.,          */,  	public void print() {, 		System.out.println("#####################");, 		System.out.println("# Name: " + name);, 		System.out.println("# Energy: " + energy);, 		System.out.println("#####################");, 	}, }]
[import java.util.Set;, import java.util.HashMap;, , /**,  * Sala do jogo.,  * @author Arthur Piccoli, Ítalo Nolasco,  */, , public class Room , {,     private String description;,     private HashMap<String, Room> exits;      ,     private HashMap<String, Character> enemies;,     private HashMap<String, Item> itens;,     private int gold;,     ,     /**,      * Método construtor de Room.,      * @param description,      */,     public Room(String description) ,     {,         this.description = description;,         exits = new HashMap<String, Room>();,         enemies = new HashMap<String, Character>();,         itens = new HashMap<String, Item>();,         gold = 0;,     }, ,     /**,      * Seta a saída da sala atual.,      * @param direction,      * @param neighbor,      */,     public void setExit(String direction, Room neighbor) ,     {,         exits.put(direction, neighbor);,     }, ,     /**,      * Pega o nome da sala.,      * @return description,     */,     public String getShortDescription(),     {,         return description;,     }, ,     /**,      * Adiciona gold à sala.,      * @param gold ,      */,     public void addGold(int gold) ,     {,         this.gold+=gold;,     },     ,     /**,      * Pega gold da sala.,      * @return auxGold (gold),      */,     public int getGold() ,     {,         int auxGold = gold;,         gold =0;,         return auxGold;,     },     /**,      * Pega a sala e imprime no seguinte formato:,      * @return Descrição completa da sala.,      */,     public String getLongDescription(),     {,         return "\nYou are " + description + "!\n",                 + "\nRoom:\n",                 + getExitString() + "\n",                 + getEnemiesString() + "\n",                 + getItens() + "\n",                 + "Gold: " + gold+"\n";,     }, ,     /**,      * Pega as saídas da sala atual em forma de String.,      * @return String com as saídas disponíveis.,      */,     private String getExitString(),     {,         String returnString = "Exits:";,         Set<String> keys = exits.keySet();,         for(String exit : keys) {,             returnString += " " + exit;,         },         return returnString;,     }, ,     /**,      * Return the room that is reached if we go from this room in direction,      * "direction". If there is no room in that direction, return null.,      * @param direction The exit's direction.,      * @return The room in the given direction.,      */,     public Room getExit(String direction) ,     {,         return exits.get(direction);,     },     ,     /**,      * Seta um inimigo na sala.,      * @param personagem ,      */,     public void setEnemy(Character personagem) {,     	enemies.put(personagem.getName(), personagem);,     },     ,     /**,      * Seta um item na sala.,      * @param item ,      */,     public void setItem(Item item) {,     	itens.put(item.getName(), item);,     },     ,     /**,      * Pega uma String com todos inimigos da sala.,      * @return String com inimigos.,      */,     private String getEnemiesString() {,     	String returnString = "Enemies:";,     	for(String nome : enemies.keySet()) {,     		returnString += " " + nome;,     	},     	return returnString;,     },     ,     /**,      * Pega um Map de inimigos.,      * @return enemies,      */,     public HashMap getEnemiesMap() {,     	return enemies;,     },     ,     /**,      * Pega um objeto tipo Character referente ao inimigo passado como parâmetro.,      * @param name,      * @return Character do inimigo.,      */,     public Character getEnemy(String name) {,     	return enemies.get(name);,     },     /**,      * Entra com o nome do inimigo e remove-o,      * @param name ,      */,     public void removeEnemy(String name) {,     	enemies.remove(name);,     },     ,     /**,      * Pega uma String com os itens da sala.,      * @return lista,      */,     private String getItens() {,     	String lista = "Itens:";,     	for(String nome : itens.keySet()) {,     		lista += " " + nome;,     	},     	return lista;,     },     ,     /**,      * Pega um objeto tipo Item correspondente ao item passado por parâmetro.,      * @param name,      * @return O item que foi removido,      */,     public Item getItem(String name) {,     	return itens.remove(name);,     },     ,   , }, ]
[import java.util.HashMap;, import java.util.Map;, , /**,  * Cria e inicializa todas outras classes do jogo, inicializando assim o jogo.,  * @author Arthur Piccoli, Ítalo Nolasco,  */, public class Game , {,     private Parser parser;,     private Room currentRoom;,     private Hero hero;,     private Map<String, Buyable> store;,         ,     /**,      * Método construtor da classe Game.,      */,     public Game() ,     {,         createRooms();,         parser = new Parser();,         hero = new Hero("You", 8, 1, 0);,         store = new HashMap();,         createStore();      ,         ,     },     ,     /**,      * Cria a loja do jogo.,      */,     private void createStore(){,         Buyable revolver = new Buyable(new Weapon("revolver", "a revolver that was used by Django himself", 10, 500), 500);,         Buyable cake = new Buyable(new Consumable("cake", "the cake, that cake", 0, 0), 50);,         Buyable cloak = new Buyable(new Armor("cloak", "a cloak that will make you almost invencible", 2, 1000), 1000);,         Buyable cheese = new Buyable(new Consumable("cheese", "a piece of cheese, use DoTA for reference", 3, 1000), 10);,         Buyable potion = new Buyable(new Consumable("potion", "a potion like any other potion in RPGs", 1, 50), 50);,                 ,         store.put("revolver", revolver);,         store.put("cake", cake);,         store.put("cloak", cloak);,         store.put("cheese", cheese);,         store.put("potion", potion);,     },     ,     /**,      * Cria as salas do jogo.,      */,     private void createRooms(),     {,         Room living, kitchen, corridor, basementFront, bathroom, bedroom, yard, outside, basement, store2,,                 underworld, store1, bifurcation1, forest, valley, bifurcation2, dungeon, castle, backroom, castleFront;,       ,         // create the rooms,         //House,         living = new Room("in a regular living room with a giant 55'' TV");,         kitchen = new Room("in a kitchen, here's suposed to have food and everything you could forgot in here");,         corridor = new Room("in a corridor that leads to your bedroom and the bathroom");,         bathroom = new Room("in a bathroom, maybe there's something useful here");,         bedroom = new Room("in in your bedroom, pick your stuff");,         yard = new Room("in the front yard, you can go back inside for an marvelous adventure or go outside for the real world");,         outside = new Room("GAME OVER");,         basement = new Room("in the basement, this may have been closed for decades");,         basementFront = new Room("in front of the basement, but first you must have the key to open it");,         ,         //Underworld,         underworld = new Room("in the underworld, maybe you shouldn't have opened that can");,         store1 = new Room("STORE");,         store2 = new Room("STORE");,         bifurcation1 = new Room("with an option ahead of you, choose wisely, you can't come back,\nYou can go left for an enchantred forest or right for a death valley");,         forest = new Room("in the forest, just 'cause it's enchantred doesn't mean it has good things");,         valley = new Room("DEAD");   ,         bifurcation2 = new Room("almost there, you kind of made it through the most dificult part of the game");,         dungeon = new Room("in the dungeon, maybe you'll find some skeletons, like any RPG");,         castleFront = new Room("in front of brand new castle, but you need a lever to open it,\n",                 + "That's why there's a dungeon in the other direction");,         castle = new Room("in Mr. Cthulu's King of the Underworld and Root of the Evil Castle, do your best now");,         backroom = new Room("in Cthulu's bedroom maybe, I don't know if these kind of criature sleeps anyway.\n",                 + "But hey, here's your controller");,         ,         //room exits,         //House,         living.setExit("kitchen", kitchen);,         living.setExit("corridor", corridor);,         living.setExit("yard", yard);,         living.setExit("basement", basementFront);,         ,         basementFront.setExit("back", living);,         basement.setExit("back", living);,         ,         corridor.setExit("back", living); ,         corridor.setExit("bedroom", bedroom);,         corridor.setExit("bathroom", bathroom);,         ,         bathroom.setExit("back", corridor);,         bedroom.setExit("back", corridor);, ,         yard.setExit("inside", living);,         yard.setExit("outside", outside);,         ,         kitchen.setExit("back", living);,         ,         //Underworld,         underworld.setExit("upworld", basement);,         underworld.setExit("store", store1);,         underworld.setExit("track", bifurcation1);,         ,         bifurcation1.setExit("forest", forest);,         bifurcation1.setExit("valley", valley);,         bifurcation1.setExit("back", underworld);,         ,         store1.setExit("back", underworld);,         store2.setExit("back", bifurcation2);,         ,         forest.setExit("track", bifurcation2);,         ,         valley.setExit("track", bifurcation2);,         ,         bifurcation2.setExit("dungeon", dungeon);,         bifurcation2.setExit("castle", castleFront);,         bifurcation2.setExit("store", store2);,         ,         dungeon.setExit("back", bifurcation2);,         ,         castleFront.setExit("back", bifurcation2);  ,         castle.setExit("backroom", backroom);,         ,         //Enemys,         Character elf = new Enemy("elf", 10, 2, 250);,         Character tree = new Enemy("tree", 20, 3, 750);,         Boss mushroom = new Boss("mushroom", 30, 5, new Consumable("allucinogen", "use it... you'll see", 1, -5));,         ,         Character skull = new Enemy("skull", 40, 1, 100);,         Character goblin = new Enemy("goblin", 30, 3, 300);,         Boss skeleton = new Boss("skeleton", 50, 10,  new Weapon("bone", "a leg bone to use as a weapon", 3, 100));                          ,         ,         Boss cthulhu = new Boss("cthulhu", 1000, 1000, new Item("staff", "staff of universal omniscience!\nYou can use it to discover where is your controller", 4));,         ,         forest.setEnemy(elf);,         forest.setEnemy(tree);,         forest.setEnemy(mushroom);,         ,         dungeon.setEnemy(skeleton);,         dungeon.setEnemy(goblin);,         dungeon.setEnemy(skull);,         ,         castle.setEnemy(cthulhu);,         ,         //Items and Gold,         ,         Item plunger = new Weapon("plunger", "a plunger that should be used just in case shit happens", 3, 8);,         bathroom.setItem(plunger);,        ,         Item hoodie = new Armor("hoodie", "a hoodie your grandma gave you on last christmas", 6, 30);,         bedroom.setItem(hoodie);,         bedroom.addGold(160);, ,         Item controller = new Item("controller", "your so beloved controller, CONGRATULATIONS, you've beaten the game", 0);,         backroom.setItem(controller);,         ,         Item pie = new Consumable("pie", "food used to restore your miserable life", 1, 10);,         kitchen.setItem(pie);, ,         Item coke = new Consumable("coke", "drink a lot, it's just give a cancer", 2, 5);,         kitchen.setItem(coke);        ,                  ,         //Keys,         Item can= new Key ("can", "a coke can dated back to the 80s, use it, just do it", 1, basement, underworld, "portal", "That can actually opened a portal, who know what is inside of it!");,         basement.setItem(can);,          ,         Item key= new Key ("key", "a key to the basement", 1, basementFront, basement, "in", "You've opened the door!");,         kitchen.setItem(key);    ,         ,         Item lever= new Key ("lever", "a lever to the castle", 1, castleFront, castle, "in", "You've opened the castle!");,         dungeon.setItem(lever);,         ,         currentRoom = living;  // começa o jogo na sala de estar,   ,         ,     }, ,     /**,      *  Rotina play.,      */,     public void play() ,     {            ,         printWelcome();, ,         // Enter the main command loop.  Here we repeatedly read commands and,         // execute them until the game is over.,                 ,         boolean finished = false;,         while (! finished) {,             Command command = parser.getCommand();,             finished = processCommand(command);,             ,             //testa se ta na sala q acaba o jogo ou pegou o controle,            if("GAME OVER".equals(currentRoom.getShortDescription())),                finished = true;,            if(hero.getItem("controller")!=null),                finished = true;,         },         System.out.println("That's all Folks!");,     }, ,     /**,      * Imprime a mensagem de boas vindas ao jogador.,      */,     private void printWelcome(),     {,         System.out.println("Welcome to the Mighty Andventures of the Regular Everyday Normal Dude!");,         System.out.println("The controller for your TV is missing, today's mission is to find it.");,         System.out.println("Type '" + CommandWord.HELP + "' if you need help.");,         System.out.println(currentRoom.getLongDescription());,         System.out.println(hero.getInventoryString());,     }, ,     /**,      * Dá e processa os comandos do jogo.,      * @param command,      * @return Verdadeiro se o comando encerra o jogo, falso em outras situações.,      */,     private boolean processCommand(Command command) ,     {,         boolean wantToQuit = false;, ,         CommandWord commandWord = command.getCommandWord();, ,         if(null != commandWord) switch (commandWord) {,             case UNKNOWN:,                 System.out.println("Dafuq you said?");,                 return false;,             case HELP:,                 printHelp();,                 break;,             case GO:,                 goRoom(command);,                 break;,             case QUIT:,                 wantToQuit = quit(command);,                 break;,             case ATTACK:,                 attack(command);,                 break;,             case PICK:,                 pickItem(command);,                 break;,             case USE:,                 useItem(command);,                 break;,             case DROP:,                 dropItem(command);,                 break;,             default:,                 break;,         },         return wantToQuit;,     },     ,     /**,      * Pega item da sala.,      * @param command ,      */,     private void pickItem(Command command){,         ,         if (!command.hasSecondWord()) {,     		System.out.println("Pick what?");,     		return;,     	},         ,         String itemName = command.getSecondWord();,         if("gold".equals(itemName)){,             hero.addGold(currentRoom.getGold());,             System.out.println(currentRoom.getLongDescription());,             System.out.println(hero.getInventoryString());,             return;,         },         ,         Item item;,         if("STORE".equals(currentRoom.getShortDescription())){,             Buyable buyable = (Buyable) store.get(itemName);,             if(buyable != null){,                 item=buyable.getItem();,                 if(buyable.getPrice()>hero.getGold()){,                     System.out.println("You don't have that much gold");,                 },                 else{,                     if(hero.calculateWeight() + item.getWeight() <= hero.getMaxWeight()){,                         hero.addGold(-(buyable.getPrice()));,                         hero.setItem(item, currentRoom);,                         store.remove(itemName);,                         System.out.println(hero.getInventoryString());,                         String returnString = "\nStore:";,                         for(String name : store.keySet()) {,                             returnString += "\nItem: " + name + "\nPrice: " + store.get(name).getPrice() +"\n";,                         },                         System.out.println(returnString);,                     },                     else,                         System.out.println("You are too heavy, drop your stuff outside and comeback!");,                 },             },             else,                 System.out.println("There's no '"+ command.getSecondWord() +"' for you to buy here.");,         },         else{,             item=currentRoom.getItem(itemName);,             if (item != null) ,                 hero.setItem(item, currentRoom);            ,             else,                 System.out.println("There's no '"+ command.getSecondWord() +"' in the current room.");,         },     },     ,     /**,      * Dropa o item na sala,,      * @param command ,      */,     private void dropItem(Command command){,         if (!command.hasSecondWord()) {,             System.out.println("Drop what?");,             return;,     	},         ,         if("STORE".equals(currentRoom.getShortDescription())),             System.out.println("You can't drop things here, it's a store, think a little bit for god's sake!");,         else{        ,             String itemName = command.getSecondWord();,             Item item =hero.getItem(itemName);, ,             if (item != null) {,                 System.out.println("You've dropped " + item.getDescription());,                 if("class Armor".equals(item.getClass().toString())){,                     hero.setDefaultArmor();,                 } else if("class Weapon".equals(item.getClass().toString())){,                     hero.setDefaultDamage();,                 },                 currentRoom.setItem(item);,                 hero.removeItem(itemName);,             },         },     },     ,     /**,      * Usa item.,      * @param command ,      */,     private void useItem(Command command){,         if (!command.hasSecondWord()) {,             System.out.println("Use what?");,             return;,     	},         ,         String itemName = command.getSecondWord();        ,         Item item = hero.getItem(itemName);,         ,         if (item != null) {,             if(null != item.getClass().toString())switch (item.getClass().toString()) {,                 case "class Key":,                     hero.useKey((Key) item, currentRoom);,                     break;,                 case "class Armor":,                     hero.useArmor((Armor) item);,                     break;,                 case "class Weapon":,                     hero.useWeapon((Weapon) item);,                     break;,                 case "class Consumable":,                     hero.useConsumable((Consumable) item);,                     break;,                 default:,                     System.out.println("Your controller is in the next room, omniscience rules!");,                     break;,             },         },     },     ,     /**,      * Imprime na tela as informações de ajuda.,      */,     ,     private void printHelp(){,         System.out.println("You are desperated to watch TV!");,         System.out.println("Find your controller.");,         System.out.println();,         System.out.println("Your command words are:");,         parser.showCommands();,     }, ,     /** ,      * Vai para a nova sala ou exibe uma mensagem de erro.,      */,     private void goRoom(Command command){,         if(!command.hasSecondWord()) {,             System.out.println("Go where?");,             return;,         }, ,         String direction = command.getSecondWord();, ,         Room nextRoom = currentRoom.getExit(direction);, ,         if (nextRoom == null) {,             System.out.println("There's nothing with that name that you can go from here!");,         },         else {            ,             if(!hero.isDead()){,                 if(!"[]".equals(currentRoom.getEnemiesMap().keySet().toString())){,                     System.out.println("You must first fight the enemies!");,                     return;,                 },             },             ,             currentRoom.getEnemiesMap().keySet().toString();,             currentRoom = nextRoom;,             ,             if("STORE".equals(currentRoom.getShortDescription())){,                 System.out.println("\nYou are in a store, capitalism in underworld is a thing too!");,                 System.out.println("For you to pick items here you must have enough gold (oh really?).\n");,                 System.out.println(hero.getInventoryString());,                 String returnString = "\nStore:";,                 for(String name : store.keySet()) {,                     returnString += "\nItem: " + name + "\nPrice: " + store.get(name).getPrice() +"\n";,                 },                 System.out.println(returnString);,             },             else if("GAME OVER".equals(currentRoom.getShortDescription())){,                 System.out.println("\n"+ currentRoom.getShortDescription());,                 System.out.println("\nYou chose to go out and get a life!\n",                         + "This game is not intended for you!\nNext time just search for the damn controller!");,             },             else if("DEAD".equals(currentRoom.getShortDescription())){,                 hero.kill();,                 System.out.println("\nThat death word in Death valley actually means DEATH!\nSo as you may have detucted already:");,                 System.out.println("You are dead!\nBut the upworld rules means nothing here, so go on, enjoy 'life' without a body!");,                 System.out.println("Just reminding you again:");,                 System.out.println(currentRoom.getLongDescription());,                 System.out.println(hero.getInventoryString());                ,             },             else{,                 System.out.println(currentRoom.getLongDescription());,                 System.out.println(hero.getInventoryString());,             },             ,         },     }, ,     /** ,      * Sai do jogo.,      * @return Verdadeiro se o comando for de quit.,      */,     private boolean quit(Command command) ,     {,         if(command.hasSecondWord()) {,             System.out.println("Quit what?");,             return false;,         },         else {,             return true;  // signal that we want to quit,         },     },  ,     /**,      * Ataca um inimigo.,      * @param command ,      */,     private void attack(Command command) {,         ,     	Character enemy;,     	if(hero.isDead()){,             System.out.println("You can't attack anyone, you're dead, have you ever seen a ghost doing anything?");,         }else{,             if (!command.hasSecondWord()) {,     		System.out.println("Attack who?");,     		return;,             },     	,             enemy = currentRoom.getEnemy(command.getSecondWord());,             if (enemy != null) {,                     hero.fight(enemy);, ,                     if(enemy.isDead()){,                         enemy.whenDies(currentRoom);,                         currentRoom.removeEnemy(command.getSecondWord());,                         System.out.println("\nThat enemy of yours, " + command.getSecondWord() + " is dead!\n");,                         if(hero.isDead()){,                             System.out.println("\nBut you died in the 'process' of killing him.\nAnyway, the upworld rules means nothing here, so go on, enjoy 'life' without a body\n");,                         },                         System.out.println(currentRoom.getLongDescription());,                         System.out.println(hero.getInventoryString());,                     }else if(hero.isDead()){,                         System.out.println("\nYou are dead!\nBut the upworld rules means nothing here, so go on, enjoy 'life' without a body\n");,                         System.out.println(currentRoom.getLongDescription());,                         System.out.println(hero.getInventoryString());,                     }else{,                         hero.print();,                         enemy.print();  ,                     }, ,             } ,             else {,                 System.out.println("The enemy '"+ command.getSecondWord() +"' is not in the current room.");,             },         },     },     ,     /**,      * Método main.,      * @param args,      */,     public static void main(String[] args) {, 	Game game = new Game();, 	game.play();,     }, 	, }]
[/**,  * Itens consumíveis.,  * @author Arthur Piccoli, Ítalo Nolasco,  */, public class Consumable extends Item {,     private final int energyRestore;,     ,     /**,      * Método construtor de Consumable,      * @param name,      * @param description,      * @param weight,      * @param energyRestore ,      */,     public Consumable(String name, String description, int weight, int energyRestore){,         super(name,description,weight);,         this.energyRestore = energyRestore;,     }        ,     ,     /**,      * Pega a energia a ser restaurada.,      * @return energyRestore,      */,     public int getEnergyRestore(){,         return energyRestore;,     }    , }]
[/**,  * Armas do personagem.,  * @author Arthur Piccoli, Ítalo Nolasco.,  */, , public class Weapon extends Item{,     private final int damage;,     ,     /**,      * Método construtor de Weapon.,      * @param name,      * @param description,      * @param weight,      * @param damage ,      */,     public Weapon(String name, String description, int weight, int damage) {,         super(name, description, weight);,         this.damage = damage;,     }, ,     /**,      * Pega o dano concedido pela arma.,      * @return damage,      */,     public int getDamage(){,         return damage;,     }, }]
[/**,  * Inimigos do jogo.,  * @author Arthur Piccoli, Ítalo Nolasco,  */, public class Enemy extends Character {, 	private static final int maxEnergy = 20;,         ,         /**,          * Método construtor de Enemy,          * @param name,          * @param energy,          * @param damage,          * @param gold ,          */, 	public Enemy(String name, int energy, int damage, int gold) {,             super(name, energy, damage, gold);, 	}, 	,         /**,          * Pega a máxima energia do inimigo.,          * @return maxEnergy,          */,         @Override, 	public int getMaxEnergy() {,             return maxEnergy;, 	},         ,         /**,          * Printa os dados do inimigo.,          */, 	@Override, 	public void print() {,             System.out.println("#####################");,             System.out.println("# Enemy's Data");,             super.print();, 	},         ,         /**,          * Quando o inimigo morre adiciona sua quantidade de gold na sala.,         */,         @Override,         public void whenDies(Room currentRoom){,             currentRoom.addGold(getGold());,         }, }]
[/**,  * Armaduras do personagem.,  * @author Arthur Piccoli, Ítalo Nolasco,  */, public class Armor extends Item{,     private final int newMaxEnergy;,     ,     /**,      * Método construtor de Armor.,      * @param name,      * @param description,      * @param weight,      * @param maxEnergy ,      */,     public Armor(String name, String description, int weight, int maxEnergy) {,         super(name,description,weight);,         this.newMaxEnergy = maxEnergy;,     },     ,     /**,      * Pega a nova energia máxima concedida pela armadura.,      * @return newMaxEnergy ,      */,     public int getNewMaxEnergy(){,         return newMaxEnergy;,     }       , }]
[import java.util.Scanner;, , /**,  * Lê a entrada do usuário e analiza no contexto do jogo.,  * @author Arthur Piccoli, Ítalo Nolasco,  */, public class Parser , {,     private CommandWords commands; ,     private Scanner reader;         , ,     /**,      * Método construtor de Parser.,      */,     public Parser() ,     {,         commands = new CommandWords();,         reader = new Scanner(System.in);,     }, ,     /**,      * Lê o comando do usuário.,      * @return O próximo comando do usuário,      */,     public Command getCommand() ,     {,         String inputLine;   // Armazanea a linha inteira.,         String word1 = null;,         String word2 = null;, ,         System.out.print("> ");     // print prompt, ,         inputLine = reader.nextLine();, ,         // Escaneia as duas palavras escritas na tela.,         Scanner tokenizer = new Scanner(inputLine);,         if(tokenizer.hasNext()) {,             word1 = tokenizer.next();      // Pega a primeira palavra,             if(tokenizer.hasNext()) {,                 word2 = tokenizer.next();      // Pega a segunda palavra.,             },         }, ,         return new Command(commands.getCommandWord(word1), word2);,     }, ,     /**,      * Printa na tela todos os comandos válidos.,      */,     public void showCommands(),     {,         commands.showAll();,     }, }]
[/**,  * Chaves das salas do jogo.,  * @author Arthur Piccoli, Ítalo Nolasco,  */, public class Key extends Item {,     private final Room entry, destiny;,     private final String destinyName, message;,     ,     /**,      * Método construtor de Key,      * @param name,      * @param description,      * @param weight,      * @param entry,      * @param destiny,      * @param destinyName,      * @param message ,      */,     public Key(String name, String description, int weight, Room entry, Room destiny, String destinyName, String message){,         super(name, description, weight);,         this.entry = entry; //sala q tem q estar pra abrir,         this.destiny = destiny; // oq abre,         this.destinyName = destinyName; // nome q vai aparecer pra entrar na sala q abriu,         this.message = message; //pra printar na tela q funcionou,     },     ,     /**,      * Pega a sala em que a chave será usada.,      * @return entry,      */,     public Room getEntry(){,         return entry;,     },     ,     /**,      * Pega a sala destino da porta que será aberta,      * @return desiny,      */,     public Room getDestiny(){,         return destiny;,     },     ,     /**,      * Pega o nome da sala destino.,      * @return destinyName,      */,     public String getDestinyName(){,         return destinyName;,     },     ,     /**,      * Mensagem que será impressa na tela após o uso da chave,      * @return message,      */,     public String getMessage(){,         return message;,     }    , }]
[package exemploconversao;, , , public class ExemploConversao {, ,     public static void main(String[] args) {,         String valor = "123";,         int resultado = Integer.parseInt(valor) * 2;,         System.out.println(resultado);,         int qtd;,         String qtdDigitada = "233";,         qtd = Integer.parseInt(qtdDigitada);,         ,         ,         String strQtd;,         strQtd = Integer.toString(qtd);,         for (int i = 0; i < 10; i++) {,             ,         },     },     , }]
[, package projetolivraria;, , public class Livros extends Produtos{,     //Membros ou atributos (privados),     private String autor;,     private String editora;,     private String edicao;,     ,     //Construtor,     public Livros(){,         this.autor = "";,         this.editora = "";,         this.edicao = "";,     },     ,     //Métodos Modificadores de Acesso aos Campos            ,     public String getAutor() {,         return autor;,     }, ,     public void setAutor(String autor) {,         this.autor = autor;,     }, ,     public String getEditora() {,         return editora;,     }, ,     public void setEditora(String editora) {,         this.editora = editora;,     }, ,     public String getEdicao() {,         return edicao;,     }, ,     public void setEdicao(String edicao) {,         this.edicao = edicao;,     },     ,     //Método específico da classe.,     public void listarProduto(){,         System.out.println("<---- DADOS DO PRODUTO ---->");,         System.out.println("Descrição........: " + this.getDescricao());,         System.out.println("Gênero...........: " + this.getGenero());,         System.out.println("Estoque..........: " + this.getEstoqueDisponivel());,         System.out.println("Preço..........R$: " + this.getPrecoCusto());,         System.out.println("Autor............: " + this.autor);,         System.out.println("Preco de Venda R$: " + this.getPrecoVenda());,         System.out.println("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");,         System.out.println("");,         ,     }, }]
[, package projetolivraria;, , public class Cds extends Produtos {,     //Membros ou atributos (privados),     private String artista;,     private String gravadora;,     private String paisOrigem;,   //  private double precoVenda;,     ,     //Construtores,     public Cds(){,         this.artista = "";,         this.gravadora = "";,         this.paisOrigem = "";,     },     ,     //Métodos Modificadores de Acesso aos Campos, ,     public String getArtista() {,         return artista;,     }, ,     public void setArtista(String artista) {,         this.artista = artista;,     }, ,     public String getGravadora() {,         return gravadora;,     }, ,     public void setGravadora(String gravadora) {,         this.gravadora = gravadora;,     }, ,     public String getPaisOrigem() {,         return paisOrigem;,     }, ,     public void setPaisOrigem(String paisOrigem) {,         this.paisOrigem = paisOrigem;,     }, ,     public void listarProduto(){,         System.out.println("<---- DADOS DO PRODUTO ---->");,         System.out.println("Descrição........: " + this.getDescricao());,         System.out.println("Gênero...........: " + this.getGenero());,         System.out.println("Estoque..........: " + this.getEstoqueDisponivel());,         System.out.println("Preço..........R$: " + this.getPrecoCusto());,         System.out.println("Artista..........: " + this.artista);,         System.out.println("Preco de Venda R$: " + this.getPrecoVenda());,         System.out.println("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");,         System.out.println("");,     },     ,     @Override,     public void calcularPrecoVenda(){,         this.setPrecoVenda(this.getPrecoCusto()*1.15);,     }, }]
[, package projetolivraria;, //SuperClasse , public class Produtos {,     //Membros com acesso (private),     private String descricao;,     private String genero;,     private int estoqueDisponivel;,     private double precoCusto;,       private double precoVenda;,       ,     //Métodos Modificadores de Acesso aos Campos,     public String getDescricao() {,         return descricao;,     }, ,     public void setDescricao(String descricao) {,         this.descricao = descricao;,     }, ,     public String getGenero() {,         return genero;,     }, ,     public void setGenero(String genero) {,         this.genero = genero;,     }, ,     public int getEstoqueDisponivel() {,         return estoqueDisponivel;,     }, ,     public void setEstoqueDisponivel(int estoqueDisponivel) {,         this.estoqueDisponivel = estoqueDisponivel;,     }, ,     public double getPrecoCusto() {,         return precoCusto;,     }, ,     public void setPrecoCusto(double precoCusto) {,         this.precoCusto = precoCusto;,     }, ,     public double getPrecoVenda() {,         return precoVenda;,     }, ,     public void setPrecoVenda(double precoVenda) {,         this.precoVenda = precoVenda;,     },     ,     ,     //Métodos Construtores sem parâmetros,     public Produtos(){,         this.descricao = "";,         this.estoqueDisponivel = 0;,         this.genero = "";,         this.precoCusto = 0.0;,         this.precoVenda = 0.0;,     },     ,     //Métodos Especificos da Classe,     ,     public void comprar(int qtd){,         //Apressenta o estoque atual. E o estoqueatualizado.,         System.out.println("<----ESTOQUE---->");,         System.out.println("Quantidade do produto: " + this.descricao);,         System.out.println("Anterior: " + this.estoqueDisponivel);,         this.estoqueDisponivel += qtd;,         System.out.println("Atual:   " + this.estoqueDisponivel);,     },     ,     public void vender(int qtd){,         //Apressenta o estoque atual. E o estoqueatualizado.,         System.out.println("<----ESTOQUE---->");,         System.out.println("Quantidade do produto: " + this.descricao);,         System.out.println("Anterior: " + this.estoqueDisponivel);,         this.estoqueDisponivel -= qtd;,         System.out.println("Atual:   " + this.estoqueDisponivel);,         ,     },     ,     public void calcularPrecoVenda(){,         this.setPrecoVenda(this.precoCusto*1.10);,     }, }]
[, package projetolivraria;, , public class Dvds extends Produtos{,     //Membros ou atributos (privados),     private String diretor;,     private String duracao;,     private String censura;,  //   private double precoVenda;,     ,     //Construtores,     public Dvds(){,         this.diretor = "";,         this.duracao = "";,         this.censura = "";,     },     ,     //Métodos Modificadores de Acesso aos Campos,     public String getDiretor() {,         return diretor;,     }, ,     public void setDiretor(String diretor) {,         this.diretor = diretor;,     }, ,     public String getDuracao() {,         return duracao;,     }, ,     public void setDuracao(String duracao) {,         this.duracao = duracao;,     }, ,     public String getCensura() {,         return censura;,     }, ,     public void setCensura(String censura) {,         this.censura = censura;,     },     ,     public void listarProduto(){,         System.out.println("<---- DADOS DO PRODUTO ---->");,         System.out.println("Descrição........: " + this.getDescricao());,         System.out.println("Gênero...........: " + this.getGenero());,         System.out.println("Estoque..........: " + this.getEstoqueDisponivel());,         System.out.println("Preço..........R$: " + this.getPrecoCusto());,         System.out.println("Diretor..........: " + this.diretor);,         System.out.println("Preco de Venda R$: " + this.getPrecoVenda());,         System.out.println("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");,         System.out.println("");,     },     ,     public void calcularPrecoVenda(double cotDolar){,         this.setPrecoVenda(this.getPrecoCusto()*cotDolar*1.20);,     }, }]
[, package projetolivraria;, , import java.util.Scanner;, , , public class Principal {, ,     public static void main(String[] args) throws InterruptedException {,         // TODO code application logic here,           Scanner sc = new Scanner(System.in);,         ,         //Criando um objeto livro,         Livros livro = new Livros();,         livro.setDescricao("Java com Ênfase em OO");,         livro.setEdicao("N. 1");,         livro.setAutor("Douglas Mendes");,         livro.setEditora("Novatec");,         livro.setGenero("Programação");,         livro.setEstoqueDisponivel(10);,         livro.setPrecoCusto(100.90);,         livro.calcularPrecoVenda();,         ,         //Criando um objeto Dvd,         Dvds dvd = new Dvds();,         dvd.setDescricao("Acima de Qualquer Suspeita");,         dvd.setCensura("14 anos");,         dvd.setDiretor("Michael Douglas");,         dvd.setDuracao("120 minutos");,         dvd.setEstoqueDisponivel(5);,         dvd.setGenero("Drama");,         dvd.setPrecoCusto(66.98);,         dvd.calcularPrecoVenda(3.20);,         ,         //Criando um objeto cd,         Cds cd = new Cds();,         cd.setDescricao("Live Era '87-'93");,         cd.setGenero("Rock");,         cd.setGravadora("Universal");,         cd.setPaisOrigem("EUA");,         cd.setArtista("Guns N' Roses");,         cd.setEstoqueDisponivel(5);,         cd.setPrecoCusto(9.99);,         cd.calcularPrecoVenda();,         ,     //Menu - Escolha uma opção,     int opc = 0;,     while(opc != 7){,         System.out.println("Escolha a opção");,             System.out.println("1--> Comprar Mais Exemplar do Livro");,             System.out.println("2--> Vender Exemplar do Livro");,             System.out.println("3--> Comprar Mais um Título do DVD ");,             System.out.println("4--> Vender Um Título do DVD");,             System.out.println("5--> Comprar Um CD");,             System.out.println("6--> Vender Um CD");,             System.out.println("7--> Sair");,             opc = Integer.parseInt(sc.nextLine());,             switch(opc){,                 case 1:,                     System.out.println("Quantidade a comprar do livro...: " + ,                             livro.getDescricao());,                     livro.comprar(Integer.parseInt(sc.nextLine()));,                     break;,                 case 2: ,                     System.out.println("Quantidade a vender de livro...: " + ,                             livro.getDescricao());,                     livro.vender(Integer.parseInt(sc.nextLine()));,                     break;,                 case 3:,                     System.out.println("Quantidade a Comprar do DVD...: " +,                             dvd.getDescricao());,                     dvd.comprar(Integer.parseInt(sc.nextLine()));,                     break;,                 case 4:,                     System.out.println("Quantidade a vender do DVD...: " +,                             dvd.getDescricao());,                     dvd.vender(Integer.parseInt(sc.nextLine()));,                     break;,                 case 5: ,                     System.out.println("Quantidade a compar do CD...: " +,                             cd.getDescricao());,                     cd.comprar(Integer.parseInt(sc.nextLine()));,                     break;,                 case 6:,                     System.out.println("Quantidade a vender do CD...:" +,                             cd.getDescricao());,                     cd.vender(Integer.parseInt(sc.nextLine()));,                     break;,                 case 7:,                     break;,             },         },             System.out.println();,             System.out.println("Aguarde um momento.....");,             Thread.sleep(2000);,             livro.listarProduto();,             dvd.listarProduto();,             cd.listarProduto();,     }   , }]
[package projetocomputadores;, , import java.util.Scanner;, , public class PrincipalComputador {, , ,     public static void main(String[] args) {,         Computador c1 = new Computador();,         c1.marca = "HP";,         c1.modelo = "Inspirion";,         c1.cor = "Branca";,         c1.numeroSerie = 1234;,         c1.preco = 5000;,         c1.imprimir();,         c1.calcularValor();,         System.out.println("");,         c1.imprimir();,         ,         Computador c2 = new Computador();,         c2.marca = "ibm";,         c2.modelo = "Lenovo";,         c2.cor = "Preta";,         c2.numeroSerie = 4556;,         c2.preco = 2000;,         c2.imprimir();,         c2.calcularValor();,         System.out.println("");,         c2.imprimir();,         Scanner sc = new Scanner(System.in);,         System.out.println("Digite o novo preco do " + c2.marca);,         double valor = Double.parseDouble(sc.nextLine());,         boolean alterou = c2.alterarValor(valor);,         if(alterou){,             System.out.println("Preço alterado com sucesso");,         }else{,             System.out.println("Valor inválido");,         },         c2.imprimir();,         ,     },     , }]
[package projetocomputadores;, , public class Computador {,     //1. Definir os atributos, conforme Diagrama,     String marca;,     String cor;,     String modelo;,     long numeroSerie;,     double preco;,     ,     //2. Definir os métodos vazios,     void imprimir(){,         System.out.println("Marca: " + marca);,         System.out.println("Cor: " + cor);,         System.out.println("Modelo: " + modelo);,         System.out.println("Num. de Série: " + numeroSerie);,         System.out.println("Preço: " + preco);,     },     void calcularValor(){,         if(marca.equalsIgnoreCase("HP")){,             preco *= 1.3;,             return;,         },         if(marca.equalsIgnoreCase("IBM")){,             preco *= 1.5;,         },     },     boolean alterarValor(double valor){,         if(valor>0){,             preco = valor;,             return true;,         },         return false;,     }, }]
[package gerenciarcontagui;, , import java.awt.Button;, import java.awt.Dimension;, import java.awt.Label;, import java.awt.TextArea;, import java.awt.TextField;, import java.awt.event.ActionEvent;, import java.awt.event.ActionListener;, import java.awt.event.WindowEvent;, import java.awt.event.WindowListener;, import java.util.logging.Level;, import java.util.logging.Logger;, import javax.swing.JFrame;, import javax.swing.JOptionPane;, , public class TelaMovimento extends JFrame ,     implements WindowListener, ActionListener {,     //Definir atributos,     protected Label lblValor, lblSaldo;,     protected TextField txtValor, txtSaldo;,     protected Button cmdEntrada, cmdRetirada, cmdConsulta, cmdSair;,     protected TextArea txtMsg;,     protected Dimension dLabel, dTextField, dFrame, dTextArea, dButton;,     protected Caixa mCaixa;,     ,     //Construtor da classe,     public TelaMovimento(){,         mCaixa = new Caixa();,         dFrame = new Dimension(350,400);,         dLabel = new Dimension(40,20);,         dTextField = new Dimension(150,20);,         dButton = new Dimension(95,20);,         dTextArea = new Dimension(300,140);,         ,         this.setTitle("Controle de Caixa"); //Titulo janela,         this.setResizable(false); //não redimensioar janela,         this.setSize(dFrame); //Definir o tamanho,         this.setLocation(400, 200); //Localização da janela,         this.setLayout(null); //Resp. prog. definir onde vao os objetos,         ,         //DEfinir os elementos da tela,         lblValor = new Label("Valor: ");,         lblValor.setSize(dLabel);,         lblValor.setLocation(25, 50);,         this.add(lblValor);,         ,         lblSaldo = new Label("Saldo: ");,         lblSaldo.setSize(dLabel);,         lblSaldo.setLocation(25, 80);,         this.add(lblSaldo);,         ,         txtValor = new TextField(null);,         txtValor.setSize(dTextField);,         txtValor.setLocation(75,50);,         this.add(txtValor);,         ,         txtSaldo = new TextField(null);,         txtSaldo.setSize(dTextField);,         txtSaldo.setLocation(75,80);,         this.add(txtSaldo);,         ,         cmdEntrada = new Button("Entrada");,         cmdEntrada.setSize(dButton);,         cmdEntrada.setLocation(25,150);,         this.add(cmdEntrada);,         cmdEntrada.addActionListener(this);,         ,         cmdRetirada = new Button("Retirada");,         cmdRetirada.setSize(dButton);,         cmdRetirada.setLocation(180,150);,         this.add(cmdRetirada);,         cmdRetirada.addActionListener(this);,         ,         cmdConsulta = new Button("Consulta");,         cmdConsulta.setSize(dButton);,         cmdConsulta.setLocation(25,185);,         this.add(cmdConsulta);,         cmdConsulta.addActionListener(this);,         ,         cmdSair = new Button("Sair");,         cmdSair.setSize(dButton);,         cmdSair.setLocation(180,185);,         this.add(cmdSair);,         cmdSair.addActionListener(this);,         ,         txtMsg = new TextArea(null);,         txtMsg.setSize(dTextArea);,         txtMsg.setLocation(25,220);,         this.add(txtMsg);,         addWindowListener(this);,     }, ,     @Override,     public void windowOpened(WindowEvent e) {,        ,     }, ,     @Override,     public void windowClosing(WindowEvent e) {,          //Depois da janela fechada,         System.exit(0); //Encerra o programa.,     }, ,     @Override,     public void windowClosed(WindowEvent e) {,        ,     }, ,     @Override,     public void windowIconified(WindowEvent e) {, ,     }, ,     @Override,     public void windowDeiconified(WindowEvent e) {,    ,     }, ,     @Override,     public void windowActivated(WindowEvent e) {,    ,     }, ,     @Override,     public void windowDeactivated(WindowEvent e) {,     ,     }, ,     @Override,     public void actionPerformed(ActionEvent e) {,         double valor=0;,         if(e.getSource()==cmdSair){,             JOptionPane.showMessageDialog(null, "Fechando o programa");,             System.exit(0);,         },         if(e.getSource()==cmdEntrada){,             valor = Double.parseDouble(txtValor.getText());,             String retorno = mCaixa.depositar(valor);,             txtMsg.append(retorno + "\n");,             txtValor.setText(null);,             txtValor.requestFocus();,         },         if(e.getSource()==cmdRetirada){,             valor = Double.parseDouble(txtValor.getText());,             String retorno ="";,             try {,                 retorno = mCaixa.sacar(valor);,             } catch (SemSaldoException ex) {,                 JOptionPane.showMessageDialog(null, ex.getMessage());,             },             txtMsg.append(retorno + "\n");,             txtValor.setText(null);,             txtValor.requestFocus();,         },         if(e.getSource()==cmdConsulta){,             txtSaldo.setText(String.valueOf(mCaixa.getSaldo()));,             txtMsg.append("Consulta Realizada \n");,             txtValor.setText(null);,             txtValor.requestFocus();,         },         ,     },     , }]
[package gerenciarcontagui;, , //Ideia é criar um Classe para tratamento de exceções, //Apenas controlar o saque sem saldo., , public class SemSaldoException extends Exception {, ,     @Override,     public String getMessage(){,         //Gravar um log no banco de dados,         //com a toda a informação do erro,         return "Sem saldo suficiente";,     }, }]
[package gerenciarcontagui;, , public class GerenciarContaGUI {, , ,     public static void main(String[] args) {,         TelaMovimento tela = new TelaMovimento();,         tela.setVisible(true);,     },     , }]
[package gerenciarcontagui;, , , public class Caixa {,     private double saldo;, ,     public double getSaldo() {,         return saldo;,     },     ,     public String depositar(double valor){,         if(valor < 0){,             return "Valor inválido";,         },         saldo += valor;,         return "Depósito efetuado com sucesso";,     },     ,     public String sacar(double valor) throws SemSaldoException {,         try {,             if(valor<=saldo){,             saldo-= valor;,             return "Saque efetuado com sucesso";,         },         throw new SemSaldoException();,         } catch (SemSaldoException e) {,             throw e;,         },         ,         ,         ,     },     , }]
[package contascorrentescorrecao;, , import java.util.Scanner;, , public class PrincipalContasCorrentes {, ,     public final int TAM = 3;,     public int indice = 0;,     public ContasCorrente[] cc = new ContasCorrente[TAM];, ,     public static void main(String[] args) {,         //Instanciando a classe PrincipalContasCorrentes,         //Faço isso para poder chamar os métodos da classe.,         PrincipalContasCorrentes pcc = new PrincipalContasCorrentes();,         Scanner sc = new Scanner(System.in);,         int opc = 0;,         do {,             //Menu com do while e switch,             System.out.println("Escolha sua opcao: ");,             System.out.println("1.. Cadastrar ");,             System.out.println("2.. Depositar ");,             System.out.println("3.. Sacar  ");,             System.out.println("4.. Consultar ");,             System.out.println("9.. Sair ");,             System.out.println("Escolha ==> ");,             opc = Integer.parseInt(sc.nextLine());,             switch (opc) {,                 case 1:,                     pcc.execCadastro();,                     break;,                 case 2:,                     pcc.execDeposito();,                     break;,                 case 3:,                     pcc.execSaque();,                     break;,                 case 4:,                     pcc.execConsulta();,                     break;,                 case 9:,                     System.out.println("Fim");,                     break;,                 default:,                     System.out.println("Opcao invalida");,             },         } while (opc != 9);,     }, ,     public void execCadastro() {,         Scanner sc = new Scanner(System.in);,         //Efetuar o cadastro se houver espaço no vetor,         if (indice < 3) {,             this.cc[indice] = new ContasCorrente();,             System.out.println("Cadastrando conta");,             System.out.println("Digite conta: ");,             this.cc[indice].conta = Integer.parseInt(sc.nextLine());,             System.out.println("Digite agencia: ");,             this.cc[indice].agencia = Integer.parseInt(sc.nextLine());,             System.out.println("Digite nome: ");,             this.cc[indice].nome = sc.nextLine();,             System.out.println("Conta Cadastrada com sucesso");,             indice++;,         } else {,             //Mensagem se o limite do vetor estiver cheio,             System.out.println("Espaco insuficiente para cadastrar conta");,         },     }, ,     public void execConsulta() {,         System.out.println("Exibindo os dados de todas as contas");,         System.out.println("------------------------------------");,         for (ContasCorrente conta : cc) {,             System.out.println("");,             if(cc!=null) conta.imprimir(); //Imprime apenas se houver,         },     }, ,     public void execSaque() {,         //Peço a conta e o valor a sacar,         Scanner sc = new Scanner(System.in);,         System.out.println("Efetuando saque");,         System.out.println("Digite o numero da conta: ");,         int numConta = Integer.parseInt(sc.nextLine());,         System.out.println("Digite o valor a sacar");,         double valor = Double.parseDouble(sc.nextLine());,         //Percorre todas as contas,         for (ContasCorrente conta : cc) {,             //se tiver instanciado (existir objeto),             if (conta != null) {,                 //Pergunto se é igual ao numero digitado,                 if (conta.conta == numConta) {,                     //tento efetuar o saque,                     int ret = conta.sacar(valor);,                     if (ret == 1) {,                         System.out.println("Saque efetuado com sucesso");,                         return;,                     } else {,                         System.out.println("Sem saldo");,                         return;,                     },                 },             },         },         System.out.println("Essa conta não existe");,     }, ,     public void execDeposito() {,         //Peco a conta e o valor a ser depositado,         Scanner sc = new Scanner(System.in);,         System.out.println("Efetuando depostio");,         System.out.println("Digite o numero da conta: ");,         int numConta = Integer.parseInt(sc.nextLine());,         System.out.println("Digite o valor a depositar");,         double valor = Double.parseDouble(sc.nextLine());,         for (ContasCorrente conta : cc) {,             if (conta != null) {,                 if (conta.conta == numConta) {,                     conta.depositar(valor);,                     System.out.println("Deposito efetuado com sucesso");,                     return;,                 },             },         },         System.out.println("Essa conta não existe");,     }, }]
[package contascorrentescorrecao;, , public class ContasCorrente {,     public int conta;,     public int agencia;,     public double saldo;,     public String nome;,     ,     public int sacar(double valor){,         if(valor <= saldo){,             saldo -= valor;,             return 1;,         },         return 0;,     },     public void depositar(double valor){,         saldo += valor;,     },     public void imprimir(){,         System.out.println("Conta: " + conta);,         System.out.println("Ag: " + agencia);,         System.out.println("Saldo: " + saldo);,         System.out.println("Nome: " + nome);,         System.out.println("---------------------------");,     }, }]
[package exemplovetor2;, , import java.util.Scanner;, , public class ExemploVetor2 {, , ,     public static void main(String[] args) {,         Scanner sc = new Scanner(System.in);,         Turma[] vetTurma = new Turma[3];,         for (int i = 0; i < vetTurma.length; i++) {,             Turma turma = new Turma();,             turma.getClass();,             System.out.println("Digite a sala: ");,             turma.sala = Integer.parseInt(sc.nextLine());,             System.out.println("Digite a descrição: ");,             turma.descricao = sc.nextLine();,             vetTurma[i] = turma;,         },         Object x = new Object();,         ,         ,         //vetTurma[2] = vetTurma[0];,         for (Turma turma : vetTurma) {,             turma.imprimir();,             System.out.println("");,         },     },     , }]
[, package exemplovetor2;, , , public class Turma {,     public int sala;,     public String descricao;,     ,     public void imprimir(){,         System.out.println("Sala: " + sala);,         System.out.println("Desc: " + descricao);,     }, }]
[/*,  * Aulas professor Maromo.,  */, package gerenciaracesso;, , /**,  *,  * @author maromo,  */, public class Fornecedor  implements Logavel {, ,     @Override,     public void efetuarLogin() {,         System.out.println("Fornecedor logou...");,         GerenciarAcesso.adicionarLogado(this);,     }, ,     @Override,     public void efetuarLogout() {,         System.out.println("Fornecedor saiu do sistema...");,         GerenciarAcesso.removerLogado(this);,     },     , }]
[/*,  * Aulas professor Maromo.,  */, package gerenciaracesso;, , /**,  *,  * @author maromo,  */, public class Secretaria extends Funcionario implements Logavel {, ,     @Override,     public void efetuarLogin() {,         System.out.println("Secretaria logou...");,         GerenciarAcesso.adicionarLogado(this);,     }, ,     @Override,     public void efetuarLogout() {,         System.out.println("Secretaria saiu do sistema...");,         GerenciarAcesso.removerLogado(this);,     },     , }]
[package gerenciaracesso;, , , public interface Logavel {,     void efetuarLogin();,     ,     void efetuarLogout();,     ,    , }]
[package gerenciaracesso;, , public class Gerente extends Funcionario implements Logavel {, ,     @Override,     public void efetuarLogin() {,         System.out.println("Gerente Logou...");,         GerenciarAcesso.adicionarLogado(this);,     }, ,     @Override,     public void efetuarLogout() {,         System.out.println("Gerente saiu do sistema...");,         GerenciarAcesso.removerLogado(this);,     },     , }]
[package gerenciaracesso;, , import java.util.ArrayList;, import java.util.List;, , public class GerenciarAcesso {, ,     private static int total = 0;,     private static List<Logavel> lista = new ArrayList<>();,     ,     public static void adicionarLogado(Logavel o){,         lista.add(o);,         total++;,     },     public static void removerLogado(Logavel o){,         lista.remove(o);,         total--;,     },     public static List<Logavel> exibirLogados(){,         return lista;,     },     public static int getTotal(){,         return total;,     },     ,     public static void main(String[] args) {,         // TODO code application logic here,         Cliente cli1 = new Cliente();,         Cliente cli2 = new Cliente();,         cli1.efetuarLogin();,         cli1.efetuarLogout();,         cli2.efetuarLogin();,         Fornecedor for1 = new Fornecedor();,         for1.efetuarLogin();,         System.out.println("Total do logados: " + total);,         //Mostrar quem está logado no momento,         for (Logavel item : GerenciarAcesso.exibirLogados()) {,             System.out.println("Objeto Logado: " + item.getClass());,             System.out.println("...................................");,         },     },     , }]
[, package gerenciaracesso;, , , public class Funcionario {,     , }]
[package gerenciaracesso;, , import java.awt.event.ActionEvent;, import java.awt.event.ActionListener;, import java.awt.event.WindowEvent;, import java.awt.event.WindowListener;, import javax.swing.JFrame;, , public class Tela extends JFrame implements WindowListener, ActionListener{, ,     @Override,     public void windowOpened(WindowEvent e) {,     }, ,     @Override,     public void windowClosing(WindowEvent e) {,     }, ,     @Override,     public void windowClosed(WindowEvent e) {,     }, ,     @Override,     public void windowIconified(WindowEvent e) {,     }, ,     @Override,     public void windowDeiconified(WindowEvent e) {,     }, ,     @Override,     public void windowActivated(WindowEvent e) {,     }, ,     @Override,     public void windowDeactivated(WindowEvent e) {,     }, ,     @Override,     public void actionPerformed(ActionEvent e) {,     },     , }]
[package gerenciaracesso;, , public class Cliente implements Logavel {, ,     @Override,     public void efetuarLogin() {,         System.out.println("Cliente logou...");,         GerenciarAcesso.adicionarLogado(this);,     }, ,     @Override,     public void efetuarLogout() {,         System.out.println("Cliente saiu do sistema...");,         GerenciarAcesso.removerLogado(this);,     }, ,     ,     , }]
[package gerenciaracesso;, , public class Operador extends Funcionario {,     , }]
[package prjfuncionarios;, , public class Funcionario {,     //Atributos,     private String nome;,     private String departamento;,     private double salario;,     private String rg;,     private boolean estaNaEmpresa;,     ,     //Par de gets e sets,     public String getNome(){,         return nome;,     },     public void setNome(String nome){,         this.nome = nome;,     }, ,     public String getDepartamento() {,         return departamento;,     }, ,     public void setDepartamento(String departamento) {,         this.departamento = departamento;,     }, ,     public double getSalario() {,         return salario;,     }, ,     public void setSalario(double salario) {,         this.salario = salario;,     }, ,     public String getRg() {,         return rg;,     }, ,     public void setRg(String rg) {,         this.rg = rg;,     }, ,     public boolean isEstaNaEmpresa() {,         return estaNaEmpresa;,     }, ,     public void setEstaNaEmpresa(boolean estaNaEmpresa) {,         this.estaNaEmpresa = estaNaEmpresa;,     },     ,     public void bonificar(double aumento){,         salario += aumento;,     },     ,     public void imprimir(){,         System.out.println("Nome: " + nome);,         System.out.println("Departamento: " + departamento);,         System.out.println("Salário: " + salario);,         if(estaNaEmpresa){,             System.out.println("Funcionáiro Ativo na Empresa");,         }else{,             System.out.println("Funcionário desligado");,         },         System.out.println("Documento RG: "+ rg);,     },     , }]
[package prjfuncionarios;, , import java.util.Scanner;, , public class PrincipalFuncionario {, ,     //Atributos, ,     public final int T = 10;,     public int indice = 0;,     public Funcionario[] func = new Funcionario[T];, ,     //Métodos,     public void execCadastro() {,         Scanner sc = new Scanner(System.in);,         if ((indice >= 0) && (indice < 10)) {,             //Cadastrar,             this.func[indice] = new Funcionario();,             System.out.println("Digite o nome");,             this.func[indice].setNome(sc.nextLine());,             System.out.println("Digite o RG");,             this.func[indice].setRg(sc.nextLine());,             System.out.println("Digite o salario: ");,             this.func[indice].setSalario(Double.parseDouble(sc.nextLine()));,             System.out.println("Digite Departamento: ");,             this.func[indice].setDepartamento(sc.nextLine());,             this.func[indice].setEstaNaEmpresa(true);,             System.out.println("Cadastrado com sucesso");,             indice++;,         } else {,             System.out.println("Não há espaço no vetor");,         }, ,     }, ,     public void execBonificacao() {,         Scanner sc = new Scanner(System.in);,         System.out.println("Bonificação de funcionário");,         System.out.println("Digite o RG do Funcionáiro desejado");,         String rgProcurado = sc.nextLine();,         for (Funcionario item : func) {,             if (item != null) {,                 if (rgProcurado.equals(item.getRg())) {,                     System.out.println("Digite o valor da bonificação: ");,                     double valor = Double.parseDouble(sc.nextLine());,                     item.bonificar(valor);,                     System.out.println("Bonificado com sucesso");,                     return;,                 },             },         },         System.out.println("Funcionário não encontrado");,     }, ,     public void execConsulta() {,         for (Funcionario item : func) {,             if(item != null){,                 System.out.println("=====================");,                 item.imprimir();,                 System.out.println("=====================");,             },         },     }, ,     public static void main(String[] args) {,         Scanner sc = new Scanner(System.in);,         PrincipalFuncionario pf = new PrincipalFuncionario();,         int opc = 0;,         do {,             System.out.println("Menu");,             System.out.println("1.. Cadastrar");,             System.out.println("2.. Bonificar");,             System.out.println("3.. Consultar");,             System.out.println("4.. Sair");,             System.out.println("Digite sua opcao: ");,             opc = Integer.parseInt(sc.nextLine());,             switch (opc) {,                 case 1:,                     pf.execCadastro();,                     break;,                 case 2:,                     pf.execBonificacao();,                     break;,                 case 3:,                     pf.execConsulta();,                     break;,                 case 4:,                     System.out.println("Finalizou");,                     break;,                 default:,                     System.out.println("Opção inválida");, ,             },         } while (opc != 4);,     }, , }]
[package helloclass;, , public class HelloClass {, ,     /**,      * @param args the command line arguments,      */,     public static void main(String[] args) {,         // TODO code application logic here,         System.out.println("Ola sala do 2 GTI");,         Aluno aluno1, aluno2;,         aluno1 = new Aluno(); //Construção,         aluno1.nome = "Zeca";,         aluno1.idade = 35;,         aluno1.matricular();,         aluno2 = new Aluno();,         aluno2.matricular();,         ,     },     , }]
[/*,  * Aulas professor Maromo.,  */, package helloclass;, , /**,  *,  * @author maromo,  */, public class Aluno {,     //Atributos,     public int idade;,     public String nome;,     ,     //Métodos,     public void matricular(){,         //Funcionalidade de matricula,         System.out.println("Matriculando...");,         System.out.println("Nome: " + nome);,         System.out.println("Idade: " + idade);,     },     , }]
[package exemploscanner;, , import java.util.Scanner;, , public class ExemploScanner {, ,     public static void main(String[] args) {,         int a, b, soma;,         Scanner sc = new Scanner(System.in);,         System.out.println("Digite valor de a: ");,         a = Integer.parseInt(sc.nextLine());,         System.out.println("Digite valor de b: ");,         b = Integer.parseInt(sc.nextLine());,         soma = a +  b;,         //System.out.println("Resultado: " + soma);,         System.out.printf("Resultado:  %d \n", soma);,         ,     },     , }]
[/*,  * Aulas professor Maromo.,  */, package projetoacampamento2408;, , import java.util.Scanner;, , /**,  *,  * @author maromo,  */, public class PrincipalAcampamento {, ,     /**,      * @param args the command line arguments,      */,     public static void main(String[] args) {,         // TODO code application logic here,         Scanner sc = new Scanner(System.in);,         Acampamento membro = new Acampamento();,         System.out.println("Digite o nome do membro do acampamento: ");,         membro.nome = sc.nextLine();,         System.out.println("Digite a idade do " + membro.nome);,         membro.idade = Integer.parseInt(sc.nextLine());,         membro.imprimir();,         membro.separarGrupo();,         System.out.println("-----------------");,         membro.imprimir();,         ,         ,     },     , }]
[package projetoacampamento2408;, , , public class Acampamento {,     //Atributos,     String nome;,     char equipe;,     int idade;,     ,     //Métodos,     void imprimir(){,         System.out.println("Nome: " + nome);,         System.out.println("Equipe: " + equipe);,         System.out.println("Idade do Membro: " + idade);,     },     void separarGrupo(){,         if(idade<6){,             equipe = ' ';,             return;,         },         if(idade<11){,             equipe = 'A';,             return;,         },         if(idade<21){,             equipe = 'B';,             return;,         },         equipe = 'C';,     }, }]
[package gerenciarcontas;, , public class GerenciarContas {, , ,     public static void main(String[] args) {,         ,         Corrente c1 = new Corrente();,         c1.setNumConta(111);,         c1.setNomeCliente("Maria");,         c1.setLimite(2000.0);,         ,         boolean depositou = c1.depositar(2000);,         if(depositou){,             System.out.println("Depósito efetuado com sucesso");,         }else{,             System.out.println("Valor inválido para depósito");,         },         System.out.println("Saldo atual: " + c1.getSaldo());,         ,         boolean sacou = c1.sacar(1000);,         if(sacou){,             System.out.println("Saque efetuado com sucesso");,         }else{,             System.out.println("Saldo insuficiente");,         },         System.out.println("Saldo atual: " + c1.getSaldo());,         ,         Poupanca p = new Poupanca();,         p.setNumConta(222);,         p.setNomeCliente("Jose");,         p.setDiaAniversario(23);,         depositou = p.depositar(1000);,         if(depositou){,             System.out.println("Depósito efetuado com sucesso");,         }else{,             System.out.println("Valor inválido");,         },         sacou = p.sacar(500);,         if(sacou){,             System.out.println("Saque efetuado com sucesso");,         }else{,             System.out.println("Saldo insuficiente");,         },         System.out.println("Saldo atual da poup: " + p.getSaldo());,         System.out.println(p.toString());,         System.out.println(c1.toString());,         ,         ////Gerenciar o patrimonio do Banco,         GerenciarPatrimonio gp = new GerenciarPatrimonio();,         gp.adicionarConta(c1);,         gp.adicionarConta(p);,         System.out.println("Saldo de Todas as Contas: ");,         System.out.println(gp.getTotalPatrimonio());,     },     , }]
[package gerenciarcontas;, , , public class Poupanca extends Conta {,     private int diaAniversario;, ,     public int getDiaAniversario() {,         return diaAniversario;,     }, ,     public void setDiaAniversario(int diaAniversario) {,         this.diaAniversario = diaAniversario;,     },     ,     @Override,     public String toString(){,         StringBuilder texto = new StringBuilder();,         texto.append(super.toString());,         texto.append("\nDia Aniversário: ").append(diaAniversario);,         return texto.toString();,     }, ,     @Override,     protected void calcularImposto(double valor) {,         saldo -= valor;,     }, ,    , ,     , }]
[package gerenciarcontas;, , , public class GerenciarPatrimonio {,     private double totalPatrimonio;, ,     public double getTotalPatrimonio() {,         return totalPatrimonio;,     },     ,     public void adicionarConta(Conta obj){,         //A ideia é somar ao patrimonio, o saldo da conta,         this.totalPatrimonio += obj.saldo;,     },     , }]
[, package gerenciarcontas;, , , public abstract class Conta {,     private int numConta;,     private String nomeCliente;,     protected double saldo;, ,     public int getNumConta() {,         return numConta;,     }, ,     public void setNumConta(int numConta) {,         this.numConta = numConta;,     }, ,     public String getNomeCliente() {,         return nomeCliente;,     }, ,     public void setNomeCliente(String nomeCliente) {,         this.nomeCliente = nomeCliente;,     }, ,     public double getSaldo() {,         return saldo;,     }, ,     //Métodos da classe conta,     public boolean depositar(double valor){,         if(valor <= 0){,             return false;,         },         saldo += valor;,         return true;,     },     ,     public boolean sacar(double valor){,         if(valor<=saldo){,             saldo-=valor;,             calcularImposto(valor * 0.01);,             return true;,         },         return false;,     },     ,     @Override,     public String toString(){,         StringBuilder texto = new StringBuilder();,         texto.append("\nNúmero da Conta: ").append(numConta);,         texto.append("\nNome Cliente: ").append(nomeCliente);,         texto.append("\nSaldo em R$: ").append(saldo);,         return texto.toString();,     },     ,     protected abstract void calcularImposto(double valor);, }]
[, package gerenciarcontas;, , , public class Corrente extends Conta {,     private double limite;, ,     public double getLimite() {,         return limite;,     }, ,     public void setLimite(double limite) {,         this.limite = limite;,     },     ,     @Override,     public boolean sacar(double valor){,         if(valor <= (limite + saldo)){,             saldo-= valor;,             calcularImposto(valor * 0.02);,             return true;,         },         return false;,     },     ,     @Override,     public String toString(){,         StringBuilder texto = new StringBuilder();,         texto.append(super.toString());,         texto.append("\nLimite: ").append(limite);,         return texto.toString();,     }, ,     @Override,     protected void calcularImposto(double valor) {,         saldo -= valor;,     }, ,     , ,     , ,     , }]
[package exercicio3aleatorio;, , import java.util.Random;, , public class Palpite {,     int valor1;,     int valor2;,     int numeroDado;,     ,     void sortear(){,         //Gera dois números aleatórios entre 1 e 10,         //Classe especial Random,         Random aleatorio = new Random();,         valor1 = aleatorio.nextInt(10) + 1;,         valor2 = aleatorio.nextInt(10) + 1;,         informarResultado();,     },     String informarResultado(){,         StringBuilder sb = new StringBuilder();,         ,         if((numeroDado == valor1) || ,                 (numeroDado == valor2)){,             sb.append("Acertou um dos números \n");,         }else{,             sb.append("Infelizmente não acertou \n");,         },         sb.append("Gerado 1: ").append(valor1).append("\n");,         sb.append("Gerado 2: ").append(valor2).append("\n");,         return sb.toString();,     }, }]
[/*,  * Aulas professor Maromo.,  */, package exercicio3aleatorio;, , import javax.swing.JOptionPane;, , /**,  *,  * @author maromo,  */, public class TelaPalpite extends javax.swing.JFrame {, ,     /**,      * Creates new form TelaPalpite,      */,     public TelaPalpite() {,         initComponents();,     }, ,     /**,      * This method is called from within the constructor to initialize the form.,      * WARNING: Do NOT modify this code. The content of this method is always,      * regenerated by the Form Editor.,      */,     @SuppressWarnings("unchecked"),     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents,     private void initComponents() {, ,         jLabel1 = new javax.swing.JLabel();,         jTextField1 = new javax.swing.JTextField();,         jButton1 = new javax.swing.JButton();, ,         setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);, ,         jLabel1.setText("Informar o Palpite");, ,         jButton1.setText("Jogar");,         jButton1.addActionListener(new java.awt.event.ActionListener() {,             public void actionPerformed(java.awt.event.ActionEvent evt) {,                 jButton1ActionPerformed(evt);,             },         });, ,         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());,         getContentPane().setLayout(layout);,         layout.setHorizontalGroup(,             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),             .addGroup(layout.createSequentialGroup(),                 .addGap(43, 43, 43),                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),                     .addComponent(jLabel1),                     .addGroup(layout.createSequentialGroup(),                         .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE),                         .addGap(18, 18, 18),                         .addComponent(jButton1))),                 .addContainerGap(51, Short.MAX_VALUE)),         );,         layout.setVerticalGroup(,             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),             .addGroup(layout.createSequentialGroup(),                 .addGap(23, 23, 23),                 .addComponent(jLabel1),                 .addGap(18, 18, 18),                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE),                     .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE),                     .addComponent(jButton1)),                 .addContainerGap(103, Short.MAX_VALUE)),         );, ,         pack();,     }// </editor-fold>//GEN-END:initComponents, ,     private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed,         // TODO add your handling code here:,         Palpite palpite = new Palpite();,         palpite.numeroDado = Integer.parseInt(jTextField1.getText());,         palpite.sortear();,         String resultado = palpite.informarResultado();,         JOptionPane.showMessageDialog(null, "Resultado: " + resultado);,     }//GEN-LAST:event_jButton1ActionPerformed, ,     /**,      * @param args the command line arguments,      */,     public static void main(String args[]) {,         /* Set the Nimbus look and feel */,         //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">,         /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.,          * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html ,          */,         try {,             for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {,                 if ("Nimbus".equals(info.getName())) {,                     javax.swing.UIManager.setLookAndFeel(info.getClassName());,                     break;,                 },             },         } catch (ClassNotFoundException ex) {,             java.util.logging.Logger.getLogger(TelaPalpite.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (InstantiationException ex) {,             java.util.logging.Logger.getLogger(TelaPalpite.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (IllegalAccessException ex) {,             java.util.logging.Logger.getLogger(TelaPalpite.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (javax.swing.UnsupportedLookAndFeelException ex) {,             java.util.logging.Logger.getLogger(TelaPalpite.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         },         //</editor-fold>, ,         /* Create and display the form */,         java.awt.EventQueue.invokeLater(new Runnable() {,             public void run() {,                 new TelaPalpite().setVisible(true);,             },         });,     }, ,     // Variables declaration - do not modify//GEN-BEGIN:variables,     private javax.swing.JButton jButton1;,     private javax.swing.JLabel jLabel1;,     private javax.swing.JTextField jTextField1;,     // End of variables declaration//GEN-END:variables, }]
[package exercicio3aleatorio;, , import java.util.Scanner;, import javax.swing.JOptionPane;, , public class Exercicio3Aleatorio {, , ,     public static void main(String[] args) {,         Scanner sc = new Scanner(System.in);,         Palpite palpite = new Palpite();,         System.out.println("Digite um Palpite: ");,         palpite.numeroDado = Integer.parseInt(sc.nextLine());,         palpite.sortear();,         String resultado = palpite.informarResultado();,         JOptionPane.showMessageDialog(null, "Resultado: " + resultado);,     },     , }]
[/*,  * Aulas professor Maromo.,  */, package exemplopacotecarros;, , import exemplopacoteroda.Roda;, , /**,  *,  * @author maromo,  */, public class ExemploPacoteCarros {, ,     /**,      * @param args the command line arguments,      */,     public static void main(String[] args) {,         // TODO code application logic here,         Carro c = new Carro();,      /*   Roda r1 = new Roda();,         Roda r2 = new Roda();,         Roda r3 = new Roda();,         Roda r4 = new Roda(); */,         ,         c.chassi= 123;,         c.rodas[0] = new Roda();,         c.rodas[1] = new Roda(); ,         c.rodas[2] = new Roda();,         c.rodas[3] = new Roda();,         c.rodas[0].descricaoRoda = "Roda do lado direito frontal";,     },     , }]
[/*,  * Aulas professor Maromo.,  */, package exemplopacotecarros;, , import exemplopacoteroda.Roda;, , /**,  *,  * @author maromo,  */, public class Carro {,     public int chassi;,     public Roda[] rodas = new Roda[4];, }]
[package exemplometodos;, , import java.util.ArrayList;, import java.util.List;, , public class ExemploMetodos {, ,     public static void main(String[] args) {,         List lista = new ArrayList();,         //Lista de qualquer coisa,         lista.add(12);,         lista.add("Juca");,         lista.add(30);,         lista.add(System.currentTimeMillis());,         lista.add(new Integer(23));,         lista.add("Juca");,         lista.add("Maromo");,         //Qtos elementos tem na lista,         System.out.println(lista.size());,         for (Object item : lista) {,             System.out.println("Elemento: " + item);,         },         while(lista.contains("Juca")){,             lista.remove("Juca");,         },         for (Object item : lista) {,             System.out.println("Elemento: " + item);,         },         System.out.println(lista.size());,         lista.clear();,         System.out.println("Tamanho depois do clear: " + lista.size());,     },     , }]
[package exemploatributo;, , import java.util.LinkedList;, import java.util.List;, , public class ExemploAtributo {, ,     /**,      * @param args the command line arguments,      */,     public static void main(String[] args) {,         //Exemplo de variável local,         int qtd = 15;,         //Exemplo de variável objeto (referência),         Aluno a1 = new Aluno();,         a1.ra = 111;,         a1.nome = "Mariana";,         a1.mostrarDados();,         Aluno a2 = new Aluno();,         a2.ra = 222;,         a2.nome = "Maycon";,         a2.mostrarDados();,         ,     },     , }]
[package exemploatributo;, , public class Aluno {,     //Atributos,     int ra;,     String nome;,     //static double comissao;,     ,     void matricular(){,         //Lógica de como matricular o aluno,     },     void mostrarDados(){,         System.out.println("Dados do aluno");,         System.out.println("RA: " + ra);,         System.out.println("Nome: " + nome);,         System.out.println("");,     }, }]
[/*,  * Aulas professor Maromo.,  */, package listagenerica;, , import java.util.ArrayList;, import java.util.List;, import javax.swing.table.DefaultTableModel;, , /**,  *,  * @author maromo,  */, public class ProdutosLista extends javax.swing.JFrame {,     List<Produto>lista = new ArrayList<>();,     /**,      * Creates new form ProdutosLista,      */,     public ProdutosLista() {,         initComponents();,     },     public ProdutosLista(List<Produto> listaOrigem) {,         initComponents();,         this.lista = listaOrigem;,         //Criar um metodo para colocar os dados na,         //tabela,         apresentarTabela();,     },     /**,      * This method is called from within the constructor to initialize the form.,      * WARNING: Do NOT modify this code. The content of this method is always,      * regenerated by the Form Editor.,      */,     @SuppressWarnings("unchecked"),     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents,     private void initComponents() {, ,         jScrollPane1 = new javax.swing.JScrollPane();,         jTable1 = new javax.swing.JTable();,         btnFechar = new javax.swing.JButton();, ,         setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);, ,         jTable1.setModel(new javax.swing.table.DefaultTableModel(,             new Object [][] {, ,             },,             new String [] {,                 "Id Produto", "Nome do Produto", "Quantidade", "Valor",             },         ));,         jScrollPane1.setViewportView(jTable1);, ,         btnFechar.setText("Fechar");,         btnFechar.addActionListener(new java.awt.event.ActionListener() {,             public void actionPerformed(java.awt.event.ActionEvent evt) {,                 btnFecharActionPerformed(evt);,             },         });, ,         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());,         getContentPane().setLayout(layout);,         layout.setHorizontalGroup(,             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),             .addGroup(layout.createSequentialGroup(),                 .addContainerGap(21, Short.MAX_VALUE),                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING),                     .addComponent(btnFechar),                     .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)),                 .addContainerGap(45, Short.MAX_VALUE)),         );,         layout.setVerticalGroup(,             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),             .addGroup(layout.createSequentialGroup(),                 .addContainerGap(),                 .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE),                 .addGap(18, 18, 18),                 .addComponent(btnFechar),                 .addContainerGap(17, Short.MAX_VALUE)),         );, ,         pack();,     }// </editor-fold>//GEN-END:initComponents, ,     private void btnFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharActionPerformed,         // TODO add your handling code here:,         this.dispose();,     }//GEN-LAST:event_btnFecharActionPerformed, ,     /**,      * @param args the command line arguments,      */,     public static void main(String args[]) {,         /* Set the Nimbus look and feel */,         //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">,         /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.,          * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html ,          */,         try {,             for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {,                 if ("Nimbus".equals(info.getName())) {,                     javax.swing.UIManager.setLookAndFeel(info.getClassName());,                     break;,                 },             },         } catch (ClassNotFoundException ex) {,             java.util.logging.Logger.getLogger(ProdutosLista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (InstantiationException ex) {,             java.util.logging.Logger.getLogger(ProdutosLista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (IllegalAccessException ex) {,             java.util.logging.Logger.getLogger(ProdutosLista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (javax.swing.UnsupportedLookAndFeelException ex) {,             java.util.logging.Logger.getLogger(ProdutosLista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         },         //</editor-fold>, ,         /* Create and display the form */,         java.awt.EventQueue.invokeLater(new Runnable() {,             public void run() {,                 new ProdutosLista().setVisible(true);,             },         });,     }, ,     // Variables declaration - do not modify//GEN-BEGIN:variables,     private javax.swing.JButton btnFechar;,     private javax.swing.JScrollPane jScrollPane1;,     private javax.swing.JTable jTable1;,     // End of variables declaration//GEN-END:variables, ,     private void apresentarTabela() {,         DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();,         modelo.setNumRows(0);,         for (Produto item : lista) {,             modelo.addRow(new Object[]{,                 (Object) item.idProduto,,                 (Object) item.nomeProduto,,                 (Object) item.quantidade,,                 (Object) item.valor,             });,         },     }, }]
[/*,  * Aulas professor Maromo.,  */, package listagenerica;, , import java.awt.Component;, import java.util.ArrayList;, import java.util.List;, import javax.swing.JOptionPane;, import javax.swing.JTextField;, , /**,  *,  * @author maromo,  */, public class ProdutosGUI extends javax.swing.JFrame {,     List<Produto> lista = new ArrayList<>();,     /**,      * Creates new form ProdutosGUI,      */,     public ProdutosGUI() {,         initComponents();,     }, ,     /**,      * This method is called from within the constructor to initialize the form.,      * WARNING: Do NOT modify this code. The content of this method is always,      * regenerated by the Form Editor.,      */,     @SuppressWarnings("unchecked"),     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents,     private void initComponents() {, ,         jLabel1 = new javax.swing.JLabel();,         jLabel2 = new javax.swing.JLabel();,         jLabel3 = new javax.swing.JLabel();,         jLabel4 = new javax.swing.JLabel();,         txtIdProduto = new javax.swing.JTextField();,         txtDescricao = new javax.swing.JTextField();,         txtValor = new javax.swing.JTextField();,         txtQuantidade = new javax.swing.JTextField();,         btnCadastrar = new javax.swing.JButton();,         btnExibir = new javax.swing.JButton();, ,         setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);, ,         jLabel1.setText("Id Produto");, ,         jLabel2.setText("Descrição");, ,         jLabel3.setText("Valor");, ,         jLabel4.setText("Quantidade");, ,         btnCadastrar.setText("Cadastrar");,         btnCadastrar.addActionListener(new java.awt.event.ActionListener() {,             public void actionPerformed(java.awt.event.ActionEvent evt) {,                 btnCadastrarActionPerformed(evt);,             },         });, ,         btnExibir.setText("Exibir");,         btnExibir.addActionListener(new java.awt.event.ActionListener() {,             public void actionPerformed(java.awt.event.ActionEvent evt) {,                 btnExibirActionPerformed(evt);,             },         });, ,         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());,         getContentPane().setLayout(layout);,         layout.setHorizontalGroup(,             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),             .addGroup(layout.createSequentialGroup(),                 .addGap(68, 68, 68),                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),                     .addComponent(jLabel1),                     .addComponent(jLabel2),                     .addComponent(jLabel3),                     .addComponent(jLabel4)),                 .addGap(37, 37, 37),                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),                     .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE),                     .addComponent(txtIdProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE),                     .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false),                         .addComponent(txtQuantidade, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE),                         .addComponent(txtValor, javax.swing.GroupLayout.Alignment.LEADING))),                 .addContainerGap(124, Short.MAX_VALUE)),             .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup(),                 .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE),                 .addComponent(btnCadastrar),                 .addGap(12, 12, 12),                 .addComponent(btnExibir, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE),                 .addGap(20, 20, 20)),         );,         layout.setVerticalGroup(,             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),             .addGroup(layout.createSequentialGroup(),                 .addGap(19, 19, 19),                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE),                     .addComponent(jLabel1),                     .addComponent(txtIdProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)),                 .addGap(28, 28, 28),                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),                     .addComponent(jLabel2),                     .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)),                 .addGap(19, 19, 19),                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE),                     .addComponent(jLabel3),                     .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)),                 .addGap(24, 24, 24),                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE),                     .addComponent(jLabel4),                     .addComponent(txtQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)),                 .addGap(34, 34, 34),                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE),                     .addComponent(btnCadastrar),                     .addComponent(btnExibir)),                 .addContainerGap(63, Short.MAX_VALUE)),         );, ,         pack();,     }// </editor-fold>//GEN-END:initComponents, ,     private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed,         // TODO add your handling code here:,         Produto p = new Produto();,         p.idProduto = Integer.parseInt(txtIdProduto.getText());,         p.nomeProduto = txtDescricao.getText();,         p.valor = Double.parseDouble(txtValor.getText());,         p.quantidade = Integer.parseInt(txtQuantidade.getText());,         lista.add(p); //Adicionou na lista.,         JOptionPane.showMessageDialog(null, ,                 "Produto cadastrado com sucesso");,         //Limpar as caixas de textos;,         for (Component item : this.getContentPane().getComponents()) {,             if (item instanceof JTextField){,                 JTextField campo = (JTextField) item;,                 campo.setText(null);,             },         },         //Colocar o cursor na primeira caixa de texto,         txtIdProduto.requestFocus();,         ,     }//GEN-LAST:event_btnCadastrarActionPerformed, ,     private void btnExibirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExibirActionPerformed,         // TODO add your handling code here:,         ProdutosLista tela = new ProdutosLista(lista);,         tela.setVisible(true);,     }//GEN-LAST:event_btnExibirActionPerformed, ,     /**,      * @param args the command line arguments,      */,     public static void main(String args[]) {,         /* Set the Nimbus look and feel */,         //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">,         /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.,          * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html ,          */,         try {,             for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {,                 if ("Nimbus".equals(info.getName())) {,                     javax.swing.UIManager.setLookAndFeel(info.getClassName());,                     break;,                 },             },         } catch (ClassNotFoundException ex) {,             java.util.logging.Logger.getLogger(ProdutosGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (InstantiationException ex) {,             java.util.logging.Logger.getLogger(ProdutosGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (IllegalAccessException ex) {,             java.util.logging.Logger.getLogger(ProdutosGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (javax.swing.UnsupportedLookAndFeelException ex) {,             java.util.logging.Logger.getLogger(ProdutosGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         },         //</editor-fold>, ,         /* Create and display the form */,         java.awt.EventQueue.invokeLater(new Runnable() {,             public void run() {,                 new ProdutosGUI().setVisible(true);,             },         });,     }, ,     // Variables declaration - do not modify//GEN-BEGIN:variables,     private javax.swing.JButton btnCadastrar;,     private javax.swing.JButton btnExibir;,     private javax.swing.JLabel jLabel1;,     private javax.swing.JLabel jLabel2;,     private javax.swing.JLabel jLabel3;,     private javax.swing.JLabel jLabel4;,     private javax.swing.JTextField txtDescricao;,     private javax.swing.JTextField txtIdProduto;,     private javax.swing.JTextField txtQuantidade;,     private javax.swing.JTextField txtValor;,     // End of variables declaration//GEN-END:variables, }]
[package listagenerica;, , import java.util.Objects;, , public class Produto {,     public int idProduto;,     public String nomeProduto;,     public double valor;,     public int quantidade;, ,     @Override,     public int hashCode() {,         int hash = nomeProduto.length();,         return hash;,     }, ,     @Override,     public boolean equals(Object obj) {,         if (obj == null) {,             return false;,         },         if (getClass() != obj.getClass()) {,             return false;,         },         final Produto other = (Produto) obj;,         if (this.idProduto != other.idProduto) {,             return false;,         },         return true;,     },     ,     , }]
[package listagenerica;, , public class ListaGenerica {, ,     public static void main(String[] args) {,         ProdutosGUI tela = new ProdutosGUI();,         tela.setVisible(true);,     },     , }]
[/*,  * Aulas professor Maromo.,  */, package exemplopacoteroda;, , /**,  *,  * @author maromo,  */, public class ExemploPacoteRoda {, ,     /**,      * @param args the command line arguments,      */,     public static void main(String[] args) {,         // TODO code application logic here,     },     , }]
[/*,  * Aulas professor Maromo.,  */, package exemplopacoteroda;, , /**,  *,  * @author maromo,  */, public class Roda {,     public int tipoRoda;,     public int numeroRoda;,     public String descricaoRoda;,     ,     public void imprimir(){,         System.out.println("Descrição");,         System.out.println(descricaoRoda);,     }, }]
[package principalcontascorrentes;, , import java.util.Scanner;, , public class PrincipalContasCorrentes {, ,     //atributos,     public ContasCorrente cc = new ContasCorrente();, ,     //métodos,     public static void main(String[] args) {,         Scanner sc = new Scanner(System.in);,         int opc = 0;,         PrincipalContasCorrentes pcc,                 = new PrincipalContasCorrentes();,         do {,             System.out.println("Escolha sua opção");,             System.out.println("1.. Cadastrar");,             System.out.println("2.. Depositar");,             System.out.println("3.. Sacar");,             System.out.println("4.. Consultar");,             System.out.println("5.. Sair");,             opc = Integer.parseInt(sc.nextLine());,             switch (opc) {,                 case 1:,                     pcc.execCadastrar();,                     break;,                 case 2:,                     pcc.execDeposito();,                     break;,                 case 3:,                     pcc.execSaque();,                     break;,                 case 4:,                     pcc.execConsulta();,                     break;,                 case 5:,                     System.out.println("Fui. Acabou");,                     break;,                 default:,                     System.out.println("Opção invalida");,             },         } while (opc != 5);,     }, ,     void execCadastrar() {,         Scanner sc = new Scanner(System.in);,         System.out.println("Cadastrando a conta");,         System.out.println("Digite o numero: ");,         cc.conta = sc.nextLine();,         System.out.println("Digite o nome");,         cc.nomeCliente = sc.nextLine();,         System.out.println("Conta cadastrada");,     }, ,     void execConsulta() {,         cc.imprimir();,     }, ,     void execSaque() {,         Scanner sc = new Scanner(System.in);,         System.out.println("Digite o valor do saque: ");,         double valor = Double.parseDouble(sc.nextLine());,         int retorno = cc.sacar(valor);,         if (retorno == 1) {,             System.out.println("Saque efetuado com sucesso");,         } else {,             System.out.println("Não possui saldo suficiente");,         },     }, ,     void execDeposito() {,         Scanner sc = new Scanner(System.in);,         System.out.println("Digite o valor do deposito: ");,         double valor = Double.parseDouble(sc.nextLine());,         cc.depositar(valor);,         System.out.println("Deposito efetuado com sucesso");,     }, , }]
[package principalcontascorrentes;, , public class ContasCorrente {,     //Atributos,     String conta;,     double saldo;,     String nomeCliente;,     ,     //Métodos,     int sacar(double valor){,         if(valor<=saldo){,             saldo -= valor;,             return 1;,         },         return 0;,     },     void depositar(double valor){,         saldo += valor;,     },     void imprimir(){,         System.out.println("Dados da Conta: " + conta);,         System.out.println("Cliente: " + nomeCliente);,         System.out.println("Saldo: " + saldo);,         System.out.println("-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");,     }, }]
[/*,  * Aulas professor Maromo.,  */, package exemplopacote.telas;, , /**,  *,  * @author maromo,  */, public class Tela1 extends javax.swing.JFrame {, ,     /**,      * Creates new form Tela1,      */,     public Tela1() {,         initComponents();,     }, ,     /**,      * This method is called from within the constructor to initialize the form.,      * WARNING: Do NOT modify this code. The content of this method is always,      * regenerated by the Form Editor.,      */,     @SuppressWarnings("unchecked"),     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents,     private void initComponents() {, ,         jButton1 = new javax.swing.JButton();, ,         setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);, ,         jButton1.setText("jButton1");, ,         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());,         getContentPane().setLayout(layout);,         layout.setHorizontalGroup(,             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),             .addGroup(layout.createSequentialGroup(),                 .addGap(150, 150, 150),                 .addComponent(jButton1),                 .addContainerGap(171, Short.MAX_VALUE)),         );,         layout.setVerticalGroup(,             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),             .addGroup(layout.createSequentialGroup(),                 .addGap(111, 111, 111),                 .addComponent(jButton1),                 .addContainerGap(164, Short.MAX_VALUE)),         );, ,         pack();,     }// </editor-fold>//GEN-END:initComponents, ,     /**,      * @param args the command line arguments,      */,     public static void main(String args[]) {,         /* Set the Nimbus look and feel */,         //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">,         /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.,          * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html ,          */,         try {,             for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {,                 if ("Nimbus".equals(info.getName())) {,                     javax.swing.UIManager.setLookAndFeel(info.getClassName());,                     break;,                 },             },         } catch (ClassNotFoundException ex) {,             java.util.logging.Logger.getLogger(Tela1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (InstantiationException ex) {,             java.util.logging.Logger.getLogger(Tela1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (IllegalAccessException ex) {,             java.util.logging.Logger.getLogger(Tela1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (javax.swing.UnsupportedLookAndFeelException ex) {,             java.util.logging.Logger.getLogger(Tela1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         },         //</editor-fold>, ,         /* Create and display the form */,         java.awt.EventQueue.invokeLater(new Runnable() {,             public void run() {,                 new Tela1().setVisible(true);,             },         });,     }, ,     // Variables declaration - do not modify//GEN-BEGIN:variables,     private javax.swing.JButton jButton1;,     // End of variables declaration//GEN-END:variables, }]
[package exemplopacote;, , import exemplopacote.telas.Tela1;, , , public class ExemploPacote {, , ,     public static void main(String[] args) {,         Tela1 tela = new Tela();,     },     , }]
[/*,  * Aulas professor Maromo.,  */, package exemplovetor3.telas;, , /**,  *,  * @author maromo,  */, public class Tela1 extends javax.swing.JFrame {, ,     /**,      * Creates new form Tela1,      */,     public Tela1() {,         initComponents();,     }, ,     /**,      * This method is called from within the constructor to initialize the form.,      * WARNING: Do NOT modify this code. The content of this method is always,      * regenerated by the Form Editor.,      */,     @SuppressWarnings("unchecked"),     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents,     private void initComponents() {, ,         jButton1 = new javax.swing.JButton();, ,         setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);, ,         jButton1.setText("jButton1");, ,         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());,         getContentPane().setLayout(layout);,         layout.setHorizontalGroup(,             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),             .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup(),                 .addContainerGap(167, Short.MAX_VALUE),                 .addComponent(jButton1),                 .addGap(154, 154, 154)),         );,         layout.setVerticalGroup(,             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),             .addGroup(layout.createSequentialGroup(),                 .addGap(120, 120, 120),                 .addComponent(jButton1),                 .addContainerGap(155, Short.MAX_VALUE)),         );, ,         pack();,     }// </editor-fold>//GEN-END:initComponents, ,     /**,      * @param args the command line arguments,      */,     public static void main(String args[]) {,         /* Set the Nimbus look and feel */,         //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">,         /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.,          * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html ,          */,         try {,             for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {,                 if ("Nimbus".equals(info.getName())) {,                     javax.swing.UIManager.setLookAndFeel(info.getClassName());,                     break;,                 },             },         } catch (ClassNotFoundException ex) {,             java.util.logging.Logger.getLogger(Tela1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (InstantiationException ex) {,             java.util.logging.Logger.getLogger(Tela1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (IllegalAccessException ex) {,             java.util.logging.Logger.getLogger(Tela1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (javax.swing.UnsupportedLookAndFeelException ex) {,             java.util.logging.Logger.getLogger(Tela1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         },         //</editor-fold>, ,         /* Create and display the form */,         java.awt.EventQueue.invokeLater(new Runnable() {,             public void run() {,                 new Tela1().setVisible(true);,             },         });,     }, ,     // Variables declaration - do not modify//GEN-BEGIN:variables,     private javax.swing.JButton jButton1;,     // End of variables declaration//GEN-END:variables, }]
[package exemplovetor3;, , import java.util.Arrays;, , public class ExemploVetor3 {, , ,     public static void main(String[] args) {,         int va [] = {3,5,7,9,12};,        /* for (int item : va) {,             System.out.println(item);,         }*/,         int vb [] = new int[15];,      ,         Arrays.fill(vb, 3, 8, 25);,         for (int item : vb) {,             System.out.println(item);,         },         ,     },     , }]
[/*,  * Aulas professor Maromo.,  */, package hellostudents;, , /**,  *,  * @author maromo,  */, public class Student {,     public String name; //Campo nome do aluno,     public int age; //Campo idade do aluno,     ,     /**,      * @since Agosto de 2017,      * ,      * ,      */,     public void show(){,         System.out.println("Nome do Aluno: " + name);,         System.out.println("Idade do Aluno: " + age);,     }, }]
[/*,  * Aulas professor Maromo.,  */, package hellostudents;, , import java.util.Scanner;, , /**,  *,  * @author maromo,  */, public class StudentsTest {, ,     /**,      * @param args Parâmetro que pode ser passado pela linha de ,      * comando,      */,     public static void main(String[] args) {,         // TODO code application logic here,         //Programa que recebe dois dados do usuario,         //um refere-se ao nome e o outro refere-se a idade,         //1. Criar um objeto do tipo Student (variável objeto),         Student aluno = new Student();,         Scanner sc = new Scanner(System.in);,         System.out.println("Digite o nome do aluno: ");,         aluno.name = sc.nextLine();,         System.out.println("Digite a idade: ");,         aluno.age = sc.nextInt();,         aluno.show();,         ,         ,     },     , }]
[package excecoescustomizadas;, , public class ExcecoesCustomizadas {, , ,     public static void main(String[] args) {,        Cliente x = new Cliente();,        x.cadastrarCliente();,        x.imprimir();,     },     , }]
[package excecoescustomizadas;, , , public class ClienteException extends Exception {,     private int codigo;,     private String mensagem;,     ,     public ClienteException(int codigo){,         this.codigo = codigo;,         tratarExcecao();,     }, ,     private void tratarExcecao() {,         if(codigo == 17){,             mensagem = "Tamanho do campo nome deve ser menor ou igual a 50";,         },     },     @Override,     public String getMessage(){,         return mensagem;,     }, }]
[package excecoescustomizadas;, , import java.util.Scanner;, , public class Cliente {, ,     private int id;,     private String nome;, ,     public int getId() {,         return id;,     }, ,     public void setId(int id) {,         this.id = id;,     }, ,     public String getNome() {,         return nome;,     }, ,     public void setNome(String nome) throws ClienteException {,         try {,             if(nome.length()>50) throw new ClienteException(17);,         } catch (ClienteException e) {,             throw e;,         },         this.nome = nome;,     }, ,     public void cadastrarCliente() {,         try {,             Scanner sc = new Scanner(System.in);,             System.out.println("Digite o id do Cliente: ");,             this.id = Integer.parseInt(sc.nextLine());,             System.out.println("Digite o nome do Cliente: ");,             this.setNome(sc.nextLine());,             System.out.println("Cliente cadastrado com sucesso..");,         } catch (Exception e) {,             System.out.println("Aconteceu o erro: " + e.getMessage());,         }, ,     }, ,     public void imprimir() {,         System.out.println("Id do cliente: " + id);,         System.out.println("Nome: " + nome);,         System.out.println("");,     }, }]
[/*,  * Aulas professor Maromo.,  */, package excecoescustomizadas;, , import java.util.logging.Level;, import java.util.logging.Logger;, import javax.swing.JOptionPane;, , /**,  *,  * @author maromo,  */, public class ClienteGUI extends javax.swing.JFrame {, ,     /**,      * Creates new form ClienteGUI,      */,     public ClienteGUI() {,         initComponents();,     }, ,     /**,      * This method is called from within the constructor to initialize the form.,      * WARNING: Do NOT modify this code. The content of this method is always,      * regenerated by the Form Editor.,      */,     @SuppressWarnings("unchecked"),     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents,     private void initComponents() {, ,         jLabel1 = new javax.swing.JLabel();,         jLabel2 = new javax.swing.JLabel();,         txtId = new javax.swing.JTextField();,         txtNome = new javax.swing.JTextField();,         btnCadastrar = new javax.swing.JButton();, ,         setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);,         getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());, ,         jLabel1.setText("Id");,         getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(35, 35, -1, -1));, ,         jLabel2.setText("Nome: ");,         getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(35, 81, -1, -1));,         getContentPane().add(txtId, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 30, 120, -1));,         getContentPane().add(txtNome, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 170, -1));, ,         btnCadastrar.setText("Cadastrar");,         btnCadastrar.addActionListener(new java.awt.event.ActionListener() {,             public void actionPerformed(java.awt.event.ActionEvent evt) {,                 btnCadastrarActionPerformed(evt);,             },         });,         getContentPane().add(btnCadastrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(219, 130, -1, -1));, ,         pack();,     }// </editor-fold>//GEN-END:initComponents, ,     private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed,         // TODO add your handling code here:,         Cliente x = new Cliente();,         x.setId(Integer.parseInt(txtId.getText()));,         try {,             x.setNome(txtNome.getText());,         } catch (ClienteException ex) {,             JOptionPane.showMessageDialog(null, "Erro: " +,                     ex.getMessage());,         },         JOptionPane.showMessageDialog(null, "Cadastrado com sucesso");,         ,     }//GEN-LAST:event_btnCadastrarActionPerformed, ,     /**,      * @param args the command line arguments,      */,     public static void main(String args[]) {,         /* Set the Nimbus look and feel */,         //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">,         /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.,          * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html ,          */,         try {,             for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {,                 if ("Nimbus".equals(info.getName())) {,                     javax.swing.UIManager.setLookAndFeel(info.getClassName());,                     break;,                 },             },         } catch (ClassNotFoundException ex) {,             java.util.logging.Logger.getLogger(ClienteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (InstantiationException ex) {,             java.util.logging.Logger.getLogger(ClienteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (IllegalAccessException ex) {,             java.util.logging.Logger.getLogger(ClienteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (javax.swing.UnsupportedLookAndFeelException ex) {,             java.util.logging.Logger.getLogger(ClienteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         },         //</editor-fold>, ,         /* Create and display the form */,         java.awt.EventQueue.invokeLater(new Runnable() {,             public void run() {,                 new ClienteGUI().setVisible(true);,             },         });,     }, ,     // Variables declaration - do not modify//GEN-BEGIN:variables,     private javax.swing.JButton btnCadastrar;,     private javax.swing.JLabel jLabel1;,     private javax.swing.JLabel jLabel2;,     private javax.swing.JTextField txtId;,     private javax.swing.JTextField txtNome;,     // End of variables declaration//GEN-END:variables, }]
[package exemplohash;, , , public class ExemploHash {, , ,     public static void main(String[] args) {,         Aluno a1 = new Aluno();,         a1.ra = 1;,         a1.nome = "Ana";,         System.out.println("Hash de Ana: " + a1.hashCode());,         Aluno a2 = new Aluno();,         a2.ra = 2;,         a2.nome = "Ana";,         System.out.println("Hash de Ana: " + a2.hashCode());,         System.out.println(a1.equals(a2));,     },     , }]
[package exemplohash;, , import java.util.Objects;, , , public class Aluno {,     public int ra;,     public String nome;, ,     @Override,     public int hashCode() {,         //Determinado pelo número de letras no nome do aluno,         int hash = nome.length();,         return hash;,     }, ,     @Override,     public boolean equals(Object obj) {,         if (obj == null) {,             return false;,         },         if (getClass() != obj.getClass()) {,             return false;,         },         final Aluno other = (Aluno) obj;,         if (this.ra != other.ra) {,             return false;,         },         return true;,     },     ,     , }]
[/*,  * Aulas professor Maromo.,  */, package oo1;, , /**,  *,  * @author maromo,  */, public class TelaInicial extends javax.swing.JFrame {, ,     /**,      * Creates new form TelaInicial,      */,     public TelaInicial() {,         initComponents();,     }, ,     /**,      * This method is called from within the constructor to initialize the form.,      * WARNING: Do NOT modify this code. The content of this method is always,      * regenerated by the Form Editor.,      */,     @SuppressWarnings("unchecked"),     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents,     private void initComponents() {, ,         buttonAlunos = new javax.swing.JButton();,         buttonProfessores = new javax.swing.JButton();,         buttonFechar = new javax.swing.JButton();, ,         setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);,         setTitle("Aplicativo Acadêmico");, ,         buttonAlunos.setText("Formulário de Alunos");,         buttonAlunos.addMouseListener(new java.awt.event.MouseAdapter() {,             public void mouseClicked(java.awt.event.MouseEvent evt) {,                 buttonAlunosMouseClicked(evt);,             },         });, ,         buttonProfessores.setText("Formulário de Professores");, ,         buttonFechar.setText("Fechar o Aplicativo");,         buttonFechar.addMouseListener(new java.awt.event.MouseAdapter() {,             public void mouseClicked(java.awt.event.MouseEvent evt) {,                 buttonFecharMouseClicked(evt);,             },         });, ,         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());,         getContentPane().setLayout(layout);,         layout.setHorizontalGroup(,             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),             .addGroup(layout.createSequentialGroup(),                 .addGap(94, 94, 94),                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false),                     .addComponent(buttonProfessores, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE),                     .addComponent(buttonAlunos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE),                     .addComponent(buttonFechar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)),                 .addContainerGap(93, Short.MAX_VALUE)),         );,         layout.setVerticalGroup(,             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),             .addGroup(layout.createSequentialGroup(),                 .addGap(45, 45, 45),                 .addComponent(buttonAlunos),                 .addGap(34, 34, 34),                 .addComponent(buttonProfessores),                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 106, Short.MAX_VALUE),                 .addComponent(buttonFechar),                 .addGap(40, 40, 40)),         );, ,         pack();,     }// </editor-fold>//GEN-END:initComponents, ,     private void buttonFecharMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonFecharMouseClicked,         // TODO add your handling code here:,         System.exit(0);,     }//GEN-LAST:event_buttonFecharMouseClicked, ,     private void buttonAlunosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonAlunosMouseClicked,         // TODO add your handling code here:,         AlunoGUI telaAluno = new AlunoGUI();,         telaAluno.setVisible(true);,     }//GEN-LAST:event_buttonAlunosMouseClicked, ,     /**,      * @param args the command line arguments,      */,     public static void main(String args[]) {,         /* Set the Nimbus look and feel */,         //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">,         /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.,          * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html ,          */,         try {,             for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {,                 if ("Nimbus".equals(info.getName())) {,                     javax.swing.UIManager.setLookAndFeel(info.getClassName());,                     break;,                 },             },         } catch (ClassNotFoundException ex) {,             java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (InstantiationException ex) {,             java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (IllegalAccessException ex) {,             java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (javax.swing.UnsupportedLookAndFeelException ex) {,             java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         },         //</editor-fold>, ,         /* Create and display the form */,         java.awt.EventQueue.invokeLater(new Runnable() {,             public void run() {,                 new TelaInicial().setVisible(true);,             },         });,     }, ,     // Variables declaration - do not modify//GEN-BEGIN:variables,     private javax.swing.JButton buttonAlunos;,     private javax.swing.JButton buttonFechar;,     private javax.swing.JButton buttonProfessores;,     // End of variables declaration//GEN-END:variables, }]
[package oo1;, , , public class Professor {,     public int rgFunc;,     public String nome;,     public String cidade;,     public String estado;,     public String email;,     ,     public String contratar(){,         return ""; //Tome por base o Aluno,     },     public boolean demitir(int rgFuncProc){,         return true; //Tome por base o Aluno,     }, }]
[/*,  * Aulas professor Maromo.,  */, package oo1;, , import java.util.ArrayList;, import java.util.List;, import javax.swing.JOptionPane;, import javax.swing.table.DefaultTableModel;, , /**,  *,  * @author maromo,  */, public class AlunoGUI extends javax.swing.JFrame {,     //Definindo atributos,     Aluno aluno;,     List<Aluno> lista;,     /**,      * Creates new form AlunoGUI,      */,     public AlunoGUI() {,         initComponents();,         aluno = new Aluno();,         lista = new ArrayList<>();,     }, ,     /**,      * This method is called from within the constructor to initialize the form.,      * WARNING: Do NOT modify this code. The content of this method is always,      * regenerated by the Form Editor.,      */,     @SuppressWarnings("unchecked"),     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents,     private void initComponents() {, ,         jLabel1 = new javax.swing.JLabel();,         jLabel2 = new javax.swing.JLabel();,         jLabel3 = new javax.swing.JLabel();,         jLabel4 = new javax.swing.JLabel();,         textRa = new javax.swing.JTextField();,         textNome = new javax.swing.JTextField();,         textEndereco = new javax.swing.JTextField();,         textDataNascimento = new javax.swing.JTextField();,         buttonCadastrar = new javax.swing.JButton();,         buttonCancelar = new javax.swing.JButton();,         buttonFechar = new javax.swing.JButton();,         jScrollPane1 = new javax.swing.JScrollPane();,         jTable1 = new javax.swing.JTable();, ,         setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);,         setTitle("Cadastro de Alunos");, ,         jLabel1.setText("Ra do Aluno:");, ,         jLabel2.setText("Nome:");, ,         jLabel3.setText("Endereço:");, ,         jLabel4.setText("Data de Nascimento:");, ,         buttonCadastrar.setText("Cadastrar");,         buttonCadastrar.addMouseListener(new java.awt.event.MouseAdapter() {,             public void mouseClicked(java.awt.event.MouseEvent evt) {,                 buttonCadastrarMouseClicked(evt);,             },         });, ,         buttonCancelar.setText("Cancelar");,         buttonCancelar.addMouseListener(new java.awt.event.MouseAdapter() {,             public void mouseClicked(java.awt.event.MouseEvent evt) {,                 buttonCancelarMouseClicked(evt);,             },         });, ,         buttonFechar.setText("Fechar");,         buttonFechar.addMouseListener(new java.awt.event.MouseAdapter() {,             public void mouseClicked(java.awt.event.MouseEvent evt) {,                 buttonFecharMouseClicked(evt);,             },         });, ,         jTable1.setModel(new javax.swing.table.DefaultTableModel(,             new Object [][] {, ,             },,             new String [] {,                 "RA", "Nome", "Endereço", "Nascimento",             },         ));,         jScrollPane1.setViewportView(jTable1);, ,         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());,         getContentPane().setLayout(layout);,         layout.setHorizontalGroup(,             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),             .addGroup(layout.createSequentialGroup(),                 .addGap(50, 50, 50),                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),                     .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE),                     .addGroup(layout.createSequentialGroup(),                         .addComponent(jLabel1),                         .addGap(56, 56, 56),                         .addComponent(textRa, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)),                     .addGroup(layout.createSequentialGroup(),                         .addComponent(jLabel2),                         .addGap(92, 92, 92),                         .addComponent(textNome, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)),                     .addGroup(layout.createSequentialGroup(),                         .addComponent(jLabel3),                         .addGap(72, 72, 72),                         .addComponent(textEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)),                     .addGroup(layout.createSequentialGroup(),                         .addComponent(jLabel4),                         .addGap(11, 11, 11),                         .addComponent(textDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)),                     .addGroup(layout.createSequentialGroup(),                         .addComponent(buttonCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE),                         .addGap(10, 10, 10),                         .addComponent(buttonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE),                         .addGap(116, 116, 116),                         .addComponent(buttonFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))),                 .addContainerGap(51, Short.MAX_VALUE)),         );,         layout.setVerticalGroup(,             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),             .addGroup(layout.createSequentialGroup(),                 .addGap(30, 30, 30),                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),                     .addComponent(jLabel1),                     .addComponent(textRa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)),                 .addGap(18, 18, 18),                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),                     .addComponent(jLabel2),                     .addComponent(textNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)),                 .addGap(28, 28, 28),                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),                     .addComponent(jLabel3),                     .addComponent(textEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)),                 .addGap(28, 28, 28),                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),                     .addComponent(jLabel4),                     .addComponent(textDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)),                 .addGap(18, 18, 18),                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),                     .addComponent(buttonCadastrar),                     .addComponent(buttonCancelar),                     .addComponent(buttonFechar)),                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE),                 .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE),                 .addGap(24, 24, 24)),         );, ,         pack();,     }// </editor-fold>//GEN-END:initComponents, ,     private void buttonCadastrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonCadastrarMouseClicked,         // TODO add your handling code here:,         Aluno aluno = new Aluno();,         aluno.ra = Integer.parseInt(textRa.getText());,         aluno.nome = textNome.getText();,         aluno.endereco = textEndereco.getText();,         aluno.dataNascimento = textDataNascimento.getText();,         String texto = aluno.matricular();,         //Exibir uma caixa de mensagem,         JOptionPane.showMessageDialog(null, texto, "Cadastro", ,                 JOptionPane.INFORMATION_MESSAGE);,         //Adicionar o aluno cadastrado na lista criada,         lista.add(aluno);,         //Montar o codigo para apresentar a lista na tabela criada,         DefaultTableModel modelo = ,                 (DefaultTableModel) jTable1.getModel();,         modelo.setNumRows(0);,         for (Aluno x : lista) {,             modelo.addRow(new Object[]{,                 (Object)x.ra,,                 (Object)x.nome,,                 (Object)x.endereco,,                 (Object)x.dataNascimento,             });,         },         limpar();,         ,     }//GEN-LAST:event_buttonCadastrarMouseClicked, ,     public void limpar() {,         //Limpar todos os componentes da tela,         textRa.setText(null);,         textNome.setText(null);,         textEndereco.setText(null);,         textDataNascimento.setText(null);,         textRa.requestFocus();,     }, ,     private void buttonCancelarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonCancelarMouseClicked,         // TODO add your handling code here:,         int raProc = Integer.parseInt(textRa.getText());, ,         boolean resultado = aluno.cancelarMatricula(raProc);,         if(resultado==true){,             textNome.setText(aluno.nome);,             textEndereco.setText(aluno.endereco);,             textDataNascimento.setText(aluno.dataNascimento);,             JOptionPane.showMessageDialog(null, "Matrícula Cancelada");,             aluno.ra = 0;,             aluno.nome = "";,             aluno.endereco = "";,             aluno.dataNascimento = "";,             limpar();,         }else{,             JOptionPane.showMessageDialog(null, "Aluno não encontrado");,         },     }//GEN-LAST:event_buttonCancelarMouseClicked, ,     private void buttonFecharMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonFecharMouseClicked,         // TODO add your handling code here:,         //Código que fecha o aplicativo, abaixo: ,         // System.exit(0);,         ,         //Vamos optar por esconder a janela,         setVisible(false);,     }//GEN-LAST:event_buttonFecharMouseClicked, ,     /**,      * @param args the command line arguments,      */,     , ,     // Variables declaration - do not modify//GEN-BEGIN:variables,     private javax.swing.JButton buttonCadastrar;,     private javax.swing.JButton buttonCancelar;,     private javax.swing.JButton buttonFechar;,     private javax.swing.JLabel jLabel1;,     private javax.swing.JLabel jLabel2;,     private javax.swing.JLabel jLabel3;,     private javax.swing.JLabel jLabel4;,     private javax.swing.JScrollPane jScrollPane1;,     private javax.swing.JTable jTable1;,     private javax.swing.JTextField textDataNascimento;,     private javax.swing.JTextField textEndereco;,     private javax.swing.JTextField textNome;,     private javax.swing.JTextField textRa;,     // End of variables declaration//GEN-END:variables, }]
[package oo1;, , public class OO1 {, ,     public static void main(String[] args) {,         TelaInicial tela = new TelaInicial();,         tela.setVisible(true);,     },     , }]
[package oo1;, , , public class Aluno {,     //Definir os atributos,     public int ra;,     public String nome;,     public String endereco;,     public String dataNascimento;,     ,     //Definir os métodos,     public String matricular(){,         StringBuilder texto = new StringBuilder();,         texto.append("Efetuando a Matrícula \n");,         texto.append("Ra do Aluno: ").append(ra).append("\n");,         texto.append("Nome do Aluno: ").append(nome).append("\n");,         texto.append("Matrícula efetuada com sucesso \n");,         return texto.toString();,     },     ,     public boolean cancelarMatricula(int raProc){,         if(raProc == ra){,            return true;,         },         return false;,     }, }]
[package projetolivraria2;, , public class Livros extends Produtos {,     //Membros ou atributos (privados),     private String autor;,     private String editora;,     private String edicao;,     ,     //Construtor,     public Livros(){,         this.autor = "";,         this.editora = "";,         this.edicao = "";,     },     ,     //Métodos Modificadores de Acesso aos Campos            ,     public String getAutor() {,         return autor;,     }, ,     public void setAutor(String autor) {,         this.autor = autor;,     }, ,     public String getEditora() {,         return editora;,     }, ,     public void setEditora(String editora) {,         this.editora = editora;,     }, ,     public String getEdicao() {,         return edicao;,     }, ,     public void setEdicao(String edicao) {,         this.edicao = edicao;,     },     ,     //Método específico da classe.,     @Override,     public void listarProduto(){,         System.out.println("<---- DADOS DO PRODUTO ---->");,         System.out.println("Descrição........: " + this.getDescricao());,         System.out.println("Gênero...........: " + this.getGenero());,         System.out.println("Estoque..........: " + this.getEstoqueDisponivel());,         System.out.println("Preço..........R$: " + this.getPrecoCusto());,         System.out.println("Autor............: " + this.autor);,         System.out.println("Preco de Venda R$: " + this.getPrecoVenda());,         System.out.println("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");,         System.out.println("");,         ,     },     ,     @Override,     public void calcularPrecoVenda(){,         this.setPrecoVenda(this.getPrecoCusto()*1.10);,     },     , }]
[package projetolivraria2;, , public class Cds extends Produtos {,     //Membros ou atributos (privados),     private String artista;,     private String gravadora;,     private String paisOrigem;,   //  private double precoVenda;,     ,     //Construtores,     public Cds(){,         this.artista = "";,         this.gravadora = "";,         this.paisOrigem = "";,     },     ,     //Métodos Modificadores de Acesso aos Campos, ,     public String getArtista() {,         return artista;,     }, ,     public void setArtista(String artista) {,         this.artista = artista;,     }, ,     public String getGravadora() {,         return gravadora;,     }, ,     public void setGravadora(String gravadora) {,         this.gravadora = gravadora;,     }, ,     public String getPaisOrigem() {,         return paisOrigem;,     }, ,     public void setPaisOrigem(String paisOrigem) {,         this.paisOrigem = paisOrigem;,     }, ,     @Override,     public void listarProduto(){,         System.out.println("<---- DADOS DO PRODUTO ---->");,         System.out.println("Descrição........: " + this.getDescricao());,         System.out.println("Gênero...........: " + this.getGenero());,         System.out.println("Estoque..........: " + this.getEstoqueDisponivel());,         System.out.println("Preço..........R$: " + this.getPrecoCusto());,         System.out.println("Artista..........: " + this.artista);,         System.out.println("Preco de Venda R$: " + this.getPrecoVenda());,         System.out.println("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");,         System.out.println("");,     },     ,     , @Override,     public void calcularPrecoVenda(){,         this.setPrecoVenda(this.getPrecoCusto()*1.15);,     }, }]
[, package projetolivraria2;, //SuperClasse Abstrata, public abstract class Produtos {,     //Membros com acesso (private),     private String descricao;,     private String genero;,     private int estoqueDisponivel;,     private double precoCusto;,     private double precoVenda;,       ,     //Métodos Modificadores de Acesso aos Campos,     public String getDescricao() {,         return descricao;,     }, ,     public void setDescricao(String descricao) {,         this.descricao = descricao;,     }, ,     public String getGenero() {,         return genero;,     }, ,     public void setGenero(String genero) {,         this.genero = genero;,     }, ,     public int getEstoqueDisponivel() {,         return estoqueDisponivel;,     }, ,     public void setEstoqueDisponivel(int estoqueDisponivel) {,         this.estoqueDisponivel = estoqueDisponivel;,     }, ,     public double getPrecoCusto() {,         return precoCusto;,     }, ,     public void setPrecoCusto(double precoCusto) {,         this.precoCusto = precoCusto;,     }, ,     public double getPrecoVenda() {,         return precoVenda;,     }, ,     public void setPrecoVenda(double precoVenda) {,         this.precoVenda = precoVenda;,     },     ,     ,     //Métodos Construtores sem parâmetros,     public Produtos(){,         this.descricao = "";,         this.estoqueDisponivel = 0;,         this.genero = "";,         this.precoCusto = 0.0;,         this.precoVenda = 0.0;,     },     ,     //Métodos Especificos da Classe,     ,     public void comprar(int qtd){,         //Apressenta o estoque atual. E o estoqueatualizado.,         System.out.println("<----ESTOQUE---->");,         System.out.println("Quantidade do produto: " + this.descricao);,         System.out.println("Anterior: " + this.estoqueDisponivel);,         this.estoqueDisponivel += qtd;,         System.out.println("Atual:   " + this.estoqueDisponivel);,     },     ,     public void vender(int qtd){,         //Apressenta o estoque atual. E o estoqueatualizado.,         System.out.println("<----ESTOQUE---->");,         System.out.println("Quantidade do produto: " + this.descricao);,         System.out.println("Anterior: " + this.estoqueDisponivel);,         this.estoqueDisponivel -= qtd;,         System.out.println("Atual:   " + this.estoqueDisponivel);,         ,     },     ,     //Métodos Abstratos,     public abstract void listarProduto();,     ,     public abstract void calcularPrecoVenda();, }]
[package projetolivraria2;, , public class Dvds extends Produtos{,     //Membros ou atributos (privados),     private String diretor;,     private String duracao;,     private String censura;,  //   private double precoVenda;,     ,     //Construtores,     public Dvds(){,         this.diretor = "";,         this.duracao = "";,         this.censura = "";,     },     ,     //Métodos Modificadores de Acesso aos Campos,     public String getDiretor() {,         return diretor;,     }, ,     public void setDiretor(String diretor) {,         this.diretor = diretor;,     }, ,     public String getDuracao() {,         return duracao;,     }, ,     public void setDuracao(String duracao) {,         this.duracao = duracao;,     }, ,     public String getCensura() {,         return censura;,     }, ,     public void setCensura(String censura) {,         this.censura = censura;,     },     ,     @Override,     public void listarProduto(){,         System.out.println("<---- DADOS DO PRODUTO ---->");,         System.out.println("Descrição........: " + this.getDescricao());,         System.out.println("Gênero...........: " + this.getGenero());,         System.out.println("Estoque..........: " + this.getEstoqueDisponivel());,         System.out.println("Preço..........R$: " + this.getPrecoCusto());,         System.out.println("Diretor..........: " + this.diretor);,         System.out.println("Preco de Venda R$: " + this.getPrecoVenda());,         System.out.println("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");,         System.out.println("");,     },     ,     //Método Específico da Classe,     public void calcularPrecoVenda(double cotDolar){,         this.setPrecoVenda(this.getPrecoCusto()*cotDolar*1.20);,     },     ,     @Override,     public void calcularPrecoVenda(){,         ,     }, }]
[, package projetolivraria2;, , import java.util.Scanner;, , public class Principal {, ,     public static void main(String[] args) throws InterruptedException {,         // TODO code application logic here,          Scanner sc = new Scanner(System.in);,         ,         //Criando um objeto livro,         Livros livro = new Livros();,         livro.setDescricao("Java com Ênfase em OO");,         livro.setEdicao("N. 1");,         livro.setAutor("Douglas Mendes");,         livro.setEditora("Novatec");,         livro.setGenero("Programação");,         livro.setEstoqueDisponivel(10);,         livro.setPrecoCusto(100.90);,         livro.calcularPrecoVenda();,         ,         //Criando um objeto Dvd,         Dvds dvd = new Dvds();,         dvd.setDescricao("Acima de Qualquer Suspeita");,         dvd.setCensura("14 anos");,         dvd.setDiretor("Michael Douglas");,         dvd.setDuracao("120 minutos");,         dvd.setEstoqueDisponivel(5);,         dvd.setGenero("Drama");,         dvd.setPrecoCusto(66.98);,         dvd.calcularPrecoVenda(3.20);,         ,         //Criando um objeto cd,         Cds cd = new Cds();,         cd.setDescricao("Live Era '87-'93");,         cd.setGenero("Rock");,         cd.setGravadora("Universal");,         cd.setPaisOrigem("EUA");,         cd.setArtista("Guns N' Roses");,         cd.setEstoqueDisponivel(5);,         cd.setPrecoCusto(9.99);,         cd.calcularPrecoVenda();,         ,     //Menu - Escolha uma opção,     int opc = 0;,     while(opc != 7){,         System.out.println("Escolha a opção");,             System.out.println("1--> Comprar Mais Exemplar do Livro");,             System.out.println("2--> Vender Exemplar do Livro");,             System.out.println("3--> Comprar Mais um Título do DVD ");,             System.out.println("4--> Vender Um Título do DVD");,             System.out.println("5--> Comprar Um CD");,             System.out.println("6--> Vender Um CD");,             System.out.println("7--> Sair");,             opc = Integer.parseInt(sc.nextLine());,             switch(opc){,                 case 1:,                     System.out.println("Quantidade a comprar do livro...: " + ,                             livro.getDescricao());,                     livro.comprar(Integer.parseInt(sc.nextLine()));,                     break;,                 case 2: ,                     System.out.println("Quantidade a vender de livro...: " + ,                             livro.getDescricao());,                     livro.vender(Integer.parseInt(sc.nextLine()));,                     break;,                 case 3:,                     System.out.println("Quantidade a Comprar do DVD...: " +,                             dvd.getDescricao());,                     dvd.comprar(Integer.parseInt(sc.nextLine()));,                     break;,                 case 4:,                     System.out.println("Quantidade a vender do DVD...: " +,                             dvd.getDescricao());,                     dvd.vender(Integer.parseInt(sc.nextLine()));,                     break;,                 case 5: ,                     System.out.println("Quantidade a compar do CD...: " +,                             cd.getDescricao());,                     cd.comprar(Integer.parseInt(sc.nextLine()));,                     break;,                 case 6:,                     System.out.println("Quantidade a vender do CD...:" +,                             cd.getDescricao());,                     cd.vender(Integer.parseInt(sc.nextLine()));,                     break;,                 case 7:,                     break;,             },         },             System.out.println();,             System.out.println("Aguarde um momento.....");,             Thread.sleep(2000);,             livro.listarProduto();,             dvd.listarProduto();,             cd.listarProduto();,     }   , },    ]
[package exemploestrutura;, , public class ExemploEstrutura {, ,     /**,      * @param args the command line arguments,      */,     public static void main(String[] args) {,         // TODO code application logic here,         int a;,         Aluno aluno1, aluno2;,         aluno1 = new Aluno();,         aluno1.ra = 123;,         aluno1.nome = "João da Silva";,         aluno2 = new Aluno();,         aluno2.ra = 234;,         aluno2.nome = "Juca da Silva";,         aluno1.matricular();,         aluno2.matricular();,         Conta conta1, conta2;,         conta1 = new Conta();,         conta2 = new Conta();,         conta1.tipo = 3;,         conta1.aluno = aluno1;,         conta2.tipo = 4;,         conta2.aluno = aluno2;,         //Mostrar as contas,         Conta.pontos = 23;,         System.out.println("xxxxxxxxxxxxxxxxxxxxxxxxxxxx");,         conta1.mostrarConta();,         conta2.mostrarConta();,     }, , }]
[package exemploestrutura;, , public class Conta {,     int tipo;,     Aluno aluno;,     static int pontos = 10;,     ,     //Mostrar os dados da conta do aluno,     void mostrarConta(){,         System.out.println("Dados da Conta...");,         System.out.println("Conta pertencente a: ");,         System.out.println("Aluno: " + this.aluno.nome.toUpperCase());,         System.out.println("Total de Pontos: " + pontos);,     }, }]
[/*,  * Aulas professor Maromo.,  */, package exemploestrutura;, , /**,  *,  * @author maromo,  */, public class Aluno {,     //Definir atributos,     int ra;,     String nome;,     ,     //Método para matricula,     void matricular(){,         System.out.println("Aluno Matriculado");,         System.out.println("Ra: " + ra);,         System.out.println("Nome: " + nome.toUpperCase());,         System.out.println("----------------------------");,     },     //Método construtor,     //public Aluno(){,     //    System.out.println("Construindo um obj. Aluno");,    // }, }]
[package exemplovetor;, , import java.util.Scanner;, , public class ExemploVetor {, ,     public static void main(String[] args) {,         Scanner sc = new Scanner(System.in);,         int[] v = new int[5];,         //Alimentar um vetor,         for (int i = 0; i < v.length; i++) {,             System.out.println("Digite um valor: ");,             v[i] = Integer.parseInt(sc.nextLine());,         },         System.out.println("Vetor Alimentado. Dados abaixo");,         //length = tamanho,         for (int i = 0; i < v.length; i++) { ,             System.out.printf("Pos %d = %d \n", i, v[i]);,         },         //Outra forma de percorrer e mostrar os itens,         for (int item : v) {,             System.out.println(item);   ,         },     },     , }]
[, package projetolivraria3;, , public class Livros extends Produtos {,     //Membros ou atributos (privados),     private String autor;,     private String editora;,     private String edicao;,     ,     //Construtor,     public Livros(){,         this.autor = "";,         this.editora = "";,         this.edicao = "";,     },     ,     //Métodos Modificadores de Acesso aos Campos            ,     public String getAutor() {,         return autor;,     }, ,     public void setAutor(String autor) {,         this.autor = autor;,     }, ,     public String getEditora() {,         return editora;,     }, ,     public void setEditora(String editora) {,         this.editora = editora;,     }, ,     public String getEdicao() {,         return edicao;,     }, ,     public void setEdicao(String edicao) {,         this.edicao = edicao;,     },     ,     //Método específico da classe.,     @Override,     public void listarProduto(){,         System.out.println("<---- DADOS DO PRODUTO ---->");,         System.out.println("Descrição........: " + this.getDescricao());,         System.out.println("Gênero...........: " + this.getGenero());,         System.out.println("Estoque..........: " + this.getEstoqueDisponivel());,         System.out.println("Preço..........R$: " + this.getPrecoCusto());,         System.out.println("Autor............: " + this.autor);,         System.out.println("Preco de Venda R$: " + this.getPrecoVenda());,         System.out.println("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");,         System.out.println("");,         ,     },     ,     @Override,     public void calcularPrecoVenda(){,         this.setPrecoVenda(this.getPrecoCusto()*1.10);,     },     , }]
[, package projetolivraria3;, , public class Cds extends Produtos {,     //Membros ou atributos (privados),     private String artista;,     private String gravadora;,     private String paisOrigem;,   //  private double precoVenda;,     ,     //Construtores,     public Cds(){,         this.artista = "";,         this.gravadora = "";,         this.paisOrigem = "";,     },     ,     //Métodos Modificadores de Acesso aos Campos, ,     public String getArtista() {,         return artista;,     }, ,     public void setArtista(String artista) {,         this.artista = artista;,     }, ,     public String getGravadora() {,         return gravadora;,     }, ,     public void setGravadora(String gravadora) {,         this.gravadora = gravadora;,     }, ,     public String getPaisOrigem() {,         return paisOrigem;,     }, ,     public void setPaisOrigem(String paisOrigem) {,         this.paisOrigem = paisOrigem;,     }, ,     @Override,     public void listarProduto(){,         System.out.println("<---- DADOS DO PRODUTO ---->");,         System.out.println("Descrição........: " + this.getDescricao());,         System.out.println("Gênero...........: " + this.getGenero());,         System.out.println("Estoque..........: " + this.getEstoqueDisponivel());,         System.out.println("Preço..........R$: " + this.getPrecoCusto());,         System.out.println("Artista..........: " + this.artista);,         System.out.println("Preco de Venda R$: " + this.getPrecoVenda());,         System.out.println("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");,         System.out.println("");,     },     ,     , @Override,     public void calcularPrecoVenda(){,         this.setPrecoVenda(this.getPrecoCusto()*1.15);,     }, }]
[, package projetolivraria3;, , public abstract class Produtos {,     //Membros com acesso (private),     private String descricao;,     private String genero;,     private int estoqueDisponivel;,     private double precoCusto;,       private double precoVenda;,       ,     //Métodos Modificadores de Acesso aos Campos,     public String getDescricao() {,         return descricao;,     }, ,     public void setDescricao(String descricao) {,         this.descricao = descricao;,     }, ,     public String getGenero() {,         return genero;,     }, ,     public void setGenero(String genero) {,         this.genero = genero;,     }, ,     public int getEstoqueDisponivel() {,         return estoqueDisponivel;,     }, ,     public void setEstoqueDisponivel(int estoqueDisponivel) {,         this.estoqueDisponivel = estoqueDisponivel;,     }, ,     public double getPrecoCusto() {,         return precoCusto;,     }, ,     public void setPrecoCusto(double precoCusto) {,         this.precoCusto = precoCusto;,     }, ,     public double getPrecoVenda() {,         return precoVenda;,     }, ,     public void setPrecoVenda(double precoVenda) {,         this.precoVenda = precoVenda;,     },     ,     ,     //Métodos Construtores sem parâmetros,     public Produtos(){,         this.descricao = "";,         this.estoqueDisponivel = 0;,         this.genero = "";,         this.precoCusto = 0.0;,         this.precoVenda = 0.0;,     },     ,     //Métodos Abstratos,     public abstract void listarProduto();,     ,     public abstract void calcularPrecoVenda();, }]
[, package projetolivraria3;, , public class Dvds extends Produtos{,     //Membros ou atributos (privados),     private String diretor;,     private String duracao;,     private String censura;,  //   private double precoVenda;,     ,     //Construtores,     public Dvds(){,         this.diretor = "";,         this.duracao = "";,         this.censura = "";,     },     ,     //Métodos Modificadores de Acesso aos Campos,     public String getDiretor() {,         return diretor;,     }, ,     public void setDiretor(String diretor) {,         this.diretor = diretor;,     }, ,     public String getDuracao() {,         return duracao;,     }, ,     public void setDuracao(String duracao) {,         this.duracao = duracao;,     }, ,     public String getCensura() {,         return censura;,     }, ,     public void setCensura(String censura) {,         this.censura = censura;,     },     ,     @Override,     public void listarProduto(){,         System.out.println("<---- DADOS DO PRODUTO ---->");,         System.out.println("Descrição........: " + this.getDescricao());,         System.out.println("Gênero...........: " + this.getGenero());,         System.out.println("Estoque..........: " + this.getEstoqueDisponivel());,         System.out.println("Preço..........R$: " + this.getPrecoCusto());,         System.out.println("Diretor..........: " + this.diretor);,         System.out.println("Preco de Venda R$: " + this.getPrecoVenda());,         System.out.println("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");,         System.out.println("");,     },     ,     //Método Específico da Classe,     public void calcularPrecoVenda(double cotDolar){,         this.setPrecoVenda(this.getPrecoCusto()*cotDolar*1.20);,     },     ,     @Override,     public void calcularPrecoVenda(){,         ,     }, }]
[, package projetolivraria3;, , import java.util.Scanner;, , public class GerenciarEstoque {, public void comprar(Produtos prod){,         Scanner sc = new Scanner(System.in);,         System.out.println("Digite a quantidade comprada: ");,         int quantidade = Integer.parseInt(sc.nextLine());,         System.out.println("Estoque anterior: " + prod.getEstoqueDisponivel());,         int saldo = quantidade + prod.getEstoqueDisponivel();,         prod.setEstoqueDisponivel(saldo);,         System.out.println("Estoque atual: " + prod.getEstoqueDisponivel());,     },     public void vender(Produtos prod){,      Scanner sc = new Scanner(System.in);,         System.out.println("Digite a quantidade vendida");,         int quantidade = Integer.parseInt(sc.nextLine());,         System.out.println("Estoque anterior: " + prod.getEstoqueDisponivel());,         int saldo = prod.getEstoqueDisponivel() - quantidade;,         prod.setEstoqueDisponivel(saldo);,         System.out.println("Estoque atual: " + prod.getEstoqueDisponivel());,     },     ,     public void encomendar(Produtos prod){,         Scanner sc = new Scanner(System.in);,         System.out.println("Digite a quantidade desejada: ");,         int quantidade = Integer.parseInt(sc.nextLine());,         if(quantidade < prod.getEstoqueDisponivel()){,             System.out.println("Encomenda do produto: " + prod.getDescricao() + ,                     " realizada com pronta entrega!");,         } else{,             System.out.println("Encomenda do produto: " + prod.getDescricao() + ,                     " em análise - realizando pedido com fornecedores");,         },     }, }]
[package projetolivraria3;, , import java.util.Scanner;, , public class Principal {, ,     public static void main(String[] args) throws InterruptedException {,         // TODO code application logic here,          Scanner sc = new Scanner(System.in);,         ,         //Criando um objeto livro,         Livros livro = new Livros();,         livro.setDescricao("Java com Ênfase em OO");,         livro.setEdicao("N. 1");,         livro.setAutor("Douglas Mendes");,         livro.setEditora("Novatec");,         livro.setGenero("Programação");,         livro.setEstoqueDisponivel(10);,         livro.setPrecoCusto(100.90);,         livro.calcularPrecoVenda();,         ,         //Criando um objeto Dvd,         Dvds dvd = new Dvds();,         dvd.setDescricao("Acima de Qualquer Suspeita");,         dvd.setCensura("14 anos");,         dvd.setDiretor("Michael Douglas");,         dvd.setDuracao("120 minutos");,         dvd.setEstoqueDisponivel(5);,         dvd.setGenero("Drama");,         dvd.setPrecoCusto(66.98);,         dvd.calcularPrecoVenda(3.20);,         ,         //Criando um objeto cd,         Cds cd = new Cds();,         cd.setDescricao("Live Era '87-'93");,         cd.setGenero("Rock");,         cd.setGravadora("Universal");,         cd.setPaisOrigem("EUA");,         cd.setArtista("Guns N' Roses");,         cd.setEstoqueDisponivel(5);,         cd.setPrecoCusto(9.99);,         cd.calcularPrecoVenda();,         ,     //Menu - Escolha uma opção,     int opc = 0;,     while(opc != 4){,         System.out.println("Escolha a opção");,             System.out.println("1--> Operações com Livro");,             System.out.println("2--> Operações com título de DVD ");,             System.out.println("3--> Operações com CD");,             System.out.println("4--> Sair");,             opc = Integer.parseInt(sc.nextLine());,             GerenciarEstoque controle = new GerenciarEstoque(); ,             switch(opc){,                 case 1:,                     System.out.println("<---- LIVRO ---->");,                     System.out.println("1) Consultar - 2) Comprar - " +,                             "3) Vender - 4) Reajuste - 5) Encomendar");,                     int operador = Integer.parseInt(sc.nextLine());,                     if(operador == 1) livro.listarProduto();,                     if(operador == 2) controle.comprar(livro);,                     if(operador == 3) controle.vender(livro);,                     if(operador == 4) livro.calcularPrecoVenda();,                     if(operador == 5) controle.encomendar(livro);,                     break;,                 case 2: ,                     System.out.println("<---- DVD ---->");,                     System.out.println("1) Consultar - 2) Comprar - " +,                             "3) Vender - 4) Reajuste - 5) Encomendar");,                     int operador2 = Integer.parseInt(sc.nextLine());,                     if(operador2 == 1) dvd.listarProduto();,                     if(operador2 == 2) controle.comprar(dvd);,                     if(operador2 == 3) controle.vender(dvd);,                     if(operador2 == 4) dvd.calcularPrecoVenda();,                     if(operador2 == 5) controle.encomendar(dvd);,                     break;,                 case 3:,                     System.out.println("<---- CD ----->");,                     System.out.println("1) Consultar - 2) Comprar - " +,                             "3) Vender - 4) Reajuste - 5) Encomendar");,                     int operador3 = Integer.parseInt(sc.nextLine());,                     if(operador3 == 1) cd.listarProduto();,                     if(operador3 == 2) controle.comprar(cd);,                     if(operador3 == 3) controle.vender(cd);,                     if(operador3 == 4) cd.calcularPrecoVenda();,                     if(operador3 == 5) controle.encomendar(cd);,                     break;,                     ,                 case 4:,                     break;,             },         },             System.out.println();,             System.out.println("Aguarde um momento.....");,             Thread.sleep(2000);,             livro.listarProduto();,             dvd.listarProduto();,             cd.listarProduto();,     }   , }]
[package arquivo.exemplo1;, import java.io.File;, import java.io.FileNotFoundException;, import java.io.FileOutputStream;, import java.io.IOException;, import java.util.Properties;, , import javax.swing.JOptionPane;, , public class WritePropertiesXmlFile {, 	public static void main(String[] args) {, 		try {, 			Properties properties = new Properties();, 			properties.setProperty("codigo1", JOptionPane.showInputDialog("Nome 1"));, 			properties.setProperty("codigo2", JOptionPane.showInputDialog("Nome 2"));, 			properties.setProperty("codigo3", JOptionPane.showInputDialog("Nome 3"));, , 			File file = new File("nomes.xml");, 			FileOutputStream fileOut = new FileOutputStream(file);, 			properties.storeToXML(fileOut, "Cadastro Nomes");, 			fileOut.close();, 		} catch (FileNotFoundException e) {, 			e.printStackTrace();, 		} catch (IOException e) {, 			e.printStackTrace();, 		}, , 	}, }]
[package arquivo.exemplo1;, import java.io.File;, import java.io.FileInputStream;, import java.io.FileNotFoundException;, import java.io.IOException;, import java.util.Enumeration;, import java.util.Properties;, , public class ReadPropertiesXmlFile {, 	public static void main(String[] args) {, 		try {, 			File file = new File("nomes.xml");, 			FileInputStream fileInput = new FileInputStream(file);, 			Properties properties = new Properties();, 			properties.loadFromXML(fileInput);, 			fileInput.close();, , 			Enumeration enuKeys = properties.keys();, 			while (enuKeys.hasMoreElements()) {, 				String key = (String) enuKeys.nextElement();, 				String value = properties.getProperty(key);, 				System.out.println(key + ": " + value);, 			}, 		} catch (FileNotFoundException e) {, 			e.printStackTrace();, 		} catch (IOException e) {, 			e.printStackTrace();, 		}, 	}, }]
[package arquivo.exemplo2;, , import java.io.BufferedReader;, import java.io.BufferedWriter;, import java.io.File;, import java.io.FileInputStream;, import java.io.FileOutputStream;, import java.io.IOException;, import java.io.InputStream;, import java.io.InputStreamReader;, import java.io.ObjectInputStream;, import java.io.ObjectOutputStream;, import java.io.OutputStream;, import java.io.OutputStreamWriter;, , public class Test_IOStream {, , 	private static final String NOME_ARQUIVO_SERIALIZADO = "obj_pessoa.dat";, , 	public static void main(String[] args) throws IOException {, , 		CriandoArquivo();, , 		Serializando();, 		Deserializando();, , 	}, , 	public static void LendoArquivo() throws IOException {, 		// FileInputStream encontra o arquivo e retorna um byte em formato, 		// Unicode;, 		InputStream is = new FileInputStream("pessoa.txt");, 		// O StreamReader l? o unicode e Traduz, transformando-o em um, 		// caractere., 		InputStreamReader isr = new InputStreamReader(is);, 		// o BufferedReader apenas concatena cada caractere traduzido pelo, 		// StreamReader, 		BufferedReader br = new BufferedReader(isr);, 		// lemos apenas a primeira linha,, 		// o metodo le a primeira linha e muda o cursor para a proxima linha,, , 		String s = br.readLine();, , 		// caso ele chegue ao fim do reader ele devolve null., 		// ent?o enquanto ele for diferente de null lemos todas as linhas., 		while (s != null) {, 			System.out.println(s);, 			// l? a linha e aponta o cursor para a proxima linha, 			s = br.readLine();, , 			// pode usar tratamento dos erros, try catch alem de enviar as, 			// exceptions para o Throw..., 		}, 		br.close();, , 	}, , 	public static void CriandoArquivo() throws IOException {, 		File f = new File("saida.txt");, 		OutputStream os = new FileOutputStream(f.getPath());, 		OutputStreamWriter osw = new OutputStreamWriter(os);, 		BufferedWriter bw = new BufferedWriter(osw);, , 		// pode usar tratamento dos erros, try catch..., 		bw.write("Testando");, 		System.out.println("Arquivo criado com sucesso em:\n" + f.getPath());, 		bw.close();, 	}, , 	public static void Serializando() {, 		Pessoa pessoa = new Pessoa("Joao", "do Morro");, , 		try {, , 			// Gera o arquivo para armazenar o objeto, 			FileOutputStream arqGravar = new FileOutputStream(, 					NOME_ARQUIVO_SERIALIZADO);, , 			// inserir objetos, 			ObjectOutputStream obj = new ObjectOutputStream(arqGravar);, , 			// Gravar o objeto no arquivo, 			obj.writeObject(pessoa);, , 			obj.flush();, 			obj.close();, 			arqGravar.flush();, 			arqGravar.close();, , 			System.out.println("Objeto gravado com sucesso!");, , 		} catch (Exception e) {, , 			e.printStackTrace();, 		}, 	}, , 	public static void Deserializando() {, 		System.out.println("Objeto recuperado:");, 		try, , 		{, , 			// Carrega o arquivo, , 			FileInputStream arqRead = new FileInputStream(, 					NOME_ARQUIVO_SERIALIZADO);, , 			// recuperar os objetos do arquivo, , 			ObjectInputStream objRead = new ObjectInputStream(arqRead);, 			System.out.println(objRead.readObject());, 			, 			objRead.close();, 			arqRead.close();, , 		}, , 		catch (Exception e) {, , 			e.printStackTrace();, , 		}, , 	}, , }]
[package arquivo.exemplo2;, import java.io.Serializable;, , /**,  * Se implementar Serializable podemos persistir o objeto em arquivo.,  */, public class Pessoa implements Serializable {, , 	/**, 	 * gerado pelo Eclipse com um codigo unico para essa classe Pessoa., 	 * Isso eh recomendado porque classes serializadas precisam ser persistentes, 	 * com um codigo Hash unico em memoria. Fazendo isso garantimos que esse objeto , 	 * poderá ser recuperado com sua identidade recuperada de forma segura. , 	 */, 	private static final long serialVersionUID = -973521140850535441L;, 	, 	private String nome;, 	private String sobrenome;, , 	public Pessoa(String nome, String sobrenome) {, 		super();, 		this.nome = nome;, 		this.sobrenome = sobrenome;, , 	}, , 	public String getNome() {, 		return nome;, 	}, , 	public String getSobrenome() {, 		return sobrenome;, 	}, , 	public void setNome(String nome) {, , 		this.nome = nome;, , 	}, , 	public void setSobrenome(String sobrenome) {, , 		this.sobrenome = sobrenome;, , 	}, , 	@Override, 	public String toString() {, 		return "Nome: " + this.nome + " \n" + "Sobrenome: " + this.sobrenome;, 	}, , }]
[package telavisual;, import javax.swing.JButton;, import javax.swing.JFrame;, import javax.swing.JPanel;, , /**,  * Essa classe demonstra como criar uma tela,  * visual usando JFrame. ,  */, public class Tela {, , 	public static void main(String[] args) {, 		, 		// criar uma instancia JFrame (tela), 		JFrame tela = new JFrame("Título janela");, 		, 		// configurar para fechar no clique do close (x), 		tela.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);, 		, 		// setar largura e altura da tela, 		tela.setSize(400, 400);, 		, 		// criar um PAINEL para evitar esticar componentes visuais, 		JPanel painel = new JPanel();, 		, 		// adicionando um botao para a tela, 		JButton botaoSair = new JButton("Sair");, 		JButton botaoCadastrar = new JButton("Cadastrar");, 		, 		// adicionar a instancia DO PAINEL na tela, 		tela.add(painel); // agora eh o painel, nao o botao, 		, 		// ADICIONAR TODOS OS COMPONENTES NO PAINEL AGORA, 		painel.add(botaoSair);, 		painel.add(botaoCadastrar);, 		, 		, 		// mandar a tela aparecer, 		tela.setVisible(true);, 		, 	}, 	, }]
[import javax.swing.JOptionPane;, , public class BebeTeste {, , 	/**, 	 * Funcao para iniciar a execucao., 	 * , 	 * @param args, 	 *            um array de String para receber argumentos., 	 */, 	public static void main(String[] args) {, , 		// criando objeto Bebe do MODELO, 		Bebe bebe1 = new Bebe();, 		, 		// chama o ALGORITMO desta classe;, 		// funcao LOCAL desta classe de teste, 		lerDados(bebe1);, , 		// chama a OPERACAO do MODELO listarDados(), 		bebe1.listarDados();, 	}, , 	/**, 	 * Funcao para fazer entrada de dados para o objeto., 	 * , 	 * @param bebe, 	 *            o objeto Bebe que serah preenchido com os dados., 	 */, 	static void lerDados(Bebe bebe) {, 		bebe.setNome(entrada("Digite o nome do Bebe"));, , 		String sexo = "f";, 		do {, 			sexo = entrada("Qual o sexo do bebe? ", 					+ "\n\n(F)eminino \n(M)asculino");, , 			if (sexo.equalsIgnoreCase("m")) {, 				bebe.setEhMasculino(true);, 			} , 			, 		} while (!sexo.equalsIgnoreCase("f") && , 				!sexo.equalsIgnoreCase("m"));, 		, 		bebe.setPeso(Float.parseFloat(entrada("Qual o peso do bebe?")));, 		bebe.setQuantidadeFezes(Integer, 				.parseInt(entrada("Quantidade de fezes?")));, , 	}, , 	/**, 	 * Metodo para realizar ENTRADAS de DADOS genérica., 	 * , 	 * @param valorImpresso, 	 *            o valor a ser mostrado na tela, 	 * , 	 * @return o valor digitado pelo usuario, 	 */, 	static String entrada(String valorImpresso) {, , 		return JOptionPane.showInputDialog(valorImpresso);, 	}, , }]
[, public class Bebe {, 	, 	// atributos do bebe, 	private String nome;, 	private boolean ehMasculino;, 	private float peso;, 	private float volumeEmDecibeis;, 	private int quantidadeFezes;, 	, 	// operacoes, 	, 	/**, 	 * Esse metodo lista os dados da classe Bebe na saída textual., 	 */, 	void listarDados() {, 		String relatorio = "nome="+nome+, 						   ", ehMasculino="+ehMasculino+, 						   ", peso="+peso+, 						   ", volumeEmDecibeis="+volumeEmDecibeis+, 						   ", quantidadeFezes="+quantidadeFezes;, 		, 		System.out.println(relatorio);, 	}, 	, 	, 	public void setNome(String nomeNovo) {, 		nome = nomeNovo;, 	}, 	, 	public String getNome() {, 		, 		return nome;, 	}, , , 	/**, 	 * @return the ehMasculino, 	 */, 	public boolean isEhMasculino() {, 		return ehMasculino;, 	}, , , 	/**, 	 * @param ehMasculino the ehMasculino to set, 	 */, 	public void setEhMasculino(boolean ehMasculino) {, 		this.ehMasculino = ehMasculino;, 	}, , , 	/**, 	 * @return the peso, 	 */, 	public float getPeso() {, 		return peso;, 	}, , , 	/**, 	 * @param peso the peso to set, 	 */, 	public void setPeso(float peso) {, 		this.peso = peso;, 	}, , , 	/**, 	 * @return the volumeEmDecibeis, 	 */, 	public float getVolumeEmDecibeis() {, 		return volumeEmDecibeis;, 	}, , , 	/**, 	 * @param volumeEmDecibeis the volumeEmDecibeis to set, 	 */, 	public void setVolumeEmDecibeis(float volumeEmDecibeis) {, 		this.volumeEmDecibeis = volumeEmDecibeis;, 	}, , , 	/**, 	 * @return the quantidadeFezes, 	 */, 	public int getQuantidadeFezes() {, 		return quantidadeFezes;, 	}, , , 	/**, 	 * @param quantidadeFezes the quantidadeFezes to set, 	 */, 	public void setQuantidadeFezes(int quantidadeFezes) {, 		this.quantidadeFezes = quantidadeFezes;, 	}, 	, 	, , }]
[import javax.swing.JOptionPane;, , public class ClienteTeste {, , 	public static void main(String[] args) {, , 		Cliente cliente1 = new Cliente();, 		cliente1.codigo = 1;, 		cliente1.nome = "Joao Silva";, 		cliente1.cpf = "222.222.222.22";, 		cliente1.telefone = "88888888";, 		cliente1.quantItensComprados = 1;, , 		Cliente cliente2 = new Cliente();, 		cliente2.codigo = 2;, 		cliente2.nome = "Maria da Madalena";, 		cliente2.cpf = "333.222.222.22";, 		cliente2.telefone = "444444444";, 		cliente2.quantItensComprados = 0;, , 		cliente1.imprimir();, 		cliente2.imprimir();, 		, 		, 		, 		, 		// com interacao com usuario, , 		// PASSO 1: ler os dados, 		String cod = JOptionPane.showInputDialog("CODIGO");, 		int codigo = Integer.parseInt(cod); // conversao, 		, 		String nome = JOptionPane.showInputDialog("NOME");, 		String cpf = JOptionPane.showInputDialog("CPF");, 		String celular = JOptionPane.showInputDialog("CELULAR");, 		, 		String itens = JOptionPane.showInputDialog("Quant. Itens Comprados");, 		int quantItens = Integer.parseInt(itens); // conversao, 		, 		// PASSO 2: criar o objeto , 		Cliente cliente3 = new Cliente();, 		, 		// PASSO 3: setar os dados no objeto, 		cliente3.codigo = codigo;, 		cliente3.nome = nome;, 		cliente3.cpf = cpf;, 		cliente3.telefone = celular;, 		cliente3.quantItensComprados = quantItens;, 		, 		cliente3.imprimir();, 		, 		, 	} // fim main, , } // fim classe]
[import javax.swing.JOptionPane;, , , public class Cliente {, 	, 	// atributos, 	long codigo;, 	String nome;, 	String cpf;, 	String telefone;, 	int quantItensComprados;, 	, 	, 	// operacoes, 	void imprimir() {, 		String rel = "codigo: " + codigo +, 					 "\nnome: " + nome +, 					 "\nCPF: " + cpf +, 					 "\ntelefone: " + telefone +, 					 "\nquantidade itens comprados: " , 					 		+ quantItensComprados;, 		, 		JOptionPane.showMessageDialog(null, rel);, 		, 	} // fim imprimir, 	, } // fim classe]
[import javax.swing.JOptionPane;, , , public class TelaPrincipal {, , 	public static void main(String[] args) {, 		, 		// desenhar uma tela com as seguintes opcoes:, 		, 		/*, 		 * 1) Cadastrar Cliente, 		 * 2) Listar Clientes, 		 * 3) Sair, 		 */, 		desenharTela();, 	}, , 	private static void desenharTela() {, 		, 		int opcao = 0;, 		String menu = "1) Cadastrar cliente"+, 					  "\n2) Listar clientes"+, 					  "\n3) Sair";, 		do {, 			, 			// ler o valor do usuario usando entrada de dados VISUAL, 			String escolha = , 					JOptionPane.showInputDialog(menu);, 			, 			// converter o valor String para inteiro, 			opcao = Integer.parseInt(escolha);, 			, 			// comparar o valor para saber o que deve ser chamado, 			if (opcao == 1) {, 				// cadastrar aqui, 			} else if (opcao == 2) {, 				// listar aqui, 			}, 			, 			, 		} while (opcao != 3);, 		, 	} // fim desenharTela, 	, } // fim classe principal, , , , , ]
[, public class LacosExemplos {, 	, 	public static void main(String[] args) {, 		, 		/*, 		 * Mostrar 10 numeros em ordem crescente, 		 */, 		, 		, 		, 		// LACO WHILE, 		int numero = 1;, 		while(numero <= 10) {, 			// enquanto condicao eh verdadeira será repetido, 			System.out.println(numero);, 			numero = numero + 1; // ou numero++, 		}, 		, 		, 		, 		// LACO DO/WHILE, 		numero = 1;, 		do {, 			System.out.println(numero);, 			numero++;, 		} while (numero <= 10);, 		, 		, 		// LACO PARA, 		for (int i = 1; i <= 10; i++) {, 			System.out.println(i);, 		}, 		, 		, 		, 	}, 	, , }]
[import javax.swing.JOptionPane;, , , public class Produto {, , 	// atributos, 	long codigo;, 	String nome;, 	double precoVenda;, 	double precoCusto;, 	, 	// operacoes, , 	void imprimir() {, 		, 		String message = "Código: "+codigo +, 						 "\nNome: "+nome +, 						 "\nPreço Venda: "+precoVenda + , 						 "\nPreço Custo: "+precoCusto;, 						 , 		JOptionPane.showMessageDialog(null, message);, 	} // fim imprimir, 	, 	, 	void imprimirLucro() {, , 		double lucroCalculado = precoVenda - precoCusto;, 		, 		JOptionPane.showMessageDialog(null, "Lucro: "+lucroCalculado);, 		, 		, 	}, }, , , , , , , , ]
[import javax.swing.JOptionPane;, , , , public class TabuadaTestes {, , 	, 	public static void main(String[] args) {, 		, 		, 		// PASSO 1: pedir qual a tabuada para usuario , 		int numero;, 		String valor;, 		, 		// Recebe o valor informado pelo usuario e armazena na String, 		valor = JOptionPane.showInputDialog("Digite a tabuada (1 a 10)");, 		, 		// converte a String lida e obtem o valor inteiro correspondente, 		numero = Integer.parseInt(valor);, 		, 		// OU, //		numero = Integer.parseInt(JOptionPane.showInputDialog(, //				"Digite a tabuada (1 a 10)"));, 		, 		, 		// PASSO 2: processar as respostas de acordo com a tabuada, 		, 		String message = "";, 		, 		for (int i = 1; i <= 10; i++) {, 			, 			message = message + numero+" x "+i+" = "+(numero*i) + "\n";, 			, 			// ou , //			message += numero+" x "+i+" = "+(numero*i) + "\n";, 			, 			, 		} // fim laço, 		, 		JOptionPane.showMessageDialog(null, message);, 		, 		, 	} // fim do main, 	, } // fim classe, , , , , ]
[import javax.swing.JOptionPane;, , , public class ProdutoTeste {, 	, 	public static void main(String[] args) {, 		// PASSO INICIAL: pedir ao usuario para informar os valores, 		long codigo =  Long.parseLong(, 				JOptionPane.showInputDialog("Codigo"));, 		String nome = JOptionPane.showInputDialog("Nome produto");, 		double precoVenda = Double.parseDouble(, 				JOptionPane.showInputDialog("Preco Venda"));, 		double precoCusto = Double.parseDouble(, 				JOptionPane.showInputDialog("Preco Custo"));, 		, 		// PASSO 2: criar o objetos Produto, 		Produto produto = new Produto();, 		, 		// PASSO 3: atribuir valores para os objetos, 		//          (preco -> venda e custo), 		produto.codigo = codigo;, 		produto.nome = nome;, 		produto.precoVenda = precoVenda;, 		produto.precoCusto = precoCusto;, 		, 		// PASSO 4: imprimir na tela o lucro ATUAL produto, 		produto.imprimir();, 		produto.imprimirLucro();, 		, 		, 		, 		, 	} // fim main, , } // fim classe]
[, public class AlunoTeste {, , 	public static void main(String[] args) {, 		, 		Aluno aluno1 = new Aluno();, 		Aluno aluno2 = new Aluno();, 		, 		aluno1.cadastrarDados();, 		aluno2.cadastrarDados();, 		, 		aluno1.listarDados();, 		aluno2.listarDados();, 		, 	}, 	, }]
[import javax.swing.JOptionPane;, , /**,  * Essa é a entidade que representa um Produto.,  */, public class Produto {, , 	// atributos, 	long codigo;, 	String nome;, 	String descricao;, 	double preco;, , 	// métodos, , 	void listarDados() {, 		String relatorio = "codigo: " + codigo +, 				"\nnome: " + nome+, 			    "\ndescrição: " + descricao + , 				"\npreço: " + preco;, , 		JOptionPane.showMessageDialog(null, relatorio);, 	}, , }]
[import javax.swing.JOptionPane;, , , public class ProdutoTestes {, , 	public static void main(String[] args) {, 		, 		// criar o objetos PRODUTOS, 		Produto p1 = new Produto();, 		, 		p1.codigo = 1;, 		p1.nome = "caneta 1";, 		p1.descricao = "desc 1...";, 		p1.preco = 400.0; , 		, //		p1.codigo = Integer.parseInt(, //				JOptionPane.showInputDialog("codigo: "));, //		p1.nome = JOptionPane.showInputDialog("nome: ");, //		p1.descricao = JOptionPane.showInputDialog("descricao: ");, //		p1.preco =Double.parseDouble(, //				JOptionPane.showInputDialog("preco: ")); , 		, 		Produto p2 = new Produto();, 		p2.codigo = 2;, 		p2.nome = "caneta 2";, 		p2.descricao = "desc 2...";, 		p2.preco = 300.0;, 		, 		p1.listarDados();, 		p2.listarDados();, 		, 	}, 	, }]
[, public class ExemploProdutoEClienteComVetor {, , 	static Cliente listaClientes[] = new Cliente[1000]; , 	static Produto listaProdutos[] = new Produto[1000];, 	, 	public static void main(String[] args) {, 		, 		// criar 2 clientes e 2 produtos, e listar na tela., 		, 	}, 	, }]
[, , public class ClienteTestes {, , 	public static void main(String[] args) {, 		, 		// criando meu objeto, 		Cliente cliente1 = new Cliente();, 		cliente1.nome = "Daniel";, 		cliente1.CPF = "333.333.333.33";, 		cliente1.telefone = "(81)9999-0000";, 		, 		cliente1.listarDados();, 		, 		, 		cliente1.alterarNome("Jose");, 		, 		cliente1.listarDados();, 	}, 	, }]
[import javax.swing.JOptionPane;, , , /**,  * Essa classe representa um modelo de Cliente.,  * ,  * @author douglasdanieldelfrari,  */, public class Cliente {, 	, , 	// ATRIBUTOS, 	String CPF;, 	String nome;, 	String telefone;, 	, 	// crior um metodo para alterar o nome, 	void alterarNome(String nomeNovo) {, 		nome = nomeNovo;, 	}, 	, 	void listarDados() {, 		, 		String relatorio = "Nome: "+nome +, 				   "\nCPF: "+CPF +, 				   "\nTelefone: "+telefone;, , 		JOptionPane.showMessageDialog(null,relatorio);, 		, 	}, 	, 	, }]
[, public class Aula02 {, , 	// variaveis globais, 	static String CPFs[] = new String[1000];, 	static String nomes[] = new String[1000];, 	static String telefones[] = new String[1000];, 	, 	, 	public static void main(String[] args) {, //, 		// cliente 1, 		nomes[0]     = "Joao da Silva Sauro";, 		CPFs[0]      = "222.222.222.99";, 		telefones[0] = "(81)2222-3333";, , 		// cliente 2, 		nomes[1]     = "Maria da Vida";, 		CPFs[1]      = "111.111.111.99";, 		telefones[1] = "(81)2222-9999";, 		, 	}, 	, 	, }]
[import javax.swing.JOptionPane;, , , public class Aluno {, 	, 	// atributos, 	String nome;, 	int idade;, 	, 	// metodos, 	, 	void listarDados() {, 		String relatorio = "Nome: "+nome +, 		    	  "\nIdade: "+idade;, 		JOptionPane.showMessageDialog(null,relatorio);, 	}, 	, 	void cadastrarDados() {, 		, 		nome = JOptionPane.showInputDialog("Nome");, 		idade = Integer.parseInt(, 				JOptionPane.showInputDialog("Idade"));, 		, 		JOptionPane.showMessageDialog(null, "Cadastro Realizado");, 		, 	}, }]
[package telas;, , , import modelos.Aluno;, import javax.swing.JOptionPane;, import main.ProgramaPrincipal;, , /*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, , /**,  *,  * @author douglasdanieldelfrari,  */, public class TelaCadastrar extends javax.swing.JFrame {, ,     /**,      * Creates new form TelaCadastrar,      */,     public TelaCadastrar() {,         initComponents();,     }, ,     /**,      * This method is called from within the constructor to initialize the form.,      * WARNING: Do NOT modify this code. The content of this method is always,      * regenerated by the Form Editor.,      */,     @SuppressWarnings("unchecked"),     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents,     private void initComponents() {, ,         jLabel1 = new javax.swing.JLabel();,         campoNome = new javax.swing.JTextField();,         jLabel2 = new javax.swing.JLabel();,         campoEmail = new javax.swing.JTextField();,         jButton1 = new javax.swing.JButton();,         jButton2 = new javax.swing.JButton();,         jLabel3 = new javax.swing.JLabel();,         campoLogin = new javax.swing.JTextField();,         jLabel4 = new javax.swing.JLabel();,         campoSenha = new javax.swing.JPasswordField();, ,         setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);, ,         jLabel1.setText("Nome:");, ,         jLabel2.setText("E-mail:");, ,         jButton1.setText("Cancelar");,         jButton1.addActionListener(new java.awt.event.ActionListener() {,             public void actionPerformed(java.awt.event.ActionEvent evt) {,                 jButton1ActionPerformed(evt);,             },         });, ,         jButton2.setText("Salvar");,         jButton2.addActionListener(new java.awt.event.ActionListener() {,             public void actionPerformed(java.awt.event.ActionEvent evt) {,                 jButton2ActionPerformed(evt);,             },         });, ,         jLabel3.setText("Login:");, ,         campoLogin.setToolTipText("Digite seu login");, ,         jLabel4.setText("Senha:");, ,         campoSenha.setToolTipText("Digite sua senha");, ,         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());,         getContentPane().setLayout(layout);,         layout.setHorizontalGroup(,             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),             .addGroup(layout.createSequentialGroup(),                 .addContainerGap(),                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),                     .addGroup(layout.createSequentialGroup(),                         .addComponent(campoLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE),                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED),                         .addComponent(campoSenha)),                     .addGroup(layout.createSequentialGroup(),                         .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),                             .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false),                                 .addComponent(jLabel1),                                 .addComponent(jLabel2),                                 .addComponent(campoNome),                                 .addComponent(campoEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)),                             .addGroup(layout.createSequentialGroup(),                                 .addComponent(jLabel3),                                 .addGap(102, 102, 102),                                 .addComponent(jLabel4))),                         .addGap(0, 0, Short.MAX_VALUE)),                     .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup(),                         .addGap(0, 80, Short.MAX_VALUE),                         .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE),                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED),                         .addComponent(jButton1))),                 .addContainerGap()),         );,         layout.setVerticalGroup(,             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),             .addGroup(layout.createSequentialGroup(),                 .addContainerGap(),                 .addComponent(jLabel1),                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED),                 .addComponent(campoNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE),                 .addGap(18, 18, 18),                 .addComponent(jLabel2),                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED),                 .addComponent(campoEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE),                 .addGap(26, 26, 26),                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE),                     .addComponent(jLabel4),                     .addComponent(jLabel3)),                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED),                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE),                     .addComponent(campoLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE),                     .addComponent(campoSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)),                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE),                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE),                     .addComponent(jButton1),                     .addComponent(jButton2))),         );, ,         pack();,     }// </editor-fold>//GEN-END:initComponents, ,     private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed,         // CANCELAR,         this.dispose();,     }//GEN-LAST:event_jButton1ActionPerformed, ,     private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed,         // BOTAO SALVAR,         String nome = campoNome.getText();,         String email = campoEmail.getText();,         String login = campoLogin.getText();,         String senha = campoSenha.getText();,         ,         // criando o objeto Aluno para manter salvo na memoria,         Aluno aluno = new Aluno(nome, email,login,senha);,         ,         // salvando o objeto Aluno no ArrayList,         ProgramaPrincipal.salvarAluno(aluno);,         ,         // mensagem de sucesso desta operacao,         JOptionPane.showMessageDialog(this, "Salvo com Sucesso!");,         ,         // fecha a tela atual,         this.dispose();,         ,     }//GEN-LAST:event_jButton2ActionPerformed, ,     /**,      * @param args the command line arguments,      */,     public static void main(String args[]) {,         /* Set the Nimbus look and feel */,         //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">,         /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.,          * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html ,          */,         try {,             for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {,                 if ("Nimbus".equals(info.getName())) {,                     javax.swing.UIManager.setLookAndFeel(info.getClassName());,                     break;,                 },             },         } catch (ClassNotFoundException ex) {,             java.util.logging.Logger.getLogger(TelaCadastrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (InstantiationException ex) {,             java.util.logging.Logger.getLogger(TelaCadastrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (IllegalAccessException ex) {,             java.util.logging.Logger.getLogger(TelaCadastrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (javax.swing.UnsupportedLookAndFeelException ex) {,             java.util.logging.Logger.getLogger(TelaCadastrar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         },         //</editor-fold>, ,         /* Create and display the form */,         java.awt.EventQueue.invokeLater(new Runnable() {,             public void run() {,                 new TelaCadastrar().setVisible(true);,             },         });,     }, ,     // Variables declaration - do not modify//GEN-BEGIN:variables,     private javax.swing.JTextField campoEmail;,     private javax.swing.JTextField campoLogin;,     private javax.swing.JTextField campoNome;,     private javax.swing.JPasswordField campoSenha;,     private javax.swing.JButton jButton1;,     private javax.swing.JButton jButton2;,     private javax.swing.JLabel jLabel1;,     private javax.swing.JLabel jLabel2;,     private javax.swing.JLabel jLabel3;,     private javax.swing.JLabel jLabel4;,     // End of variables declaration//GEN-END:variables, }]
[package telas;, , , import main.ProgramaPrincipal;, import modelos.Aluno;, import javax.swing.JOptionPane;, , /*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, , /**,  *,  * @author douglasdanieldelfrari,  */, public class TelaPrincipal extends javax.swing.JFrame {, ,     /**,      * Creates new form TelaPrincipal,      */,     public TelaPrincipal() {,         initComponents();,     }, ,     /**,      * This method is called from within the constructor to initialize the form.,      * WARNING: Do NOT modify this code. The content of this method is always,      * regenerated by the Form Editor.,      */,     @SuppressWarnings("unchecked"),     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents,     private void initComponents() {, ,         jToggleButton1 = new javax.swing.JToggleButton();,         jButton1 = new javax.swing.JButton();,         jButton2 = new javax.swing.JButton();,         jButton3 = new javax.swing.JButton();,         jButton4 = new javax.swing.JButton();, ,         jToggleButton1.setText("jToggleButton1");, ,         setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);,         addWindowListener(new java.awt.event.WindowAdapter() {,             public void windowClosing(java.awt.event.WindowEvent evt) {,                 formWindowClosing(evt);,             },             public void windowClosed(java.awt.event.WindowEvent evt) {,                 formWindowClosed(evt);,             },         });, ,         jButton1.setText("Sair");,         jButton1.addActionListener(new java.awt.event.ActionListener() {,             public void actionPerformed(java.awt.event.ActionEvent evt) {,                 jButton1ActionPerformed(evt);,             },         });, ,         jButton2.setText("Cadastrar");,         jButton2.addActionListener(new java.awt.event.ActionListener() {,             public void actionPerformed(java.awt.event.ActionEvent evt) {,                 jButton2ActionPerformed(evt);,             },         });, ,         jButton3.setText("Listar Alunos");,         jButton3.addActionListener(new java.awt.event.ActionListener() {,             public void actionPerformed(java.awt.event.ActionEvent evt) {,                 jButton3ActionPerformed(evt);,             },         });, ,         jButton4.setText("Login");,         jButton4.addActionListener(new java.awt.event.ActionListener() {,             public void actionPerformed(java.awt.event.ActionEvent evt) {,                 jButton4ActionPerformed(evt);,             },         });, ,         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());,         getContentPane().setLayout(layout);,         layout.setHorizontalGroup(,             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),             .addGroup(layout.createSequentialGroup(),                 .addContainerGap(),                 .addComponent(jButton1),                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED),                 .addComponent(jButton2),                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED),                 .addComponent(jButton3),                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED),                 .addComponent(jButton4),                 .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)),         );,         layout.setVerticalGroup(,             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),             .addGroup(layout.createSequentialGroup(),                 .addContainerGap(),                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE),                     .addComponent(jButton1),                     .addComponent(jButton2),                     .addComponent(jButton3),                     .addComponent(jButton4)),                 .addContainerGap(265, Short.MAX_VALUE)),         );, ,         pack();,     }// </editor-fold>//GEN-END:initComponents, ,     private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed,         // acao para finalizar o programa,         System.out.println("Testando botao SAIR");,         formWindowClosing(null);,         System.exit(0);,         ,     }//GEN-LAST:event_jButton1ActionPerformed, ,     private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed,         ,         // acao para abrir a tela de CADASTRO,         new TelaCadastrar().setVisible(true);,         ,     }//GEN-LAST:event_jButton2ActionPerformed, ,     private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed,         // LISTAR ALUNOS,         String relatorio = "";,         ,         if (ProgramaPrincipal.getAlunos().size() == 0) {,             relatorio = "Sem dados cadastrados!";,         },         ,         for (Aluno aluno : ProgramaPrincipal.getAlunos()) {,             ,             relatorio += aluno.getCodigo()+" ("+aluno.getLogin()+")"+" / "+aluno.getNome() + " / "+aluno.getEmail() + "\n";,         } // fim laco,         ,         JOptionPane.showMessageDialog(rootPane, relatorio);,         ,     }//GEN-LAST:event_jButton3ActionPerformed, ,     private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed,         ,         ,     }//GEN-LAST:event_formWindowClosed, ,     private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing,         System.out.println("SALVAR DADOS ANTES DE SAIR...");,         ProgramaPrincipal.salvarDadosEmArquivo();,     }//GEN-LAST:event_formWindowClosing, ,     private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed,         // LOGIN,         new TelaLogin().setVisible(true);,     }//GEN-LAST:event_jButton4ActionPerformed, ,     /**,      * @param args the command line arguments,      */,     public static void main(String args[]) {,         /* Set the Nimbus look and feel */,         //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">,         /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.,          * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html ,          */,         try {,             for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {,                 if ("Nimbus".equals(info.getName())) {,                     javax.swing.UIManager.setLookAndFeel(info.getClassName());,                     break;,                 },             },         } catch (ClassNotFoundException ex) {,             java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (InstantiationException ex) {,             java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (IllegalAccessException ex) {,             java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (javax.swing.UnsupportedLookAndFeelException ex) {,             java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         },         //</editor-fold>, ,         /* Create and display the form */,         java.awt.EventQueue.invokeLater(new Runnable() {,             public void run() {,                 new TelaPrincipal().setVisible(true);,             },         });,     }, ,     // Variables declaration - do not modify//GEN-BEGIN:variables,     private javax.swing.JButton jButton1;,     private javax.swing.JButton jButton2;,     private javax.swing.JButton jButton3;,     private javax.swing.JButton jButton4;,     private javax.swing.JToggleButton jToggleButton1;,     // End of variables declaration//GEN-END:variables, }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, , package telas;, , import java.security.NoSuchAlgorithmException;, import java.util.logging.Level;, import java.util.logging.Logger;, import javax.swing.JOptionPane;, import main.ProgramaPrincipal;, import modelos.Aluno;, import util.Arquivos;, , /**,  *,  * @author douglasdanieldelfrari,  */, public class TelaLogin extends javax.swing.JFrame {, ,     /**,      * Creates new form TelaLogin,      */,     public TelaLogin() {,         initComponents();,     }, ,     /**,      * This method is called from within the constructor to initialize the form.,      * WARNING: Do NOT modify this code. The content of this method is always,      * regenerated by the Form Editor.,      */,     @SuppressWarnings("unchecked"),     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents,     private void initComponents() {, ,         jLabel2 = new javax.swing.JLabel();,         jLabel3 = new javax.swing.JLabel();,         jTextField1 = new javax.swing.JTextField();,         jPasswordField1 = new javax.swing.JPasswordField();,         jButton1 = new javax.swing.JButton();, ,         setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);,         setTitle("Login");, ,         jLabel2.setText("Login");, ,         jLabel3.setText("Senha");, ,         jTextField1.addActionListener(new java.awt.event.ActionListener() {,             public void actionPerformed(java.awt.event.ActionEvent evt) {,                 jTextField1ActionPerformed(evt);,             },         });, ,         jButton1.setText("Login");,         jButton1.addActionListener(new java.awt.event.ActionListener() {,             public void actionPerformed(java.awt.event.ActionEvent evt) {,                 jButton1ActionPerformed(evt);,             },         });, ,         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());,         getContentPane().setLayout(layout);,         layout.setHorizontalGroup(,             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),             .addGroup(layout.createSequentialGroup(),                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING),                     .addComponent(jButton1),                     .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false),                         .addComponent(jLabel2),                         .addComponent(jLabel3),                         .addComponent(jTextField1),                         .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))),                 .addGap(0, 12, Short.MAX_VALUE)),         );,         layout.setVerticalGroup(,             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),             .addGroup(layout.createSequentialGroup(),                 .addGap(27, 27, 27),                 .addComponent(jLabel2),                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED),                 .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE),                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED),                 .addComponent(jLabel3),                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED),                 .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE),                 .addGap(29, 29, 29),                 .addComponent(jButton1),                 .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)),         );, ,         pack();,     }// </editor-fold>//GEN-END:initComponents, ,     private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed,         // TODO add your handling code here:,     }//GEN-LAST:event_jTextField1ActionPerformed, ,     private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed,         // LOGIN,         ,         String login = jTextField1.getText();,         String senha = jPasswordField1.getText();,         String mensagem = "Login ou senha inválido!";,         ,         Aluno aluno = ProgramaPrincipal.getAlunoByLogin(login);,         if (aluno != null) {,             ,             try {,                 if (aluno.getSenha().equals(Arquivos.convertPasswordToMD5(senha))) {,                     mensagem = "LOGIN e SENHA validados";,                 } ,             } catch (NoSuchAlgorithmException ex) {,                 Logger.getLogger(TelaLogin.class.getName()).log(Level.SEVERE, null, ex);,             },             ,         },             ,         JOptionPane.showMessageDialog(rootPane, mensagem);,         this.dispose();,     }//GEN-LAST:event_jButton1ActionPerformed, ,     /**,      * @param args the command line arguments,      */,     public static void main(String args[]) {,         /* Set the Nimbus look and feel */,         //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">,         /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.,          * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html ,          */,         try {,             for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {,                 if ("Nimbus".equals(info.getName())) {,                     javax.swing.UIManager.setLookAndFeel(info.getClassName());,                     break;,                 },             },         } catch (ClassNotFoundException ex) {,             java.util.logging.Logger.getLogger(TelaLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (InstantiationException ex) {,             java.util.logging.Logger.getLogger(TelaLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (IllegalAccessException ex) {,             java.util.logging.Logger.getLogger(TelaLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (javax.swing.UnsupportedLookAndFeelException ex) {,             java.util.logging.Logger.getLogger(TelaLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         },         //</editor-fold>, ,         /* Create and display the form */,         java.awt.EventQueue.invokeLater(new Runnable() {,             public void run() {,                 new TelaLogin().setVisible(true);,             },         });,     }, ,     // Variables declaration - do not modify//GEN-BEGIN:variables,     private javax.swing.JButton jButton1;,     private javax.swing.JLabel jLabel2;,     private javax.swing.JLabel jLabel3;,     private javax.swing.JPasswordField jPasswordField1;,     private javax.swing.JTextField jTextField1;,     // End of variables declaration//GEN-END:variables, }]
[package main;, , , import telas.TelaPrincipal;, import modelos.Aluno;, import java.util.ArrayList;, import util.Arquivos;, , /*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, , /**,  *,  * @author douglasdanieldelfrari,  */, public class ProgramaPrincipal {, ,     private static ArrayList<Aluno> listaAlunos;,     private static ArrayList<Aluno> listaAlunosArquivo;, 	private static ArrayList<Aluno> listaAlunosPastaArquivos;,     ,     /**,      * @param args the command line arguments,      */,     public static void main(String[] args) {,         recuperarDadosEmArquivo();,         ,         TelaPrincipal minhaTela = new TelaPrincipal();,         minhaTela.setVisible(true);,         ,     },     ,     /**, 	 * Salva um objeto aluno na estrutura de memória RAM e também no arquivo., 	 * , 	 * @param aluno, 	 *            o objeto {@link Aluno} para ser salvo., 	 */,     public static void salvarAluno(Aluno aluno) {,         listaAlunos.add(aluno);,         ,         // tambem gravando objeto em arquivo (OPCIONAL),         Arquivos.gravarAlunoEmArquivo(aluno);,     },     ,     /**,      * Retorna a lista de alunos da memória RAM.,      * ,      * @return a lista de ArrayList<Aluno>.,      */,     public static ArrayList<Aluno> getAlunos() {,         return listaAlunos;,     },     ,     /**,      * Salva os dados da memória RAM para estrutura de arquivos.,      */,     public static void salvarDadosEmArquivo() {,         Arquivos.salvarAlunos(listaAlunos,listaAlunosArquivo);,     },     ,     /**,      * Recupera os dados que estao salvos em arquivo local e atualiza,      * listas de dados em memória.,      */,     private static void recuperarDadosEmArquivo() {,         listaAlunosArquivo = Arquivos.recuperarAlunos();,         listaAlunos = new ArrayList<Aluno>(listaAlunosArquivo);,         ,         // usado para backup,         listaAlunosPastaArquivos = Arquivos.processarArquivos();,     }, ,     /**, 	 * Recupera objeto Aluno de um login específico. Se não encontrar login, o, 	 * sistema retorna null., 	 * , 	 * @param login, 	 *            o login do usuário, 	 * , 	 * @return o objeto Aluno associado ao login passado, ou null caso, 	 *         contrário., 	 */,     public static Aluno getAlunoByLogin(final String login) {,         ,         Aluno alunoResult = null;,         ,         for (Aluno aluno : listaAlunos) {,             if (aluno.getLogin().equals(login)) {,                 alunoResult = aluno;,                 break;,             },         },         ,         return alunoResult;,     },     , ,     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package util;, , import java.io.File;, import java.io.FileInputStream;, import java.io.FileNotFoundException;, import java.io.FileOutputStream;, import java.io.IOException;, import java.io.ObjectInputStream;, import java.io.ObjectOutputStream;, import java.math.BigInteger;, import java.security.MessageDigest;, import java.security.NoSuchAlgorithmException;, import java.text.SimpleDateFormat;, import java.util.ArrayList;, import java.util.Date;, import java.util.Properties;, , import modelos.Aluno;, , /**,  *,  * @author douglasdanieldelfrari,  */, public final class Arquivos {, ,     private static final String NOME_ARQUIVO_SERIALIZADO = "arquivos/aluno_";,     private static final String ARQUIVO_BANCO_DADOS_XML = "alunos.xml";, ,     private Arquivos() {, ,     }, ,     public static void gravarAlunoEmArquivo(final Aluno aluno) {, ,     	ObjectOutputStream obj = null;,     	FileOutputStream arqGravar = null;,     	,         try {, ,             // Gera o arquivo para armazenar o objeto,             arqGravar = new FileOutputStream(,                     NOME_ARQUIVO_SERIALIZADO + aluno.getCodigo());, ,             // inserir objetos,             obj = new ObjectOutputStream(arqGravar);, ,             // Gravar o objeto no arquivo,             obj.writeObject(aluno);, ,             System.out.println("Objeto gravado com sucesso! -> "+aluno);, ,         } catch (Exception e) {,         	,             e.printStackTrace();,             ,         } finally {,         	,         	try {,         		if (obj != null) {,         			obj.flush();,     				obj.close();,         		}, 				,         		if (arqGravar != null) {,         			arqGravar.flush();,     				arqGravar.close();,         		}, 				, 			} catch (IOException e) {, 				e.printStackTrace();, 			},            ,         },     }, , 	public static Aluno recuperarAlunoDeArquivo(final int codigo) {, , 		Aluno aluno = null;, 		FileInputStream arqRead = null;, 		ObjectInputStream objRead = null;, , 		try {, , 			// Carrega o arquivo, 			arqRead = new FileInputStream(NOME_ARQUIVO_SERIALIZADO + codigo);, , 			// recuperar os objetos do arquivo, 			objRead = new ObjectInputStream(arqRead);, 			aluno = (Aluno) objRead.readObject();, , 		} catch (Exception e) {, , 			e.printStackTrace();, , 		} finally {, , 			try {, 				if (objRead != null) {, 					objRead.close();, 				}, , 				if (arqRead != null) {, 					arqRead.close();, 				}, , 			} catch (IOException e) {, 				e.printStackTrace();, 			}, 		}, , 		return aluno;, 	}, ,     /**,      * Salva os dados em arquivo. Porém, coloca no arquivo somente os novos que,      * estao na memoria.,      *,      * @param alunos lista com dados da memoria,      * @param listaAlunosArquivo lista de dados que foram lidos no arquivo,      */,     public static void salvarAlunos(final ArrayList<Aluno> alunos,,             final ArrayList<Aluno> listaAlunosArquivo) {, ,         if (alunos.size() == 0) {,             System.err.println("NAO TEM DADOS PARA SALVAR");,             return;,         }, ,         FileInputStream fileInput = null;,         FileOutputStream fileOut = null;, ,         try {, ,             Properties properties = new Properties();,             ;,             File file = new File(ARQUIVO_BANCO_DADOS_XML);,             if (file.isFile()) {,                 System.out.println("lendo arquivo: " + file.getAbsolutePath());, ,                 fileInput = new FileInputStream(file);,                 properties.loadFromXML(fileInput);, ,                 // somente adicionar os novos,                 for (Aluno aluno : alunos) {,                     if (!listaAlunosArquivo.contains(aluno)) {,                         properties.setProperty(Aluno.CODIGO + aluno.getCodigo(), "" + aluno.getCodigo());,                         properties.setProperty(Aluno.NOME + aluno.getCodigo(), aluno.getNome());,                         properties.setProperty(Aluno.EMAIL + aluno.getCodigo(), aluno.getEmail());,                         properties.setProperty(Aluno.LOGIN + aluno.getCodigo(), aluno.getLogin());,                         properties.setProperty(Aluno.SENHA + aluno.getCodigo(), aluno.getSenha());,                     },                 }, ,                 atualizaContadorCodigos(alunos);, ,             } else {, ,                 for (Aluno aluno : alunos) {,                     properties.setProperty(Aluno.CODIGO + aluno.getCodigo(), "" + aluno.getCodigo());,                     properties.setProperty(Aluno.NOME + aluno.getCodigo(), aluno.getNome());,                     properties.setProperty(Aluno.EMAIL + aluno.getCodigo(), aluno.getEmail());,                     properties.setProperty(Aluno.LOGIN + aluno.getCodigo(), aluno.getLogin());,                     properties.setProperty(Aluno.SENHA + aluno.getCodigo(), aluno.getSenha());,                 },             }, ,             // salva no XML,             fileOut = new FileOutputStream(file);, ,             Date myDate = new Date();,             String simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm").format(myDate);,             System.out.println("Dados Salvos: " + simpleDateFormat);, ,             properties.storeToXML(fileOut, "ultima atualizacao: " + simpleDateFormat);, ,         } catch (FileNotFoundException e) {,             System.err.println("Arquivo ainda nao existe: " + e.getMessage());,         } catch (IOException e) {,             e.printStackTrace();,         } finally {, ,             try {,                 if (fileInput != null) {,                     fileInput.close();,                 }, ,                 if (fileInput != null) {,                     fileOut.close();,                 }, ,             } catch (IOException e) {,                 e.printStackTrace();,             },         }, ,     }, ,     /**,      * Recupera os dados armazenados em arquivo XML e retorna um,      * {@link ArrayList}.,      *,      * @return uma lista de objetos armazenados em arquivo.,      */,     public static ArrayList<Aluno> recuperarAlunos() {, ,         ArrayList<Aluno> alunos = new ArrayList<>();,         FileInputStream fileInput = null;, ,         try {,             File file = new File(ARQUIVO_BANCO_DADOS_XML);,             fileInput = new FileInputStream(file);, ,             System.out.println("lendo arquivo existente: " + file.getAbsolutePath());, ,             Properties properties = new Properties();,             properties.loadFromXML(fileInput);, ,             int size = properties.size();, ,             // percorre a lista ,             for (int i = 1; i <= size; i++) {, ,                 // se contem uma chave inicial, obtem os dados restantes desta mesma chave ,                 if (properties.containsKey(Aluno.CODIGO + i)) {,                     // cria objeto,                     Aluno alunoAtual = new Aluno();,                     // seta objeto com os dados do arquivo,                     alunoAtual.setCodigo(Integer.parseInt(properties.getProperty(Aluno.CODIGO + i)));,                     alunoAtual.setNome(properties.getProperty(Aluno.NOME + i));,                     alunoAtual.setEmail(properties.getProperty(Aluno.EMAIL + i));,                     alunoAtual.setLogin(properties.getProperty(Aluno.LOGIN + i));,                     alunoAtual.setSenha(properties.getProperty(Aluno.SENHA + i));, ,                     // seta o ArrayList com objeto novo,                     alunos.add(alunoAtual);,                 },             }, ,         } catch (FileNotFoundException e) {,             System.err.println("ARQUIVO NAO EXISTE AINDA: " + e.getMessage());,         } catch (IOException e) {,             e.printStackTrace();,         } finally {, ,             try {,                 if (fileInput != null) {,                     fileInput.close();,                 }, ,             } catch (IOException e) {,                 e.printStackTrace();,             },         }, ,         atualizaContadorCodigos(alunos);, ,         return alunos;,     }, ,     private static void atualizaContadorCodigos(ArrayList<Aluno> alunos) {,         // atualizar contador de codigo de aluno,         int contadorAtual = alunos.size() + 1;,         Aluno.setContador(contadorAtual);,     }, ,     public static String convertPasswordToMD5(String password),             throws NoSuchAlgorithmException {,         MessageDigest md = MessageDigest.getInstance("MD5");, ,         BigInteger hash = new BigInteger(1, md.digest(password.getBytes()));, ,         return String.format("%32x", hash);,     },     ,     ,     public static void main(String[] args) {, 		try {, 			// Gravando exemplos de teste, 			, //			Aluno aluno1 = new Aluno("Nome 1", "email1@teste.com", "login1", convertPasswordToMD5("senha1"));, //			Aluno aluno2 = new Aluno("Nome 2", "email2@teste.com", "login2", convertPasswordToMD5("senha2"));, //			, //			gravarAlunoEmArquivo(aluno1);, //			gravarAlunoEmArquivo(aluno2);, , 			// recuperando da pasta arquivos, 			, 			, 		} catch (Exception e) {, 			e.printStackTrace();, 		}, 		, 	}, , 	private static void prepararDados(final File file) {, 		, 		if (file.isDirectory()) {, 			System.out.println("pasta existente...");, 			, 		} else {, 			System.out.println("criando pasta ...");, 			file.mkdir();, 		}, 	}, , 	public static ArrayList<Aluno> processarArquivos() {, 		, 		File file = new File("arquivos");, 		prepararDados(file);, 		ArrayList<Aluno> alunos = new ArrayList<Aluno>();, 		, 		String[] files = file.list();, 		if (files.length != 0) {, 		, 			for (int i = 0; i < files.length; i++) {, 				, 				int index = files[i].indexOf("_");, 				String codigo = files[i].substring(index+1);, 				, 				Aluno aluno = recuperarAlunoDeArquivo(Integer.parseInt(codigo));, 				if (aluno != null) {, 					alunos.add(aluno);, 				}, 			}, 			, 			System.out.println("CARREGANDO DADOS...");, 			for (Aluno aluno : alunos) {, 				System.out.println(aluno);, 			}, 		}, 		, 		return alunos;, 	}, , , }]
[package modelos;, , import java.io.Serializable;, import java.security.NoSuchAlgorithmException;, import java.util.logging.Level;, import java.util.logging.Logger;, , import util.Arquivos;, , /*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, , /**,  *,  * @author douglasdanieldelfrari,  */, public class Aluno implements Serializable {, , 	// dados usados para gravar prefixo em arquivo,     public static final String CODIGO = "codigo_";,     public static final String NOME = "nome_";,     public static final String EMAIL = "email_";,     public static final String LOGIN = "login_";,     public static final String SENHA = "senha_";,     ,     , 	private int codigo;,     private String nome;,     private String email;,     private String login;,     private String senha;, ,     private static int contador = 1;, ,     public static void setContador(int contador) {,         Aluno.contador = contador;,     },     ,     public Aluno(String nome, String email,String login,String senha) {,         try {,             this.codigo = contador++;,             this.nome = nome;,             this.email = email;,             this.login = login;,             this.senha = Arquivos.convertPasswordToMD5(senha);,             ,         } catch (NoSuchAlgorithmException ex) {,             Logger.getLogger(Aluno.class.getName()).log(Level.SEVERE, null, ex);,         },     },     ,     public Aluno() {,         // nao cria codigo automatico.,     }, ,     ,     public String getNome() {,         return nome;,     }, ,     public void setNome(String nome) {,         this.nome = nome;,     }, ,     public String getEmail() {,         return email;,     }, ,     public void setEmail(String email) {,         this.email = email;,     },     ,     public int getCodigo() {,         return codigo;,     },     ,     public void setCodigo(int codigo) {,         this.codigo = codigo;,     }, ,     public String getLogin() {,         return login;,     }, ,     public void setLogin(String login) {,         this.login = login;,     }, ,     public String getSenha() {,         return senha;,     }, ,     public void setSenha(String senha) {,         this.senha = senha;,     },     ,     @Override,     public String toString() {,     	,     	String rel = codigo+ ", "+nome+", "+email+", "+login;,     	,     	return rel;,     },     ,     , }]
[package telas;, , import java.util.ArrayList;, , import javax.swing.JOptionPane;, , import entidades.Funcionario;, , public class TelaPrincipal {, , 	/*, 	 * estrutura de dados do tipo ArrayList do Java. Estudar o capítulo 7, Java Como Programar., 	 */, 	private static ArrayList<Funcionario> listaFuncionarios, 								= new ArrayList<Funcionario>();, 	, 	, 	, 	public static void main(String[] args) {, , 		desenharTela();, 		, 	} // fim do main, 	, 	, 	private static void desenharTela() {, 		, 			, 		String tela = "1) Cadastrar Funcionário"+, 					  "\n2) Listar Funcionários"+, 					  "\n3) Pesquisar por código"+, 					  "\n4) Sair";, 		String opcao = null;, 		, 		do {, 			opcao = JOptionPane.showInputDialog(tela);, 			, 			if (opcao.equals("1")){, 				cadastrarFuncionario();, 			} else if (opcao.equals("2")) {, 				listarFuncionarios();, 			} else if (opcao.equals("3")) {, 				pesquisarPorCodigo();, 			}, 			, 			, 		} while (!opcao.equals("4"));, 		, 		, 	} // fim do desenharTela, 	, 	, 	, 	private static void pesquisarPorCodigo() {, 		, 		// verificar se tem ou nao elementos, 		if (listaFuncionarios.size() == 0) {, 			JOptionPane.showMessageDialog(null,, 					"Nenhum funcionário cadastrado!");, 			return;, 		}, 		, 		// pede para usuario digitar o codigo que deseja encontrar, 		String codigoPesquisar = JOptionPane, 				.showInputDialog("Código para encontrar:");, 		// converte de String para long, pois o código é desse tipo, 		long codigo = Long.parseLong(codigoPesquisar);, 		, 		// declara um objeto temporario para guardar o Funcionário (caso encontre), 		Funcionario funcionarioProcurado = null;, 		, 		// procurar em todos os elementos e comparar se código existe, 		for (int i = 0; i < listaFuncionarios.size(); i++) {, 			, 			// pega o funcionario atual, 			Funcionario f = listaFuncionarios.get(i);, 			, 			// comparar o codigo a ser encontrado com o codigo do obj. Funcionario, 			if (codigo == f.getCodigo()) {, 				// achei, guarda na variavel temporario e para de buscar, 				funcionarioProcurado = f;, 				break;, 			}, 		} // fim laco, 		, 		// se objeto funcionarioProcurado existir, ele esta na mao e pode ser , 		// exibido na tela, 		String dados = "Nenhum funcionário de código ( "+codigo+" ) foi encontrado.";, 		if (funcionarioProcurado != null) {, 			// limpa variavel, 			dados = "";, 			dados += funcionarioProcurado.getCodigo() + " - " +, 					funcionarioProcurado.getNome() + " - " + , 					funcionarioProcurado.getCpf() + " - "  +, 					funcionarioProcurado.getCelular();, 		} , 		, 		// joga na tela visual. Se nenhum codigo foi encontrado, entao a mensagem, 		// que será exibida já foi personalizada para informar que não foi encontrado, 		// nenhum codigo. Porém, se a busca encontrou, o valor correto será encontrado., 		JOptionPane.showMessageDialog(null, dados);, 		, 	} // fim do pesquisarPorCodigo, 	, 	, 	private static void cadastrarFuncionario(){, 		, 		// entrada dos dados, 		String nome = JOptionPane.showInputDialog("Nome funcionário");, 		String cpf = JOptionPane.showInputDialog("CPF");, 		String celular = JOptionPane.showInputDialog("Celular");, 	, 		// criar objeto funcionario, 		Funcionario funcionario = new Funcionario(nome,cpf,celular);, 		, 		// guardar o objeto numa lista (ArrayList), 		listaFuncionarios.add(funcionario);, 		, 	} // fim cadastrarFuncionario, 	, 	, 	, 	private static void listarFuncionarios() {, 		, 		String relatorio = "";, 		, 		// verificar se tem ou nao elementos, 		if (listaFuncionarios.size() == 0) {, 			JOptionPane.showMessageDialog(null, "Nenhum funcionário cadastrado!");, 			return;, 		}, 		, 		, 		// listar os funcionarios obtendo da lista (ArrayList), 		for (int i = 0; i < listaFuncionarios.size(); i++) {, 			, 			Funcionario f = listaFuncionarios.get(i);, 			, 			relatorio += f.getCodigo() + " - " +, 						 f.getNome() + " - " + , 					     f.getCpf() + " - "  +, 					 	 f.getCelular() + "\n";, 		}, 		, 		JOptionPane.showMessageDialog(null, relatorio);, 		, 		, 		// o código comentado abaixo exemplifica o laço 'foreach', que , 		// funciona quando usamos ArrayList. Ele simplifica a iteração, 		// entre os elementos., 		, 		, //		for (Funcionario f : listaFuncionarios) {, , //		relatorio += f.getCodigo() + " - " +, //				 f.getNome() + " - " + , //			     f.getCpf() + " - "  +, //			 	 f.getCelular() + "\n";, 		, //		}, 		, 	} // fim listarFuncionarios, 	, 	, } // fim da classe]
[package entidades;, , /**,  * Essa classe representa o modelo de dados Funcionario,  */, public class Funcionario {, , 	// atributos , 	private long codigo; // autoincremental, 	private String nome;, 	private String cpf;, 	private String celular;, 	, 	// responsavel por manter na memoria um contador para armazenar a sequencia de codigos dos, 	// funcionarios criados. Cada novo Funcionario criado, incrementa-se seu valor e joga-se para, 	// o codigo atual., 	private static int contadorCodigo;, 	, 	// construtor default, 	public Funcionario(){, 		contadorCodigo++;, 		codigo = contadorCodigo;, 	}, 	, 	// construtor com argumentos, 	public Funcionario(String nome, String cpf, String telefone) {, 		, 		contadorCodigo++;, 		codigo = contadorCodigo;, 		, 		this.nome = nome;, 		this.cpf = cpf;, 		// quando os nomes das variáveis sao diferentes o operador this torna-se opcional, 		celular = telefone; , 	}, , , , 	// operacoes, , 	// como o codigo é autoincremental nao deve permitir alterar o seu valor, portanto somente, 	// podemos permitir consultar o valor atual através do getCodigo, 	public long getCodigo() {, 		return codigo;, 	}, 	, 	, 	public String getNome() {, 		return nome;, 	}, 	, 	public void setNome(String nome){, 		this.nome = nome;, 	}, , , 	/**, 	 * @return the cpf, 	 */, 	public String getCpf() {, 		return cpf;, 	}, , , 	/**, 	 * @param cpf the cpf to set, 	 */, 	public void setCpf(String cpf) {, 		this.cpf = cpf;, 	}, , , 	/**, 	 * @return the celular, 	 */, 	public String getCelular() {, 		return celular;, 	}, , , 	/**, 	 * @param celular the celular to set, 	 */, 	public void setCelular(String celular) {, 		this.celular = celular;, 	}, 	, 	, 	, }, , , , , , , , ]
[package testes;, import modelos.Aluno;, , , public class AlunoTeste {, , 	public static void main(String[] args) {, , 		Aluno aluno1 = new Aluno();, 		aluno1.setNome("Jesus");;, 		aluno1.setNota1(5.0f);, 		aluno1.setNota2(10.0f);, 		aluno1.imprimirDados();, 		, 		Aluno aluno2 = new Aluno();, 		aluno2.imprimirDados();, 		, 		Aluno aluno3 = new Aluno("Maria",8.0f,6.9F);, 		aluno3.imprimirDados();, 		, 	}, , }]
[package testes;, , import java.util.ArrayList;, , import modelos.Aluno;, , public class ArrayListTestes {, , 	, 	public static void main(String[] args) {, 		, 		, 		ArrayList lista = new ArrayList();, 		lista.add("Ola");, 		lista.add(1000);, 		lista.add(true);, 		, //		ArrayList<Aluno> listaAlunos = new ArrayList<Aluno>();, //		listaAlunos.add("Ola");, //		listaAlunos.add(1000);, //		listaAlunos.add(true);, //		, //		ArrayList<String> listaNome = new ArrayList<String>();, //		listaNome.add("Ola");, //		listaNome.add(1000);, //		listaNome.add(true);, 		, 	, 		for (int i = 0; i < lista.size(); i++) {, 			, 			System.out.println(i + " - "+lista.get(i));, 			, 		}, 		, 		, 		, 	}, 	, }]
[package telas;, , import java.util.ArrayList;, , import javax.swing.JOptionPane;, , import modelos.Aluno;, , , public class TelaPrincipal {, , 	private static ArrayList<Aluno>listaAlunos = new ArrayList<Aluno>();, 	, 	public static void main(String[] args) {, 		// desenhar a tela, 	}, 	, 	/**, 	 * Fazer um menu com as opcoes:, 	 * , 	 * , 	 * 1) Cadastrar Aluno;, 	 * 2) Editar aluno, 	 * 3) Apagar aluno, 	 * 4) Apagar todos os alunos, 	 * 5) Listar alunos, 	 * 6) Sair, 	 * , 	 */, 	, 	, 	, 	private static void cadastrarAluno() {, 		, 		// passo 1: ler dados do usuario, 		String nome, nota1, nota2;, 		nome = JOptionPane.showInputDialog("Nome aluno");, 		nota1 = JOptionPane.showInputDialog("Nota 1");, 		nota2 = JOptionPane.showInputDialog("Nota 2");, 		, 		// passo 2: criar objeto Aluno, 		float n1 = Float.parseFloat(nota1);, 		float n2 = Float.parseFloat(nota2);, 		Aluno aluno = new Aluno(nome, n1, n2);, 		, 		// passo 3: cadastrar o aluno na lista, 		listaAlunos.add(aluno);, 		, 	}, 	, 	, 	, 	, 	, 	, 	, 	, 	, 	, 	, }]
[package modelos;, , public class Aluno {, 	, 	, 	private long matricula; // matricula auto incremental, 	private String nome;, 	private float nota1;, 	private float nota2;, 	, 	private static long contadorMatricula = 0;, 	, 	, 	public Aluno(){, 		String nomeClasse = getClass().getSimpleName();, 		System.out.println(nomeClasse+ " construtor default");, 		, 		// atualizar o contador, 		contadorMatricula++;, 		, 		// atribuir o contador atual na matricula deste objeto, 		matricula = contadorMatricula;, 	}, 	, 	, 	, 	public Aluno(String nome, float nota1,float nota2){, 		String nomeClasse = getClass().getSimpleName();, 		System.out.println(nomeClasse+ " construtor com argumentos");, 		// atualizar o contador, 		contadorMatricula++;, 		// atribuir o contador atual na matricula deste objeto, 		matricula = contadorMatricula;, 		, 		this.nome = nome;, 		this.nota1 = nota1;, 		this.nota2 = nota2;, 	}, 	, 	, 	, 	, 	, 	, 	, 	, 	, 	public void imprimirDados(){, 		System.out.println("---------------- BEGIN");, 		System.out.println(matricula);, 		System.out.println(nome);, 		System.out.println(nota1);, 		System.out.println(nota2);, 		System.out.println("---------------- END");, 	}, 	, 	, 	/**, 	 * @return the matricula, 	 */, 	public long getMatricula() {, 		return matricula;, 	}, 	, 	/**, 	 * @return the nome, 	 */, 	public String getNome() {, 		return nome;, 	}, 	/**, 	 * @param nome the nome to set, 	 */, 	public void setNome(String nome) {, 		this.nome = nome;, 	}, 	/**, 	 * @return the nota1, 	 */, 	public float getNota1() {, 		return nota1;, 	}, 	/**, 	 * @param nota1 the nota1 to set, 	 */, 	public void setNota1(float nota1) {, 		this.nota1 = nota1;, 	}, 	/**, 	 * @return the nota2, 	 */, 	public float getNota2() {, 		return nota2;, 	}, 	/**, 	 * @param nota2 the nota2 to set, 	 */, 	public void setNota2(float nota2) {, 		this.nota2 = nota2;, 	}, 	, 	, 	, , }]
[, public class Funcionario extends Pessoa {, 	, , 	private String carteiraTrabalho;, , 	public String getCarteiraTrabalho() {, 		return carteiraTrabalho;, 	}, , 	public void setCarteiraTrabalho(String carteiraTrabalho) {, 		this.carteiraTrabalho = carteiraTrabalho;, 	}, 	, 	, 	, }]
[, // superclass PESSOA (pai ou mae), public class Pessoa {, 	, 	private int codigo;, 	private String nome;, 	private String telefone;, 	, 	, 	public int getCodigo() {, 		return codigo;, 	}, 	public void setCodigo(int codigo) {, 		this.codigo = codigo;, 	}, 	public String getNome() {, 		return nome;, 	}, 	public void setNome(String nome) {, 		this.nome = nome;, 	}, 	public String getTelefone() {, 		return telefone;, 	}, 	public void setTelefone(String telefone) {, 		this.telefone = telefone;, 	}, }]
[import java.util.Date;, , , // subclass de Pessoa (eh uma classe filha), public class Cliente extends Pessoa {, 	, , 	private int quantidadeCompras;, 	private Date diaPrimeiraCompra;, , 	public int getQuantidadeCompras() {, 		return quantidadeCompras;, 	}, , 	public void setQuantidadeCompras(int quantidadeCompras) {, 		this.quantidadeCompras = quantidadeCompras;, 	}, , 	public Date getDiaPrimeiraCompra() {, 		return diaPrimeiraCompra;, 	}, , 	public void setDiaPrimeiraCompra(Date diaPrimeiraCompra) {, 		this.diaPrimeiraCompra = diaPrimeiraCompra;, 	}, 	, 	, , }]
[import java.util.Date;, , , public class TestandoHeranca {, 	, 	public static void main(String[] args) {, 		, 		// criando objetos , 		, 		Funcionario f = new Funcionario();, 		f.setCodigo(1);, 		f.setNome("Joao Pedro da Silva");, 		f.setCarteiraTrabalho("222.333.ce");, 		f.setTelefone("99999999");, 		, 		, 		Cliente c = new Cliente();, 		c.setCodigo(1);, 		c.setNome("Daniela Vasconselos");, 		c.setQuantidadeCompras(0);, 		c.setTelefone("999997779");, 		c.setDiaPrimeiraCompra(new Date());, 		, 		, 		, 	}, , }]
[import java.text.DecimalFormat;, , import javax.swing.JOptionPane;, , , public class IMC {, , 	public static void main(String[] args) {, 		, 		double pesoEmKg = 0.0;, 		double alturaEmMetros = 0.0;, 		double imc = 0.0;, 		, 		String relatorioIMC = "Relatório de Índice Massa Corporal:\n"+, 							  "\n(Abaixo do peso): menos que 18.5"+, 							  "\n(Normal): entre 18.5 e 24.9"+, 							  "\n(Acima do peso): entre 25 e 29.9"+, 							  "\n(Obeso): 30 ou mais";, 		, 		pesoEmKg = Double.parseDouble(JOptionPane.showInputDialog("Peso em quilos"));, 		alturaEmMetros = Double.parseDouble(JOptionPane.showInputDialog("Altura"));, 		, 		imc = pesoEmKg / (alturaEmMetros * alturaEmMetros);, 		, 		JOptionPane.showMessageDialog(null, relatorioIMC + "\n\nSeu IMC     : ", 				+ converterDoubleDoisDecimais(imc));, 		, 	}, 	, 	public static double converterDoubleDoisDecimais(double precoDouble) {  , 	    DecimalFormat fmt = new DecimalFormat("0.00");        , 	    String string = fmt.format(precoDouble);  , 	    String[] part = string.split("[,]");  , 	    String string2 = part[0]+"."+part[1];  , 	        double preco = Double.parseDouble(string2);  , 	    return preco;  , 	}, 	, 	, }]
[import javax.swing.JButton;, import javax.swing.JFrame;, import javax.swing.JPanel;, , , public class Tela1 {, , 	public static void main(String[] args) {, , 		, 		// declarar uma variavel que representa uma tela, 		JFrame tela = new JFrame();, 		, 		// permite adicionar os botoes sem esticar, 		JPanel painel = new JPanel();, 		, 		// permite setar as dimensoes da tela (largura,altura), 		tela.setSize(400, 300);, 		, 		// permite fechar o programa quando o X da janela for pressionado, 		tela.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);, 		, 		// cria um botao visual para aparecer na tela com nome 'Sair' , 		JButton botaoSair = new JButton("Sair");, 		JButton botaoCadastrar = new JButton("Cadastrar");, 		, 		// adicionar o painel na tela principal, 		tela.add(painel);, 		, 		// adicionar o botao no painel, 		painel.add(botaoCadastrar);, 		painel.add(botaoSair);, 		, 		// pemite fazer a tela aparecer, 		tela.setVisible(true);, 		, 		, 		// TAREFA: criar um botao CADASTRAR e fazer aparecer na tela, , 	}, , }]
[import javax.swing.JOptionPane;, , , public class TestandoArray {, 	, , 	, , 	public static void main(String[] args) {, 		, , 		int QUANTIDADE = 0;, 		, 		// pede o tamanho e armazena na variavel, 		// necessario converter de String para inteiro, 		QUANTIDADE = Integer.parseInt(, 				JOptionPane.showInputDialog(, 						"Quantos usuários deseja casdastrar?"));, 		, 		// declara e inicializa os vetores , 		String nomes[] = new String[QUANTIDADE];, 		int idades[] = new int[QUANTIDADE];, 		String cpfs[] = new String[QUANTIDADE]; , 		, 		, 		for (int i = 0; i < nomes.length; i++) {, 			// entrada de dados, 			String nome = JOptionPane.showInputDialog("Nome "+(i+1));, 			String idade = JOptionPane.showInputDialog("Idade "+(i+1));, 			String cpf = JOptionPane.showInputDialog("CPF "+(i+1));, 			, 			// atribuir os dados nos vetores, 			nomes[i] = nome;, 			idades[i] = Integer.parseInt(idade); // converter, 			cpfs[i] = cpf;, 			,  		} // fim laco, 		, 		// listar os dados como um relatorio, 		String relatorio = "";, 		for (int i = 0; i < QUANTIDADE; i++) {, 			, 			relatorio += nomes[i] + ", "+idades[i]+", "+cpfs[i] + "\n";, 			, 		} // fim laco, 		, 		// imprime na tela visual, 		JOptionPane.showMessageDialog(null, relatorio);, 		, 		, 		, 	} // fim maim, 	, } // fim programa]
[import javax.swing.JOptionPane;, , , public class Matriz {, 	, 	, 	public static void main(String[] args) {, 		, 		final int QUANTIDADE = 2;, 		, 		// declarando uma matriz, onde, 		// lista[linha 0, 0] -> nome, 		// lista[linha 1, 1] -> idade, 		// lista[linha N, 2] -> CPF, 		// lista[linha N, 3] -> codigo, 		String[][] lista = new String[QUANTIDADE][4];, 		, , 		, 		, 		, 		for (int i = 0; i < QUANTIDADE; i++) {, 			, 			String codigo = JOptionPane.showInputDialog("Codigo "+(i+1));, 			String nome = JOptionPane.showInputDialog("Nome "+(i+1));, 			String idade = JOptionPane.showInputDialog("Idade "+(i+1));, 			String cpf = JOptionPane.showInputDialog("CPF "+(i+1));, , 			// armazena os valores nas respectivas linhas, colunas, 			lista[i][0] = nome;, 			lista[i][1] = idade;, 			lista[i][2] = cpf;, 			lista[i][3] = codigo;, 		}, 		, 	}, , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package view;, , /**,  *,  * @author Diego,  */, public class MenuView extends javax.swing.JFrame {, ,     /**,      * Creates new form MenuView,      */,     public MenuView() {,         initComponents();,     }, ,     /**,      * This method is called from within the constructor to initialize the form.,      * WARNING: Do NOT modify this code. The content of this method is always,      * regenerated by the Form Editor.,      */,     @SuppressWarnings("unchecked"),     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents,     private void initComponents() {, ,         desktopPane = new javax.swing.JDesktopPane();,         menuBar = new javax.swing.JMenuBar();,         fileMenu = new javax.swing.JMenu();,         clienteMenuItem = new javax.swing.JMenuItem();,         pedidoMenuItem = new javax.swing.JMenuItem();, ,         setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);,         setTitle("Sistema de Cadastro");,         setLocationByPlatform(true);,         setResizable(false);, ,         fileMenu.setMnemonic('f');,         fileMenu.setText("Cadastros");,         fileMenu.addActionListener(new java.awt.event.ActionListener() {,             public void actionPerformed(java.awt.event.ActionEvent evt) {,                 fileMenuActionPerformed(evt);,             },         });, ,         clienteMenuItem.setMnemonic('o');,         clienteMenuItem.setText("Cliente");,         clienteMenuItem.addActionListener(new java.awt.event.ActionListener() {,             public void actionPerformed(java.awt.event.ActionEvent evt) {,                 clienteMenuItemActionPerformed(evt);,             },         });,         fileMenu.add(clienteMenuItem);, ,         pedidoMenuItem.setMnemonic('a');,         pedidoMenuItem.setText("Pedido");,         fileMenu.add(pedidoMenuItem);, ,         menuBar.add(fileMenu);, ,         setJMenuBar(menuBar);, ,         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());,         getContentPane().setLayout(layout);,         layout.setHorizontalGroup(,             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),             .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE),         );,         layout.setVerticalGroup(,             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),             .addGroup(layout.createSequentialGroup(),                 .addComponent(desktopPane, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE),                 .addGap(0, 0, Short.MAX_VALUE)),         );, ,         pack();,     }// </editor-fold>//GEN-END:initComponents, ,     private void clienteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clienteMenuItemActionPerformed,         ClienteView clienteView = new ClienteView();,         this.desktopPane.add(clienteView);,         clienteView.setVisible(true);,     }//GEN-LAST:event_clienteMenuItemActionPerformed, ,     private void fileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuActionPerformed,         // TODO add your handling code here:,     }//GEN-LAST:event_fileMenuActionPerformed, ,     /**,      * @param args the command line arguments,      */,     public static void main(String args[]) {,         /* Set the Nimbus look and feel */,         //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">,         /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.,          * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html ,          */,         try {,             for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {,                 if ("Nimbus".equals(info.getName())) {,                     javax.swing.UIManager.setLookAndFeel(info.getClassName());,                     break;,                 },             },         } catch (ClassNotFoundException ex) {,             java.util.logging.Logger.getLogger(MenuView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (InstantiationException ex) {,             java.util.logging.Logger.getLogger(MenuView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (IllegalAccessException ex) {,             java.util.logging.Logger.getLogger(MenuView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         } catch (javax.swing.UnsupportedLookAndFeelException ex) {,             java.util.logging.Logger.getLogger(MenuView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);,         },         //</editor-fold>, ,         /* Create and display the form */,         java.awt.EventQueue.invokeLater(new Runnable() {,             public void run() {,                 new MenuView().setVisible(true);,             },         });,     }, ,     // Variables declaration - do not modify//GEN-BEGIN:variables,     private javax.swing.JMenuItem clienteMenuItem;,     private javax.swing.JDesktopPane desktopPane;,     private javax.swing.JMenu fileMenu;,     private javax.swing.JMenuBar menuBar;,     private javax.swing.JMenuItem pedidoMenuItem;,     // End of variables declaration//GEN-END:variables, , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package view;, , import control.ClienteControl;, import javax.swing.JOptionPane;, import util.ValidacaoException;, , /**,  *,  * @author Diego,  */, public class ClienteView extends javax.swing.JInternalFrame {, ,     private ClienteControl clienteControl;,     /**,      * Creates new form ClienteView,      */,     public ClienteView() {,         ,         clienteControl = new ClienteControl();,         initComponents();,     }, ,     public ClienteControl getClienteControl() {,         return clienteControl;,     }, ,     /**,      * This method is called from within the constructor to initialize the form.,      * WARNING: Do NOT modify this code. The content of this method is always,      * regenerated by the Form Editor.,      */,     @SuppressWarnings("unchecked"),     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents,     private void initComponents() {,         bindingGroup = new org.jdesktop.beansbinding.BindingGroup();, ,         pnlBotoes = new javax.swing.JPanel();,         btnNovo = new javax.swing.JButton();,         btnSalvar = new javax.swing.JButton();,         btnExcluir = new javax.swing.JButton();,         btnPesquisar = new javax.swing.JButton();,         pnlCampos = new javax.swing.JPanel();,         lblCodigo = new javax.swing.JLabel();,         lblNome = new javax.swing.JLabel();,         txtCodigo = new javax.swing.JTextField();,         txtNome = new javax.swing.JTextField();,         scrDados = new javax.swing.JScrollPane();,         tbDados = new javax.swing.JTable();, ,         setClosable(true);,         setTitle("Cadastro de Clientes");, ,         pnlBotoes.setBorder(new javax.swing.border.MatteBorder(null));, ,         btnNovo.setText("Novo");,         btnNovo.addActionListener(new java.awt.event.ActionListener() {,             public void actionPerformed(java.awt.event.ActionEvent evt) {,                 btnNovoActionPerformed(evt);,             },         });, ,         btnSalvar.setText("Salvar");,         btnSalvar.addActionListener(new java.awt.event.ActionListener() {,             public void actionPerformed(java.awt.event.ActionEvent evt) {,                 btnSalvarActionPerformed(evt);,             },         });, ,         btnExcluir.setText("Excluir");,         btnExcluir.addActionListener(new java.awt.event.ActionListener() {,             public void actionPerformed(java.awt.event.ActionEvent evt) {,                 btnExcluirActionPerformed(evt);,             },         });, ,         btnPesquisar.setText("Pesquisar");,         btnPesquisar.addActionListener(new java.awt.event.ActionListener() {,             public void actionPerformed(java.awt.event.ActionEvent evt) {,                 btnPesquisarActionPerformed(evt);,             },         });, ,         javax.swing.GroupLayout pnlBotoesLayout = new javax.swing.GroupLayout(pnlBotoes);,         pnlBotoes.setLayout(pnlBotoesLayout);,         pnlBotoesLayout.setHorizontalGroup(,             pnlBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),             .addGroup(pnlBotoesLayout.createSequentialGroup(),                 .addGap(22, 22, 22),                 .addComponent(btnNovo),                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED),                 .addComponent(btnSalvar),                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED),                 .addComponent(btnExcluir),                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED),                 .addComponent(btnPesquisar),                 .addGap(0, 0, Short.MAX_VALUE)),         );,         pnlBotoesLayout.setVerticalGroup(,             pnlBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),             .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBotoesLayout.createSequentialGroup(),                 .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE),                 .addGroup(pnlBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE),                     .addComponent(btnNovo),                     .addComponent(btnSalvar),                     .addComponent(btnExcluir),                     .addComponent(btnPesquisar)),                 .addContainerGap()),         );, ,         pnlCampos.setBorder(new javax.swing.border.MatteBorder(null));, ,         lblCodigo.setText("Código:.");, ,         lblNome.setText("Nome:.");, ,         org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${clienteControl.clienteDigitado.codigo}"), txtCodigo, org.jdesktop.beansbinding.BeanProperty.create("text"));,         bindingGroup.addBinding(binding);, ,         txtCodigo.addActionListener(new java.awt.event.ActionListener() {,             public void actionPerformed(java.awt.event.ActionEvent evt) {,                 txtCodigoActionPerformed(evt);,             },         });, ,         binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${clienteControl.clienteDigitado.nome}"), txtNome, org.jdesktop.beansbinding.BeanProperty.create("text"));,         bindingGroup.addBinding(binding);, ,         javax.swing.GroupLayout pnlCamposLayout = new javax.swing.GroupLayout(pnlCampos);,         pnlCampos.setLayout(pnlCamposLayout);,         pnlCamposLayout.setHorizontalGroup(,             pnlCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),             .addGroup(pnlCamposLayout.createSequentialGroup(),                 .addContainerGap(),                 .addGroup(pnlCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),                     .addGroup(pnlCamposLayout.createSequentialGroup(),                         .addComponent(lblCodigo),                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED),                         .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)),                     .addGroup(pnlCamposLayout.createSequentialGroup(),                         .addComponent(lblNome),                         .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED),                         .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))),                 .addContainerGap(192, Short.MAX_VALUE)),         );,         pnlCamposLayout.setVerticalGroup(,             pnlCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),             .addGroup(pnlCamposLayout.createSequentialGroup(),                 .addContainerGap(),                 .addGroup(pnlCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE),                     .addComponent(lblCodigo),                     .addComponent(txtCodigo)),                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 17, Short.MAX_VALUE),                 .addGroup(pnlCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE),                     .addComponent(lblNome),                     .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)),                 .addGap(30, 30, 30)),         );, ,         org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${clienteControl.clientesTabela}");,         org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, tbDados);,         org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${codigo}"));,         columnBinding.setColumnName("Código");,         columnBinding.setColumnClass(Integer.class);,         columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nome}"));,         columnBinding.setColumnName("Nome");,         columnBinding.setColumnClass(String.class);,         bindingGroup.addBinding(jTableBinding);,         jTableBinding.bind();binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${clienteControl.clienteSelecionado}"), tbDados, org.jdesktop.beansbinding.BeanProperty.create("selectedElement"));,         bindingGroup.addBinding(binding);, ,         scrDados.setViewportView(tbDados);, ,         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());,         getContentPane().setLayout(layout);,         layout.setHorizontalGroup(,             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),             .addComponent(pnlCampos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE),             .addComponent(pnlBotoes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE),             .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup(),                 .addContainerGap(),                 .addComponent(scrDados, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE),                 .addContainerGap()),         );,         layout.setVerticalGroup(,             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING),             .addGroup(layout.createSequentialGroup(),                 .addComponent(pnlBotoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE),                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED),                 .addComponent(pnlCampos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE),                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED),                 .addComponent(scrDados, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE),                 .addGap(0, 69, Short.MAX_VALUE)),         );, ,         bindingGroup.bind();, ,         pack();,     }// </editor-fold>//GEN-END:initComponents, ,     private void txtCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodigoActionPerformed,         // TODO add your handling code here:,     }//GEN-LAST:event_txtCodigoActionPerformed, ,     private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed,         if (JOptionPane.showConfirmDialog(this, ,                               "Deseja realmente excluir o Cliente?",,                               "Excluir Cliente",,                               JOptionPane.YES_NO_OPTION ) == JOptionPane.YES_OPTION) {,         clienteControl.excluir();,         JOptionPane.showMessageDialog(this,"Cliente excluido com sucesso!",,                                            "Excluir Cliente",,                                            JOptionPane.INFORMATION_MESSAGE);,         },     }//GEN-LAST:event_btnExcluirActionPerformed, ,     private void btnNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoActionPerformed,         clienteControl.novo();,     }//GEN-LAST:event_btnNovoActionPerformed, ,     private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed,        ,         try {,         clienteControl.salvar();,         JOptionPane.showMessageDialog(this,"Cliente salvo com sucesso!",,                                            "Salvar Cliente",,                                            JOptionPane.INFORMATION_MESSAGE);,         } catch(ValidacaoException e){,         JOptionPane.showMessageDialog(this,e.getMessage(),,                                            "Falha de validação",,                                            JOptionPane.WARNING_MESSAGE);,         ,         },         ,         ,     }//GEN-LAST:event_btnSalvarActionPerformed, ,     private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed,      clienteControl.pesquisar();,     }//GEN-LAST:event_btnPesquisarActionPerformed, , ,     // Variables declaration - do not modify//GEN-BEGIN:variables,     private javax.swing.JButton btnExcluir;,     private javax.swing.JButton btnNovo;,     private javax.swing.JButton btnPesquisar;,     private javax.swing.JButton btnSalvar;,     private javax.swing.JLabel lblCodigo;,     private javax.swing.JLabel lblNome;,     private javax.swing.JPanel pnlBotoes;,     private javax.swing.JPanel pnlCampos;,     private javax.swing.JScrollPane scrDados;,     private javax.swing.JTable tbDados;,     private javax.swing.JTextField txtCodigo;,     private javax.swing.JTextField txtNome;,     private org.jdesktop.beansbinding.BindingGroup bindingGroup;,     // End of variables declaration//GEN-END:variables, }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package control;, , import java.beans.PropertyChangeListener;, import java.beans.PropertyChangeSupport;, import java.util.ArrayList;, import java.util.List;, import model.dao.ClienteDao;, import model.dao.ClienteDaoImpl;, import model.domain.Cliente;, import model.service.ServiceLocator;, import org.jdesktop.observablecollections.ObservableCollections;, import util.ValidacaoException;, , /**,  *,  * @author Diego,  */, public final class ClienteControl {,     ,     private final PropertyChangeSupport propertyChangeSupport=,             new PropertyChangeSupport(this);,             ,     private Cliente clienteDigitado;,     ,     private Cliente clienteSelecionado;,     ,     private List<Cliente> clientesTabela;,     ,     private final ClienteDao clienteDao;,     ,     public ClienteControl(){,     ,         clienteDao = ServiceLocator.getClienteDao();,         clientesTabela = ObservableCollections.observableList( ,                 new ArrayList<Cliente>());,         novo();,         pesquisar();,         ,     } , ,     public void novo() {,        setClienteDigitado(new Cliente());,        ,     }, ,     public void pesquisar() {,        clientesTabela.clear();,        clientesTabela.addAll(clienteDao.pesquisar(clienteDigitado));,     },     ,     ,     public void salvar()throws ValidacaoException {,     ,       clienteDigitado.validar();,       clienteDao.salvarAtualizar(clienteDigitado);,       novo();,       pesquisar();,     },     ,     public void excluir (){,     ,         clienteDao.excluir(clienteDigitado);,       novo();,       pesquisar();,     ,     }, ,     public Cliente getClienteDigitado() {,         return clienteDigitado;,     }, ,     public void setClienteDigitado(Cliente clienteDigitado) {,        ,         Cliente oldclienteDigitado = this.clienteDigitado;,         propertyChangeSupport.firePropertyChange("clienteDigitado",,                 oldclienteDigitado,clienteDigitado );,         ,         this.clienteDigitado = clienteDigitado;,     }, ,     public Cliente getClienteSelecionado() {,         return clienteSelecionado;,     }, ,     public void setClienteSelecionado(Cliente clienteSelecionado) {,         this.clienteSelecionado = clienteSelecionado;,         if( this.clienteSelecionado != null ){,          ,             setClienteDigitado(clienteSelecionado);,         ,         },         ,     }, ,     public List<Cliente> getClientesTabela() {,         return clientesTabela;,     }, ,     public void setClientesTabela(List<Cliente> clientesTabela) {,         this.clientesTabela = clientesTabela;,     },     ,     ,    public void addPropertyChangeListener(PropertyChangeListener propertyChangeListener) { ,        propertyChangeSupport.addPropertyChangeListener(propertyChangeListener);    ,    }         ,    ,    public void removePropertyChangeListener(PropertyChangeListener propertyChangeListener) {  ,        propertyChangeSupport.removePropertyChangeListener(propertyChangeListener); ,    },     ,     ,     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package model.domain;, , import java.util.Objects;, import javax.persistence.Column;, import javax.persistence.Entity;, import javax.persistence.GeneratedValue;, import javax.persistence.GenerationType;, import javax.persistence.Id;, import javax.persistence.Table;, import util.ValidacaoException;, , /**,  *,  * @author Diego,  */, , @Entity, @Table(name = "TB_CLIENTE"), public class Cliente {,     @Id,     @GeneratedValue(strategy = GenerationType.IDENTITY),     @Column(name="CD_CLIENTE"),     private Integer codigo;,     ,     @Column(name="NM_CLIENTE",length = 255, nullable = false),     private String nome;,     ,     public Cliente(){,     }, ,     public Integer getCodigo() {,         return codigo;,     }, ,     public void setCodigo(Integer codigo) {,         this.codigo = codigo;,     }, ,     public String getNome() {,         return nome;,     }, ,     public void setNome(String nome) {,         this.nome = nome;,     }, ,     @Override,     public int hashCode() {,         int hash = 7;,         hash = 23 * hash + Objects.hashCode(this.codigo);,         return hash;,     }, ,     @Override,     public boolean equals(Object obj) {,         if (obj == null) {,             return false;,         },         if (getClass() != obj.getClass()) {,             return false;,         },         final Cliente other = (Cliente) obj;,         if (!Objects.equals(this.codigo, other.codigo)) {,             return false;,         },         return true;,     },     ,     public void validar()throws ValidacaoException {,     ,         if(this.nome == null || this.nome.equals("")){,         throw new ValidacaoException("Campo nome não preenchido");,         ,         },     ,     } ,     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package model.dao;, , import java.util.List;, import javax.persistence.EntityManager;, import javax.persistence.Query;, import model.domain.Cliente;, , , /**,  *,  * @author Diego,  */, public class ClienteDaoImpl implements ClienteDao {,     ,     @Override,     public void salvarAtualizar(Cliente cliente) {,         EntityManager em = Conexao.getEntityManager();,         em.getTransaction().begin();,           ,          if (cliente.getCodigo() != null  ){,              cliente = em.merge(cliente);,          },         ,         em.persist(cliente);,         em.getTransaction().commit();,         em.close();, },     ,     @Override,     public void excluir(Cliente cliente) {,         EntityManager em = Conexao.getEntityManager();,         em.getTransaction().begin();,         cliente = em.merge(cliente);,         em.remove(cliente);,         em.getTransaction().commit();,         em.close();, },     ,     @Override,     public List<Cliente> pesquisar (Cliente cliente){,        EntityManager em = Conexao.getEntityManager();,        StringBuilder sql = new StringBuilder ("from Cliente c where 1=1 ");,       ,        if (cliente.getCodigo() != null){,            sql.append("AND c.codigo = :codigo ");,        },        if (cliente.getNome() != null &&,                !cliente.getNome().equals("")){,         sql.append("AND c.nome LIKE :nome ");,        },       Query query = em.createQuery(sql.toString());,        if (cliente.getCodigo() != null){,           query.setParameter("codigo",cliente.getCodigo());,        },        if (cliente.getNome() != null && !cliente.getNome().equals("")){,         query.setParameter("nome","%"+cliente.getNome()+"%");,     },         return query.getResultList();,     ,     },     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package model.dao;, , import javax.persistence.EntityManager;, import javax.persistence.EntityManagerFactory;, import javax.persistence.Persistence;, , /**,  *,  * @author Diego,  */, public class Conexao {,     private static EntityManagerFactory emf;,     ,     private static Conexao conexao;,     ,     private Conexao(){,        emf = Persistence.createEntityManagerFactory("AplicacaoMVCPU");,     },     ,     public synchronized static EntityManager getEntityManager(){,     ,         if (conexao == null){,         conexao = new Conexao();,         } ,         return emf.createEntityManager();,     }, }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package model.dao;, , import java.util.List;, import model.domain.Cliente;, , /**,  *,  * @author Diego,  */, public interface ClienteDao {, ,     void excluir(Cliente cliente);, ,     List<Cliente> pesquisar(Cliente cliente);, ,     void salvarAtualizar(Cliente cliente);,     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package model.service;, , import model.dao.ClienteDao;, import model.dao.ClienteDaoImpl;, , /**,  *,  * @author Diego,  */, public class ServiceLocator {, ,     public static ClienteDao getClienteDao() {,    return new ClienteDaoImpl();,     },     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package util;, , /**,  *,  * @author Diego,  */, public class ValidacaoException extends Exception {,     ,     public ValidacaoException(String message){,      super(message);,     },     , }]
[package br.edu.ifsp.heranca.scripts;, , import java.util.Calendar;, , public class Terrestres extends Veiculos {, 	, 	Integer num_rodas;, 	Integer placa;, 	Integer renavam;, 	Integer num_motor;, 	Integer num_portas;, 	Integer num_eixos;, 	Integer altura;, 	Integer largura;, 	Double distancia_eixos;, 	, , 	, 	, 	, 	public Terrestres(marca, modelo, num_passageiro, combustivel, data_documentacao,, 			num_chassi, proprietario, cor,  peso, potencia, valor,, 			ano_fabricacao, finalidade, tipo_motor, capacidade_carga,, 			comprimento,Integer num_rodas, Integer placa, Integer renavam, Integer num_motor, Integer num_portas,, 			Integer num_eixos, Integer altura, Integer largura, Double distancia_eixos) {, 		, 		this.marca = marca;, 		this.modelo = modelo;, 		this.num_passageiro = num_passageiro;, 		this.combustivel = combustivel;, 		this.data_documentacao = data_documentacao;, 		this.num_chassi = num_chassi;, 		this.proprietario = proprietario;, 		this.cor = cor;, 		this.peso = peso;, 		this.potencia = potencia;, 		this.valor = valor;, 		this.ano_fabricacao = ano_fabricacao;, 		this.finalidade = finalidade;, 		this.tipo_motor = tipo_motor;, 		this.capacidade_carga = capacidade_carga;, 		this.comprimento = comprimento;, 		this.num_rodas = num_rodas;, 		this.placa = placa;, 		this.renavam = renavam;, 		this.num_motor = num_motor;, 		this.num_portas = num_portas;, 		this.num_eixos = num_eixos;, 		this.altura = altura;, 		this.largura = largura;, 		this.distancia_eixos = distancia_eixos;, 	}, , }]
[package br.edu.ifsp.heranca.scripts;, import java.util.Calendar;, , public class Veiculos {, 	String marca;, 	String modelo;, 	Integer num_passageiro;, 	String combustivel;, 	Calendar data_documentacao;, 	Integer num_chassi;, 	String proprietario;, 	String cor;, 	Double peso;, 	String potencia;, 	Double valor;, 	Calendar ano_fabricacao;, 	String finalidade;, 	String tipo_motor;, 	Double capacidade_carga;, 	Integer comprimento;, 	, 	, 	private String getMarca() {, 		return marca;, 	}, 	private void setMarca(String marca) {, 		this.marca = marca;, 	}, 	private String getModelo() {, 		return modelo;, 	}, 	private void setModelo(String modelo) {, 		this.modelo = modelo;, 	}, 	private Integer getNum_passageiro() {, 		return num_passageiro;, 	}, 	private void setNum_passageiro(Integer num_passageiro) {, 		this.num_passageiro = num_passageiro;, 	}, 	private String getCombustivel() {, 		return combustivel;, 	}, 	private void setCombustivel(String combustivel) {, 		this.combustivel = combustivel;, 	}, 	private Calendar getData_documentacao() {, 		return data_documentacao;, 	}, 	private void setData_documentacao(Calendar data_documentacao) {, 		this.data_documentacao = data_documentacao;, 	}, 	private Integer getNum_chassi() {, 		return num_chassi;, 	}, 	private void setNum_chassi(Integer num_chassi) {, 		this.num_chassi = num_chassi;, 	}, 	private String getProprietario() {, 		return proprietario;, 	}, 	private void setProprietario(String proprietario) {, 		this.proprietario = proprietario;, 	}, 	private String getCor() {, 		return cor;, 	}, 	private void setCor(String cor) {, 		this.cor = cor;, 	}, 	private Double getPeso() {, 		return peso;, 	}, 	private void setPeso(Double peso) {, 		this.peso = peso;, 	}, 	private String getPotencia() {, 		return potencia;, 	}, 	private void setPotencia(String potencia) {, 		this.potencia = potencia;, 	}, 	private Double getValor() {, 		return valor;, 	}, 	private void setValor(Double valor) {, 		this.valor = valor;, 	}, 	private Calendar getAno_fabricacao() {, 		return ano_fabricacao;, 	}, 	private void setAno_fabricacao(Calendar ano_fabricacao) {, 		this.ano_fabricacao = ano_fabricacao;, 	}, 	private String getFinalidade() {, 		return finalidade;, 	}, 	private void setFinalidade(String finalidade) {, 		this.finalidade = finalidade;, 	}, 	private String getTipo_motor() {, 		return tipo_motor;, 	}, 	private void setTipo_motor(String tipo_motor) {, 		this.tipo_motor = tipo_motor;, 	}, 	private Double getCapacidade_carga() {, 		return capacidade_carga;, 	}, 	private void setCapacidade_carga(Double capacidade_carga) {, 		this.capacidade_carga = capacidade_carga;, 	}, 	private Integer getComprimento() {, 		return comprimento;, 	}, 	private void setComprimento(Integer comprimento) {, 		this.comprimento = comprimento;, 	}, 	, 	, 	, 	, 	, 	, , }]
[package aula07;, , public class Classe123 extends Pessoa implements IDemo123 {, , 	public Classe123(String nome, String apelido, int cc, Data dataNasc) {, 		super(nome, apelido, cc, dataNasc);, 		// TODO Auto-generated constructor stub, 	}, , 	public Classe123(String nome, String apelido) {, 		super(nome, apelido);, 		// TODO Auto-generated constructor stub, 	} , 	, 	, 	, 	, 	, 	public void metodo11(IDemo1 interface1) {}, 	public void metodo21(IDemo2 interface2) {}, 	public void metodo31(IDemo3 interface3) {}, 	public void metodo123(IDemo123 interface123) {}, 	, 	, }]
[package aula07;, , public class A07E02 {, , 	public static void main(String[] args) {, 		, 		// criacao da disciplina poo, 		Disciplina poo = new Disciplina("Programacao Orientada a Objetos", "Antonio", "Neves", "Programacao");, 		, 		// criar alunos, 		Aluno a1 = new Aluno("Tiago", "Mendes");, 		Aluno a2 = new Aluno("Flavia", "Figueiredo");, 		Aluno a3 = new Aluno("Tiago", "Melo");, 		Aluno a4 = new Aluno("Luis", "Silva");, 		Aluno a5 = new Aluno("Rafael", "Lopes");, 		Aluno a6 = new Aluno("Mariana", "Gameiro");, 		, 		// inscricao de alunos na disciplina com a consequente confirmacao, 		System.out.println(poo.inscreverAluno(a1));, 		System.out.println(poo.inscreverAluno(a1));, 		System.out.println(poo.inscreverAluno(a2));, 		System.out.println(poo.inscreverAluno(a2));, 		System.out.println(poo.inscreverAluno(a3));, 		System.out.println(poo.inscreverAluno(a3));, 		System.out.println(poo.inscreverAluno(a4));, 		System.out.println(poo.inscreverAluno(a4));, 		System.out.println(poo.inscreverAluno(a5));, 		System.out.println(poo.inscreverAluno(a6));, 		, 		// impressao das informacoes relativas a disciplina, 		System.out.println();, 		System.out.println(poo);, , 	}, , }]
[package aula07;, , public interface IDemo1 {, 	, 	default void metodo11() {}, 	, 	default void metodo12() {}, }]
[package aula07;, , public class Data {, 	private int dia;, 	private int mes;, 	private int ano;, 	, 	public Data(int dia, int mes, int ano) {, 		this.dia = dia;, 		this.mes = mes;, 		this.ano = ano;, 	}, 	, 	, 	@Override, 	public String toString() {, 		return "(" + dia + "/" + mes + "/" + ano + ")";, 	}, 	public int getDia() {, 		return dia;, 	}, 	public void setDia(int dia) {, 		this.dia = dia;, 	}, 	public int getMes() {, 		return mes;, 	}, 	public void setMes(int mes) {, 		this.mes = mes;, 	}, 	public int getAno() {, 		return ano;, 	}, 	public void setAno(int ano) {, 		this.ano = ano;, 	}, }]
[package aula07;, , public class A07E01 {, , 	public static void main(String[] args) { , 		Circulo c1 = new Circulo(2);        , 		Circulo c2 = new Circulo(1, 3, 2);        , 		, 		Quadrado q1 = new Quadrado(2);        , 		Quadrado q2 = new Quadrado(3, 4, 2);        , 		, 		Retangulo r1 = new Retangulo(2, 3);        , 		Retangulo r2 = new Retangulo(3, 4, 2, 3);        , 		, 		ColecaoFiguras col = new ColecaoFiguras(42.0); // MaxArea     , 		, 		System.out.println(col.addFigura(c2));        , 		System.out.println(col.addFigura(r1));        , 		System.out.println(col.addFigura(r1));        , 		System.out.println(col.addFigura(r2));        , 		System.out.println(col.addFigura(c1));        , 		System.out.println(col.addFigura(q2));        , 		System.out.println(col.addFigura(q1));     , 		System.out.println(col.delFigura(r1));        , 		System.out.println(col.addFigura(q1));        , 		, 		System.out.println("\nArea Total: " + col.areaTotal());        , 		, 		System.out.println("\nLista de Figuras:");        , 		for (Figura f: col.getFiguras())           , 			System.out.println(f);, 		, 		System.out.println("\nCirculos na Lista de Figuras:");        , 		for (Figura f: col.getFiguras())           , 			if (f instanceof Circulo)        , 				System.out.println(f);, 		, 		System.out.println("\nCentro das Figuras:");        , 		for (Ponto p: col.getCentros())           , 			System.out.println(p);     , 	} , } ]
[package aula07;, , import java.lang.Math;, , public class Ponto {, 	private double x = 0.0;, 	private double y = 0.0;, 	, 	public Ponto(double x, double y) {, 		this.x = x;, 		this.y = y;, 	}, , 	@Override, 	public String toString() {, 		return "(" + x + ", " + y + ")";, 	}, 	, 	@Override, 	public boolean equals(Object obj) {, 		if (this == obj), 			return true;, 		if (obj == null), 			return false;, 		if (getClass() != obj.getClass()), 			return false;, 		Ponto other = (Ponto) obj;, 		if (x != other.x), 			return false;, 		if (y != other.y), 			return false;, 		return true;, 	}, 	, 	, 	, 	public double getX() {, 		return x;, 	}, , 	public void setX(double x) {, 		this.x = x;, 	}, , 	public double getY() {, 		return y;, 	}, , 	public void setY(double y) {, 		this.y = y;, 	}, , 	public double distance(Ponto p) {, 		return Math.sqrt(Math.pow((this.x - p.x), 2) + Math.pow((this.y - p.y), 2));, 	}, , }]
[package aula07;, , public class Retangulo extends Figura {, 	, 	private double comprimento;, 	private double largura;, , 	public Retangulo(double x, double y, String cor, double c, double l) {, 		super(x, y, cor);, 		this.comprimento = c;, 		this.largura = l;, 		, 	}, , 	public Retangulo(Ponto p, String cor, double c, double l) {, 		super(p, cor);, 		this.comprimento = c;, 		this.largura = l;, 	}, 	, 	public Retangulo(double c, double l) {, 		super(0,0);, 		this.comprimento = c;, 		this.largura = l;, 	}, 	, 	public Retangulo(double x, double y, double c, double l) {, 		super(x,y);, 		this.comprimento = c;, 		this.largura = l;, 	}, , 	@Override, 	public String toString() {, 		return  "Retangulo de " + super.toString() + ", Comprimento: " + comprimento + ", Largura: " + largura + ", Area: " + this.area() + ", Perimetro: " + this.perimetro();, 	}, , 	public double getComprimento() {, 		return comprimento;, 	}, , 	public void setComprimento(double comprimento) {, 		this.comprimento = comprimento;, 	}, , 	public double getLargura() {, 		return largura;, 	}, , 	public void setLargura(double largura) {, 		this.largura = largura;, 	}, 	, 	public double area() {, 		return comprimento * largura;, 	}, 	, 	public double perimetro() {, 		return 2 * comprimento + 2 * largura;, 	}, 	, }]
[package aula07;, , public class Professor extends Pessoa {, 	private String areaInvestigacao;, , 	public Professor(String nome, String apelido, int cc, Data dataNasc, String areaInvestigacao) {, 		super(nome, apelido, cc, dataNasc);, 		this.areaInvestigacao = areaInvestigacao;, 	}, , 	public Professor(String nome, String apelido, String areaInvestigacao) {, 		super(nome, apelido);, 		this.areaInvestigacao = areaInvestigacao;, 	}, , 	@Override, 	public String toString() {, 		return super.toString() + ", Area de investigacao: " + areaInvestigacao;, 	}, 	, 	, 	, , }]
[package aula07;, , public interface IDemo2 {, , 	default void metodo21() {}, 	default void metodo22() {}, 	, }]
[package aula07;, , public abstract class Figura {, 	private Ponto centro;, 	private String cor = "Branco";, 	, 	public Figura(double x, double y, String cor) {, 		this.centro = new Ponto(x, y);, 		this.cor = cor;, 	}, 	, 	public Figura(Ponto p, String cor) {, 		this.centro = p;, 		this.cor = cor;, 	}, 	, 	public Figura(double x, double y) {, 		this.centro = new Ponto(x,y);, 	}, , 	@Override, 	public String toString() {, 		return "Centro: " + centro + ", Cor: " + cor;, 	}, , 	public Ponto getCentro() {, 		return centro;, 	}, , 	public void setCentro(Ponto centro) {, 		this.centro = centro;, 	}, , 	public String getCor() {, 		return cor;, 	}, , 	public void setCor(String cor) {, 		this.cor = cor;, 	}, 	, 	public abstract double area();, 	, 	public abstract double perimetro();, 	, 	, 	, 	, 	, 	, , }]
[package aula07;, , public class Circulo extends Figura {, 	, 	private double raio = 1.0;, , 	public Circulo(double x, double y, String cor, double raio) {, 		super(x, y, cor);, 		this.raio = raio;, 	}, , 	public Circulo(Ponto p, String cor, double raio) {, 		super(p, cor);, 		this.raio = raio;, 	}, 	, 	public Circulo(double x, double y, double raio) {, 		super(x,y);, 		this.raio = raio;, 	}, 	, 	public Circulo(double raio) {, 		super(0,0);, 		this.raio = raio;, 	}, , 	@Override, 	public String toString() {, 		return "Circulo de " +  super.toString() + ", Raio: " + raio + ", Area: " + this.area() + ", Perimetro: " + this.perimetro();, 	}, , 	public double getRaio() {, 		return raio;, 	}, , 	public void setRaio(double raio) {, 		this.raio = raio;, 	}, 	, 	public double area() {, 		return Math.PI * raio * raio;, 	}, 	, 	public double perimetro() {, 		return 2 * Math.PI * raio; , 	}, 	, 	public boolean intersectsWith(Circulo c) {, 		if(this.getCentro().distance(c.getCentro()) <= this.raio + c.raio){, 			return true;, 		} else {, 			return false;, 		}, 	}, 	, 	, 	, , }]
[package aula07;, , public class Quadrado extends Retangulo {, , 	public Quadrado(double x, double y, String cor, double l) {, 		super(x, y, cor, l, l);, 	}, , 	public Quadrado(Ponto p, String cor, double l) {, 		super(p, cor, l, l);, 	}, 	, 	public Quadrado(double l) {, 		super(l,l);, 	}, 	, 	public Quadrado(double x, double y, double l) {, 		super(x,y,l,l);, 	}, 	, 	@Override, 	public String toString() {, 		return "Quadrado e " +  super.toString();, 	}, , }]
[package aula07;, , public class Pessoa {, 	, 	private String nome;, 	private String apelido;, 	private int cc;, 	private Data dataNasc;, 	, 	public Pessoa(String nome, String apelido, int cc, Data dataNasc) {, 		this.nome = nome;, 		this.cc = cc;, 		this.dataNasc = dataNasc;, 	}, 	public Pessoa(String nome, String apelido) {, 		this.nome = nome;, 		this.apelido = apelido;, 	}, , 	@Override, 	public String toString() {, 		return "Nome: " + nome + " " + apelido;, 	}, , 	public String getNome() {, 		return nome;, 	}, , 	public void setNome(String nome) {, 		this.nome = nome;, 	}, , 	public int getCc() {, 		return cc;, 	}, , 	public void setCc(int cc) {, 		this.cc = cc;, 	}, , 	public Data getDataNasc() {, 		return dataNasc;, 	}, , 	public void setDataNasc(Data dataNasc) {, 		this.dataNasc = dataNasc;, 	}, 	, 	, , 	, }]
[package aula07;, , public class A07E03 {, , 	public static void main(String[] args) {, 		, 		, 		Classe123 id123 = new Classe123("Cristiano", "Ronaldo");, 		id123.metodo11(id123);, 		id123.metodo123(id123);, 		IDemo1 id1 = new Classe123("Tiago", "Mendes");, , 	}, , }]
[package aula07;, , public interface IDemo123 extends IDemo1, IDemo2, IDemo3 {, 	, 	default void metodo11() {}, 	default void metodo12() {}, 	, 	default void metodo21() {}, 	default void metodo22() {}, 	, 	default void metodo31() {}, 	default void metodo32() {}, 	, 	default void metodo123() {}, }]
[package aula07;, , import java.util.ArrayList;, import java.util.List;, , public class Disciplina {, 	, 	private String nome;, 	private Professor professor;, 	private List<Aluno> alunos = new ArrayList<Aluno>();, 	, 	public Disciplina(String nome, /*dados do professor*/ String nP, String aP, String aI) {, 		//nP - nome do professor ; aP - apelido do professor; aI - area de investigacao do professor, 		this.nome = nome;, 		this.professor = new Professor(nP, aP, aI);, 	}, 	, 	// metodo para inscrever um aluno, 	public boolean inscreverAluno(Aluno a) {, 		if(alunoExiste(a)) {, 			return false;, 		} else {, 			alunos.add(a);, 			return true;, 		}, 		, 	}, 	, 	// metodo para averiguar se o aluno ja esta inscrito na disciplina, 	public boolean alunoExiste(Aluno a) {, 		for(Aluno aluno : alunos) {, 			if(aluno.equals(a)) {, 				return true;, 			}, 		}, 		return false;, 	}, , 	@Override, 	public String toString() {, 		String dados = "";, 		dados += ("Disciplina - " + nome + "\n\n");, 		dados += ("Professor responsavel - " + professor + "\n\n");, 		dados += ("Numero de alunos inscritos - " + alunos.size() + "\n\nAlunos:\n\n");, 		for(Aluno aluno : alunos) {, 			dados += (aluno + "\n\n");, 		}, 		return dados;, 	}, 	, }]
[package aula07;, , public interface IDemo3 {, 	, 	default void metodo31() {}, 	default void metodo32() {}, 	, }]
[package aula07;, , import java.util.Calendar;, , public class Aluno extends Pessoa {, 	, 		private Data dataIns;, 		private static int nMec = 100;, 		private int myNMec;, 		, 	, , 	public Aluno(String nome, String apelido, int cc, Data dataNasc, Data dataIns) {, 		super(nome, apelido, cc, dataNasc);, 		this.dataIns = dataIns;, 		this.myNMec = nMec;, 		nMec++;, 		, 	}, 	, 	public Aluno(String nome, String apelido, int cc, Data dataNasc) {, 		super(nome, apelido, cc, dataNasc);, 		this.myNMec = nMec;, 		nMec++;, 		Calendar cal = Calendar.getInstance();, 		this.dataIns = new Data(cal.get(Calendar.DAY_OF_MONTH), cal.get(Calendar.MONTH), cal.get(Calendar.YEAR));, 		, 	}, 	, 	public Aluno(String nome, String apelido) {, 		super(nome, apelido);, 		myNMec = nMec;, 		nMec++;, 	}, 	, , 	@Override, 	public String toString() {, 		return "Aluno " + super.toString() + ", N Mec: " + myNMec;, 	}, , , 	public Data getDataIns() {, 		return dataIns;, 	}, , , 	public void setDataIns(Data dataIns) {, 		this.dataIns = dataIns;, 	}, , , 	public int getMyNMec() {, 		return myNMec;, 	}, , , 	public void setMyNMec(int myNMec) {, 		this.myNMec = myNMec;, 	}, 	, 	, 	, , }]
[package aula07;, , import java.util.ArrayList;, import java.util.List;, , public class ColecaoFiguras {, 	private double maxArea;, 	private List<Figura> colecao = new ArrayList<Figura>();, 	private double areaTotal;, 	, 	public ColecaoFiguras(double maxArea) {, 		this.maxArea = maxArea;, 	}, , 	public boolean addFigura(Figura f) {, 		if(exists(f)) {, 			return false;, 		}, 		if((f.area() + this.areaTotal) <= maxArea) {, 			areaTotal += f.area();, 			colecao.add(f);, 			return true;, 		} else {, 			return false;, 		}, 	}, 	, 	public boolean delFigura(Figura f) {, 		areaTotal -= f.area();, 		colecao.remove(f);, 		return true;, 	}, 	, 	public double areaTotal() {, 		return this.areaTotal;, 	}, 	, 	public boolean exists(Figura f) {, 		for(Figura figura : colecao) {, 			if(figura.equals(f)) {, 				return true;, 			}, 		}, 		return false;, 	}, 	, 	public Figura[] getFiguras() {, 		Figura[] f = new Figura[colecao.size()];, 		for(int i = 0; i < colecao.size(); i++){, 			f[i] = colecao.get(i);, 		}, 		return f;, 	}, 	, 	public Ponto[] getCentros() {, 		Ponto[] p = new Ponto[colecao.size()];, 		for(int i = 0; i < colecao.size(); i++){, 			p[i] = colecao.get(i).getCentro();, 			, 		}, 		return p;, 	}, }]
[package aula07;, , public class AlunoPosGrad extends Aluno {, 	, 	private Professor orientador;, , 	public AlunoPosGrad(String nome, String apelido, int cc, Data dataNasc, Data dataIns) {, 		super(nome, apelido, cc, dataNasc, dataIns);, 		// TODO Auto-generated constructor stub, 	}, , 	public AlunoPosGrad(String nome, String apelido, int cc, Data dataNasc) {, 		super(nome, apelido, cc, dataNasc);, 		// TODO Auto-generated constructor stub, 	}, , 	public AlunoPosGrad(String nome, String apelido) {, 		super(nome, apelido);, 		// TODO Auto-generated constructor stub, 	}, , 	@Override, 	public String toString() {, 		return super.toString() + ", Professor Orientador - " + orientador;, 	}, 	, 	, 	, 	, 	, 	, , }]
[package examePratico;, , import java.util.*;, , public class LojaAlimentar {, 	, 	// Atributos, 	private String nome;, 	private String endereco;, 	private Set<Alimento> alimentos = new TreeSet<>();, 	, 	// Construtor, 	public LojaAlimentar(String nome, String endereco) {, 		this.nome = nome;, 		this.endereco = endereco;, 	}, , 	public void add(Alimento a) {, 		this.alimentos.add(a);, 	}, 	, 	, , 	public Set<Alimento> getAlimentos() {, 		return alimentos;, 	}, , 	public void setAlimentos(Set<Alimento> alimentos) {, 		this.alimentos = alimentos;, 	}, , 	// Metodos, 	@Override, 	public String toString() {, 		String s = "Bem vindo a loja alimentar " + nome + "!\nEndereco: " + endereco + "\nAlimentos:\n";, 		for(Alimento a : alimentos) {, 			s += a +"\n";, 		}, 		return s;, 	}, 	, 	, 	, 	, }]
[package examePratico;, , public enum TipoJogador {, 	GuardaRedes, Avancado, Defesa, Medio, }]
[package examePratico;, , , public class Jogo {, 	private Equipa[] equipas = new Equipa[2];, 	private Bola bola;, 	private int tempoTotal;, 	private int tempoDecorrido;, 	, 	public Jogo(Equipa e1, Equipa e2, Bola bola, int tempoTotal) {, 		this.equipas[0] = e1;, 		this.equipas[1] = e2;, 		this.bola = bola;, 		this.tempoTotal = tempoTotal;, 	}, , 	@Override, 	public String toString() {, 		return "Jogo entre " + equipas[0].getNome() + " e " + equipas[1].getNome() + "\n";, 		, 	}, 	, 	, }]
[package examePratico;, , import java.util.*;, , public class Cabine implements Comparable<Cabine> {, 	, 	// Atributos, 	private int num;, 	private int maxOcupantes;, 	private String[] passageiros;, 	, 	// Construtor, 	public Cabine(int num, int maxOcupantes) {, 		this.num = num;, 		this.maxOcupantes = maxOcupantes;, 	}, 	, 	, , 	@Override, 	public String toString() {, 		, 		if(this.passageiros == null) {, 			return "[ Nº" + num + "( max " + maxOcupantes + " pessoas ) : Disponivel para venda! ]";, 		}, 		return "[ Nº" + num + "( max " + maxOcupantes + " pessoas ) : " + Arrays.toString(passageiros) + "]";, 	}, , , , 	public String[] getPassageiros() {, 		return passageiros;, 	}, , 	public void setPassageiros(String[] passageiros) {, 		, 		if(passageiros.length > this.maxOcupantes) {, 			System.out.println("\nNao adicionado devido a excesso de ocupantes!!");, 			return;, 		}, 		this.passageiros = passageiros;, 		, 	}, , 	public int getMaxOcupantes() {, 		return maxOcupantes;, 	}, , 	public void setMaxOcupantes(int maxOcupantes) {, 		this.maxOcupantes = maxOcupantes;, 	}, , 	@Override, 	public int compareTo(Cabine o) {, 		return this.num - o.num;, 	}, 	, }]
[package examePratico;, , public class CarroCombustao extends Automovel implements MotorCombustao {, 	, 	// Atributos, 	private double emissao;, 	, 	// Construtor, 	public CarroCombustao(String matricula, int ano, String cor, double potencia, double emissao) {, 		super(matricula, ano, cor, potencia);, 		this.emissao = emissao;, 	}, 	, 	// Metodo toString(), 	@Override, 	public String toString() {, 		return "CarroCombustao [" + super.toString() + ", emissao=" + emissao + "]";, 	}, , 	// Metodo getEmissaoC02;, 	@Override, 	public double getEmissaoCO2() {, 		return this.emissao;, 	}, , }]
[package examePratico;, , public class MotoEletrica extends Moto implements MotorEletrico {, , 	// Atributos, 	private double autonomia;, 	, 	// Construtor, 	public MotoEletrica(String matricula, int ano, String cor, double potencia, double autonomia) {, 		super(matricula, ano, cor, potencia);, 		this.autonomia = autonomia;, 	}, 	, 	// Metodo toString();, 	@Override, 	public String toString() {, 		return "MotoEletrica [" + super.toString() + "autonomia=" + autonomia + "]";, 	}, , 	// Metodo getAutonomia();, 	@Override, 	public double getAutonomia() {, 		return this.autonomia;, 	}, , 	, , }]
[package examePratico;, , public class ObjetoMovel {, 	, 	// Atributos, 	private int x;, 	private int y;, 	private double velocidade;, 	private double distancia;, 	, 	// Construtor, 	public ObjetoMovel(int x, int y) {, 		this.x = x;, 		this.y = y;, 	}, 	, 	// Metodo toString(), 	@Override, 	public String toString() {, 		return "ObjetoMovel [x=" + x + ", y=" + y + ", velocidade=" + velocidade + ", distanciaPercorrida=", 				+ distancia + "]";, 	}, 	, 	, 	, 	public int getX() {, 		return x;, 	}, , 	public void setX(int x) {, 		this.x = x;, 	}, , 	public int getY() {, 		return y;, 	}, , 	public void setY(int y) {, 		this.y = y;, 	}, , 	public double getVelocidade() {, 		return velocidade;, 	}, , 	public void setVelocidade(double velocidade) {, 		this.velocidade = velocidade;, 	}, , 	public double getDistancia() {, 		return distancia;, 	}, , 	public void setDistancia(double distancia) {, 		this.distancia = distancia;, 	}, , 	public void move(int newX, int newY) {, 		distancia += Math.sqrt(Math.pow(this.x - newX , 2) + Math.pow(this.y - newY , 2));, 		this.x = newX;, 		this.y = newY;, 	}, 	, 	public void move(int newX, int newY, double velocidade) {, 		distancia += Math.sqrt(Math.pow(this.x - newX , 2) + Math.pow(this.y - newY , 2));, 		this.x = newX;, 		this.y = newY;, 		this.velocidade = velocidade;, 	}, 	, 	, 	, 	, 	, 	, 	, 	, }]
[package examePratico;, , public enum CorDaBola {, 	Laranja, Amarela, Azul, Vermelha, }]
[package examePratico;, , public class CabineComVaranda extends Cabine implements Extras {, 	, 	private TipoDeVaranda tipoVaranda;, 	private Extra extra;, 	, 	public CabineComVaranda(int num, int maxOcupantes,TipoDeVaranda tipoVaranda) {, 		super(num, maxOcupantes);, 		this.tipoVaranda = tipoVaranda;, 	}, 	, 	, , 	@Override, 	public String toString() {, 		return "Cabine Com Varanda " + this.tipoVaranda + " " + super.toString();, 	}, , , , 	public TipoDeVaranda getTipo() {, 		return tipoVaranda;, 	}, , 	public void setTipoVaranda(TipoDeVaranda tipoVaranda) {, 		this.tipoVaranda = tipoVaranda;, 	}, , 	@Override, 	public void pacoteExtra(Extra extra) {, 		this.extra = extra;, 		, 	}, 	, 	, , }]
[package examePratico;, , import java.util.*;, import java.io.*;, , public class teste {, , 	public static void main(String[] args) {, 		, 		Scanner sc = null;, 		, 		try {, 			sc = new Scanner(new FileReader("companhias.txt"));, 		} catch(FileNotFoundException e) {, 			System.out.println("\nErro ao abrir o ficheiro!");, 		}, 		, 		String firstString = sc.nextLine();, 		, 		while(sc.hasNextLine()) {, 			String[] linha = sc.nextLine().split("\t");, 			, 			for(String s : linha) {, 				System.out.print(s + " ");, 			}, 			System.out.println();, 		}, 		, 	}, , }]
[package examePratico;, , public class Refrigerante extends Alimento implements Frigorifico {, 	, 	private double tempMin = 3.0;, 	private double tempMax = 5.0;, , 	public Refrigerante(String nome, double preco, int calorias, String data) {, 		super(nome, preco, calorias, data);, 	}, , 	@Override, 	public void setTemp(double tempMin, double tempMax) {, 		this.tempMin = tempMin;, 		this.tempMax = tempMax;, 	}, , 	@Override, 	public double getTempMin() {, 		return this.tempMin;, 	}, , 	@Override, 	public double getTempMax() {, 		return this.tempMax;, 	}, , 	@Override, 	public String toString() {, 		return "Refrigerante [tempMin=" + tempMin + ", tempMax=" + tempMax +  super.toString() + "]";, 	}, 	, 	, , }]
[package examePratico;, , import java.util.*;, import java.io.*;, , public class POO15AP {, , 	public static void main(String[] args) {, 		POO15AP ap = new POO15AP();, 		ap.alinea1();, 		ap.alinea2();, 		ap.alinea3();, 	}, , 	public void alinea1() {, 		System.out.println("\nA1)");, 		LojaAlimentar lZe = new LojaAlimentar("Loja do Zé", "Rua Domingos Carrancho, 15, 3800-145 Aveiro");, 		Lacteo lact1 = new Lacteo("Iogurte Natural Danone", 1.48, 56, "07.06.2015");, , 		// nome, preço, calorias, validade, 		lact1.setGordura(4.0);, 		lact1.setTemp(4, 6); // temperaturas mínima e máxima, 		lZe.add(lact1);, 		lZe.add(new Lacteo("Leite UHT Meio Gordo Mimosa", 0.64, 46, "20.06.2015", 1.7));, , 		// o último valor é a gordura, 		Cereal c1 = new Cereal("Nestlé Fitness", 1.59, 200, "15.09.2015");, 		c1.setComp(TIPO_CEREAL.ARROZ_TRIGO);, 		lZe.add(c1);, 		lZe.add(new Refrigerante("Cola Cola", 1.12, 300, "15.09.2015"));, 		System.out.println(lZe); // imprime todos os produtos da loja, 		try {, 			PrintWriter fl = new PrintWriter(new File("output3.txt"));, 			fl.println(lZe);, 			fl.close();, 		} catch (FileNotFoundException e) {, 			e.printStackTrace();, 		}, 	}, , 	public void alinea2() {, , 		System.out.println("\nA2)\n");, , 		LojaAlimentar la = new LojaAlimentar("Tiago", "Bairro de Santiago, Aveiro");, , 		Lacteo lact1 = new Lacteo("Iogurte Natural Danone", 1.48, 56, "07.06.2015");, , 		// nome, preço, calorias, validade, 		lact1.setGordura(4.0);, 		lact1.setTemp(4, 6); // temperaturas mínima e máxima, 		la.add(lact1);, 		la.add(new Lacteo("Leite UHT Meio Gordo Mimosa", 0.64, 46, "20.06.2015", 1.7));, , 		// o último valor é a gordura, 		Cereal c1 = new Cereal("Nestlé Fitness", 1.59, 200, "15.09.2015");, 		c1.setComp(TIPO_CEREAL.ARROZ_TRIGO);, 		la.add(c1);, 		la.add(new Refrigerante("Cola Cola", 1.12, 300, "15.09.2015"));, 		, 		for(Alimento a : la.getAlimentos()) {, 			if(a instanceof Frigorifico) {, 				System.out.println(a);, 			}, 		}, 	}, 	, 	public void alinea3() {, 		, 		Scanner file = null;, 		, 		try {, 			file = new Scanner(new FileReader("alimentos.txt"));, 		} catch(FileNotFoundException e) {, 			System.out.println("\nErro ao abrir o ficheiro!");, 		}, 		, 		String firstLine = file.nextLine();, 		, 		System.out.printf("%-10s%-20s%-10s%-10s%-10s%-10s", "Tipo","Nome","Preco","Calorias","Data","Gordura");, 		, 		while(file.hasNextLine()) {, 			, 			String[] linha = file.nextLine().split("\t");, 			, 			String tipo = linha[0];, 			String nome = linha[1];, 			double preco = Double.parseDouble(linha[2]);, 			int calorias = Integer.parseInt(linha[3]);, 			String data = linha[4];, 			double gordura = 0.0;, 			if(linha[5] != null) {, 				gordura = Double.parseDouble(linha[5]);, 			}, 			, 		}, 		, 	}, 	, , }]
[package examePratico;, , public class RoboCopa {, 	public static void main(String[] args) {, 		RoboCopa exam = new RoboCopa();, 		exam.parte1();, 		exam.parte2();, 	}, , 	private void parte1() {, 		, 		Bola bola = null;, 		bola = new Bola(CorDaBola.Amarela);, 		showOMStatus(bola);, 		, 		Equipa e1 = new Equipa("BeiraMar", "JJ");, 		Robo r[] = {, 				new Robo("Ron", TipoJogador.GuardaRedes, 5, 0),, 				new Robo("Mes", TipoJogador.Avancado, 2, 40),, 				new Robo("Pau", TipoJogador.Defesa, 7, 10),, 				new Robo("Ema", TipoJogador.Medio, 5, 25),, 				new Robo("Tim", TipoJogador.Medio, 1, 20) };, 		for (ObjetoMovel o: r), 			showOMStatus(o);, 		, 		e1.add(r[0]);, 		e1.add(r[1]);, 		e1.add(r[2]);, 		e1.add(r[1]);, 		e1.add(r[3]);, 		e1.add(r[4]);, 		e1.remove(r[3]);, 		System.out.print("-- " + e1);, , 		Equipa e2 = new Equipa("PortoDAveiro", "Lopes");, 		e2.add(new Robo("Liu", TipoJogador.GuardaRedes, 5, 80));, 		e2.add(new Robo("Min", TipoJogador.Avancado, 3, 10));, 		e2.add(new Robo("Hus", TipoJogador.Defesa, 6, 70));, 		e2.add(new Robo("Taw", TipoJogador.Medio, 5, 65));, 		e2.add(new Robo("Taw", TipoJogador.Medio, 5, 65));, 		System.out.print("-- " + e2);, , 		if(Bola.getnBolas() == 0), 			bola = new Bola(CorDaBola.Azul);, 		else, 			System.out.println("Já temos bola!");, 		, 		Jogo tacoataco = new Jogo(e1, e2, bola, 20);, 		System.out.println("--- " + tacoataco);, 	 	, 		// simulação simples de movimentos e golos de uma equipa, 		Robo[] r2 = e2.getRobos();, 	 	r2[1].marcaGolo();, 	 	r2[1].move(40, 40);, 	 	r2[1].move(60, 40);, 	 	r2[1].move(70, 40);, 	 	r2[1].marcaGolo(); , 	 	r2[2].move(55, 55, 20);, 	 	r2[3].move(40, 20);, 	 	r2[3].move(60, 20);, 	 	r2[3].move(70, 20);, 	 	r2[3].marcaGolo(); , 	 	for (Robo rob: r), 	 		showRoboStatus(rob);, 	 	, 		System.out.println("Score: " + e1.getGolosMarcados() + " - "+e2.getGolosMarcados());, 	}, , 	private void showOMStatus(ObjetoMovel om) {, 		System.out.printf("OM: %3d %3d %3.0f %5.1f\n", om.getX(), om.getY(), om.getVelocidade(), om.getDistancia());, 	}, , 	private void showRoboStatus(Robo rob) {, 		System.out.printf("%-10s %-15s %3d %3d %3.0f %5.1f %3d\n", rob.getId(), rob.getTipo(), ,  				rob.getX(), rob.getY(), rob.getVelocidade(), rob.getDistancia(), rob.getGolos());, 	}, 	, 	private void parte2() {, 		// Completar, 	}, 	, , }]
[package examePratico;, , public class Suite extends Cabine {, 	, 	private int numQuartos;, 	, 	public Suite(int num, int capacidade) {, 		super(num, capacidade);, 		// TODO Auto-generated constructor stub, 	}, 	, 	, , 	@Override, 	public String toString() {, 		return "Suite c/" + numQuartos + " quartos " + super.toString();, 	}, , , , 	public int getNumQuartos() {, 		return numQuartos;, 	}, , 	public void setNumQuartos(int numQuartos) {, 		this.numQuartos = numQuartos;, 	}, 	, 	, , }]
[package examePratico;, , public class Robo extends ObjetoMovel implements Comparable<Robo>{, 	, 	private String id;, 	private TipoJogador tipo;, 	private int golosMarcados;, 	, 	public Robo(String id, TipoJogador tipo, int x, int y) {, 		super(x, y);, 		this.id = id;, 		this.tipo = tipo;, 	}, , 	@Override, 	public String toString() {, 		return "id=" + id + ", tipo=" + tipo;, 	}, , , , 	public void marcaGolo() {, 		this.golosMarcados += 1;, 	}, , 	public int getGolos() {, 		return golosMarcados;, 	}, , 	public void setGolos(int golosMarcados) {, 		this.golosMarcados = golosMarcados;, 	}, , 	public String getId() {, 		return id;, 	}, , 	public void setId(String id) {, 		this.id = id;, 	}, , 	public TipoJogador getTipo() {, 		return tipo;, 	}, , 	public void setTipo(TipoJogador tipo) {, 		this.tipo = tipo;, 	}, , 	@Override, 	public int compareTo(Robo o) {, 		return this.id.compareTo(o.id);, 	}, 	, 	, 	, 	, , }]
[package examePratico;, , public interface Extras {, 	void pacoteExtra(Extra extra);, }]
[package examePratico;, , public class Veiculo implements Comparable<Veiculo> {, 	, 	// Atributos, 	private String matricula;, 	private int ano;, 	private String cor;, 	, 	// Construtor, 	public Veiculo(String matricula, int ano, String cor) {, 		this.matricula = matricula;, 		this.ano = ano;, 		this.cor = cor;, 	}, 	, 	// Metodo toString, 	@Override, 	public String toString() {, 		return "Veiculo [cor=" + cor + ", ano=" + ano + ", matricula=" + matricula + "]";, 	}, , 	@Override, 	public int compareTo(Veiculo o) {, 		return this.matricula.compareTo(o.matricula);, 	}, 	, 	, }]
[package examePratico;, , public interface MotorCombustao {, 	double getEmissaoCO2();, }]
[package examePratico;, , public interface MotorHibrido extends MotorCombustao, MotorEletrico {}]
[package examePratico;, , public class CabineComJanela extends Cabine implements Extras {, , 	private TipoDeJanela tipo;, 	private Extra extra;, 	, 	public CabineComJanela(int num, int capacidade, TipoDeJanela tipo) {, 		super(num, capacidade);, 		this.tipo = tipo;, 	}, 	, 	public CabineComJanela(int num, int capacidade, TipoDeJanela tipo, String[] passageiros) {, 		super(num, capacidade);, 		this.tipo = tipo;, 		this.setPassageiros(passageiros);, 	}, , 	@Override, 	public String toString() {, 		return "Cabine Com Janela " + this.tipo + " " + super.toString();, 	}, , 	@Override, 	public void pacoteExtra(Extra extra) {, 		this.extra = extra;, 	}, , }]
[package examePratico;, , public interface Frigorifico  {, 	void setTemp(double tempMin, double tempMax);, 	double getTempMin();, 	double getTempMax();, }]
[package examePratico;, , public interface MotorEletrico { , 	double getAutonomia(); , }]
[package examePratico;, , public class CarroHibrido extends Automovel implements MotorHibrido {, 	, 	// Atributos, 	private double autonomia;, 	private double emissao;, 	, 	// Construtor, 	public CarroHibrido(String matricula, int ano, String cor, double potencia, double autonomia, double emissao) {, 		super(matricula, ano, cor, potencia);, 		this.autonomia = autonomia;, 		this.emissao = emissao;, 	}, 	, 	// Metodo toString();, 	@Override, 	public String toString() {, 		return "CarroHibrido [" + super.toString() + ", autonomia=" + autonomia + ", emissao=" + emissao + "]";, 	}, , 	// Metodo getEmissaoCO2;, 	@Override, 	public double getEmissaoCO2() {, 		// TODO Auto-generated method stub, 		return 0;, 	}, 	, 	// Metodo getAutonomia();, 	@Override, 	public double getAutonomia() {, 		// TODO Auto-generated method stub, 		return 0;, 	}, , }]
[package examePratico;, , public class Lacteo extends Alimento implements Frigorifico {, , 	// Atributos, 	private double gordura;, 	private double tempMin = 3.0;, 	private double tempMax = 5.0;, 	, 	// Construtores, 	public Lacteo(String nome, double preco, int calorias, String data) {, 		super(nome, preco, calorias, data);, 	}, 	, 	public Lacteo(String nome, double preco, int calorias, String data, double gordura) {, 		super(nome, preco, calorias, data);, 		this.gordura = gordura;, 	}, 	, 	// Getters and Setters, 	, 	public double getGordura() {, 		return gordura;, 	}, , 	public void setGordura(double gordura) {, 		this.gordura = gordura;, 	}, , 	@Override, 	public void setTemp(double tempMin, double tempMax) {, 		this.tempMin = tempMin;, 		this.tempMax = tempMax;, 	}, , 	@Override, 	public double getTempMin() {, 		return this.tempMin;, 	}, , 	@Override, 	public double getTempMax() {, 		return this.tempMax;, 	}, , 	@Override, 	public String toString() {, 		return "Lacteo [gordura=" + gordura + ", tempMin=" + tempMin + ", tempMax=" + tempMax + super.toString() + "]";, 	}, , 	, , }]
[package examePratico;, , public class Bicicleta extends Veiculo {, , 	public Bicicleta(String matricula, int ano, String cor) {, 		super(matricula, ano, cor);, 	}, , 	@Override, 	public String toString() {, 		return "Bicicleta [" + super.toString() + "]";, 	}, 	, 	, , }]
[package examePratico;, , import java.util.*;, , public class Equipa {, 	, 	private String nome;, 	private String responsavel;, 	private int totalGM;, 	private int totalGS;, 	private Set<Robo> robos = new TreeSet<>(); , 	, 	public Equipa(String nome, String responsavel) {, 		this.nome = nome;, 		this.responsavel = responsavel;, 	}, 	, 	, 	public String getNome() {, 		return nome;, 	}, , , 	public void setNome(String nome) {, 		this.nome = nome;, 	}, , , 	@Override, 	public String toString() {, 		String s = "Equipa " + nome + ", treinada por " + responsavel + " (" + robos.size() + " jogadores)\n";, 		s += "   robos= ";, 		for(Robo r : robos) {, 			s += r + " *;* ";, 		}, 		s += "\n   golosMarcados=" + totalGM + "\n";, 		return s;, 	}, , , , 	public void add(Robo r) {, 		robos.add(r);, 	}, 	, 	public void remove(Robo r) {, 		robos.remove(r);, 	}, , 	public Robo[] getRobos() {, 		Robo[] r = new Robo[robos.size()];, 		int i = 0;, 		for(Robo ro : robos) {, 			r[i] = ro;, 			i++;, 		}, 		return r;, 	}, , 	public String getGolosMarcados() {, 		for(Robo r : robos) {, 			this.totalGM += r.getGolos();, 		}, 		return "" + totalGM;, 	}, 	, }]
[package examePratico;, , public class Alimento implements Comparable<Alimento>{, 	, 	// Atributos, 	private String nome;, 	private double preco;, 	private int calorias;, 	private String data;, 	, 	// Construtor, 	public Alimento(String nome, double preco, int calorias, String data) {, 		this.nome = nome;, 		this.preco = preco;, 		this.calorias = calorias;, 		this.data = data;, 	}, 	, 	, 	, 	@Override, 	public String toString() {, 		return "Alimento [nome=" + nome + ", preco=" + preco + ", calorias=" + calorias + ", data=" + data + "]";, 	}, , , , 	// Getters and Setters, 	@Override, 	public int compareTo(Alimento a) {, 		return this.nome.compareTo(a.nome);, 	}, 	, 	, 	, 	, 	, 	, }]
[package examePratico;, , import java.util.*;, import java.io.*;, , public class A11E01 {, , 	public static void main(String[] args) {, 		, 		Scanner input = null;, 		, 		// Tratamento da possibilidade de ocorrencia de erros ao abrir o ficheiro "veiculos.csv", 		try {, 			input = new Scanner(new FileReader("veiculos.csv"));, 		} catch(FileNotFoundException e) {, 			System.out.println("\nErro ao abrir o ficheiro!");, 		}, 		, 		// Conjunto de veiculos (Set<Veiculo>) para armazenar todos os veiculos lidos do ficheiro, 		Set<Veiculo> veiculos = new TreeSet<>();, 		, 		while(input.hasNext()) {, 			, 			// Array com as todas as palavras de uma linha do ficheiro, 			String[] linha = input.next().split(";");, 			, 			// Declaracao de variaveis para facilitar a leitura, 			String nome = linha[0];, 			String matricula = linha[1];, 			String cor = linha[2];, 			int ano = Integer.parseInt(linha[3]);, 			double potencia = 0.0;, 			, 			if(linha.length >= 5) {, 				potencia = Double.parseDouble(linha[4]);, 			}, 			, 			switch(nome) {, 			case "CarroHibrido":, 				veiculos.add(new CarroHibrido(matricula, ano, cor, potencia, Double.parseDouble(linha[5]), 						, Double.parseDouble(linha[6])));, 				break;, 			case "CarroEletrico":, 				veiculos.add(new CarroEletrico(matricula, ano, cor, potencia, Double.parseDouble(linha[5]))); , 				break;, 			case "CarroCombustao":, 				veiculos.add(new CarroCombustao(matricula, ano, cor, potencia, Double.parseDouble(linha[5]))); , 				break;, 			case "Bicicleta":, 				veiculos.add(new Bicicleta(matricula, ano, cor));, 				break;, 			case "MotoEletrica":, 				veiculos.add(new MotoEletrica(matricula, ano, cor, potencia, Double.parseDouble(linha[5])));, 				break;, 			case "MotoCombustao":, 				veiculos.add(new MotoCombustao(matricula, ano, cor, potencia, Double.parseDouble(linha[5])));, 				break;, 			}, 			, 			, 		}, 		, 		List<Automovel> carros = new ArrayList<>();, 		List<Moto> motos = new ArrayList<>();, 		List<Bicicleta> bicicletas = new ArrayList<>();, 		, 		for(Veiculo v : veiculos) {, 			if(v.getClass().getName().contains("Carro")), 				carros.add((Automovel) v);, 			else if(v.getClass().getName().contains("Moto")), 				motos.add((Moto) v);, 			else , 				bicicletas.add((Bicicleta) v);, 			System.out.println(v);, 		}, 		, 		System.out.println("\nLista de carros [" + carros.size() + "]:\n");, 		for(Automovel c : carros) {, 			System.out.println(c);, 		}, 		, 		System.out.println("\nLista de motos [" + motos.size() + "]:\n");, 		for(Moto m : motos) {, 			System.out.println(m);, 		}, 		, 		System.out.println("\nLista de bicicletas [" + bicicletas.size() + "]:\n");, 		for(Bicicleta b : bicicletas) {, 			System.out.println(b);, 		}, 		, 		FileWriter fe = null;, 		PrintWriter pe = null;, 		, 		try {, 			fe = new FileWriter("veiculos2.txt");, 			pe = new PrintWriter(fe);, 		} catch(IOException e) {, 			System.out.println("\nErro ao abrir ficheiro!");, 		}, 		, 		for(Veiculo v : veiculos) {, 			pe.write(v.toString()+"\n");, 		}, 		, 		pe.close();, 		, , 	}, , }]
[package examePratico;, , public class MotoCombustao extends Moto implements MotorCombustao {, 	, 	// Atributos, 	private double emissao;, 	, 	// Construtor, 	public MotoCombustao(String matricula, int ano, String cor, double potencia, double emissao) {, 		super(matricula, ano, cor, potencia);, 		this.emissao = emissao;, 	}, 	, 	// Metodo toString();, 	@Override, 	public String toString() {, 		return "MotoCombustao [" + super.toString() + "emissao=" + emissao + "]";, 	}, , 	// Metodo getEmissaoCO2;, 	@Override, 	public double getEmissaoCO2() {, 		return this.emissao;, 	}, , }]
[package examePratico;, , public enum TIPO_CEREAL {, 	TRIGO, ARROZ, ARROZ_TRIGO, }]
[package examePratico;, , public class Cereal extends Alimento {, , 	private TIPO_CEREAL comp;, 	, 	public Cereal(String nome, double preco, int calorias, String data) {, 		super(nome, preco, calorias, data);, 	}, , 	public TIPO_CEREAL getComp() {, 		return comp;, 	}, , 	public void setComp(TIPO_CEREAL comp) {, 		this.comp = comp;, 	}, , 	@Override, 	public String toString() {, 		return "Cereal [comp=" + comp + super.toString() + "]";, 	}, 	, 	, , }]
[package examePratico;, , public enum TipoDeVaranda {, 	VISTA_LIVRE, OBSTR_PARCIAL, OBSTR_TOTAL, }]
[package examePratico;, , public class Automovel extends Veiculo {, 	, 	// Atributos, 	private double potencia;, , 	// Construtor, 	public Automovel(String matricula, int ano, String cor, double potencia) {, 		super(matricula, ano, cor);, 		this.potencia = potencia;, 	}, 	, 	// Metodo toString, 	@Override, 	public String toString() {, 		return "[potencia=" + potencia + ", " + super.toString() + "]";, 	}, 	, 	, , }]
[package examePratico;, , public enum Extra {, 	Spa, Desporto, Internet, Danca, PEJ, }]
[package examePratico;, , public class Bola extends ObjetoMovel {, 	, 	private CorDaBola cor;, 	private static int nBolas;, 	, 	public Bola(int x, int y, CorDaBola cor) {, 		super(x, y);, 		this.cor = cor;, 		nBolas++;, 	}, 	, 	public Bola(CorDaBola cor) {, 		super(0, 0);, 		this.cor = cor;, 		nBolas++;, 	}, , 	public static int getnBolas() {, 		return nBolas;, 	}, , }]
[package examePratico;, , import java.util.*;, , public class Cruzeiro {, , 	// Atributos, 	private String nome;, 	private List<String> cidades = new ArrayList<>();, 	private String dataInicio;, 	private Set<Cabine> cabines = new TreeSet<>();, 	private int duracao;, 	, 	// Construtor, 	public Cruzeiro(String nome, String[] cidades, String dataInicio) {, 		this.nome = nome;, 		for(String s : cidades) {, 			this.cidades.add(s);, 		}, 		this.dataInicio = dataInicio;, 	}, 	, 	, , 	@Override, 	public String toString() {, 		String s = "";, 		s += "Navio " + this.nome + ", partida em " + this.dataInicio + "\n";, 		s += "Itinerário: " + this.cidades + "\n";, 		for(Cabine c : cabines) {, 			s += "" + c + "\n";, 		}, 		return s;, 	}, , , , 	public int getDuracao() {, 		return duracao;, 	}, , 	public void setDuracao(int duracao) {, 		this.duracao = duracao;, 	}, 	, 	public void add(Cabine c) {, 		cabines.add(c);, 	}, , , , 	public Set<Cabine> getCabines() {, 		return cabines;, 	}, , 	public void setCabines(Set<Cabine> cabines) {, 		this.cabines = cabines;, 	}, 	, 	, 	, 	, 	, }]
[package examePratico;, , import java.util.*;, , public class GestaoDeCruzeiro {, , 	public static void main(String[] args) {, 		GestaoDeCruzeiro ap = new GestaoDeCruzeiro();, 		, 		ap.alinea1();, 		ap.alinea2();, 	}, 	, 	public void alinea1() {, 		, 		Cruzeiro cruz = criarCruzeiro();, 		, 		// imprime os produtos ordenados por data, 		System.out.println(cruz);, 	}, 	, 	public void alinea2() {, 		Cruzeiro cruz = criarCruzeiro();, 		// coloque o código da alínea 2 aqui, 		, 		// 2.1 - percentagem de cabines disponíveis para venda;, 		int cabinesDisponiveis = 0;, 		for(Cabine c : cruz.getCabines()) {, 			if(c.getPassageiros() == null) {, 				cabinesDisponiveis++;, 			}, 		}, 		int percentagem = ( cabinesDisponiveis * 100 ) / cruz.getCabines().size();, 		System.out.println("\nPercentagem de cabines disponíveis para venda: " + percentagem + "%");, 		, 		// 2.2 - a média de pessoas por quarto nas Suites ocupadas;, 		Set<Suite> suites = new TreeSet<>();, 		, 		for(Cabine c : cruz.getCabines()) {, 			if(c instanceof Suite) {, 				suites.add((Suite) c);, 			}, 		}, 		, 		double totalPassageiros = 0.0, totalQuartos = 0.0;, 		for(Suite s : suites) {, 			if(s.getPassageiros() != null) {, 				totalPassageiros += s.getPassageiros().length;, 				totalQuartos += s.getNumQuartos();, 			}, 		}, 		, 		double media = (totalPassageiros / totalQuartos);, 		System.out.println("\nA média de pessoas por quarto nas suites ocupadas: " + media + "\n");, 		, 		// 2.3 - os dados das cabines ocupadas, ordenadas por número., 		for(Cabine c : cruz.getCabines()) {, 			System.out.println(c);, 		}, 	}, 	, 	public Cruzeiro criarCruzeiro() {, 		, 		String[] aux={"Lisboa","Barcelona","Rodes","Southampton"};, 		Cruzeiro cr2 = new Cruzeiro("Sea Princess", aux , "22/01/2017");, 		cr2.setDuracao(11);, 		CabineComJanela ccj=new CabineComJanela(17, 2, TipoDeJanela.INTERIOR);, 		ccj.setPassageiros(new String("Maria Luz;Manuel Luz").split(";"));, 		ccj.pacoteExtra(Extra.Spa); cr2.add(ccj);, 		cr2.add(new CabineComJanela(15, 4, TipoDeJanela.INTERIOR,, 		new String("António Campos;Maria Campos;Marina Mota").split(";")));, 		cr2.add(new CabineComJanela(25, 2, TipoDeJanela.INTERIOR,"Anonymous1;Anonymous2".split(";")));, 		cr2.add(new CabineComJanela(4, 4, TipoDeJanela.MAR, new String("Ursula Magnusson and Matts Magnusson and Miki Rosberg and Charles Sean").split(" and ")));, 		Suite suite1=new Suite(100, 2); suite1.setNumQuartos(3);, 		suite1.setMaxOcupantes(2*3); cr2.add(suite1);, 		Suite s=new Suite(102, 6); s.setNumQuartos(3); cr2.add(s);, 		s.setPassageiros(new String("A. Jolie:B. Pitt:Shiloh:Knox Leon").split(":"));, 		CabineComVaranda cab=new CabineComVaranda(21, 1, TipoDeVaranda.VISTA_LIVRE);, 		cab.setTipoVaranda(TipoDeVaranda.OBSTR_PARCIAL);, 		cab.pacoteExtra(Extra.Desporto);, 		try {, 			cab.setPassageiros(new String("Paulo Portas;Júlia Portas").split(";"));, 			cr2.add(cab);, 		} catch (IllegalArgumentException e){, 			System.out.println("Não adicionado devido a excesso de ocupantes !!");, 		}, 		Cabine eo = new CabineComJanela(1,4,TipoDeJanela.MAR,"Marcelo R. de Sousa".split(";"));, 		cr2.add(eo);, 		cr2.add(new CabineComJanela(130,4,TipoDeJanela.MAR));, 		cr2.add(new CabineComJanela(131,4,TipoDeJanela.INTERIOR));, 		return cr2;, 		, 	}, , }, , ]
[package examePratico;, , public enum TipoDeJanela {, 	INTERIOR, MAR, }]
[package examePratico;, , public class CarroEletrico extends Automovel implements MotorEletrico {, 	, 	// Atributos, 	private double autonomia;, 	, 	// Construtor, 	public CarroEletrico(String matricula, int ano, String cor, double potencia, double autonomia) {, 		super(matricula, ano, cor, potencia);, 		this.autonomia = autonomia;, 	}, 	, 	// Metodo toString, 	@Override, 	public String toString() {, 		return "CarroEletrico [" + super.toString() + ", autonomia=" + autonomia + "]";, 	}, , 	// Metodo getAutonomia();, 	@Override, 	public double getAutonomia() {, 		return this.autonomia;, 	}, , }]
[package examePratico;, , public class Moto extends Veiculo { , 	, 	// Atributos, 	private double potencia;, 	, 	// Construtor, 	public Moto(String matricula, int ano, String cor, double potencia) {, 		super(matricula, ano, cor);, 		this.potencia = potencia;, 	}, , 	// Metodo toString, 	@Override, 	public String toString() {, 		return "[potencia=" + potencia + ", " + super.toString() + "]";, 	}, 	, 	, , }]
[package aula11;, , public class CarroCombustao extends Automovel implements MotorCombustao {, 	, 	// Atributos, 	private double emissao;, 	, 	// Construtor, 	public CarroCombustao(String matricula, int ano, String cor, double potencia, double emissao) {, 		super(matricula, ano, cor, potencia);, 		this.emissao = emissao;, 	}, 	, 	// Metodo toString(), 	@Override, 	public String toString() {, 		return "CarroCombustao [" + super.toString() + ", emissao=" + emissao + "]";, 	}, , 	// Metodo getEmissaoC02;, 	@Override, 	public double getEmissaoCO2() {, 		return this.emissao;, 	}, , }]
[package aula11;, , public class MotoEletrica extends Moto implements MotorEletrico {, , 	// Atributos, 	private double autonomia;, 	, 	// Construtor, 	public MotoEletrica(String matricula, int ano, String cor, double potencia, double autonomia) {, 		super(matricula, ano, cor, potencia);, 		this.autonomia = autonomia;, 	}, 	, 	// Metodo toString();, 	@Override, 	public String toString() {, 		return "MotoEletrica [" + super.toString() + "autonomia=" + autonomia + "]";, 	}, , 	// Metodo getAutonomia();, 	@Override, 	public double getAutonomia() {, 		return this.autonomia;, 	}, , 	, , }]
[package aula11;, , public enum TipoLocalidade {, 	Cidade, Vila, Aldeia, }]
[package aula11;, , import java.util.*;, , public class A11E02 {, , 	public static void main(String[] args) {, 		, 		, 		, 		Localidade cid1 = new Localidade("Szohod", 31212,TipoLocalidade.Cidade);, 		Localidade cid2 = new Localidade("Wadesdah", 23423, TipoLocalidade.Cidade);, 		Localidade cid3 = new Localidade("BedRock", 23423, TipoLocalidade.Vila);, 		// criada por mim, 		Localidade cid4 = new Localidade("Lisboa", 2822000, TipoLocalidade.Cidade);, 		Localidade cid5 = new Localidade("Viseu", 99274, TipoLocalidade.Cidade);, 		, 		Estado est1 = new Estado("North Borduria", 223133, cid1);, 		Estado est2 = new Estado("South Borduria", 84321, cid2);, 		Estado est3 = new Estado("Beira Alta", 123456, cid5);, 		, 		Pais p1 = new Pais("Borduria", est1.getCapital());, 		Pais p2 = new Pais("Khemed", cid2);, 		Pais p3 = new Pais("Aurelia");, 		Pais p4 = new Pais("Atlantis");, 		// criado por mim, 		Pais p5 = new Pais("Portugal", cid4);, 		, 		p1.addRegiao(est1);, 		p1.addRegiao(est2);, 		p2.addRegiao(new Provincia("Afrinia", 232475, "Aluko Pono"));, 		p2.addRegiao(new Provincia("Eriador", 100000, "Dumpgase Liru"));, 		p2.addRegiao(new Provincia("Laurania", 30000, "Mukabamba Dabba"));, 		p5.addRegiao(est3);, 		List<Pais> org = new ArrayList<Pais>();, 		org.add(p1);, 		org.add(p2);, 		org.add(p3);, 		org.add(p4);, 		org.add(p5);, 		System.out.println("----Iterar sobre o conjunto");, 		Iterator<Pais> itr = org.iterator();, 		while (itr.hasNext()), 		System.out.println(itr.next());, 		System.out.println("-------Iterar sobre o conjunto - For each (java 8)");, 		for (Pais pais: org), 		System.out.println(pais);, 		// ToDo:, 		// adicionar, remover, ordenar, garantir elementos únicos, 		, 		, 		, 		, 		, , 	}, , }]
[package aula11;, , public class Localidade {, 	, 	private String nome;, 	private int populacao;, 	private TipoLocalidade tipoLocalidade;, 	, 	public Localidade(String nome, int populacao, TipoLocalidade tipoLocalidade) {, 		this.nome = nome;, 		this.populacao = populacao;, 		this.tipoLocalidade = tipoLocalidade;, 	}, , 	public String getNome() {, 		return nome;, 	}, , 	public void setNome(String nome) {, 		this.nome = nome;, 	}, , 	public int getPopulacao() {, 		return populacao;, 	}, , 	public void setPopulacao(int populacao) {, 		this.populacao = populacao;, 	}, , 	public TipoLocalidade getTipoLocalidade() {, 		return tipoLocalidade;, 	}, , 	public void setTipoLocalidade(TipoLocalidade tipoLocalidade) {, 		this.tipoLocalidade = tipoLocalidade;, 	}, , 	@Override, 	public String toString() {, 		return "Capital: " + nome + ", populacao: " + populacao;, 	}, 	, 	, }]
[package aula11;, , public class Veiculo implements Comparable<Veiculo> {, 	, 	// Atributos, 	private String matricula;, 	private int ano;, 	private String cor;, 	, 	// Construtor, 	public Veiculo(String matricula, int ano, String cor) {, 		this.matricula = matricula;, 		this.ano = ano;, 		this.cor = cor;, 	}, 	, 	// Metodo toString, 	@Override, 	public String toString() {, 		return "Veiculo [cor=" + cor + ", ano=" + ano + ", matricula=" + matricula + "]";, 	}, , 	@Override, 	public int compareTo(Veiculo o) {, 		return this.matricula.compareTo(o.matricula);, 	}, 	, 	, }]
[package aula11;, , public class Regiao {, 	private String nome;, 	private int populacao;, 	, 	public Regiao(String nome, int populacao) {, 		this.nome = nome;, 		this.populacao = populacao;, 	}, , 	@Override, 	public String toString() {, 		return "Regiao [nome=" + nome + ", populacao=" + populacao + "]";, 	}, , 	public String getNome() {, 		return nome;, 	}, , 	public void setNome(String nome) {, 		this.nome = nome;, 	}, , 	public int getPopulacao() {, 		return populacao;, 	}, , 	public void setPopulacao(int populacao) {, 		this.populacao = populacao;, 	}, 	, 	, 	, 	, }]
[package aula11;, , public interface MotorCombustao {, 	double getEmissaoCO2();, }]
[package examePratico;, , public interface MotorHibrido extends MotorCombustao, MotorEletrico {}]
[package aula11;, , public interface MotorEletrico { , 	double getAutonomia(); , }]
[package aula11;, , public class CarroHibrido extends Automovel implements MotorCombustao, MotorEletrico {, 	, 	// Atributos, 	private double autonomia;, 	private double emissao;, 	, 	// Construtor, 	public CarroHibrido(String matricula, int ano, String cor, double potencia, double autonomia, double emissao) {, 		super(matricula, ano, cor, potencia);, 		this.autonomia = autonomia;, 		this.emissao = emissao;, 	}, 	, 	// Metodo toString();, 	@Override, 	public String toString() {, 		return "CarroHibrido [" + super.toString() + ", autonomia=" + autonomia + ", emissao=" + emissao + "]";, 	}, , 	// Metodo getEmissaoCO2;, 	@Override, 	public double getEmissaoCO2() {, 		// TODO Auto-generated method stub, 		return 0;, 	}, 	, 	// Metodo getAutonomia();, 	@Override, 	public double getAutonomia() {, 		// TODO Auto-generated method stub, 		return 0;, 	}, , }]
[package aula11;, , public class Estado extends Regiao {, 	, 	private Localidade localidade;, 	, 	public Estado(String nome, int populacao, Localidade localidade) {, 		super(nome, populacao);, 		this.localidade = localidade;, 		, 	}, , 	public Localidade getCapital() {, 		return this.localidade;, 	}, , 	@Override, 	public String toString() {, 		return "Estado [localidade=" + localidade + "]";, 	}, 	, 	, , }]
[package aula11;, , public class Bicicleta extends Veiculo {, , 	public Bicicleta(String matricula, int ano, String cor) {, 		super(matricula, ano, cor);, 	}, , 	@Override, 	public String toString() {, 		return "Bicicleta [" + super.toString() + "]";, 	}, 	, 	, , }]
[package aula11;, , public class Provincia extends Regiao {, , 	private String governador;, 	, 	public Provincia(String nome, int populacao, String governador) {, 		super(nome, populacao);, 		this.governador = governador;, 	}, , 	@Override, 	public String toString() {, 		return "Provincia [governador=" + governador + "]";, 	}, 	, 	, , }]
[package aula11;, , import java.util.*;, import java.io.*;, , public class A11E01 {, , 	public static void main(String[] args) {, 		, 		Scanner input = null;, 		, 		// Tratamento da possibilidade de ocorrencia de erros ao abrir o ficheiro "veiculos.csv", 		try {, 			input = new Scanner(new FileReader("veiculos.csv"));, 		} catch(FileNotFoundException e) {, 			System.out.println("\nErro ao abrir o ficheiro!");, 		}, 		, 		// Conjunto de veiculos (Set<Veiculo>) para armazenar todos os veiculos lidos do ficheiro, 		Set<Veiculo> veiculos = new TreeSet<>();, 		, 		while(input.hasNext()) {, 			, 			// Array com as todas as palavras de uma linha do ficheiro, 			String[] linha = input.next().split(";");, 			, 			// Declaracao de variaveis para facilitar a leitura, 			String nome = linha[0];, 			String matricula = linha[1];, 			String cor = linha[2];, 			int ano = Integer.parseInt(linha[3]);, 			double potencia = 0.0;, 			, 			if(linha.length >= 5) {, 				potencia = Double.parseDouble(linha[4]);, 			}, 			, 			switch(nome) {, 			case "CarroHibrido":, 				veiculos.add(new CarroHibrido(matricula, ano, cor, potencia, Double.parseDouble(linha[5]), 						, Double.parseDouble(linha[6])));, 				break;, 			case "CarroEletrico":, 				veiculos.add(new CarroEletrico(matricula, ano, cor, potencia, Double.parseDouble(linha[5]))); , 				break;, 			case "CarroCombustao":, 				veiculos.add(new CarroCombustao(matricula, ano, cor, potencia, Double.parseDouble(linha[5]))); , 				break;, 			case "Bicicleta":, 				veiculos.add(new Bicicleta(matricula, ano, cor));, 				break;, 			case "MotoEletrica":, 				veiculos.add(new MotoEletrica(matricula, ano, cor, potencia, Double.parseDouble(linha[5])));, 				break;, 			case "MotoCombustao":, 				veiculos.add(new MotoCombustao(matricula, ano, cor, potencia, Double.parseDouble(linha[5])));, 				break;, 			}, 			, 			, 		}, 		, 		List<Automovel> carros = new ArrayList<>();, 		List<Moto> motos = new ArrayList<>();, 		List<Bicicleta> bicicletas = new ArrayList<>();, 		, 		for(Veiculo v : veiculos) {, 			if(v.getClass().getName().contains("Carro")), 				carros.add((Automovel) v);, 			else if(v.getClass().getName().contains("Moto")), 				motos.add((Moto) v);, 			else , 				bicicletas.add((Bicicleta) v);, 			System.out.println(v);, 		}, 		, 		System.out.println("\nLista de carros [" + carros.size() + "]:\n");, 		for(Automovel c : carros) {, 			System.out.println(c);, 		}, 		, 		System.out.println("\nLista de motos [" + motos.size() + "]:\n");, 		for(Moto m : motos) {, 			System.out.println(m);, 		}, 		, 		System.out.println("\nLista de bicicletas [" + bicicletas.size() + "]:\n");, 		for(Bicicleta b : bicicletas) {, 			System.out.println(b);, 		}, 		, 		FileWriter fe = null;, 		PrintWriter pe = null;, 		, 		try {, 			fe = new FileWriter("veiculos2.txt");, 			pe = new PrintWriter(fe);, 		} catch(IOException e) {, 			System.out.println("\nErro ao abrir ficheiro!");, 		}, 		, 		for(Veiculo v : veiculos) {, 			pe.write(v.toString()+"\n");, 		}, 		, 		pe.close();, 		, , 	}, , }]
[package aula11;, , public class MotoCombustao extends Moto implements MotorCombustao {, 	, 	// Atributos, 	private double emissao;, 	, 	// Construtor, 	public MotoCombustao(String matricula, int ano, String cor, double potencia, double emissao) {, 		super(matricula, ano, cor, potencia);, 		this.emissao = emissao;, 	}, 	, 	// Metodo toString();, 	@Override, 	public String toString() {, 		return "MotoCombustao [" + super.toString() + "emissao=" + emissao + "]";, 	}, , 	// Metodo getEmissaoCO2;, 	@Override, 	public double getEmissaoCO2() {, 		return this.emissao;, 	}, , }]
[package aula11;, , import java.util.*;, , public class Pais {, 	, 	private String nome;, 	private Localidade capital;, 	private Set<Regiao> regioes = new HashSet<>();, 	, 	public Pais(String nome, Localidade capital) {, 		this.nome = nome;, 		this.capital = capital;, 	}, 	, 	public Pais(String nome) {, 		this.nome = nome;, 	}, , 	public void addRegiao(Regiao r) {, 		regioes.add(r);, 		, 	}, 	, 	public int getPopulacao() {, 		int populacaoTotal = 0;, 		for(Regiao r : regioes) {, 			populacaoTotal += r.getPopulacao();, 		}, 		, 		return populacaoTotal;, 	}, , 	@Override, 	public String toString() {, 		, 		if(this.capital == null) {, 			return "Pais: " + nome + ", Populacao: " + this.getPopulacao() + " (Capital *Indefinida*)";, 		} else {, 			return "Pais: " + nome + ", Populacao: " + this.getPopulacao() + " (" + this.capital + ")";, , 		}, 	}, 	, 	public void removeRegiao(Regiao r) {, 		if(regioes.contains(r)) {, 			regioes.remove(r);, 		} else {, 			System.out.println("\nEssa regiao nao faz parte do pais!");, 		}, 	}, 	, 	, 	, }]
[package aula11;, , public class Automovel extends Veiculo {, 	, 	// Atributos, 	private double potencia;, , 	// Construtor, 	public Automovel(String matricula, int ano, String cor, double potencia) {, 		super(matricula, ano, cor);, 		this.potencia = potencia;, 	}, 	, 	// Metodo toString, 	@Override, 	public String toString() {, 		return "[potencia=" + potencia + ", " + super.toString() + "]";, 	}, 	, 	, , }]
[package aula11;, , public class CarroEletrico extends Automovel implements MotorEletrico {, 	, 	// Atributos, 	private double autonomia;, 	, 	// Construtor, 	public CarroEletrico(String matricula, int ano, String cor, double potencia, double autonomia) {, 		super(matricula, ano, cor, potencia);, 		this.autonomia = autonomia;, 	}, 	, 	// Metodo toString, 	@Override, 	public String toString() {, 		return "CarroEletrico [" + super.toString() + ", autonomia=" + autonomia + "]";, 	}, , 	// Metodo getAutonomia();, 	@Override, 	public double getAutonomia() {, 		return this.autonomia;, 	}, , }]
[package aula11;, , public class Moto extends Veiculo { , 	, 	// Atributos, 	private double potencia;, 	, 	// Construtor, 	public Moto(String matricula, int ano, String cor, double potencia) {, 		super(matricula, ano, cor);, 		this.potencia = potencia;, 	}, , 	// Metodo toString, 	@Override, 	public String toString() {, 		return "[potencia=" + potencia + ", " + super.toString() + "]";, 	}, 	, 	, , }]
[package aula08;, , import java.util.*;, , public class ProgramaEmenta {, , 	public static void main(String[] args) {, 		, 		Scanner sc = new Scanner(System.in); // objeto 'sc' para ler dados do teclado, 		, 		// o objeto 'p1' da classe 'Prato' e apenas de auxilio, 		Prato p1 = new Prato("Prato"); boolean escolhido = false;, 		, 		System.out.println("Bem-vindo ao Refeitório de Santiago da Universidade de Aveiro!");, 		, 		Ementa ementa = new Ementa("Ementa", "Refeitório de Santiago");, 		, 		// lista para armazenar alimentos aleatorios, 		List<Alimento> alimentos = new ArrayList<>();, 		, 		// contador de alimentos; contador de pratos;, 		int contador = 0 , contadorP = 0;, 		, 		// ciclo do menu, 		int op = 0;, 		while(op != 11) {, 			op = menu();, 			, 			switch(op) {, 			, 			// terminar programa, 			case 11: , 				System.out.println("\nObrigado por utilizar os nossos serviços."); break;, 			, 			// adicionar carne, 			case 1: , 				Variedade variedade = Variedade.OUTRA;, 				switch((int)(Math.random() * 5)) {, 				case 1:, 					variedade = Variedade.VACA; break;, 				case 2:, 					variedade = Variedade.PORCO; break;, 				case 3:, 					variedade = Variedade.PERU; break;, 				case 4:, 					variedade = Variedade.FRANGO; break;, 				, 				}, 				alimentos.add(new Carne((Math.random() * 300), (Math.random() * 300), (Math.random() * 300), variedade));, 				System.out.println("\nIngrediente Carne adicionado!"); , 				System.out.println(alimentos.get(contador));, 				contador++;, 				break;, 			, 			// adicionar peixe, 			case 2:, 				Tipo tipo = Tipo.CONGELADO;, 				switch((int)(Math.random() * 3)) {, 				case 1:, 					tipo = Tipo.CONGELADO; break;, 				case 2:, 					tipo = Tipo.FRESCO; break;, 				}, 				alimentos.add(new Peixe((Math.random() * 300), (Math.random() * 300), (Math.random() * 300), tipo));, 				System.out.println("\nIngrediente Peixe adicionado!"); , 				System.out.println(alimentos.get(contador));, 				contador++;, 				break;, 				, 			// adicionar cereal, 			case 3:, 				alimentos.add(new Cereal((Math.random() * 300), (Math.random() * 300), (Math.random() * 300), "Pao")); , 				System.out.println("\nIngrediente Cereal adicionado!"); , 				System.out.println(alimentos.get(contador));, 				contador++;, 				break;, 				, 			// adicionar legume	, 			case 4:, 				alimentos.add(new Legume((Math.random() * 300), (Math.random() * 300), (Math.random() * 300), "Cenoura")); , 				System.out.println("\nIngrediente Legume adicionado!");, 				System.out.println(alimentos.get(contador));, 				contador++;, 				break;, 				, 			// adicionar um novo prato, 			case 5:, 				DiaSemana diaSem = DiaSemana.DOMINGO;, 				switch((int)(Math.random() * 8)) {, 				case 1:, 					diaSem = DiaSemana.DOMINGO; break;, 				case 2:, 					diaSem = DiaSemana.SEGUNDA; break;, 				case 3:, 					diaSem = DiaSemana.TERCA; break;, 				case 4:, 					diaSem = DiaSemana.QUARTA; break;, 				case 5:, 					diaSem = DiaSemana.QUINTA; break;, 				case 6:, 					diaSem = DiaSemana.SEXTA; break;, 				case 7:, 					diaSem = DiaSemana.SABADO; break;, 				}, 				ementa.addElement(new Prato("Prato ", diaSem));, 				System.out.println("\nPrato adicionado!"); , 				System.out.println(ementa.getElement(contadorP)); , 				contadorP++;, 				break;, 				, 			// remover um prato, 			case 6:, 				if(ementa.size() > 0) {, 					ementa.removeElement((int)(Math.random() * (ementa.size() - 1)));, 					System.out.println("\nPrato removido!");, 					contadorP--;, 					break;, 				} else {, 					System.out.println("\nNenhum Prato adicionado ainda!");, 				}, 				, 			// selecionar um prato, 			case 7:, 				if(ementa.size() > 0) {, 					System.out.println("\nLista de pratos: ");, 					for(int i = 0; i < ementa.size(); i++) {, 						System.out.println(ementa.getElement(i));, 					}, 					int p;, 					do {, 						System.out.print("Escolha do Prato: ");, 						p = sc.nextInt();, 						if(p > 0 && p <= (Prato.getId() - 1)) {, 							for(int i = 0; i < ementa.size(); i++) {, 								if(ementa.getElement(i).getMyID() == p) {, 									p1 = ementa.getElement(i);, 									System.out.println("\nPrato selecionado!\n" + p1);, 									escolhido = true;, 									break;, 								}, 							}, 						} else {, 							System.out.println("\nPrato invalido!");, 						}, 						, 					} while(!(p > 0 && p <= (Prato.getId() - 1)));, 					, 				} else {, 					System.out.println("\nAinda nao existem pratos!");, 				}, 				break;, 				, 			// adicionar ingrediente ao prato, 			case 8:, 				, 				if(alimentos.size() > 0 && escolhido) {, 					System.out.println("\nIngrediente disponiveis: \n");, 					for(int i = 0; i < alimentos.size() ; i++) {, 						System.out.println("" + (i + 1) + " - " + alimentos.get(i));, 					}, 					int p;, 					do {, 						System.out.print("Escolha do ingrediente: ");, 						p = sc.nextInt();, 						if(p > 0 && p <= alimentos.size()) {, 							p1.addElement(alimentos.get(p - 1));, 							System.out.println("\nIngrediente escolhido!\n" + alimentos.get(p - 1));, 							, 							System.out.println("\n" + p1);, 							p1.informacoes();, 						} else {, 							System.out.println("\nIngrediente indisponivel!");, 						}, 					} while(!(p > 0 && p <= alimentos.size()));, 				} else {, 					System.out.println("\nAinda nao existem ingredientes!");, 				}, 				break;, 			, 			// remover ingrediente ao prato, 			case 9:, 				if(p1.size() > 0 && escolhido) {, 					System.out.println("\nIngrediente disponiveis: \n");, 					for(int i = 0; i < p1.size() ; i++) {, 						System.out.println("" + (i + 1) + " - " + p1.getElement(i));, 					}, 					, 					int p;, 					do {, 						System.out.print("Escolha do ingrediente: ");, 						p = sc.nextInt();, 						if(p > 0 && p <= p1.size()) {, 							p1.removeElement(p-1);, 							System.out.println("\nIngrediente escolhido!\n" + p1.getElement(p - 1));, 							System.out.println("\n" + p1);, 							p1.informacoes();, 						} else {, 							System.out.println("\nIngrediente indisponivel!");, 						}, 					} while(!(p > 0 && p <= p1.size()));, 				} else {, 					System.out.println("\nAinda nao existem ingredientes!");, 				}, 				break;, 				, 			// imprimir a ementa, 			case 10:, 				if(ementa.size() > 0) {, 					System.out.println(ementa);, 					for(int i = 0; i < ementa.size() ; i++) {, 						System.out.println("\n" + ementa.getElement(i));, 						ementa.getElement(i).informacoes();, 					}, 				} else {, 					System.out.println("\nEmenta vazia!");, 				}, 				break;, 			default:, 				System.out.println("\nNao implementado."); , 				break;, 			}, 		}, 		, , 	}, 	, 	public static int menu() {, 		Scanner sc = new Scanner(System.in);, 		System.out.println("\n- Ingrediente");, 		System.out.println("   1 - Adicionar Carne");, 		System.out.println("   2 - Adicionar Peixe");, 		System.out.println("   3 - Adicionar Cereal");, 		System.out.println("   4 - Adicionar Legume");, 		System.out.println("\n- Prato");, 		System.out.println("   5 - Cria Prato");, 		System.out.println("   6 - Apaga Prato");, 		System.out.println("   7 - Seleciona Prato");, 		System.out.println("   8 - Adiciona Ingrediente");, 		System.out.println("   9 - Remove Ingrediente");, 		System.out.println("\n- Ementa");, 		System.out.println("   10 - Imprime Ementa");, 		System.out.println("\n- Sair (11)");, 		System.out.print("\nOpcao? ");, 		return sc.nextInt();, 	}, , }]
[package aula08;, , public class Legume extends Alimento implements AlimentoVegetariano {, 	, 	private String nome;, 	, 	public Legume(double proteinas, double calorias, double peso, String nome) {, 		super(proteinas, calorias, peso);, 		this.nome = nome;, 	}, 	, 	@Override, 	public String toString() {, 		return "Legume " + nome + ", " + super.toString();, 	}, }]
[package aula08;, , public class Ementa extends Conjunto<Prato> {, 	, 	private String nome;, 	private String local;, 	, 	public Ementa(String nome, String local) {, 		this.nome = nome;, 		this.local = local;, 	}, , 	@Override, 	public String toString() {, 		return "Ementa (Nome: " + nome + ", Local: " + local + ")";, 	}, 	, }]
[package aula08;, , public class Data {, 	private int dia;, 	private int mes;, 	private int ano;, 	, 	public Data(int dia, int mes, int ano) {, 		this.dia = dia;, 		this.mes = mes;, 		this.ano = ano;, 	}, 	, 	, 	@Override, 	public String toString() {, 		return "(" + dia + "/" + mes + "/" + ano + ")";, 	}, 	public int getDia() {, 		return dia;, 	}, 	public void setDia(int dia) {, 		this.dia = dia;, 	}, 	public int getMes() {, 		return mes;, 	}, 	public void setMes(int mes) {, 		this.mes = mes;, 	}, 	public int getAno() {, 		return ano;, 	}, 	public void setAno(int ano) {, 		this.ano = ano;, 	}, }]
[package aula08;, , import java.lang.Math;, , public class Ponto {, 	private double x = 0.0;, 	private double y = 0.0;, 	, 	public Ponto(double x, double y) {, 		this.x = x;, 		this.y = y;, 	}, , 	@Override, 	public String toString() {, 		return "(" + x + ", " + y + ")";, 	}, 	, 	@Override, 	public boolean equals(Object obj) {, 		if (this == obj), 			return true;, 		if (obj == null), 			return false;, 		if (getClass() != obj.getClass()), 			return false;, 		Ponto other = (Ponto) obj;, 		if (x != other.x), 			return false;, 		if (y != other.y), 			return false;, 		return true;, 	}, 	, 	, 	, 	public double getX() {, 		return x;, 	}, , 	public void setX(double x) {, 		this.x = x;, 	}, , 	public double getY() {, 		return y;, 	}, , 	public void setY(double y) {, 		this.y = y;, 	}, , 	public double distance(Ponto p) {, 		return Math.sqrt(Math.pow((this.x - p.x), 2) + Math.pow((this.y - p.y), 2));, 	}, , }]
[package aula08;, , public class A08E03 { , 	, 	public static void main(String[] args) { , 		Ementa ementa = new Ementa("Especial Caloiro", "Snack da UA"); , 		Prato[] pratos = new Prato[10];, 		, 		for (int i=0; i < pratos.length; i++){ , 			pratos[i] = randPrato(i); , 			int cnt = 0; , 			, 			while (cnt <2){ , 				// Adicionar 2 Ingredientes a cada Prato , 				Alimento aux = randAlimento(); , 				if (pratos[i].addElement(aux)) , 					cnt++; , 				else , 					System.out.println("ERRO: Nao e possivel adicionar '" + aux + "' ao -> " + pratos[i]); , 				} , 			, 			ementa.addElement(pratos[i]);, 			, 		} , 		, 		System.out.println("\n" + ementa); , 		, 	} , 		, 	//-----------------------------------------------------------------------, 	// Retorna um Alimento Aleatoriamente , 	, 	public static Alimento randAlimento() { , 		switch ((int) (Math.random() * 4)) { , 		default: , 			case 0: , 				return new Carne(22.3, 345.3, 300, Variedade.FRANGO); , 			case 1: , 				return new Peixe(31.3, 25.3, 200, Tipo.CONGELADO); , 			case 2: , 				return new Legume(21.3, 22.4, 150, "Couve Flor"); , 			case 3: , 				return new Cereal(19.3, 32.4, 110, "Milho"); , 			} , 		} , 	, 	, 	//-----------------------------------------------------------------------, 	// Retorna um Tipo de Prato Aleatoriamente , 	, 	public static Prato randPrato(int i) { , 		switch ((int) (Math.random() * 3)) { , 		default: , 			case 0: , 				return new Prato("Prato N." + i); , 			case 1: , 				return new PratoVegetariano("Prato N." + i + " (Vegetariano)"); , 			case 2: , 				return new PratoDieta("Prato N." + i + " (Dieta)", 90.8); , 			} , 		} , }]
[package aula08;, , public class Prato extends Conjunto<Alimento> {, 	, 	private String nome;, 	private DiaSemana diaSem;, 	private static int id = 0;, 	private int myID;, 	, 	public Prato(String nome, DiaSemana diaSem) {, 		this.nome = nome + id; , 		this.myID = id; id++;, 		this.diaSem = diaSem;, 	}, 	, 	public Prato(String nome) {, 		this.nome = nome + id;, 		this.myID = id; id++;, 	}, 	, 	public double getCalorias() {, 		int calorias = 0;, 		Alimento[] alimentos = this.giveElements();, 		for(Alimento a : alimentos) {, 			calorias += a.getCalorias();, 		}, 		return calorias;, 	}, 	, 	public double getProteinas() {, 		int proteinas = 0;, 		Alimento[] alimentos = this.giveElements();, 		for(Alimento a : alimentos) {, 			proteinas += a.getProteinas();, 		}, 		return proteinas;, 	}, 	, 	public double getPesoTotal() {, 		int pesoTotal = 0;, 		Alimento[] alimentos = this.giveElements();, 		for(Alimento a : alimentos) {, 			pesoTotal += a.getPeso();, 		}, 		return pesoTotal;, 	}, 	, 	, 	@Override, 	public String toString() {, 		return "Nome: " + nome + ", Dia da Semana: " + diaSem;, 	}, , 	public void informacoes() {, 		for(int i = 0; i < this.size() ; i++) {, 			System.out.println(this.getElement(i));, 		}, 	}, , 	public int getMyID() {, 		return myID;, 	}, , 	public void setMyID(int myID) {, 		this.myID = myID;, 	}, , 	public static int getId() {, 		return id;, 	}, , 	public static void setId(int id) {, 		Prato.id = id;, 	}, 	, 	, 	, }]
[package aula08;, , public abstract class Figura {, 	private Ponto centro;, 	private String cor = "Branco";, 	, 	public Figura(double x, double y, String cor) {, 		this.centro = new Ponto(x, y);, 		this.cor = cor;, 	}, 	, 	public Figura(Ponto p, String cor) {, 		this.centro = p;, 		this.cor = cor;, 	}, 	, 	public Figura(double x, double y) {, 		this.centro = new Ponto(x,y);, 	}, , 	@Override, 	public String toString() {, 		return "Centro: " + centro + ", Cor: " + cor;, 	}, , 	public Ponto getCentro() {, 		return centro;, 	}, , 	public void setCentro(Ponto centro) {, 		this.centro = centro;, 	}, , 	public String getCor() {, 		return cor;, 	}, , 	public void setCor(String cor) {, 		this.cor = cor;, 	}, 	, 	public abstract double area();, 	, 	public abstract double perimetro();, 	, 	, 	, 	, 	, 	, , }]
[package aula08;, , public enum Variedade { VACA, PORCO, PERU, FRANGO, OUTRA }]
[package aula08;, , public class Peixe extends Alimento {, , 	private Tipo tipo;, 	, 	public Peixe(double proteinas, double calorias, double peso, Tipo tipo) {, 		super(proteinas, calorias, peso);, 		this.tipo = tipo;, 	}, 	, 	@Override, 	public String toString() {, 		return "Peixe " + tipo + ", " + super.toString();, 	}, , }]
[package aula08;, , public abstract class Alimento {, 	// atributos, 	, 	private double proteinas = 100; // em gramas, 	private double calorias = 100;  // em gramas, 	private double peso = 100;      // em gramas, 	, 	// metodos, 	, 	public Alimento(double proteinas, double calorias, double peso) {, 		this.proteinas = proteinas;, 		this.calorias = calorias;, 		this.peso = peso;, 	}, 	, 	@Override, 	public int hashCode() {, 		final int prime = 31;, 		int result = 1;, 		long temp;, 		temp = Double.doubleToLongBits(calorias);, 		result = prime * result + (int) (temp ^ (temp >>> 32));, 		temp = Double.doubleToLongBits(peso);, 		result = prime * result + (int) (temp ^ (temp >>> 32));, 		temp = Double.doubleToLongBits(proteinas);, 		result = prime * result + (int) (temp ^ (temp >>> 32));, 		return result;, 	}, , 	@Override, 	public boolean equals(Object obj) {, 		if (this == obj), 			return true;, 		if (obj == null), 			return false;, 		if (getClass() != obj.getClass()), 			return false;, 		Alimento other = (Alimento) obj;, 		if (Double.doubleToLongBits(calorias) != Double.doubleToLongBits(other.calorias)), 			return false;, 		if (Double.doubleToLongBits(peso) != Double.doubleToLongBits(other.peso)), 			return false;, 		if (Double.doubleToLongBits(proteinas) != Double.doubleToLongBits(other.proteinas)), 			return false;, 		return true;, 	}, , 	@Override, 	public String toString() {, 		return "(Proteinas: " + proteinas + ", Calorias: " + calorias + ", Peso: " + peso + ")";, 	}, 	, 	public double getProteinas() {, 		return proteinas;, 	}, 	public void setProteinas(double proteinas) {, 		this.proteinas = proteinas;, 	}, 	public double getCalorias() {, 		return calorias;, 	}, 	public void setCalorias(double calorias) {, 		this.calorias = calorias;, 	}, 	public double getPeso() {, 		return peso;, 	}, 	public void setPeso(double peso) {, 		this.peso = peso;, 	}, 	, 	, 	, }]
[package aula08;, , import java.util.ArrayList;, import java.util.List;, , public class A08E01 {, , 	public static void main(String[] args) {, 		, 		// lista para armazenar objetos do tipo "Integer" (inteiro), 		List<Integer> c1 = new ArrayList<>();, 		, 		// ciclo para adicionar objetos a lista 'c1', 		for (int i = 10; i <= 100; i+=10), 			c1.add(i);, 		, 		// impressao do tamanho da lista, 		System.out.println("Size: " + c1.size());, 		, 		// ciclo para imprimir todos os elementos da lista 'c1', 		for (int i = 0; i < c1.size(); i++), 			System.out.println("Elemento: " + c1.get(i));, 		, 		// lista para armazenar objetos do tipo "String", 		List<String> c2 = new ArrayList<>();, 		, 		// adicionar 3 elementos a lista 'c2', 		c2.add("Chuva");, 		c2.add("Frio");, 		c2.add("Vento");, 		, 		// impressao do tamanho da lista c2, 		System.out.println("Size: " + c2.size());, 		, 		// impressao de todos os elementos da lista 'c2', 		for (int i = 0; i < c2.size(); i++), 			System.out.println("Elemento: " + c2.get(i));, 		, 		// remover 2 elementos da lista 'c2', 		c2.remove(0);, 		c2.remove(0);, 		, 		// ciclo para imprimir os elementos da lista 'c2' apos a remocao, 		for (int i = 0; i < c2.size(); i++), 			System.out.println("Elemento: " + c2.get(i));, 		, 		// lista para armazenar objetos do tipo 'Pessoa', 		List<Pessoa> pessoas = new ArrayList<>();, 		, 		// criacao de uma nova pessoa, 		Pessoa p1 = new Pessoa("Tiago", "Mendes");, 		, 		// adicionar elementos a lista 'pessoas', 		pessoas.add(p1);, 		pessoas.add(new Pessoa("Cristiano", "Ronaldo"));, 		, 		System.out.println("\nSize: " + pessoas.size() + "\n");, 		, 		for(int i = 0; i < pessoas.size(); i++) {, 			System.out.println(pessoas.get(i));, 		}, 		, 		if(pessoas.isEmpty()) {, 			System.out.println("\nA lista pessoas esta vazia.");, 		} else {, 			System.out.println("\nA lista pessoas nao esta vazia.");, 		}, 		, 		pessoas.removeAll(pessoas);, 		, 		System.out.println("\nSize: " + pessoas.size());, 		, 		if(pessoas.isEmpty()) {, 			System.out.println("\nA lista pessoas esta vazia.");, 		} else {, 			System.out.println("\nA lista pessoas nao esta vazia.");, 		}, 		, 		, 		, , 	}, , }]
[package aula08;, , import java.util.ArrayList;, import java.util.List;, , public class Conjunto<E> {, 	, 	private List<E> colecao = new ArrayList<>();, 	, 	// metodo para averiguar se um determinado elemento esta contido na lista 'colecao', 	public boolean containsElement(E elemento) {, 		if(colecao.contains(elemento)) {, 			return true;, 		} else {, 			return false;, 		}, 	}, 	, 	// metodo para adicionar um elemento novo a lista 'colecao', 	public boolean addElement(E elemento) {, 		if(!this.containsElement(elemento)) {, 			colecao.add(elemento);, 			return true;, 		} else {, 			return false;, 		}, 	}, 	, 	// metodo para remover um determinado elemento da lista 'colecao', 	public boolean removeElement(E elemento) {, 		if(this.containsElement(elemento)) {, 			colecao.remove(elemento);, 			return true;, 		} else {, 			return false;, 		}, 	}, 	, 	public boolean removeElement(int index) {, 		if(this.containsElement(colecao.get(index))) {, 			colecao.remove(colecao.remove(index));, 			return true;, 		} else {, 			return false;, 		}, 	}, 	, 	// metodo que retorna o tamanho do conjunto, 	public int size() {, 		return colecao.size();, 	}, 	, 	// metodo que retorna se o conjunto esta vazio ou nao, 	public boolean isEmpty() {, 		return colecao.isEmpty();, 	}, 	, 	public boolean removeAll() {, 		return colecao.removeAll(colecao);, 	}, 	, 	// metodo que retorna um array de elementos, 	@SuppressWarnings("unchecked"), 	public E[] giveElements() {, 		E[] elementos = (E[]) new Object[colecao.size()];, 		, 		for(int i = 0; i < colecao.size(); i++) {, 			elementos[i] = colecao.get(i);, 		}, 		, 		return elementos;, 	}, , 	@Override, 	public String toString() {, 		, 		String text = "";, 		, 		for(E elemento : colecao) {, 			text += (elemento.toString() + "\n");, 		}, 		, 		return text;, 	}, , 	public E getElement(int i) {, 		return colecao.get(i);, 	}, 	, }]
[package aula08;, , public class Pessoa {, 	, 	private String nome;, 	private String apelido;, 	private int cc;, 	private Data dataNasc;, 	, 	public Pessoa(String nome, String apelido, int cc, Data dataNasc) {, 		this.nome = nome;, 		this.cc = cc;, 		this.dataNasc = dataNasc;, 	}, 	public Pessoa(String nome, String apelido) {, 		this.nome = nome;, 		this.apelido = apelido;, 	}, , 	@Override, 	public String toString() {, 		return "Nome: " + nome + " " + apelido;, 	}, , 	public String getNome() {, 		return nome;, 	}, , 	public void setNome(String nome) {, 		this.nome = nome;, 	}, , 	public int getCc() {, 		return cc;, 	}, , 	public void setCc(int cc) {, 		this.cc = cc;, 	}, , 	public Data getDataNasc() {, 		return dataNasc;, 	}, , 	public void setDataNasc(Data dataNasc) {, 		this.dataNasc = dataNasc;, 	}, 	, 	, , 	, }]
[package aula08;, , public class Cereal extends Alimento implements AlimentoVegetariano {, 	, 	private String nome;, 	, 	public Cereal(double proteinas, double calorias, double peso, String nome) {, 		super(proteinas, calorias, peso);, 		this.nome = nome;, 		, 	}, 	, 	@Override, 	public String toString() {, 		return "Cereal " + nome + ", " + super.toString();, 	}, , }]
[package aula08;, , public interface AlimentoVegetariano {}]
[package aula08;, , public enum DiaSemana {, 	DOMINGO(1), SEGUNDA(2), TERCA(3), QUARTA(4), QUINTA(5), SEXTA(6), SABADO(7);, 	, 	private int code;, 	, 	private DiaSemana(int code) {, 		this.code = code;, 	}, 	, 	@SuppressWarnings("unused"), 	private int getCode() {, 		return this.code;, 	}, }]
[package aula08;, , public class PratoDieta extends Prato {, 	private double maxCal;, 	, 	public PratoDieta(String nome, DiaSemana diaSem, double maxCal) {, 		super(nome, diaSem);, 		this.maxCal = maxCal;, 	}, 	, 	public PratoDieta(String nome, double maxCal) {, 		super(nome);, 		this.maxCal = maxCal;, 	}, , }]
[package aula08;, , public class PratoVegetariano extends Prato {, , 	, 	public PratoVegetariano(String nome, DiaSemana diaSem) {, 		super(nome, diaSem);, 	}, 	, 	public PratoVegetariano(String nome) {, 		super(nome);, 	}, , }]
[package aula08;, , import aula07.Circulo;, import aula07.ColecaoFiguras;, import aula07.Figura;, import aula07.Ponto;, import aula07.Quadrado;, import aula07.Retangulo;, , public class A08E02 {, , 	public static void main(String[] args) {, 		, 		Conjunto<Figura> figuras = new Conjunto<>();, 		Conjunto<Pessoa> pessoas = new Conjunto<>();, 		Conjunto<Integer> inteiros = new Conjunto<>();, 		, 		//-----------------------------Figuras-----------------------------//, 		, 		Circulo c1 = new Circulo(2);        , 		Circulo c2 = new Circulo(1, 3, 2);        , 		, 		Quadrado q1 = new Quadrado(2);        , 		Quadrado q2 = new Quadrado(3, 4, 2);        , 		, 		Retangulo r1 = new Retangulo(2, 3);        , 		Retangulo r2 = new Retangulo(3, 4, 2, 3);, 		, 		System.out.println(figuras.addElement(c1)); // true, 		System.out.println(figuras.addElement(c2)); // true, 		System.out.println(figuras.addElement(q1)); // true, 		System.out.println(figuras.addElement(q2)); // true, 		System.out.println(figuras.addElement(r1)); // true, 		System.out.println(figuras.addElement(r2)); // true, 		, 		System.out.println(figuras.addElement(c1)); // false, 		, 		System.out.println("Size: " + figuras.size()); // size = 6, 		, 		, 		System.out.println(figuras.containsElement(r1)); // true, 		System.out.println(figuras.removeElement(r1));	 // true, 		System.out.println(figuras.containsElement(r1)); // false, 		System.out.println(figuras.removeElement(r1));   // false, 		, 		System.out.println("Size: " + figuras.size()); // size = 5, 		, 		System.out.println(figuras);, 		, 		System.out.println(figuras.isEmpty()); // false, 		System.out.println(figuras.removeAll()); // true, 		System.out.println(figuras.isEmpty()); // true, 		, 		System.out.println(figuras);, 		, 		//-----------------------------Pessoas-----------------------------//, 		, 		Pessoa p1 = new Pessoa("Tiago", "Mendes");, 		Pessoa p2 = new Pessoa("Cristiano", "Ronaldo");, 		Pessoa p3 = new Pessoa("Quim", "Barreiros");, 		Pessoa p4 = new Pessoa("Zeze", "Camarinha");, 		, 		System.out.println(pessoas.addElement(p1)); // true, 		System.out.println(pessoas.addElement(p2)); // true, 		System.out.println(pessoas.addElement(p3)); // true, 		System.out.println(pessoas.addElement(p4)); // true, 		, 		, 		System.out.println(pessoas.addElement(p1)); // false, 		, 		System.out.println("Size: " + pessoas.size()); // size = 4, 		, 		, 		System.out.println(pessoas.containsElement(p1)); // true, 		System.out.println(pessoas.removeElement(p1));	 // true, 		System.out.println(pessoas.containsElement(p1)); // false, 		System.out.println(pessoas.removeElement(p1));   // false, 		, 		System.out.println("Size: " + pessoas.size()); // size = 3, 		, 		System.out.println(pessoas);, 		, 		System.out.println(pessoas.isEmpty()); // false, 		System.out.println(pessoas.removeAll()); // true, 		System.out.println(pessoas.isEmpty()); // true, 		, 		System.out.println(pessoas);, 		, 		//-----------------------------Inteiros-----------------------------//, 		, 		Integer i1 = new Integer(1);, 		Integer i2 = new Integer(2);, 		Integer i3 = new Integer(3);, 		Integer i4 = new Integer(4);, 		Integer i5 = new Integer(5);, 		, 		System.out.println(inteiros.addElement(i1)); // true, 		System.out.println(inteiros.addElement(i2)); // true, 		System.out.println(inteiros.addElement(i3)); // true, 		System.out.println(inteiros.addElement(i4)); // true, 		System.out.println(inteiros.addElement(i5)); // true, 		, 		, 		System.out.println(inteiros.addElement(i1)); // false, 		, 		System.out.println("Size: " + inteiros.size()); // size = 5, 		, 		, 		System.out.println(inteiros.containsElement(i1)); // true, 		System.out.println(inteiros.removeElement(i1));	 // true, 		System.out.println(inteiros.containsElement(i1)); // false, 		System.out.println(inteiros.removeElement(i1));   // false, 		, 		System.out.println("Size: " + inteiros.size()); // size = 4, 		, 		System.out.println(inteiros);, 		, 		System.out.println(inteiros.isEmpty()); // false, 		System.out.println(inteiros.removeAll()); // true, 		System.out.println(inteiros.isEmpty()); // true, 		, 		System.out.println(pessoas);, 		, 	}, , }]
[package aula08;, , public enum Tipo { CONGELADO, FRESCO }]
[package aula08;, , public class Carne extends Alimento {, 	, 	private Variedade variedade;, 	, 	public Carne(double proteinas, double calorias, double peso, Variedade variedade) {, 		super(proteinas, calorias, peso);, 		this.variedade = variedade;, 	}, , 	@Override, 	public String toString() {, 		return "Carne " + variedade + ", " + super.toString();, 	}, 	, 	, 	, 	, , }]
[package aula02;, import java.util.Scanner;, , public class A02E02 {, , 	public static void main(String[] args) {, 		, 		Scanner sc = new Scanner(System.in);, 		, 		int num; // declaracao de variaveis, 		, 		// leitura de um valor N natural, 		do {, 			, 			System.out.print("Número positivo: ");, 			num = sc.nextInt();, 			, 		} while (num <= 0);, 		, 		System.out.println("Contagem decrescente: ");, 		, 		// contagem decrescente e consequente impressao, 		while (num >= 0) {, 			System.out.println(num);, 			num--;, 		}, 		, 		sc.close();, 		, 	}, , }]
[package aula02;, , import java.util.*;, , public class A02E09 {, , 	public static void main(String[] args) {, , 		/* RESOLVI ESTE EXERCICIO DA MESMA MANEIRA DO EXERCICIO 8 */, 		/*NAO CONSEGUI FAZER PARA NUMEROS REAIS*/, , 		Scanner sc = new Scanner(System.in);, , 		// começamos por introduzir um valor inteiro do tipo byte, entre -128 e 127, 		System.out.print("Introduza um valor ( [-128,127] ): ");, 		byte b = sc.nextByte();, 		/* nota: poderia fazer um ciclo do...while(); para validar se o utilizador introduzia, 		   um numero entre -128 e 127, mas para isso a variavel b teria de ser do tipo 'int',, 		   e no enunciado pede-se a introducao de um valor do tipo 'byte'., 		   Se o utilizador digitar um numero fora deste intervalo, ira aparecer uma excecao., 		 */, , 		String bits = String.format("%8s", Integer.toBinaryString(b & 0xFF)).replace(' ', '0');, 		/* a operação "b & 0xFF" faz o seguinte: pega nos 8 bits da representação de b em byte,, 		   e passa-os para a função .toBinaryString(), representando-os como um inteiro., 		   Como esta função recebe uma representação em 8 bits,, 		   se introduzirmos um valor que seja representado, por exemplo, apenas com 4 bits,, 		   os 4 bits restantes seriam impressos como espaços em branco., 		   Para prevenir isso, fazemos o .replace(' ', '0'), para substituir bits 'vazios' por 0. */, , 		// impressao de resultados em complemento para 2, 		System.out.println("O número " + b + " em binário com 8 bits é " + bits);, , 		sc.close();, , 	}, , }]
[package aula02;, , import java.util.Random;, , public class A02E07 {, , 	public static void main(String[] args) {, 		, 		// criar um vetor bidimensional, 		double[][] notas = new double[16][3]; // 16 alunos com 3 componentes cada, 		, 		// inicializacao de variaveis, 		double start = 0.0, end = 20.0;, 		, 		// ciclos for para preencher o vetor notas, 		for ( int i = 0 ; i < 16 ; i++ ) { // ciclo para cada aluno, 			, 			for( int j = 0; j < 3 ; j++ ) { // ciclo para cada componente, 				, 				if (j == 2) {, 					, 					if( notas[i][j-2] < 7 || notas[i][j-1] < 7) {, 						, 						notas[i][j] = 66; // reprovado por nota minima, 						, 					} else {, 						, 						// nota final, 						notas[i][j] = Math.round( notas[i][j-2] * 0.4 + notas[i][j-1] * 0.6 );, 						, 					}, 				} else {, 					, 					// novo numero aleatorio entre 0 e 1, 					double random = new Random().nextDouble();, 					, 					// novo numero aleatorio entre 0.0 e 20.0, 					double n = start + (random * (end - start));, 					, 					// preenchimento do array, 					notas[i][j] = n;, 					, 				}, 				, 			}, 			, 		}, 		, 		// impressao do array 'notas', 		System.out.printf("%s %10s %10s\n", "NotaT", "NotaP", "Pauta");, 		, 		for (int i = 0 ; i < 16 ; i++) {, 			, 			// cada linha corresponde a um aluno, 			System.out.printf("%.1f %10.1f %10.0f\n", notas[i][0], notas[i][1], notas[i][2]);, 			, 		}, 		, 	}, , }]
[package aula02;, import java.util.Scanner;, , public class A02E05 {, , 	public static void main(String[] args) {, 		, 		Scanner sc = new Scanner(System.in);, 		, 		// declaracao de variaveis, 		int mes, ano; , 		boolean bissexto = false;, 		, 		// leitura do mes e consequente validacao, 		do {, 			, 			System.out.print("Escreva o numero do mes (1 a 12): ");, 			mes = sc.nextInt();, 			, 		} while( mes <= 0 || mes > 12);, 		, 		// leitura do ano e consequente validacao, 		do {, 			, 			System.out.print("Escreva o numero do ano (max 4 digitos): ");, 			// coloquei a restricao de 4 digitos para nao ser um numero muito grande, 			ano = sc.nextInt();, 			, 		} while( ano < 0 || ano > 9999);, 		, 		// averiguar o tipo do ano (comum ou bissexto), 		if( ano % 4 == 0 ) {, 			if ( ano % 100 == 0 ) {, 				if ( ano % 400 == 0), 					bissexto = true;, 			} else {, 				bissexto = true;, 			}, 			, 		}, 			, 		, 		// impressao do numero de dias do mes, 		if ( mes == 1 || mes == 3 || mes == 5 || mes == 7 || mes == 8 || mes == 10 || mes == 12 ), 			System.out.println("O mês tem 31 dias.");, 		else if (mes == 4 || mes == 6 || mes == 9 || mes == 11), 			System.out.println("O mês tem 30 dias.");, 		else // se o mes for fevereiro, 			if ( bissexto ), 				System.out.println("O mês tem 29 dias.");, 			else, 				System.out.println("O mês tem 28 dias.");, 		, 		sc.close();, 	}, , }]
[package aula02;, , import java.util.Scanner;, import java.lang.Math;, , public class A02E01 {, , 	public static void main(String[] args) {, , 		Scanner sc = new Scanner(System.in);, , 		double notaP, notaT; // declaracao de variaveis, 		long notaF; // o eclipse aconselhou-me a alterar o tipo desta variavel de double para long, , 		do { // ciclo para validar se as notas das componentes pedidas estao entre 0 e 20, , 			// ler a nota da componente pratica, notaP, 			System.out.print("Nota pratica: ");, 			notaP = sc.nextDouble();, , 			// ler a nota da componente teorica, notaT, 			System.out.print("Nota teorica: ");, 			notaT = sc.nextDouble();, , 		} while ( ( notaP < 0 ) || ( notaT < 0 ) || ( notaP > 20 ) || ( notaT > 20) );, , 		// calculo da nota final do aluno, 		if(notaP <= 7 || notaT <= 7), 			notaF = 66; // reprovado por nota minima, 		else, 			notaF = Math.round(0.4 * notaT + 0.6 * notaP); // nota final, , 		// impressao da nota final, 		System.out.println("A nota final do aluno é " + notaF);, , 		sc.close();, , 	}, , }]
[package aula02;, import java.util.Scanner;, , public class A02E04 {, , 	public static void main(String[] args) {, 		, 		Scanner sc = new Scanner(System.in);, 		, 		// declaracao de variaveis, 		double primeiro, soma, max, min, num; , 		int contador = 1;, 		, 		// leitura do primeiro valor, 		System.out.print("Leitura do primeiro número: ");, 		primeiro = sc.nextDouble();, 		, 		// inicializacao de estatisticas, 		soma = primeiro; max = primeiro; min = primeiro;, 		, 		do { // ciclo para ler valores ate o numero introduzido ser igual ao primeiro, 			, 			// leitura de um novo numero, 			System.out.print("Novo número: ");, 			num = sc.nextDouble();, 			, 			// atualizar o valor das variaveis max e min conforme o numero introduzido, 			if (num > max), 				max = num;, 			else if ( num < min), 				min = num;, 			else, 				// se o numero introduzido for igual ao primeiro, o ciclo e interrompido, 				break;, 			, 			soma += num; // soma de todos os numeros introduzidos, 			contador ++; // contagem de quantos numeros foram introduzidos, 			, 			, 		} while ( num != primeiro );, 		, 		// impressao de resultados, 		System.out.println("Valor máximo: " + max);, 		System.out.println("Valor minimo: " + min);, 		System.out.println("Média: " + (soma / contador));, 		System.out.println("Número de elementos lidos: " + contador);, 		, 		sc.close();, 		, 	}, , }]
[package aula02;, , import java.util.Random;, import java.util.Scanner;, , public class A02E06 {, , 	public static void main(String[] args) {, 		, 		// utilização da classe Random para gerar um numero aleatorio, 		Random rand  = new Random(); , 		, 		Scanner sc = new Scanner(System.in);, 		, 		// atribuicao de variaveis, 		int n,tentativa, contador;, 		String resposta;, 		, 		do { // inicio de um novo jogo, 			, 			// inicializacao de variáveis, 			n = rand.nextInt(100) + 1; // 100 é o máximo e 1 é o mínimo, 			contador = 0; , 			, 			do { // ciclo até o utilizador acertar no número aleatório, 				, 				// tentativa do utilizador, 				System.out.print("Tentativa: ");, 				tentativa = sc.nextInt();, 				contador++;, 				, 				// classificacao da tentativa, 				if ( ( tentativa < n ) ) {, 					System.out.println("Tentativa baixa: ");, 				} else if ( ( tentativa > n ) ) {, 					System.out.println("Tentativa alta");, 				}, 				, 			} while ( tentativa != n );, 			, 			// impressao de uma mensagem de parabens , 			System.out.println("Acertou, parabéns! O número é " + n + " e precisou de " + contador + " tentativas.");, 			, 			, 			, 			do {, 				, 				// este ciclo só termina se o utilizador digitar ou "sim" ou "não", 				// pedido para jogar outra vez, 				System.out.print("Novo jogo? (sim/não): ");, 				resposta = sc.next();, 				, 			} while( !(resposta.equals("sim")) && !(resposta.equals("não")) );, 			, 		} while ( resposta.equals("sim") );, 		, 		// fim do programa, 		System.out.println("Obrigado por jogar!");, 		, 		sc.close();, 	}, , }]
[package aula02;, import java.util.Scanner;, , public class A02E03 {, , 	public static void main(String[] args) {, , 		Scanner sc = new Scanner(System.in);, , 		int num; boolean primo = true; // declaracao de variaveis, , 		do { // leitura do numero natural, , 			System.out.print("Número natural: ");, 			num = sc.nextInt();, , 		} while( num <= 0 );, , 		// averiguar se um numero e primo, 		for (int i = 2 ; i < num ; i++) {, , 			if ( num % i == 0 ), 				primo = false;, , 		}, , 		// impressao de resultados, 		if (primo), 			System.out.println("É primo.");, 		else, 			System.out.println("Não é primo.");, , 		sc.close();, 	}, , }]
[package aula02;, , import java.util.Scanner;, , public class A02E08 {, , 	public static void main(String[] args) {, 		, 		Scanner sc = new Scanner(System.in);, 		, 		// começamos por introduzir um valor inteiro do tipo byte, entre -128 e 127, 		System.out.print("Introduza um valor ( [-128,127] ): "); , 		byte b = sc.nextByte();, 		/* nota: poderia fazer um ciclo do...while(); para validar se o utilizador introduzia, 		   um numero entre -128 e 127, mas para isso a variavel b teria de ser do tipo 'int',, 		   e no enunciado pede-se a introducao de um valor do tipo 'byte'., 		   Se o utilizador digitar um numero fora deste intervalo, ira aparecer uma excecao., 		 */, 		, 		, 		String bits = String.format("%8s", Integer.toBinaryString(b & 0xFF)).replace(' ', '0');, 		/* a operação "b & 0xFF" faz o seguinte: pega nos 8 bits da representação de b em byte,, 		   e passa-os para a função .toBinaryString(), representando-os como um inteiro. , 		   Como esta função recebe uma representação em 8 bits, , 		   se introduzirmos um valor que seja representado, por exemplo, apenas com 4 bits,, 		   os 4 bits restantes seriam impressos como espaços em branco. , 		   Para prevenir isso, fazemos o .replace(' ', '0'), para substituir bits 'vazios' por 0. */, 		, 		int contador = 0; // declaracao de uma variavel para a contagem, 		, 		for (int i = 0 ; i < 8 ; i++) { // ciclo para contar o numero de bits iguais a 1, 			if ( bits.charAt(i) == '1' ) {, 				contador++;, 			}, 		}, 		, 		// impressao do resultado, 		System.out.println("O número " + b + " em binário com 8 bits é " + bits + " e tem " + contador + " bits igual a 1.");, 		, 		sc.close();																					, 	}																								, }]
[package aula10;, , public class Voo implements Comparable<Voo>{, 	, 	// Atributos, 	private String nome;, 	private String horaChegada;, 	private String origem;, 	private String atraso;, 	private Companhia companhia;, 	, 	// Construtor, 	public Voo(String nome, String horaChegada, String origem, String atraso, Companhia companhia) {, 		this.nome = nome;, 		this.horaChegada = horaChegada;, 		this.origem = origem;, 		this.atraso = atraso;, 		this.companhia = companhia;, 	}, 	, 	// Metodo toString(), 	@Override, 	public String toString() {, 		return "Voo [nome=" + nome + ", horaChegada=" + horaChegada + ", origem=" + origem + ", atraso=" + atraso, 				+ ", companhia=" + companhia + "]";, 	}, 	, 	// Getters and Setters, 	public String getHoraChegada() {, 		return horaChegada;, 	}, , 	public void setHoraChegada(String horaChegada) {, 		this.horaChegada = horaChegada;, 	}, 	, 	, 	, 	public String getNome() {, 		return nome;, 	}, , 	public void setNome(String nome) {, 		this.nome = nome;, 	}, , 	public String getOrigem() {, 		return origem;, 	}, , 	public void setOrigem(String origem) {, 		this.origem = origem;, 	}, , 	public String getAtraso() {, 		return atraso;, 	}, , 	public void setAtraso(String atraso) {, 		this.atraso = atraso;, 	}, , 	public Companhia getCompanhia() {, 		return companhia;, 	}, , 	public void setCompanhia(Companhia companhia) {, 		this.companhia = companhia;, 	}, , 	public double convertToMinutes(String horaChegada) {, 		int hora, minutos;, 		hora = Integer.parseInt(horaChegada.substring(0, 2));, 		minutos = Integer.parseInt(horaChegada.substring(3, 5));, 		return hora * 60 + minutos;, 	}, 	, 	public String newHour(String horaChegada, String atraso) {, 		double horaC = this.convertToMinutes(horaChegada);, 		double atr = this.convertToMinutes(atraso);, 		, 		double novaHora = horaC + atr;, 		, 		return "" + (int)(novaHora / 60) + ":" + (int)(novaHora - ((int)(novaHora / 60) * 60));, 	}, , 	@Override, 	public int compareTo(Voo o) {, 		return (int) (this.convertToMinutes(this.horaChegada) - o.convertToMinutes(o.horaChegada));, 	}, 	, 	, 	, }]
[package aula10;, , public class Companhia implements Comparable<Companhia> {, 	, 	// Atributos, 	private String sigla;, 	private String nome;, 	, 	// Construtor, 	public Companhia(String sigla, String nome) {, 		this.sigla = sigla;, 		this.nome = nome;, 	}, 	, 	// Metodo toString, 	@Override, 	public String toString() {, 		return sigla + " - " + nome;, 	}, , 	// Getters and Setters, 	, 	public String getSigla() {, 		return sigla;, 	}, , 	public void setSigla(String sigla) {, 		this.sigla = sigla;, 	}, , 	public String getNome() {, 		return nome;, 	}, , 	public void setNome(String nome) {, 		this.nome = nome;, 	}, , 	@Override, 	public int compareTo(Companhia o) {, 		return sigla.compareTo(o.getSigla());, 	}, 	, 	, 	, 	, }]
[package aula10;, , import java.util.*;, import java.io.*;, , public class A10E03 {, , 	public static void main(String[] args){, 		, 		try {, 			// Ler o ficheiro, 			Scanner input = new Scanner(new FileReader("voos.txt"));, 			Scanner input2 = new Scanner(new FileReader("companhias.txt"));, 			, 			// Ignorar a primeira linha, 			String firstLine = input.next();, 			String firstLine2 = input2.nextLine();, 			, 			// Conjuntos para guardar os voos e as companhias, 			List<Voo> voos = new LinkedList<>();, 			Set<Companhia> companhias = new TreeSet<>();, 			Map<Companhia, List<String>> atrasos = new TreeMap<>();, 			, 			, 			while(input2.hasNext()) {, 				// Armazenar num array cada palavra de uma linha do ficheiro "companhias.txt", 				String[] linha = input2.nextLine().split("\t");, 				// Adicionar ao conjunto 'companhias' todas as companhias lidas do ficheiro "companhias.txt", 				companhias.add(new Companhia(linha[0], linha[1]));, 			}, 			, 			while(input.hasNext()) {, 				// Armazenar num array cada palavra de uma linha do ficheiro "voos.txt", 				String[] linha = input.nextLine().split("\t");, 				// Atribuir cada palavra armazenada no array a uma variavel, para facilitar a compreensao, 				String horaChegada = linha[0];, 				String nome = linha[1];, 				String origem = linha[2];, 				String atraso;, 				, 				if(linha.length == 4) {, 					atraso = linha[3];, 				} else {, 					atraso = null;, 				}, 				, 				// Verificar se as primeiras duas letras do nome do Voo sao iguais a sigla de uma certa companhia, 				for(Companhia c : companhias) {, 					if(c.getSigla().equals(nome.substring(0, 2))) {, 						// Adicionar ao conjunto 'voos' um novo voo, 						voos.add(new Voo(nome, horaChegada, origem, atraso, c));, 						, 						if(atraso != null) {, 							if(!atrasos.containsKey(c)) {, 								atrasos.put(c, new ArrayList<String>());, 								atrasos.get(c).add(atraso);, 							} else {, 								atrasos.get(c).add(atraso);, 							}, 						}, 					}, 				}, 				, 			}, 			, 			System.out.printf("%-10s%-10s%-20s%-25s%-10s%-15s\n", "Hora", "Voo", "Companhia", "Origem", "Atraso", "Obs");, 			, 			FileWriter outputstream = new FileWriter("Infopublico.txt");, 			PrintWriter escreve = new PrintWriter(outputstream);, 			, 			, 			for(Voo v : voos) {, 				String atraso = "";, 				String novaHora = "";, 				if(!(v.getAtraso() == null)) {, 					atraso = v.getAtraso();, 					novaHora = v.newHour(v.getHoraChegada(), atraso);, 				}, 				, 				, 				System.out.printf("%-10s%-10s%-20s%-25s%-10s%-15s\n", v.getHoraChegada(), v.getNome(), v.getCompanhia().getNome(), 						, v.getOrigem(), atraso, novaHora);, 				, 				String voo = String.format("%-10s%-10s%-20s%-25s%-10s%-15s\n", v.getHoraChegada(), v.getNome(), v.getCompanhia().getNome(), 						, v.getOrigem(), atraso, novaHora);, 				, 				escreve.write(voo);, 				, 				, 			}, 			, 			escreve.close();, 			, 			Set<Atraso> atrasosMedios = new TreeSet<>();, 			, 			for(Companhia c : atrasos.keySet()) {, 				atrasosMedios.add(new Atraso(c, atrasoMedio(atrasos.get(c))));, 			}, 			, 			System.out.printf("\n%-30s%-10s\n","Companhia","Atraso");, 			, 			for(Atraso a : atrasosMedios) {, 				System.out.printf("%-30s%-10s\n",a.getCompanhia(),a.getAtraso());, 			}, 			, 			Map<String, Integer> contador = new HashMap<>();, 			Set<Origens> origens = new TreeSet<>();, 			, 			for(Voo v : voos) {, 				if(!contador.containsKey(v.getOrigem())) {, 					contador.put(v.getOrigem(), 1);, 				} else {, 					contador.put(v.getOrigem(), contador.get(v.getOrigem()) + 1);, 				}, 			}, 			, 			, 			for(String s : contador.keySet()) {, 				origens.add(new Origens(s, contador.get(s)));, 			}, 			, 			System.out.printf("\n%-25s%-5s\n", "Origem", "Voo");, 			, 			FileWriter cidades = new FileWriter("cidades.txt");, 			PrintWriter ce = new PrintWriter(cidades);, 			, 			ce.write(String.format("\n%-25s%-5s\n", "Origem", "Voo"));, 			, 			for(Origens o : origens) {, 				String s = String.format("%-25s%-5d\n", o.getOrigem(), o.getOcorrencias());, 				System.out.print(s);, 				ce.write(s);, 				, 			}, 			, 			ce.close();, 			, 			, 		} catch(Exception e) {, 			System.out.println("\nErro ao abrir o ficheiro!");, 		}, 		, , 	}, 	, 	public static String atrasoMedio(List<String> list) {, 		, 		int totalMinutos = 0;, 		, 		for(String hora : list) {, 			totalMinutos += convertToMinutes(hora);, 		}, 		, 		double atrasoMedio = totalMinutos / list.size();, 		, 		return "" + (int)(atrasoMedio / 60) + ":" + (int)(atrasoMedio - ((int)(atrasoMedio / 60) * 60));, 		, 	}, 	, 	public static int convertToMinutes(String hora) {, 		int horas, minutos;, 		horas = Integer.parseInt(hora.substring(0, 2));, 		minutos = Integer.parseInt(hora.substring(3, 5));, 		return horas * 60 + minutos;, 	}, , }]
[package aula10;, , public class Origens implements Comparable<Origens>{, 	private String origem;, 	private int ocorrencias;, 	, 	public Origens(String origem, int ocorrencias) {, 		this.origem = origem;, 		this.ocorrencias = ocorrencias;, 	}, , 	public String getOrigem() {, 		return origem;, 	}, , 	public void setOrigem(Voo voo) {, 		this.origem = origem;, 	}, , 	public int getOcorrencias() {, 		return ocorrencias;, 	}, , 	public void setOcorrencias(int ocorrencias) {, 		this.ocorrencias = ocorrencias;, 	}, , 	@Override, 	public int compareTo(Origens o) { , 		if(o.ocorrencias != this.ocorrencias), 			return o.ocorrencias - this.ocorrencias;, 		else, 			return 1;, 	}, 	, 	, }]
[package aula10;, , import java.util.*;, import java.io.*;, , public class A10E01 {, , 	public static void main(String[] args) throws IOException{, 		Scanner input = new Scanner(new FileReader("words.txt"));, 		, 		List<String> palavras = new ArrayList<>();, 		, 		// a), 		while (input.hasNext()) {, 			String word = input.next();, 			System.out.println(word);, 			, 			// b), 			if(word.length() > 2) {, 				palavras.add(word);, 			}, 			, 		}, 		, 		// b), 		System.out.println("\nPalavras com mais de 2 letras: ");, 		for(String s : palavras) {, 			System.out.println(s);, 		}, 		, 		// c), 		System.out.println("\nPalavras terminadas com 's':");, 		for(String s : palavras) {, 			if(s.endsWith("s")) {, 				System.out.println(s);, 			}, 		}, 		, 		// d), 		for(int i = 0; i < palavras.size(); i++) {, 			if(!palavras.get(i).matches("[a-zA-Z]+")) {, 				palavras.remove(i);, 			}, 		}, 		, 		FileWriter outputstream = new FileWriter("words2.txt");, 		PrintWriter escreve = new PrintWriter(outputstream);, 		, 		// e), 		System.out.println("\nResultado final: ");, 		for(String s: palavras) {, 			System.out.println(s);, 			escreve.write(s + " ");, 		}, 		, 		escreve.close();, 		, 		, 		, 		, 	}, , }]
[package aula10;, , import java.io.FileReader;, import java.io.IOException;, import java.util.*;, , public class A10E02 {, , 	public static void main(String[] args) throws IOException {, 		, 		// Ler um ficheiro, 		Scanner input = new Scanner(new FileReader("major.txt"));, 		, 		// Mapa dentro de um Mapa para guardar o numero de ocorrencias de pares, 		Map<String, Map<String, Integer>> pares = new TreeMap<>();, 		, 		String firstString = input.next().toLowerCase();, 		, 		while(input.hasNext()) {, 			, 			String secondString = input.next().toLowerCase();, 			, 			if(secondString.length() > 2 && secondString.matches("[a-zA-Z]+")) {, 				, 				if(!pares.containsKey(firstString)) {, 					pares.put(firstString, new TreeMap<String, Integer>());, 					pares.get(firstString).put(secondString, 1);, 					firstString = secondString;, 					, 				} else {, 					if(pares.get(firstString).containsKey(secondString)) {, 						pares.get(firstString).put(secondString, pares.get(firstString).get(secondString) + 1);, 					} else {, 						pares.get(firstString).put(secondString, 1);, 						, 					}, 					firstString = secondString;, 				}, 				, 			}, 			, 		}, 		, 		for(String s : pares.keySet()) {, 			System.out.println(s + pares.get(s));, 		}, 		, 		, 		, 		, 	}, , }]
[package aula10;, , public class Atraso implements Comparable<Atraso>{, 	, 	private Companhia companhia;, 	private String atraso;, 	, 	public Atraso(Companhia companhia, String atraso) {, 		this.companhia = companhia;, 		this.atraso = atraso;, 	}, 	, 	, , 	public Companhia getCompanhia() {, 		return companhia;, 	}, , , , 	public void setCompanhia(Companhia companhia) {, 		this.companhia = companhia;, 	}, , , , 	public String getAtraso() {, 		return atraso;, 	}, , , , 	public void setAtraso(String atraso) {, 		this.atraso = atraso;, 	}, , , , 	@Override, 	public int compareTo(Atraso o) {, 		return this.atraso.compareTo(o.atraso);, 	}, 	, 	, }]
[package aula09;, , import java.util.*;, , public class CollectionTester {, 	public static void main(String[] args) {, 		final int DIM = 40000;, 		Collection<Integer> col; //Testar diferentes coleções, 		, 		col = new TreeSet<Integer>();//TreeSet, 		, 		checkPerformance(col, DIM);, 	}, 	, 	private static void checkPerformance(Collection<Integer> col, int DIM) {, 		Iterator<Integer> iterator;, 		double start, stop, delta;, 		// Add, 		start = System.nanoTime(); // clock snapshot before, 		for(int i=0; i<DIM; i++ ), 			col.add( i );, 		stop = System.nanoTime();  // clock snapshot after, 		delta = (stop-start)/1e6; // convert to milliseconds, 		System.out.println(col.size()+ ": Add to " +, 			col.getClass().getSimpleName() +" took " + delta + "ms");, 		// Search, 		start = System.nanoTime(); // clock snapshot before, 		for(int i=0; i<DIM; i++ ) {, 			int n = (int) (Math.random()*DIM);, 			if (!col.contains(n)), 				System.out.println("Not found???"+n);, 		}, 		stop = System.nanoTime();  // clock snapshot after, 		delta = (stop-start)/1e6; // convert nanoseconds to milliseconds, 		System.out.println(col.size()+ ": Search to " +, 			col.getClass().getSimpleName() +" took " + delta + "ms");, 		// Remove, 		start = System.nanoTime(); // clock snapshot before, 		iterator = col.iterator();, 		while (iterator.hasNext()) {, 			iterator.next();, 			iterator.remove();, 		}, 		stop = System.nanoTime();  // clock snapshot after, 		delta = (stop-start)/1e6; // convert nanoseconds to milliseconds, 		System.out.println(col.size() + ": Remove from "+, 			col.getClass().getSimpleName() +" took " + delta + "ms");, 	}, 	, }]
[package aula09;, , import java.util.*;, , public class A09E01 {, , 	public static void main(String[] args) {, 		, 		Collection<Integer> col; //Testar diferentes coleções, 		, 		List<Integer> nums = new ArrayList<>();, 		nums.add(1000); nums.add(5000); nums.add(10000); nums.add(20000);, 		nums.add(40000); nums.add(100000);, 		, 		System.out.printf("%10s%10d%10d%10d%10d%10d%10d\n", "Collection", 1000, 5000, 10000, 20000, 40000, 100000);, 		System.out.println("ArrayList");, 		, 		//ArrayList, 		col = new ArrayList<Integer>(); , 		, 		checkPerformance(col, nums);, 		, 		System.out.println("\nLinkedList");, 		, 		, 		//LinkedList, 		col = new LinkedList<Integer>(); , 		, 		checkPerformance(col, nums);, 		, 		System.out.println("\nTreeSet");, 		, 		, 		//TreeSet, 		col = new TreeSet<Integer>(); , 		, 		checkPerformance(col, nums);, 		, 		System.out.println("\nHashSet");, 		, 		, 		//HashSet, 		col = new HashSet<Integer>(); , 		, 		checkPerformance(col, nums);, 	}, 	, 	private static void checkPerformance(Collection<Integer> col, List<Integer> nums) {, 		double start, stop, delta;, 		, 		// Add, 		System.out.printf("%-10s", "add");, 		for(Integer j : nums) {, 			start = System.nanoTime(); // clock snapshot before, 			for(int i=0; i<j; i++ ), 				col.add( i );, 			stop = System.nanoTime();  // clock snapshot after, 			delta = (stop-start)/1e6; // convert to milliseconds, , 			System.out.printf("%10.2f", delta);, 			, 		}, 		, 		// Search, 		System.out.printf("\n%-10s", "search");, 		for(Integer j : nums){, 			start = System.nanoTime(); // clock snapshot before, 			for(int i=0; i<j; i++ ) {, 				int n = (int) (Math.random()*j);, 				if (!col.contains(n)), 					System.out.println("Not found???"+n);, 			}, 			stop = System.nanoTime();  // clock snapshot after, 			delta = (stop-start)/1e6; // convert nanoseconds to milliseconds, 			, 			System.out.printf("%10.2f", delta);, 			, 		}, 		, 		, 		// Remove, 		System.out.printf("\n%-10s", "remove");, 		for(Integer j : nums) {, 			start = System.nanoTime(); // clock snapshot before, 			for(int i = 0; i < j; i++) {, 				col.remove(i);, 			}, 			stop = System.nanoTime();  // clock snapshot after, 			delta = (stop-start)/1e6; // convert nanoseconds to milliseconds, 			, 			System.out.printf("%10.2f", delta);, 			, 		}, 		, 		, 	}, , }]
[package aula09;, , public class Brinquedo implements Comparable<Brinquedo> {, 	, 	private String nome;, 	, 	public Brinquedo(String nome) {, 		this.nome = nome;, 	}, 	, 	@Override, 	public String toString() {, 		return "Brinquedo [nome=" + nome + "]";, 	}, 	, 	public String getNome() {, 		return nome;, 	}, 	, 	public void setNome(String nome) {, 		this.nome = nome;, 	}, 	, 	@Override, 	public int compareTo(Brinquedo o) {, 		// TODO Auto-generated method stub, 		return 0;, 	}, 	, 	, , }]
[package aula09;, , public class Pessoa implements Comparable<Pessoa>{, 	, 	private String nome;, 	, 	public Pessoa(String nome) {, 		this.nome = nome;, 	}, 	, 	@Override, 	public String toString() {, 		return "Pessoa [nome=" + nome + "]";, 	}, 	, 	public String getNome() {, 		return nome;, 	}, , 	public void setNome(String nome) {, 		this.nome = nome;, 	}, , 	@Override, 	public int compareTo(Pessoa p) {, 		return this.nome.compareTo(p.nome);, 	}, , }]
[package aula09;, , import java.util.*;, , public class A09E02 {, , 	public static void main(String[] args) {, 		, 		Random random = new Random();, 		, 		// a) registo com o nome de todos os empregados, 		, 		List<Pessoa> empregados = new ArrayList<>();, 		, 		// adicionar, 		empregados.add(new Pessoa("Tiago Mendes"));, 		empregados.add(new Pessoa("Cristiano Ronaldo"));, 		empregados.add(new Pessoa("Jorge Mendes"));, 		empregados.add(new Pessoa("Jorge Jesus"));, 		empregados.add(new Pessoa("Tiago Silva"));, 		empregados.add(new Pessoa("Bruno de Carvalho"));, 		empregados.add(new Pessoa("Donald Trump"));, 		Pessoa p1 = new Pessoa("Kim Jon Un");, 		empregados.add(p1);, 		, 		System.out.println("Lista de empregados: ");, 		for(Pessoa e : empregados) {, 			System.out.println(e);, 		}, 		, 		, 		empregados.remove(p1);, 		System.out.println("\nLista de empregados 2: ");, 		for(Pessoa e : empregados) {, 			System.out.println(e);, 		}, 		, 		, 		// b) atribuir brinquedo a funcionario, 		, 		List<Brinquedo> brinquedos = new ArrayList<>();, 		, 		brinquedos.add(new Brinquedo("Thor"));, 		brinquedos.add(new Brinquedo("Iron Man"));, 		brinquedos.add(new Brinquedo("Spider Man"));, 		brinquedos.add(new Brinquedo("Thanos"));, 		brinquedos.add(new Brinquedo("Black Widow"));, 		brinquedos.add(new Brinquedo("Rocket"));, 		brinquedos.add(new Brinquedo("Black Panther"));, 		brinquedos.add(new Brinquedo("Scarlet Witch"));, 		brinquedos.add(new Brinquedo("Vision"));, 		brinquedos.add(new Brinquedo("Hulk"));, 		brinquedos.add(new Brinquedo("Peter Quill"));, 		brinquedos.add(new Brinquedo("Doctor Strange"));, 		, 		System.out.println("\nLista de brinquedos: ");, 		for(Brinquedo b : brinquedos) {, 			System.out.println(b);, 		}, 		, 		Map<Brinquedo, Pessoa> presentes = new HashMap<>();, 		, 		for(int i = 0; i < 12 ; i++) {, 			int index2 = random.nextInt(empregados.size());, 			presentes.put(brinquedos.get(i), empregados.get(index2));, 		}, 		, 		System.out.println("\nBrinquedo - Empregado");, 		for(Brinquedo b : presentes.keySet()) {, 			System.out.println(b + ": " + presentes.get(b));, 		}, 		, 		// c) atribuir nome de funcionario a brinquedo, 		, 		Set<String> produtos = new HashSet<>();, 		, 		for(Pessoa e : empregados) {, 			String[] nomes = e.getNome().split(" ");, 			produtos.add(nomes[0]);, 		}, 		, 		System.out.println("\nBriquedos com nome de pessoas: ");, 		Iterator<String> i1 = produtos.iterator();, 		, 		while(i1.hasNext()) {, 			System.out.println(i1.next());, 		}, 		, 		// d) Nomes mais populares, 		, 		Map<String, Integer> contador = new TreeMap<>();, 		, 		for(Pessoa e : empregados) {, 			String[] nomes = e.getNome().split(" ");, 			if(!contador.containsKey(nomes[0])) {, 				contador.put(nomes[0],  1);, 			} else {, 				contador.put(nomes[0], contador.get(nomes[0]) + 1);, 			}, 		}, 		, 		System.out.println("\nNomes mais populares: ");, 		for(String s : contador.keySet()) {, 			System.out.println(s + ": " + contador.get(s));, 		}, 		, 		, 		// e) bilhetes para o futebol, 		, 		Map<Pessoa, Integer> bilhetes = new HashMap<>();, 		, 		for(int i = 0 ; i < empregados.size() ; i++) {, 			int numBilhetes = random.nextInt(50) + 10;, 			bilhetes.put(empregados.get(i), numBilhetes);, 		}, 		, 		System.out.println("\nNumero de bilhetes por empregado: ");, 		for(Pessoa p : bilhetes.keySet()) {, 			System.out.println(p + ": " + bilhetes.get(p));, 		}, 		, , 	}, , }]
[package aula03;, , import java.util.*;, , public class A03E03 {, , 	public static void main(String[] args) {, 		, 		// variavel de controlo, 		int controlo = 0; // utilizei esta variavel para retornar os valores lidos na funcao "readValues" um a um, 		, 		// leitura do mes, 		int mes = readValues(controlo);, 		controlo = 1;, 		, 		// leitura do ano, 		int ano = readValues(controlo);, 		controlo = 2;, 		, 		// leitura do dia da semana em que comeca o mes, 		int diaSem = readValues(controlo);, 		, 		// calculo do numero de dias do mes, 		int diasMes = monthDays(mes, ano);, 		, 		// impressao do calendario, 		printResults(diaSem, diasMes);, 	, 	}, 	, 	public static int readValues(int controlo) {, 		, 		Scanner sc = new Scanner(System.in);, 		, 		if (controlo == 0) {, 			, 			int mes;, 			, 			do { // ciclo para averiguar se o utilizador introduz um mes valido, 				, 				System.out.print("Por favor, insira o numero do mes [1-12]: ");, 				mes = sc.nextInt();, 				, 			} while ( mes <= 0 || mes > 12);, , 			return mes;, 			, 		} else if (controlo == 1) {, 			 , 			int ano;, 			, 			do { // ciclo para averiguar se o utilizador introduz um ano valido, 				, 				// estabeleci o maximo do ano para 9999 para nao ultrapassar os 4 digitos, 				System.out.print("Por favor, insira o numero do ano [max: 9999]: ");, 				ano = sc.nextInt();, 				, 			} while ( ano < 0 || ano > 9999);, 			, 			return ano;, 			, 		} else {, 			, 			int diaSem;, 			, 			System.out.println("1 = Segunda, 2 = Terça, 3 = Quarta, 4 = Quinta, 5 = Sexta, 6 = Sábado, 7 = Domingo");, 			, 			do { // ciclo para averiguar se o utilizador introduz um dia de semana valido, 				, 				System.out.print("Por favor, insira o numero do dia da semana: ");, 				diaSem = sc.nextInt();, 				, 			} while ( diaSem < 1 || diaSem > 7);, 			, 			, 			return diaSem;, 			, 		}, 				, 		, 	}, 	, 	public static int monthDays(int mes, int ano) {, 		, 		// para fazer esta funcao, aproveitei o codigo ja desenvolvido no exercicio 5 da aula pratica 2, 		, 		boolean bissexto = false;, 		, 		// averiguar o tipo do ano (comum ou bissexto), 		if( ano % 4 == 0 ), 			if ( ano % 100 == 0 ) {, 				if ( ano % 400 == 0), 					bissexto = true;, 			} else {, 				bissexto = true;	, 			}, 					, 		// retorno do numero de dias do mes, 		if ( mes == 1 || mes == 3 || mes == 5 || mes == 7 || mes == 8 || mes == 10 || mes == 12 ), 			return 31;, 		else if (mes == 4 || mes == 6 || mes == 9 || mes == 11), 			return 30;, 		else // se o mes for fevereiro, 			if ( bissexto ), 				return 29;, 			else, 				return 28;, , 	}, 	, 	public static void printResults(int diaSem, int diasMes) {, 		, 		// impressao do cabecalho, 		System.out.println("-----------------------");, 		System.out.printf("|%3s%3s%3s%3s%3s%3s%3s|\n", "Mo", "Tu", "We", "Th", "Fr", "Sa", "Su");, 		System.out.println("-----------------------");, 		, 		int dias, controlo = 0;, 		, 		// preenchimento da primeira fila, 		, 		System.out.print("|");, 		, 		for ( int i = 1 ; i <= diaSem ; i++) {, 			if ( i == diaSem) {, 				controlo = i;, 				break;, 			} else {, 				System.out.printf("   ");, 			}, 		}, 		, 		controlo = 7 - controlo + 1;, 		, 		for ( int j = 1 ; j <= controlo ; j++) { // este ciclo preenche os dias da primeira semana, 			System.out.printf("%3d", j);, 		}, 		, 		System.out.print("|\n");, 		, 		, 		// preenchimento do resto do calendario, 		dias = controlo + 1;, 		, 		do { // ciclo para preencher o calendario ate chegar ao numero de dias desse mes, 			, 			System.out.print("|");, 			, 			for(int i = 1 ; i <= 7 ; i++) { // ciclo para preencher cada semana, 				, 				if (dias <= diasMes) {, 					System.out.printf("%3d", dias);, 					dias++;, 				} else if ( dias > diasMes) {, 					for ( int c = 0 ; c <= 7 - i ; c++) { // ciclo para alinhar a ultima barra vertical , 						System.out.printf("   ");, 					}, 					break;, 					, 				}, 				, 			}, 			, 			System.out.print("|\n");, 			, 			, 			, 		} while( dias <= diasMes );, 		, 		System.out.println("-----------------------");, 		, 		, 	}, , }]
[package aula03;, , import java.util.*;, import java.lang.String;, , public class A03E01 {, , 	public static void main(String[] args) {, 		, 		Scanner sc = new Scanner(System.in);, 		, 		// leitura das duas strings, 		System.out.print("Insira a primeira string: ");, 		String str1 = sc.nextLine();, 		System.out.print("\nInsira a segunda string: ");, 		String str2 = sc.nextLine();, 		, 		// contagem do numero de carateres de cada string e consequente impressao, 		int c1 = countCharacters(str1);, 		int c2 = countCharacters(str2);, 		, 		System.out.println("\nA primeira string tem " + c1 + " caracteres.");, 		System.out.println("A segunda string tem " + c2 + " caracteres.");, 		, 		// imprimir o ultimo caracter da primeira string, 		char lc = lastCharacter(str1);, 		System.out.println("\nO ultimo caracter da primeira string e '" + lc + "'." );, 		, 		// indicar se as duas strings sao iguais ou nao, 		boolean iguais = compareStrings(str1, str2);, 		, 		if (iguais) {, 			System.out.println("\nAs strings sao iguais.");, 		} else {, 			System.out.println("\nAs strings sao diferentes.");, 		}, 		, 		// indicar se a segunda string acaba com um '.', 		boolean dot = endsWithDot(str2);, 		if (dot) {, 			System.out.println("\nA segunda string acaba com um '.'.");, 		} else {, 			System.out.println("\nA segunda string nao acaba com um '.'.");, 		}, 		, 		// indicar se a segunda string so tem minusculas, 		boolean olc = onlyLowerCase(str2);, 		if (olc) {, 			System.out.println("\nA segunda string so tem letras minusculas.");, 		} else {, 			System.out.println("\nA segunda string nao tem so letras minusculas.");, 		}, 		, 		// converter todos os caracteres das strings para minusculas e imprimir, 		str1 = stringToLowerCase(str1);, 		str2 = stringToLowerCase(str2);, 		, 		System.out.println("\nPrimeira string em minusculas: " + str1);, 		System.out.println("\nSegunda string em minusculas: " + str2);, 		, 		// substituir todas as ocorrencias de varios espaços seguidos por um unico espaço, 		// NOTA: ainda que no enunciado nao seja pedido a impressao desta acao, decidi imprimir para confirmar, 		str1 = replaceSpaces(str1);, 		str2 = replaceSpaces(str2);, 		, 		System.out.println("\nPrimeira string sem varios espacos: " + str1); , 		System.out.println("\nSegunda string sem varios espacos: " + str2);, 		, 		// capitalizar a primeira letra de cada palavra de ambas as frases, 		str1 = capitalizeFirstLetter(str1);, 		str2 = capitalizeFirstLetter(str2);, 		, 		System.out.println("\nPrimeiras letras da primeira string capitalizadas: ");, 		System.out.println(str1);, 		, 		System.out.println("\nPrimeiras letras da seguda string capitalizadas: ");, 		System.out.println(str2);, 		, 		// verificar se cada string e um palindromo ou nao, 		boolean str1_is_palindrome = checkPalindrome(str1.toLowerCase());, 		boolean str2_is_palindrome = checkPalindrome(str2.toLowerCase());, 		, 		if(str1_is_palindrome) {, 			System.out.println("A primeira string e um palindromo.");, 		} else {, 			System.out.println("A primeira string nao e um palindromo.");, 		}, 		, 		if(str2_is_palindrome) {, 			System.out.println("A segunda string e um palindromo.");, 		} else {, 			System.out.println("A segunda string nao e um palindromo.");, 		}, 		, 		sc.close();, 		, 	}, 	, 	// funcao para contar o numero de carateres de uma string, 	public static int countCharacters(String s) {, 		, 		return s.length();, 		, 	}, 	, 	// funcao para averiguar qual o ultimo caracter de uma string, 	public static char lastCharacter(String s) {, 		, 		return s.charAt(s.length() - 1);, 		, 	}, 	, 	// funcao para comparar se duas strings sao iguais, 	public static boolean compareStrings(String s1, String s2) {, 		, 		return s1.equals(s2);, 		, 	}, 	, 	// funcao para averiguar se uma string acaba com um '.', 	public static boolean endsWithDot(String s) {, 		, 		return s.endsWith(".");, 		, 	}, 	, 	// funcao para averiguar se uma string so tem letras minusculas, 	public static boolean onlyLowerCase(String s) {, 		, 		String sl = s.toLowerCase();, 		return s.equals(sl);, 		, 	}, 	, 	// funcao para converter uma string em letras minusculas, 	public static String stringToLowerCase(String s) {, 		, 		return s.toLowerCase();, 		, 	}, 	, 	// funcao para substituir todas as ocorrencias de varios espacos seguidos por um unico espaco, 	public static String replaceSpaces(String s) {, 		, 		return s.replaceAll("\\s+", " ");, 		, 	}, 	, 	// funcao para capitalizar a primeira letra de cada palavra numa string, 	public static String capitalizeFirstLetter(String s) {, 		, 		String[] splitResult = s.split("\\W"); // array com as palavras da frase da string, 		String newString = ""; , 		, 		for( int i = 0 ; i < splitResult.length ; i++) {, 			, 			newString += (splitResult[i].substring(0, 1).toUpperCase() + splitResult[i].substring(1) + " ");, 			, 		}, 		, 		return newString; // nova string com a primeira letra de cada palavra capitalizada, 		, 	}, 	, 	// funcao para averiguar se uma string e um palindromo, 	public static boolean checkPalindrome(String s) {, 		, 		String reversed_s = new StringBuilder(s).reverse().toString().trim();, 		return s.trim().equals(reversed_s);, 		, 		, 	}, 	, }]
[package aula03;, , import java.util.*;, , public class A03E02 {, , 	public static void main(String[] args) {, 		, 		Scanner sc = new Scanner(System.in);, 		, 		// leitura do paragrafo do teclado, 		System.out.println("Escreva um paragrafo: ");, 		String paragrafo = sc.nextLine();, 		, 		// variavel que contem o numero de palavras do paragrafo, 		int numWords = countWords(paragrafo);, 		, 		// variavel que contem o numero de frases do paragrafo, 		int numSentences = countSentences(paragrafo);, 		, 		// impressao de resultados, 		System.out.println("\nO paragrafo tem " + numWords + " palavras");, 		, 		System.out.println("\nO paragrafo tem " + numSentences + " frases");, 		, 		printSentences(paragrafo);, 		, 		sc.close();, 		, 		, 	}, 	, 	// funcao que conta o numero de palavras de um paragrafo, 	public static int countWords(String s) {, 		, 		// o metodo .split("\\W+") remove um ou mais caracteres nao alfanumericos presentes no paragrafo, 		return s.split("\\W+").length;, 		, 	}, 	, 	public static int countSentences(String s) {, 		, 		// o metodo .replace("...", ".") remove todos os "..." e adiciona um único "." no seu lugar, 		// o metodo .split("[.?!]") remove todos os caracteres da string iguais aos da classe [.?!], 		return s.replace("...", ".").split("[.?!]").length; , 		, 	}, 	, 	//funcao para imprimir as frases, linha a linha, do paragrafo, 	public static void printSentences(String s) {, 		, 		System.out.println("\nImpressao das frases, linha a linha, do paragrafo: ");, 		, 		String[] splitResult = s.replace("...", ".").split("[.?!]"); // array com as palavras da frase da string, 		for ( String s2 : splitResult ) {, 			, 			System.out.println("\n" + s2);, 			, 		}, 		, 	}, , }, , ]
[package aula05;, , import java.lang.Math;, , //testes passados, //gestao de um cruzeiro com cabine com janelas, mais que um quarto etc etc, , public class A05E02 {, , 	public static void main(String[] args) {, 		, 		Ponto p1 = new Ponto(Math.round(Math.random() * 10), Math.round(Math.random() * 10));, 		System.out.println("Ponto 1: " + p1.toString());, 		, 		Figura f1 = new Figura(Math.round(Math.random() * 10), Math.round(Math.random() * 10), "Vermelho");, 		System.out.println("\nFigura 1: " + f1.toString());, 		, 		Figura f2 = new Figura(p1, "Amarelo");, 		System.out.println("\nFigura 2: " + f2.toString());, 		, 		Circulo c1 = new Circulo(Math.round(Math.random() * 10), Math.round(Math.random() * 10), "Verde", Math.round(Math.random() * 10));, 		System.out.println("\nCirculo 1: " + c1.toString() + ", Area: " + c1.area() + ", Perimetro: " + c1.perimetro());, 		, 		Circulo c2 = new Circulo(p1, "Roxo", Math.round(Math.random() * 10));, 		System.out.println("\nCirculo 2: " + c2.toString() + ", Area: " + c2.area() + ", Perimetro: " + c2.perimetro());, 		, 		Retangulo r1 = new Retangulo(Math.round(Math.random() * 10), Math.round(Math.random() * 10), "Cinza", Math.round(Math.random() * 10),Math.round(Math.random() * 10));, 		System.out.println("\nRetangulo 1: " + r1.toString() + ", Area: " + r1.area() + ", Perimetro: " + r1.perimetro());, 		, 		Retangulo r2 = new Retangulo(p1, "Laranja", Math.round(Math.random() * 10), Math.round(Math.random() * 10));, 		System.out.println("\nRetangulo 2: " + r2.toString() + ", Area: " + r2.area() + ", Perimetro: " + r2.perimetro());, 		, 		// Como um quadrado e um retangulo, podemos criar um retangulo utilizado a classe quadrado, 		Retangulo r3 = new Quadrado(p1, "Rosa", Math.round(Math.random() * 10));, 		System.out.println("\nRetangulo 3: " + r3.toString() + ", Area: " + r3.area() + ", Perimetro: " + r3.perimetro());, 		, 		Retangulo q1 = new Quadrado(Math.round(Math.random() * 10), Math.round(Math.random() * 10), "Azul", Math.round(Math.random() * 10));, 		System.out.println("\nQuadrado 1: " + q1.toString() + ", Area: " + q1.area() + ", Perimetro: " + q1.perimetro());, 		, 		Retangulo q2 = new Quadrado(p1, "Preto", Math.round(Math.random() * 10));, 		System.out.println("\nQuadrado 2: " + q2.toString() + ", Area: " + q2.area() + ", Perimetro: " + q2.perimetro());, 		, 		if(c1.intersectsWith(c2)) {, 			System.out.println("Os circulos 1 e 2 intersetam-se.");, 		} else {, 			System.out.println("Os circulos 1 e 2 nao se intersetam.");, 		}, 		, 	}, , }]
[package aula05;, , public class Data {, 	private int dia;, 	private int mes;, 	private int ano;, 	, 	public Data(int dia, int mes, int ano) {, 		this.dia = dia;, 		this.mes = mes;, 		this.ano = ano;, 	}, 	, 	, 	@Override, 	public String toString() {, 		return "(" + dia + "/" + mes + "/" + ano + ")";, 	}, 	public int getDia() {, 		return dia;, 	}, 	public void setDia(int dia) {, 		this.dia = dia;, 	}, 	public int getMes() {, 		return mes;, 	}, 	public void setMes(int mes) {, 		this.mes = mes;, 	}, 	public int getAno() {, 		return ano;, 	}, 	public void setAno(int ano) {, 		this.ano = ano;, 	}, }]
[package aula05;, , import java.lang.Math;, , public class Ponto {, 	private double x = 0.0;, 	private double y = 0.0;, 	, 	public Ponto(double x, double y) {, 		this.x = x;, 		this.y = y;, 	}, , 	@Override, 	public String toString() {, 		return "(" + x + ", " + y + ")";, 	}, 	, 	@Override, 	public boolean equals(Object obj) {, 		if (this == obj), 			return true;, 		if (obj == null), 			return false;, 		if (getClass() != obj.getClass()), 			return false;, 		Ponto other = (Ponto) obj;, 		if (x != other.x), 			return false;, 		if (y != other.y), 			return false;, 		return true;, 	}, 	, 	, 	, 	public double getX() {, 		return x;, 	}, , 	public void setX(double x) {, 		this.x = x;, 	}, , 	public double getY() {, 		return y;, 	}, , 	public void setY(double y) {, 		this.y = y;, 	}, , 	public double distance(Ponto p) {, 		return Math.sqrt(Math.pow((this.x - p.x), 2) + Math.pow((this.y - p.y), 2));, 	}, , }]
[package aula05;, , public class Retangulo extends Figura {, 	, 	private double comprimento;, 	private double largura;, , 	public Retangulo(double x, double y, String cor, double c, double l) {, 		super(x, y, cor);, 		this.comprimento = c;, 		this.largura = l;, 		, 	}, , 	public Retangulo(Ponto p, String cor, double c, double l) {, 		super(p, cor);, 		this.comprimento = c;, 		this.largura = l;, 	}, , 	@Override, 	public String toString() {, 		return super.toString() + ", Comprimento: " + comprimento + ", Largura: " + largura;, 	}, , 	public double getComprimento() {, 		return comprimento;, 	}, , 	public void setComprimento(double comprimento) {, 		this.comprimento = comprimento;, 	}, , 	public double getLargura() {, 		return largura;, 	}, , 	public void setLargura(double largura) {, 		this.largura = largura;, 	}, 	, 	public double area() {, 		return comprimento * largura;, 	}, 	, 	public double perimetro() {, 		return 2 * comprimento + 2 * largura;, 	}, 	, }]
[package aula05;, , public class Figura {, 	private Ponto centro;, 	private String cor;, 	, 	public Figura(double x, double y, String cor) {, 		this.centro = new Ponto(x, y);, 		this.cor = cor;, 	}, 	, 	public Figura(Ponto p, String cor) {, 		this.centro = p;, 		this.cor = cor;, 	}, , 	@Override, 	public String toString() {, 		return "Centro: " + centro + ", Cor: " + cor;, 	}, , 	public Ponto getCentro() {, 		return centro;, 	}, , 	public void setCentro(Ponto centro) {, 		this.centro = centro;, 	}, , 	public String getCor() {, 		return cor;, 	}, , 	public void setCor(String cor) {, 		this.cor = cor;, 	}, 	, 	, 	, 	, , }]
[package aula05;, , public class A05E01 {, , 	public static void main(String[] args) {, 		, 		Aluno al = new Aluno("Andreia Melo", 9855678, new Data(18, 7, 1990), new Data(1, 9, 2014));, 		Bolseiro bls = new Bolseiro("Igor Santos", 8976543, new Data(11, 5, 1985));, 		, 		bls.setBolsa(745);, 		, 		System.out.println("\nAluno: " + al.getNome());, 		System.out.println(al);, 		, 		System.out.println("\nBolseiro: " + bls.getNome() + ", N Mec: " + bls.getMyNMec() + ", Bolsa: " + bls.getBolsa());, 		System.out.println(bls);, 		, 		, , 	}, , }]
[package aula05;, , public class A05E03 {, , 	public static void main(String[] args) {, 		, 		Conjunto c1 = new Conjunto();, 		c1.insert(4); c1.insert(7); c1.insert(6); c1.insert(5); c1.insert(100); c1.insert(100);, 		Conjunto c2 = new Conjunto();, 		int[] test = { 7, 3, 2, 5, 4, 6, 7};, 		for (int el : test) c2.insert(el);, 		c2.remove(3); c2.remove(5); c2.remove(6); c2.insert(100);, 		System.out.println(c1);, 		System.out.println(c2);, 		System.out.println("Número de elementos em c1: " + c1.size());, 		System.out.println("Número de elementos em c2: " + c2.size());, 		System.out.println("c1 contém 6?: " + ((c1.contains(6) ? "sim" : "não")));, 		System.out.println("c2 contém 6?: " + ((c2.contains(6) ? "sim" : "não")));, 		System.out.println("União:" + c1.unir(c2));, 		System.out.println("Interseção:" + c1.intersect(c2));, 		System.out.println("Diferença:" + c1.subtrair(c2));, 		c1.empty();, 		System.out.println("c1:" + c1);, , 	}, }]
[package aula05;, , public class Circulo extends Figura {, 	, 	private double raio = 1.0;, , 	public Circulo(double x, double y, String cor, double raio) {, 		super(x, y, cor);, 		this.raio = raio;, 	}, , 	public Circulo(Ponto p, String cor, double raio) {, 		super(p, cor);, 		this.raio = raio;, 	}, , 	@Override, 	public String toString() {, 		return super.toString() + ", Raio: " + raio;, 	}, , 	public double getRaio() {, 		return raio;, 	}, , 	public void setRaio(double raio) {, 		this.raio = raio;, 	}, 	, 	public double area() {, 		return Math.PI * raio * raio;, 	}, 	, 	public double perimetro() {, 		return 2 * Math.PI * raio; , 	}, 	, 	public boolean intersectsWith(Circulo c) {, 		if(this.getCentro().distance(c.getCentro()) <= this.raio + c.raio){, 			return true;, 		} else {, 			return false;, 		}, 	}, 	, 	, 	, , }]
[package aula05;, , public class Quadrado extends Retangulo {, , 	public Quadrado(double x, double y, String cor, double l) {, 		super(x, y, cor, l, l);, 	}, , 	public Quadrado(Ponto p, String cor, double l) {, 		super(p, cor, l, l);, 	}, 	, 	@Override, 	public String toString() {, 		return super.toString();, 	}, , }]
[package aula05;, , import java.util.Arrays;, , public class Conjunto {, 	, 	private int[] array = new int[100]; // array com a dimensao generica de 100 , 	private static int contador = 0; // variavel estatica, comum a todos os objetos da classe 'Conjunto', 	, 	, 	public void insert(int n) {, 		, 		// ciclo para averiguar se o inteiro 'n' esta no array, 		for(int i = 0 ; i <= contador ; i++) {, 			if(n == array[i]) {, 				return;, 			}, 		}, 		, 		// adicao do inteiro 'n' ao array, 		array[contador] = n;, 		contador++;, 		, 	}, 	, 	// metodo para averiguar se um inteiro 'n' esta contido no conjunto, 	public boolean contains(int n) {, 		for(int i = 0; i < contador; i++) {, 			if(array[i] == n) {, 				return true;, 			}, 		}, 		return false;, 	}, 	, 	// metodo para retirar um inteiro 'n' ao conjunto, 	public void remove(int n) {, 		// ciclo para averiguar se o inteiro 'n' esta no conjunto, 		for(int i = 0; i < contador; i++) {, 			if(array[i] == n) { // em caso afirmativo:, 				// ciclo para deslocar todos os inteiros seguintes a 'n' uma posicao para a esquerda, 				for(int c = i; c < contador; c++) {, 					array[c] = array[c+1];, 				}, 			}, 		}, 		contador--;, 	}, 	, 	// metodo para apagar todos os elementos, 	public void empty() {, 		for(int i = 0 ; i < contador ; i++) {, 			array[i] = 0;, 		}, 		contador = 0;, 	}, 	, 	, 	, 	, 	, 	public static int getContador() {, 		return contador;, 	}, , 	public int size() {, 		int c = 0;, 		for(int i = 0; i < contador; i++) {, 			if(this.array[i] != 0) {, 				c++;, 			}, 		}, 		return c;, 	}, 	, 	public int[] getArray() {, 		return array;, 	}, , 	public void setArray(int[] array) {, 		this.array = array;, 	}, , 	public Conjunto unir(Conjunto c) {, 		Conjunto c1 = new Conjunto();, 		, 		// ciclo para preencher o novo conjunto com os elementos do conjunto 'this', 		for(int i = 0; i < contador; i++) {, 			c1.insert(array[i]);, 		}, 		, 		// ciclo para adicionar elementos do conjunto 'c' ao novo conjunto que nao estejam repetidos, 		for(int i = 0; i < c.getContador(); i++) {, 			if(this.contains(c.getArray()[i]) == false) {, 				c1.insert(c.getArray()[i]);, 			}, 		}, 		, 		return c1;, 	}, 	, 	public Conjunto subtrair(Conjunto c) {, 		Conjunto c1 = new Conjunto();, 		, 		// ciclo para preencher o novo conjunto com os elementos do conjunto 'this', 		for(int i = 0; i < contador; i++) {, 			c1.insert(array[i]);, 		}, 		, 		// ciclo para retirar ao novo conjunto elementos do conjunto 'c' repetidos, 		for(int i = 0; i < c.getContador(); i++) {, 			if(this.contains(c.getArray()[i])) {, 				c1.remove(c.getArray()[i]);, 			}, 		}, 		, 		return c1;, 	}, 	, 	public Conjunto intersect(Conjunto c) {, 		Conjunto c1 = new Conjunto();, 		, 		for(int i = 0; i < contador; i++) {, 			if(c.contains(array[i]) && c1.contains(array[i]) == false) {, 				c1.insert(array[i]);, 			}, 		}, 		, 		return c1;, 	}, 	, 	, 	, 	// metodo toString() para imprimir um objeto, 	@Override, 	public String toString() {, 		String numeros = " ";, 		for(int i = 0; i < contador; i++) {, 			if(this.array[i] != 0) {, 				numeros += this.array[i] + " ";, 			}, 		}, 		return "[" + numeros + "]";, 	}, 	, 	, 	, 	, , }]
[package aula05;, , public class Pessoa {, 	, 	private String nome;, 	private int cc;, 	private Data dataNasc;, 	, 	public Pessoa(String nome, int cc, Data dataNasc) {, 		this.nome = nome;, 		this.cc = cc;, 		this.dataNasc = dataNasc;, 	}, 	public Pessoa(String nome) {, 		this.nome = nome;, 	}, , 	@Override, 	public String toString() {, 		return "Nome: " + nome + ", CC: " + cc + ", Data de Nascimento: " + dataNasc;, 	}, , 	public String getNome() {, 		return nome;, 	}, , 	public void setNome(String nome) {, 		this.nome = nome;, 	}, , 	public int getCc() {, 		return cc;, 	}, , 	public void setCc(int cc) {, 		this.cc = cc;, 	}, , 	public Data getDataNasc() {, 		return dataNasc;, 	}, , 	public void setDataNasc(Data dataNasc) {, 		this.dataNasc = dataNasc;, 	}, 	, 	, , 	, }]
[package aula05;, , public class Bolseiro extends Aluno {, 	, 	private int bolsa = 0;, , 	public Bolseiro(String nome, int cc, Data dataNasc, Data dataIns, int bolsa) {, 		super(nome, cc, dataNasc, dataIns);, 		this.bolsa = bolsa;, 	}, , 	public Bolseiro(String nome, int cc, Data dataNasc, int bolsa) {, 		super(nome, cc, dataNasc);, 		this.bolsa = bolsa;, 	}, 	, 	public Bolseiro(String nome, int cc, Data dataNasc) {, 		super(nome, cc, dataNasc);, 		this.bolsa = bolsa;, 	}, , , 	@Override, 	public String toString() {, 		return super.toString() + ", Bolsa: " + bolsa;, 	}, , 	public int getBolsa() {, 		return bolsa;, 	}, , 	public void setBolsa(int bolsa) {, 		this.bolsa = bolsa;, 	}, 	, 	, 	, 	, , }]
[package aula05;, , import java.util.Calendar;, , public class Aluno extends Pessoa {, 	, 		private Data dataIns;, 		private static int nMec = 100;, 		private int myNMec;, 		, 	, , 	public Aluno(String nome, int cc, Data dataNasc, Data dataIns) {, 		super(nome, cc, dataNasc);, 		this.dataIns = dataIns;, 		this.myNMec = nMec;, 		nMec++;, 		, 	}, 	, 	public Aluno(String nome, int cc, Data dataNasc) {, 		super(nome, cc, dataNasc);, 		this.myNMec = nMec;, 		nMec++;, 		Calendar cal = Calendar.getInstance();, 		this.dataIns = new Data(cal.get(Calendar.DAY_OF_MONTH), cal.get(Calendar.MONTH), cal.get(Calendar.YEAR));, 		, 	}, , 	@Override, 	public String toString() {, 		return super.toString() + ", Data de Inscricao: " + dataIns + ", N Mec: " + myNMec;, 	}, , , 	public Data getDataIns() {, 		return dataIns;, 	}, , , 	public void setDataIns(Data dataIns) {, 		this.dataIns = dataIns;, 	}, , , 	public int getMyNMec() {, 		return myNMec;, 	}, , , 	public void setMyNMec(int myNMec) {, 		this.myNMec = myNMec;, 	}, 	, 	, 	, , }]
[package aula01;, import java.util.Scanner;, , public class A01E02 {, , 	public static void main(String[] args) {, 		, 		Scanner sc = new Scanner(System.in);, 		, 		double km, miles; // declaracao de variaveis, 		, 		// pedido da distancia pelo teclado, 		System.out.print("Insira distância em km: "); , 		km = sc.nextDouble(); // atribuicao do valor lido, 		, 		miles = km / 1.609; // formula de conversao, 		, 		System.out.println("A distância em milhas é " + miles); // impressao final, 		, 		sc.close();, 		, 		, , 	}, , }]
[package aula01;, import java.util.Scanner;, import java.lang.Math;, , public class A01E06 {, , 	public static void main(String[] args) {, 		, 		Scanner sc = new Scanner(System.in);, 		, 		double x1, y1, x2, y2, d; // atribuicao de variaveis, , 		//  leitura das coordenadas do ponto (1), 	    System.out.println("Coordenadas do ponto (1): ");, 	    System.out.print("Abcissa 1: ");, 	    x1 = sc.nextDouble();, 	    System.out.print("Ordenada 1: ");, 	    y1 = sc.nextDouble();, 	    , 	    //  leitura das coordenadas do ponto (2), 	    System.out.println("Coordenadas do ponto (2): ");, 	    System.out.print("Abcissa 2: ");, 	    x2 = sc.nextDouble();, 	    System.out.print("Ordenada 2: ");, 	    y2 = sc.nextDouble();, , 	    // calculo da distancia, 	    d = Math.sqrt( (x1 - x2) * (x1 - x2)  +  (y1 - y2) * (y1 - y2) );, 	    , 	    // impressao de resultados, 	    System.out.println("A distância entre os pontos é " + d);, , 	    sc.close();, , 	}, , }]
[package aula01;, import java.util.Scanner;, , , public class A01E05 {, , 	public static void main(String[] args) {, 		, 		Scanner sc = new Scanner(System.in);, 		, 		int seg, min, hr; // atribuicao de variaveis, 		, 		// leitura do tempo em segundos, 		System.out.print("Insira um tempo em segundos: ");, 		seg = sc.nextInt();, 		, 		// calculo do numero de horas, 		hr = (int)(seg / 3600); , 	    seg = seg - hr * 3600; // tempo que sobra em segundos, 	    , 	    // calculo do numero de minutos, 	    min = (int)(seg / 60);, 	    seg = seg - min * 60; // numero de segundos, 	    , 	    // impressao de resultados, 	    System.out.printf("%02d:%02d:%02d\n", hr,min,seg);, 	    , 	    sc.close();, , 	}, , }]
[package aula01;, , public class A01E01 {,   public static void main(String[] args){,     System.out.println("O nosso primeiro programa!");,     ,   },   ,   , }]
[package aula01;, import java.util.Scanner;, import java.lang.Math;, , public class A01E07 {, , 	public static void main(String[] args) {, 		, 		Scanner sc = new Scanner(System.in);, 		, 		// atribuicao de variaveis, 	    double a, b, c, g;, 	    , 	    // leitura do cateto A, 	    System.out.print("Cateto A: ");, 	    a = sc.nextInt();, 	    , 	    // leitura do cateto B, 	    System.out.print("Cateto B: ");, 	    b = sc.nextInt();, 	    , 	    // calculo da hipotenusa C, 	    c = Math.sqrt( a * a + b * b );, 	    , 	    // calculo do angulo (em graus) de A com C, 	    g = Math.toDegrees(Math.atan( b / a)); // usei a funcao arco-tangente, 	    , 	    // impressao de resultados, 	    System.out.println("Hipotenusa: " + c);, 	    System.out.println("Ângulo (em graus) do cateto A com a hipotenusa C: " + g);, 	    , 	    , 	    sc.close();, , 	}, , }]
[package aula01;, import java.util.Scanner;, , public class A01E04 {, , 	public static void main(String[] args) {, 		, 		Scanner sc = new Scanner(System.in);, 		, 		double v1, v2, vmf; // declaracao de variaveis, 		, 		// primeira leitura do teclado, 		System.out.print("Velocidade média do primeiro percurso: ");, 		v1 = sc.nextDouble();, 		, 		// segunda leitura do teclado, 		System.out.print("Velocidade média do segundo percurso: ");, 		v2 = sc.nextDouble();, 		, 		// formula de calculo, 		vmf = ( 2 * v1 * v2 ) / ( v1 + v2 );, 		, 		// impressao do resultado com duas casas decimais, 		System.out.printf("A velocidade média final é de %.2f", vmf);, 		, 		, 		sc.close();, 	}, , }]
[package aula01;, , import java.util.Scanner;, , public class A01E03 {, , 	public static void main(String[] args) {, 		, 		Scanner sc = new Scanner(System.in);, 		, 		double celsius, farenheit; // declaracao de variaveis, 		, 		// leitura da temperatura no teclado, 	    System.out.print("Insira uma temperatura em graus Celsius: ");, 	    celsius = sc.nextDouble(); // atribuicao do valor lido, 	    , 	    farenheit = 1.8 * celsius + 32; // formula de conversao, 	    , 	    // impressao final, 	    System.out.println(celsius + " graus Celsius são " + farenheit + " graus Farenheit.");, 	    , 	    sc.close();, , 	}, , }]
[package aula04;, , public class Emprestimo {, , 	private int nMec;, 	private int id;, 	, 	public Emprestimo(int nMec, int id){, 		this.nMec = nMec;, 		this.id = id;, 	}, , 	public int getnMec() {, 		return nMec;, 	}, , 	public void setnMec(int nMec) {, 		this.nMec = nMec;, 	}, , 	//@Override, 	public String toString() {, 		return "Emprestimo (nMec: " + nMec + ", id: " + id + ")";, 	}, , 	public int getId() {, 		return id;, 	}, , 	public void setId(int id) {, 		this.id = id;, 	}, 	, 	, 	, }]
[package aula04;, , public class Livro {, 	private static int id = 100;, 	private String titulo;, 	private String tipo = "NORMAL";, 	private int myId;, 	private boolean isBorrowed = false;, 	, 	public Livro(String titulo, String tipo) {, 		this.titulo = titulo;, 		if(tipo.equals("NORMAL")) {, 			this.tipo = tipo;, 			this.isBorrowed = false;, 		} else if(tipo.equals("CONDICIONAL")) {, 			this.tipo = tipo;, 			this.isBorrowed = true;, 		} else {, 			System.out.println("Tipo invalido!");, 			this.tipo = "NORMAL";, 		}, 		this.myId = id;, 		id++;, 	}, 	, 	public Livro(String titulo) {, 		this.titulo = titulo;, 		this.myId = id;, 		this.isBorrowed = false;, 		id++;, 	}, 	, 	@Override, 	public String toString() {, 		return "Livro (Titulo: " + titulo + ", Tipo: " + tipo + ", myId: " + myId + ")";, 	}, , 	public String getTitulo() {, 		return titulo;, 	}, , 	public void setTitulo(String titulo) {, 		this.titulo = titulo;, 	}, , 	public String getTipo() {, 		return tipo;, 	}, , 	public void setTipo(String tipo) {, 		this.tipo = tipo;, 	}, , 	public int getMyId() {, 		return myId;, 	}, , 	public void setMyId(int myId) {, 		this.myId = myId;, 	}, , 	public boolean isBorrowed() {, 		return isBorrowed;, 	}, , 	public void setBorrowed(boolean isBorrowed) {, 		this.isBorrowed = isBorrowed;, 	}, 	, 	, 	, 	, 	, 	, 	, 	, }]
[package aula04;, import java.lang.Math;, , , public class Ponto {, 	, 	private double x;, 	private double y;, 	, 	public Ponto (double x, double y) {, 		, 		System.out.println("A criar um ponto");, 		this.x = x;, 		this.y = y;, 		, 	}, , 	//@Override, 	public String toString() {, 		return "Ponto (x= " + x + ", y= " + y + ")\n";, 	}, , 	public double getX() {, 		return x;, 	}, , 	public void setX(double x) {, 		this.x = x;, 	}, , 	public double getY() {, 		return y;, 	}, , 	public void setY(double y) {, 		this.y = y;, 	}, 	, 	public double pointsDistance(Ponto p) {, 		// este metodo calcula a distancia entre dois pontos utilizando o Teorema de Pitagoras, 		return Math.sqrt(Math.pow((this.x - p.x), 2) + Math.pow((this.y - p.y), 2));, 	}, 	, 	, }]
[package aula04;, , public class Retangulo {, 	, 	private double comprimento;, 	private double largura;, 	private Ponto centro;, 	private String cor;, 	, 	public Retangulo(double comprimento, double largura, Ponto centro, String cor) {, 		System.out.println("A criar um retangulo...");, 		this.comprimento = comprimento;, 		this.largura = largura;, 		this.centro = centro;, 		this.cor = cor;, 	}, 	, 	public Retangulo(double comprimento, double largura) {, 		System.out.println("A criar um retangulo...");, 		this.comprimento = comprimento;, 		this.largura = largura;, 	}, 	, 	public Retangulo(double comprimento, double largura, Ponto centro) {, 		System.out.println("A criar retangulo...");, 		this.comprimento = comprimento;, 		this.largura = largura;, 		this.centro = centro;, 	}, , 	//@Override, 	public String toString() {, 		return "Retangulo [comprimento=" + comprimento + ", largura=" + largura + ", centro=" + centro + ", cor=" + cor + "]";, 	}, , 	public double getComprimento() {, 		return comprimento;, 	}, , 	public void setComprimento(double comprimento) {, 		this.comprimento = comprimento;, 	}, , 	public double getLargura() {, 		return largura;, 	}, , 	public void setLargura(double largura) {, 		this.largura = largura;, 	}, , 	public Ponto getCentro() {, 		return centro;, 	}, , 	public void setCentro(Ponto centro) {, 		this.centro = centro;, 	}, , 	public String getCor() {, 		return cor;, 	}, , 	public void setCor(String cor) {, 		this.cor = cor;, 	}, 	, 	// metodo para calcular a area, 	public double getArea() {, 		return largura * comprimento;, 	}, 	, 	// metodo para calcular o perimetro, 	public double getPerimetro() {, 		return 2 * largura + 2 * comprimento;, 	}, 	, 	// metodo para calcular a diagonal, 	public double getDiagonal() {, 		return Math.sqrt(Math.pow(largura, 2) + Math.pow(comprimento, 2));, 	}, 	, 	, 	, 	, , }]
[package aula04;, import java.lang.Math;, , public class A04E01 {, , 	public static void main(String[] args) {, 		, 		// primeiro ponto, 		System.out.println("Ponto 1");, 		Ponto p1 = new Ponto(Math.round(Math.random() * 10), Math.round(Math.random() * 10));, 		System.out.println("Ponto 1 to String: " + p1.toString());, 		, 		// segundo ponto, 		System.out.println("Ponto 2");, 		Ponto p2 = new Ponto(Math.round(Math.random() * 10), Math.round(Math.random() * 10));, 		System.out.println("Ponto 2 to String: " + p2.toString());, 		, 		// primeiro circulo, 		System.out.println("Circulo 1");, 		Circulo c1 = new Circulo(p1, Math.round(Math.random() * 10), "preto");, 		System.out.println("Circulo 1 to String: " + c1.toString());, 		, 		// segundo circulo, 		System.out.println("Circulo 2");, 		Circulo c2 = new Circulo(Math.round(Math.random() * 10), Math.round(Math.random() * 10), Math.round(Math.random() * 10), "amarelo");, 		System.out.println("Circulo 2 to String: " + c2.toString());, 		, 		// alterar a cor do primeiro circulo, 		c1.setCor("vermelho");, 		System.out.println("Cor do primeiro circulo: " + c1.getCor());, 		, 		// alterar o raio do segundo circulo, 		c2.setRaio(3.5);, 		System.out.println("Raio do segundo circulo: " + c2.getRaio() + "\n");, 		, 		// circulo 1 e 2 depois das alteracoes, 		System.out.println("Circulo 1 to String: " + c1.toString());, 		System.out.println("Circulo 2 to String: " + c2.toString());, 		, 		// area dos circulos, 		System.out.println("Area do circulo 1: " + c1.getArea());, 		System.out.println("Area do circulo 2: " + c2.getArea() + "\n");, 		, 		// perimetro dos circulos, 		System.out.println("Perimetro do circulo 1: " + c1.getPerimetro());, 		System.out.println("Perimetro do circulo 2: " + c2.getPerimetro() + "\n");, 		, 		// averiguar se os circulos se intersetam, 		boolean intersect = c1.intersectCircles(c2);, 		if (intersect) {, 			System.out.println("Os circulos intersectam-se.");, 		} else {, 			System.out.println("Os circulos nao se intersectam.");, 		}, 		, 		// criar um quadrado, 		System.out.println("\nQuadrado 1: ");, 		Quadrado q1 = new Quadrado(p1, Math.round(Math.random() * 10), "vermelho");, 		System.out.println("Quadrado 1 to String: " + q1.toString());, 		, 		// criar o segundo quadrado utilizando um construtor diferente, 		// este quadrado nao tem cor, 		System.out.println("\nQuadrado 2: ");, 		Quadrado q2 = new Quadrado(Math.round(Math.random() * 10), Math.round(Math.random() * 10), Math.round(Math.random() * 10));, 		System.out.println("Quadrado 2 to String: " + q2.toString());, 		, 		// criar um terceiro quadrado utilizando outro construtor, 		// este quadrado so tem um valor para o lado, 		System.out.println("\nQuadrado 3: ");, 		Quadrado q3 = new Quadrado(Math.round(Math.random() * 10));, 		System.out.println("Quadrado 3 to String: " + q3.toString());, 		, 		// calcular as areas dos quadrados, 		System.out.println("\nArea do quadrado 1: " + q1.getArea());, 		System.out.println("Area do quadrado 2: " + q2.getArea());, 		System.out.println("Area do quadrado 3: " + q3.getArea());, 		, 		// calcular os perimetros dos quadrados, 		System.out.println("\nPerimetro do quadrado 1: " + q1.getPerimetro());, 		System.out.println("Perimetro do quadrado 2: " + q2.getPerimetro());, 		System.out.println("Perimetro do quadrado 3: " + q3.getPerimetro());, 		, 		// calcular as diagonais dos quadrados, 		System.out.println("\nDiagonal do quadrado 1: " + q1.getDiagonal());, 		System.out.println("Diagonal do quadrado 2: " + q2.getDiagonal());, 		System.out.println("Diagonal do quadrado 3: " + q3.getDiagonal());, 		, 		// criar um novo retangulo, 		System.out.println("\nRetangulo 1: ");, 		Retangulo r1 = new Retangulo(Math.round(Math.random() * 10), Math.round(Math.random() * 10), p1, "vermelho");, 		System.out.println("Retangulo 1 to String: " + r1.toString());, 		, 		// criar um segundo retangulo, 		// este retangulo nao tem centro nem cor, 		System.out.println("\nRetangulo 2: ");, 		Retangulo r2 = new Retangulo(Math.round(Math.random() * 10), Math.round(Math.random() * 10));, 		System.out.println("Retangulo 2 to String: " + r2.toString());, 		, 		// criar um terceiro retangulo, 		System.out.println("\nRetangulo 3: ");, 		Retangulo r3 = new Retangulo(Math.round(Math.random() * 10), Math.round(Math.random() * 10), p2);, 		System.out.println("Retangulo 3 to String: " + r3.toString());, 		, 		// mudar o comprimento do primeiro retangulo, 		System.out.println("\nMudar o comprimento do primeiro retangulo: ");, 		System.out.println("Antigo comprimento: " + r1.getComprimento());, 		r1.setComprimento(Math.round(Math.random() * 10));, 		System.out.println("Novo comprimento: " + r1.getComprimento());, 		, 		// area dos retangulos, 		System.out.println("\nÁrea do retangulo 1: " + r1.getArea());, 		System.out.println("Área do retangulo 2: " + r2.getArea());, 		System.out.println("Área do retangulo 3: " + r3.getArea());, 		, 		// perimetro dos retangulos, 		System.out.println("\nPerimetro do retangulo 1: " + r1.getPerimetro());, 		System.out.println("Perimetro do retangulo 2: " + r2.getPerimetro());, 		System.out.println("Perimetro do retangulo 3: " + r3.getPerimetro());, 		, 		// diagonal dos retangulos, 		System.out.println("\nDiagonal do retangulo 1: " + r1.getDiagonal());, 		System.out.println("Diagonal do retangulo 2: " + r2.getDiagonal());, 		System.out.println("Diagonal do retangulo 3: " + r3.getDiagonal());, 		, 	}, 	, }]
[package aula04;, , public class Utilizador {, 	private String nome;, 	private String curso;, 	private int nMec;, 	private int livrosEmprestados = 0;, 	, 	public Utilizador(String nome, int nMec, String curso) {, 		this.nome = nome;, 		this.nMec = nMec;, 		this.curso = curso;, 		this.livrosEmprestados = 0;, 	}, , 	@Override, 	public String toString() {, 		return "Utilizador (Nome: " + nome + ", Curso: " + curso + ", nMec: " + nMec + ")";, 	}, , 	public int getLivrosEmprestados() {, 		return livrosEmprestados;, 	}, , 	public void setLivrosEmprestados(int livrosEmprestados) {, 		this.livrosEmprestados = livrosEmprestados;, 	}, 	, 	public void emprestaLivros(int n) {, 		this.livrosEmprestados += n;, 	}, , 	public String getNome() {, 		return nome;, 	}, , 	public void setNome(String nome) {, 		this.nome = nome;, 	}, , 	public String getCurso() {, 		return curso;, 	}, , 	public void setCurso(String curso) {, 		this.curso = curso;, 	}, , 	public int getnMec() {, 		return nMec;, 	}, , 	public void setnMec(int nMec) {, 		this.nMec = nMec;, 	}, 	, 	, 	, }]
[package aula04;, , import java.util.*;, , public class A04E03 {, , 	public static void main(String[] args) {, 		, 		//----------------------------------NOTAS---------------------------------//, 		// 1 - Utilizei listas para armazenar os objetos criados ao longo do programa, , 		//     pois considerei ser mais facil e dinamico, 		// 2 - Ao ler strings do teclado, por favor utilize apenas uma palavra., 		//     Nao sei porque, mas o metodo sc.nextLine(); nao estava a funcionar corretamente,, 		//     por isso utilizei o metodo sc.next();, 		// 3 - Criei uma classe adicional, a classe "Emprestimo", para averiguar se a organizacao dos dados, 		//     ficaria mais simplificada, 		, 		, 		Scanner sc = new Scanner(System.in);, 		, 		// inicializacao de variaveis, 		int nAlunos = 0, nLivros = 0, nEmprestimos = 0;, 		, 		// lista para os livros, 		List<Livro> catalogo = new ArrayList<Livro>();, 				, 		// lista para os alunos, 		List<Utilizador> alunos = new ArrayList<Utilizador>();, 		, 		List<Emprestimo> emprestimos = new ArrayList<Emprestimo>();, 		, 		// lista para os emprestimos, 		, 		// atribuicao de variaveis, 		String nome, curso, titulo, tipo;, 		int nMec, id;, 		boolean controlo = false;, 		, 		int op = 0;, 		while(op != 9) {, 			op = menu();, 			, 			switch(op) {, 			case 9:, 				System.out.println("\nObrigado por utilizar a nossa biblioteca!");, 				break;, 				, 			case 1:, 				, 				System.out.println("\nInscrever utilizador: ");, 				// leitura de dados do teclado, 				System.out.print("Nome: ");, 				nome = sc.next();, 				, 				System.out.print("Curso: ");, 				curso = sc.next();, 				, 				System.out.print("N mec: ");, 				nMec = sc.nextInt();, 				, 				// adicionar o novo aluno ao array, 				alunos.add(new Utilizador(nome, nMec, curso)); , 				System.out.println("Aluno adicionado! " + alunos.get(nAlunos));, 				nAlunos++;, 				, 				break;, 				, 			case 2:, 				, 				if(alunos.size() > 0) {, 					System.out.println("\nRemover aluno:");, 					System.out.print("N Mec: ");, 					nMec = sc.nextInt();, 					controlo = false;, 					for(int i = 0; i < alunos.size(); i++) {, 						if(alunos.get(i).getnMec() == nMec) {, 							alunos.remove(i);, 							nAlunos--;, 							controlo = true;, 							break;, 						}, 					}, 					if(controlo) {, 						System.out.println("\nAluno removido com sucesso!");, 					} else {, 						System.out.println("\nN Mec nao registado!");, 					}, 				} else {, 					System.out.println("\nNenhum utilizador registado.");, 				}, 				break;, 					, 			case 3:, 				, 				if(alunos.size() > 0) {, 					System.out.println("\nLista de utilizadores:");, 					for(int i = 0 ; i < alunos.size() ; i++) {, 						System.out.println("Aluno " + (i+1) + " " + alunos.get(i));, 					}, 				} else {, 					System.out.println("\nNenhum utilizador registado!");, 				}, 				break;, 				, 			case 4:, 				, 				System.out.println("\nRegistar novo livro:");, 				, 				System.out.print("Titulo: ");, 				titulo = sc.next();, 				, 				System.out.print("Tipo (NORMAL ou CONDICIONAL): ");, 				tipo = sc.next().toUpperCase();, 				, 				// adicionar livro a lista de livros, 				catalogo.add(new Livro(titulo, tipo));, 				System.out.println("Livro adicionado! " + catalogo.get(nLivros).toString());, 				nLivros++;, 				break;, 				, 			case 5:, 				, 				System.out.println("\nLista de Livros");, 				if(catalogo.size() > 0) {, 					for(int i = 0; i < catalogo.size(); i++) {, 						System.out.println("Livro " + catalogo.get(i).getMyId() + ": " + catalogo.get(i));, 					}, 				} else {, 					System.out.println("\nNao existem livros registados.");, 				}, 				break;, 				, 			case 6:, 				, 				controlo = false;, 				if(catalogo.size() == 0 && alunos.size() == 0) {, 					System.out.println("\nNao existem livros nem alunos registados.");, 				} else if (catalogo.size() == 0) {, 					System.out.println("\nNao existem livros registados.");, 				} else if (alunos.size() == 0) {, 					System.out.println("\nNao existem alunos registados.");, 				} else {, 					System.out.println("\nRegistar livro:");, 					, 					System.out.print("N Mec: ");, 					nMec = sc.nextInt();, 					, 					System.out.print("ID do livro: ");, 					id = sc.nextInt();, 					, 					for(Utilizador aluno : alunos) {, 						if(aluno.getnMec() == nMec && aluno.getLivrosEmprestados() < 3) {, 							for(Livro manual : catalogo) {, 								if(manual.getMyId() == id & manual.isBorrowed() == false) {, 									emprestimos.add(new Emprestimo(nMec, id));, 									System.out.println("\nLivro emprestado!");, 									aluno.emprestaLivros(1);, 									manual.setBorrowed(true);, 									nEmprestimos++;, 									controlo = true;, 								} else if(manual.getMyId() == id & manual.isBorrowed() == true) {, 									System.out.println("\nLivro Indisponivel.");, 									controlo = true;, 								}, 							}, 						} else if (aluno.getnMec() == nMec && aluno.getLivrosEmprestados() >= 3) {, 							System.out.println("\nO aluno ja requisitou 3 livros.");, 							controlo = true;, 						}, 					}, 					if (controlo == false) {, 						System.out.println("\nDados invalidos!");, 					}, 				, 					}, 				break;, 				, 			case 7:, 				if(emprestimos.size() == 0) {, 					System.out.println("\nNao existem emprestimos.");, 				} else {, 					controlo = false;, 					System.out.println("\nRemover livro:");, 					, 					System.out.print("N Mec: ");, 					nMec = sc.nextInt();, 					, 					System.out.print("ID do Livro: ");, 					id = sc.nextInt();, 					, 					for(int i = 0 ; i < emprestimos.size(); i++) {, 						if(emprestimos.get(i).getnMec() == nMec && emprestimos.get(i).getId() == id) {, 							controlo = true;, 							emprestimos.remove(i);, 							for(Utilizador aluno : alunos) {, 								if(aluno.getnMec() == nMec) {, 									aluno.emprestaLivros(-1);, 								}, 							}, 							for(Livro manual : catalogo) {, 								if(manual.getMyId() == id) {, 									manual.setBorrowed(false);, 								}, 							}, 							System.out.println("\nLivro devolvido com sucesso!");, 						}, 					}, 					if(controlo == false) {, 						System.out.println("\nDados invalidos!");, 					}, 					, 				}, 				break;, 				, 			case 8:, 				if(catalogo.size() == 0) {, 					System.out.println("\nNao existem livros registados.");, 				} else if (catalogo.size() > 0){, 					System.out.println();, 					for(Livro manual : catalogo) {, 						if(manual.isBorrowed() == false) {, 							System.out.println("Livro " + manual.getMyId() + ": Disponivel");, 						} else if(manual.getTipo().equals("CONDICIONAL")) {, 							System.out.println("Livro " + manual.getMyId() + ": Indisponivel [Tipo: CONDICIONAL]");, 						}, 						, 					}, 					if(emprestimos.size() > 0) {, 						for(int i = 0 ; i < emprestimos.size() ; i++) {, 							System.out.println("Livro " + emprestimos.get(i).getId() + ": Emprestado [N Mec: " + emprestimos.get(i).getnMec() + "]");, 						}, 					}, 				}, 				break;, 			default:, 				System.out.println("\nNao implementado!");, 				break;, 				, 			}, 		}, 		, 		sc.close();, 	}, 	, 	public static int menu() {, 		, 		Scanner sc = new Scanner(System.in);, 		System.out.println("\nBiblioteca de POO\n");, 		System.out.println("1 - inscrever aluno");, 		System.out.println("2 - remover aluno");, 		System.out.println("3 - imprimir lista de utilizadores");, 		System.out.println("4 - registar um novo livro");, 		System.out.println("5 - imprimir lista de livros");, 		System.out.println("6 - emprestar");, 		System.out.println("7 - devolver");, 		System.out.println("8 - verificar disponibilidade");, 		System.out.println("9 - sair");, 		System.out.print("Opcao? ");, 		int op = sc.nextInt();, 		return op;		, 	}, , }]
[package aula04;, import java.lang.Math;, , public class Circulo {, 	, 	private Ponto centro;, 	private double raio;, 	private String cor;, 	, 	public Circulo(Ponto centro, double raio, String cor) {, 		, 		System.out.println("A criar um circulo");, 		this.centro = centro;, 		this.raio = raio;, 		this.cor = cor;, 		, 	}, 	, 	//@Override, 	public String toString() {, 		return "Circulo [centro = " + centro + ", raio = " + raio + ", cor = " + cor + "]\n";, 	}, , 	public Circulo(double x, double y, double raio, String cor) {, 		, 		this.centro = new Ponto(x,y);, 		this.raio = raio;, 		this.cor = cor;, 		, 	}, , 	public Ponto getCentro() {, 		return centro;, 	}, , 	public void setCentro(Ponto centro) {, 		this.centro = centro;, 	}, , 	public double getRaio() {, 		return raio;, 	}, , 	public void setRaio(double raio) {, 		this.raio = raio;, 	}, , 	public String getCor() {, 		return cor;, 	}, , 	public void setCor(String cor) {, 		this.cor = cor;, 	}, 	, 	// metodo para calcular a area, 	public double getArea() {, 		double area = Math.PI * raio * raio;, 		return area;, 	}, 	, 	// metodo para calcular o perimetro, 	public double getPerimetro() {, 		return 2 * Math.PI * raio;, 	}, 	, 	public boolean intersectCircles(Circulo c) {, 		if (this.centro.pointsDistance(c.centro) <= this.raio + c.raio) {, 			return true;, 		} else {, 			return false;, 		}, 	}, 	, }]
[package aula04;, import java.lang.Math;, , public class Quadrado {, 	, 	private Ponto centro;, 	private double lado;, 	private String cor;, 	, 	public Quadrado(Ponto centro, double lado, String cor) {, 		, 		System.out.println("A criar um quadrado");, 		this.centro = centro;, 		this.lado = lado;, 		this.cor = cor;, 		, 	}, 	, 	public Quadrado(double lado) { , 		, 		System.out.println("A criar um quadrado");, 		this.lado = lado; , 		, 	}, 	, 	public Quadrado(double x, double y, double lado) { , 		, 		System.out.println("A criar um quadrado");, 		this.centro = new Ponto(x,y); , 		this.lado = lado; , 		, 	}, , 	//@Override, 	public String toString() {, 		return "Quadrado [centro = " + centro + ", lado = " + lado + ", cor = " + cor + "]";, 	}, , 	public Ponto getCentro() {, 		return centro;, 	}, , 	public void setCentro(Ponto centro) {, 		this.centro = centro;, 	}, , 	public double getLado() {, 		return lado;, 	}, , 	public void setLado(double lado) {, 		this.lado = lado;, 	}, , 	public String getCor() {, 		return cor;, 	}, , 	public void setCor(String cor) {, 		this.cor = cor;, 	}, 	, 	// metodo para calcular a area de um quadrado, 	public double getArea() {, 		return Math.pow(lado, 2);, 	}, 	, 	// metodo para calcular o perimetro de um quadrado, 	public double getPerimetro() {, 		return lado * 4;, 	}, 	, 	// metodo para calcular a diagonal, 	public double getDiagonal() {, 		return Math.sqrt(Math.pow(lado, 2) * 2);, 	}, }]
[package aula04;, , public class A04E02 {, , 	public static void main(String[] args) {, 		, 		// array para armazenar 10 livros, 		Livro catalogo[] = new Livro[10];, 		int nLivros = 0; // variavel de contagem, 		, 		// array para armazenar 10 alunos, 		Utilizador alunos[] = new Utilizador[10];, 		int nUtilizadores = 0;, 		, 		catalogo[nLivros] = new Livro("Java 8", "CONDICIONAL");, 		nLivros++;, 		, 		catalogo[nLivros] = new Livro("POO em Java 8");, 		nLivros++;, 		, 		catalogo[nLivros] = new Livro("Java para totós", "NORMAL");, 		nLivros++;, 		, 		catalogo[2].setTipo("CONDICIONAL");, 		, 		System.out.println("ID: " + catalogo[1].getMyId() + ", " + catalogo[1].getTitulo());, 		, 		alunos[nUtilizadores] = new Utilizador("Catarina Marques", 80232, "MIEGI");, 		nUtilizadores++;, 		, 		alunos[nUtilizadores] = new Utilizador("Joao Silva", 90123, "LEI");, 		nUtilizadores++;, 		, 		alunos[1].setnMec(80123);, 		, 		for(int i = 0; i < nLivros ; i++) {, 			System.out.println(catalogo[i]);, 		}, 		, 		for(Utilizador u : alunos) {, 			if(u == null), 				break;, 			System.out.println(u);, 		}, 		, 		, 		, 		, , 	}, , }]
[package aula06;, , import java.util.*;, import java.lang.Math;, , public class A06E01 { // igual à entidade "Jogo" pedido no enunciado, , 	public static void main(String[] args) {, 		, 		Scanner sc = new Scanner(System.in);, 		, 		System.out.println("\nJogo de futebol robotico");, 		, 		// criar equipa 1, 		System.out.println("\nEquipa 1:");, 		System.out.print("  Nome: ");, 		String nome = sc.nextLine();, 		System.out.print("  Responsavel: ");, 		String nomeR = sc.nextLine();, 		Equipa equipa1 = new Equipa(nome, nomeR);, 		, 		// criar equipa 2, 		System.out.println("\nEquipa 2:");, 		System.out.print("  Nome: ");, 		nome = sc.nextLine();, 		System.out.print("  Responsavel: ");, 		nomeR = sc.nextLine();, 		Equipa equipa2 = new Equipa(nome, nomeR);, 		, 		// adicionar bola, 		System.out.println("\nAdicionar bola: ");, 		System.out.print("  Cor da bola: ");, 		String cor = sc.nextLine();, 		Bola bola = new Bola(0, 0, 10.0, cor);, 		, 		, 		// preencher equipa 1, 		System.out.println("\nEquipa 1:");, 		System.out.println("\nGuarda-Redes adicionado!");, 		equipa1.addRobo((int)(Math.random() * 10), (int)(Math.random() * 10), Math.round(Math.random() * 10), "GUARDAREDES");, 		, 		System.out.println("Defesa adicionado!");, 		equipa1.addRobo((int)(Math.random() * 10), (int)(Math.random() * 10), Math.round(Math.random() * 10), "DEFESA");, 		, 		System.out.println("Medio adicionado!");, 		equipa1.addRobo((int)(Math.random() * 10), (int)(Math.random() * 10), Math.round(Math.random() * 10), "MEDIO");, 		, 		System.out.println("Medio adicionado!");, 		equipa1.addRobo((int)(Math.random() * 10), (int)(Math.random() * 10), Math.round(Math.random() * 10), "MEDIO");, 		, 		System.out.println("Avancado adicionado!");, 		equipa1.addRobo((int)(Math.random() * 10), (int)(Math.random() * 10), Math.round(Math.random() * 10), "AVANCADO");, 		, 		// preencher equipa 2, 		System.out.println("\nEquipa 2:");, 		System.out.println("\nGuarda-Redes adicionado!");, 		equipa2.addRobo((int)(Math.random() * 10), (int)(Math.random() * 10), Math.round(Math.random() * 10), "GUARDAREDES");, 				, 		System.out.println("Defesa adicionado!");, 		equipa2.addRobo((int)(Math.random() * 10), (int)(Math.random() * 10), Math.round(Math.random() * 10), "DEFESA");, 				, 		System.out.println("Medio adicionado!");, 		equipa2.addRobo((int)(Math.random() * 10), (int)(Math.random() * 10), Math.round(Math.random() * 10), "MEDIO");, 				, 		System.out.println("Medio adicionado!");, 		equipa2.addRobo((int)(Math.random() * 10), (int)(Math.random() * 10), Math.round(Math.random() * 10), "MEDIO");, 				, 		System.out.println("Avancado adicionado!\n");, 		equipa2.addRobo((int)(Math.random() * 10), (int)(Math.random() * 10), Math.round(Math.random() * 10), "AVANCADO");, 		, 		System.out.println(equipa1);, 		System.out.println("\n" + equipa2);, 		, 		// arrays de jogadores das equipas, 		Robo[] jogadores1 = equipa1.getJogadores();, 		Robo[] jogadores2 = equipa2.getJogadores();, 		, 		// mover um jogador, 		System.out.println("\nMover um jogador: ");, 		System.out.println(jogadores1[3].getId() + ": X - " + jogadores1[3].getX() + ", Y - " + jogadores1[3].getY() + ", distancia - " + jogadores1[3].getDistancia());, 		jogadores1[3].move((int)(Math.random() * 10), (int)(Math.random() * 10));, 		System.out.println(jogadores1[3].getId() + " nova posicao: X - " + jogadores1[3].getX() + ", Y - " + jogadores1[3].getY() + ", distancia - " + jogadores1[3].getDistancia());, 		, 		, 		// marcar golo, 		System.out.println("\nMarcar golo - " + jogadores2[2].getId());, 		jogadores2[2].marcarGolo(); equipa1.sofrerGolo();, 		jogadores2[2].marcarGolo(); equipa1.sofrerGolo();, 		jogadores2[2].marcarGolo(); equipa1.sofrerGolo();, 		System.out.println("Numero de golos marcados: " + jogadores2[2].getnGolos());, 		, 		System.out.println("\nMarcar golo - " + jogadores2[1].getId());, 		jogadores2[1].marcarGolo(); equipa1.sofrerGolo();, 		jogadores2[1].marcarGolo(); equipa1.sofrerGolo();, 		System.out.println("Numero de golos marcados: " + jogadores2[1].getnGolos());, 		, 		// estatisticas do jogo, 		System.out.println("Estatisticas do jogo: ");, 		System.out.println(equipa1.getNome() + " " + equipa1.getnGolosM() + " - " + equipa2.getnGolosM() + " " + equipa2.getNome());, 		for(int i = 0; i < 5 ; i++) {, 			System.out.printf("%7s%5d%7s%5d\n", jogadores1[i].getId(), jogadores1[i].getnGolos(), jogadores2[i].getId(), jogadores2[i].getnGolos() );, 		} , 		System.out.println("\nCor da bola: " + bola.getCor());, 		, 		, 		, 		, 		sc.close();, 	}, , }]
[package aula06;, , public class Robo extends Objetomovel {, 	, 	private static int contador = 1;, 	private String id;, 	private String tipo;, 	private int nGolos; , , 	public Robo(int x, int y, double velMax, String tipo) {, 		super(x, y, velMax);, 		this.id = "Robo" + contador;, 		contador++;, 		switch(tipo.toUpperCase()) {, 		case "GUARDAREDES":, 			this.tipo = "GUARDAREDES";, 			break;, 		case "DEFESA":, 			this.tipo = "DEFESA";, 			break;, 		case "MEDIO":, 			this.tipo = "MEDIO";, 			break;, 		case "AVANCADO":, 			this.tipo = "AVANCADO";, 			break;, 		default:, 			this.tipo = "DESCONHECIDO";, 			break;, 		}, 		, 	}, , 	@Override, 	public String toString() {, 		return super.toString() + ", id: " + id + ", tipo: " + tipo + ", nGolos: " + nGolos;, 	}, , 	public String getId() {, 		return id;, 	}, , 	public void setId(String id) {, 		this.id = id;, 	}, , 	public String getTipo() {, 		return tipo;, 	}, , 	public void setTipo(String tipo) {, 		this.tipo = tipo;, 	}, , 	public int getnGolos() {, 		return nGolos;, 	}, , 	public void setnGolos(int nGolos) {, 		this.nGolos = nGolos;, 	}, 	, 	// marcar golo, 	public void marcarGolo() {, 		this.nGolos += 1;, 	}, 	, 	, , }]
[package aula06;, , public class Carro {, 	private char classe = 'A';, 	private String tipo = "gasolina";, 	private boolean disponibilidade;, 	private static int contador = 1;, 	private int id;, 	, 	public Carro(char classe, String tipo, boolean disponibilidade) {, 		switch(classe) {, 		case 'A':, 		case 'B':, 		case 'C':, 		case 'D':, 		case 'E':, 		case 'F': this.classe = classe; break;, 		default: this.classe = 'A'; break;, 		}, 		, 		if(tipo.toLowerCase().equals("gasolina") || tipo.toLowerCase().equals("gasoleo")) {, 			this.tipo = tipo;, 		}, 		this.disponibilidade = disponibilidade;, 		this.id = contador;, 		contador++;, 	}, , 	@Override, 	public String toString() {, 		return "Carro - ID: " + id +" Classe: " + classe + ", Tipo: " + tipo + ", Disponibilidade: " + disponibilidade;, 	}, 	, 	public void levantar() {, 		this.disponibilidade = false;, 	}, 	, 	public void entregar() {, 		this.disponibilidade = true;, 	}, , 	public char getClasse() {, 		return classe;, 	}, , 	public void setClasse(char classe) {, 		this.classe = classe;, 	}, , 	public String getTipo() {, 		return tipo;, 	}, , 	public void setTipo(String tipo) {, 		this.tipo = tipo;, 	}, , 	public boolean isDisponibilidade() {, 		return disponibilidade;, 	}, , 	public void setDisponibilidade(boolean disponibilidade) {, 		this.disponibilidade = disponibilidade;, 	}, , 	public int getId() {, 		return id;, 	}, , 	public void setId(int id) {, 		this.id = id;, 	}, 	, 	, }]
[package aula06;, , import java.util.*;, , public class A06E02 {, , 	public static void main(String[] args) {, 		, 		Scanner sc = new Scanner(System.in);, 		, 		// criacao de uma nova agencia de viagens, 		AgenciaViagens agencia = new AgenciaViagens("Viajens Aveiro", "Aveiro");, 		, 		// adicionar alojamentos a agencia de viagens, 		    // quartos de hoteis, 		agencia.addAlojamento(new QuartoHotel("Melia Ria", "Aveiro", 85.0, true, "double"));, 		agencia.addAlojamento(new QuartoHotel("Melia Ria", "Aveiro", 80.0, false, "twin"));, 		agencia.addAlojamento(new QuartoHotel("Melia Ria", "Aveiro", 75.0, true, "single"));, 		agencia.addAlojamento(new QuartoHotel("Montebelo", "Viseu", 90.0, true, "double"));, 		agencia.addAlojamento(new QuartoHotel("Montebelo", "Viseu", 90.0, false, "twin"));, 		, 		    // apartamentos, 		agencia.addAlojamento(new Apartamento("ApartAveiro", "Aveiro", 150.0, true, 3));, 		agencia.addAlojamento(new Apartamento("ApartAveiro", "Aveiro", 200.0, true, 2));, 		agencia.addAlojamento(new Apartamento("ApartAveiro", "Aveiro", 250.0, false, 5));, 		agencia.addAlojamento(new Apartamento("ApartViseu", "Viseu", 150.0, true, 1));, 		agencia.addAlojamento(new Apartamento("ApartViseu", "Viseu", 50.0, true, 9));, 		, 		// adicionar carros a agencia, 		agencia.addCarro(new Carro('A', "gasolina", true));, 		agencia.addCarro(new Carro('A', "gasoleo", true));, 		agencia.addCarro(new Carro('B', "gasolina", false));, 		agencia.addCarro(new Carro('C', "gasoleo", false));, 		agencia.addCarro(new Carro('D', "gasolina", true));, 		, 		// arrays com os alojamentos e carros da agencia, 		Alojamento[] alojamentos = agencia.getAlojamentos();, 		Carro[] carros = agencia.getCarros();, 		, 		// declaracao de variaveis, 		int id;, 		, 		System.out.println("\nBem vindo a nossa Agencia de Viagens!");, 		, 		int op = 0;, 		while(op != 10) {, 			op = menu();, 			switch(op) {, 			case 10:, 				System.out.println("Obrigado por viajar com a Viajens Aveiro! Volte sempre.");, 				break;, 			case 1:, 				agencia.printQHotel();, 				break;, 			case 2:, 				agencia.printApartamentos();, 				break;, 			case 3:, 				agencia.printCarros();, 				break;, 			case 4:, 				// fazer um checkin de um quarto de hotel, 				System.out.print("\nEscolha o id do quarto de hotel: ");, 				id = sc.nextInt();, 				for(Alojamento alj : alojamentos) {, 					if(alj instanceof QuartoHotel) {, 						if(alj.getId() == id && alj.isDisponibilidade()) {, 							alj.checkin();, 							System.out.println("\nQuarto de hotel alugado com sucesso!");, 						} else if(alj.getId() == id) {, 							System.out.println("\nQuarto de hotel indisponivel.");, 						}, 					}, 				}, 				break;, 			case 5:, 				// fazer um checkin de um apartamento, 				System.out.print("\nEscolha o id do apartamento: ");, 				id = sc.nextInt();, 				for(Alojamento alj : alojamentos) {, 					if(alj instanceof Apartamento) {, 						if(alj.getId() == id && alj.isDisponibilidade()) {, 							alj.checkin();, 							System.out.println("\nApartamento alugado com sucesso!");, 						} else if(alj.getId() == id) {, 							System.out.println("\nApartamento indisponivel.");, 						}, 					}, 				}, 				break;, 			case 6:, 				// levantar um carro, 				System.out.print("\nEscolha o id do carro: ");, 				id = sc.nextInt();, 				for(Carro c : carros) {, 					if(c.getId() == id && c.isDisponibilidade()) {, 						c.levantar();, 						System.out.println("\nCarro levantado com sucesso!");, 					} else if(c.getId() == id) {, 						System.out.println("\nCarro indisponivel!");, 					}, 				}, 				break;, 			case 7:, 				// fazer um checkout de um quarto de hotel, 				System.out.print("\nEscolha o id do quarto de hotel: ");, 				id = sc.nextInt();, 				for(Alojamento alj : alojamentos) {, 					if(alj instanceof QuartoHotel) {, 						if(alj.getId() == id && !alj.isDisponibilidade()) {, 							alj.checkout();, 							System.out.println("\nQuarto de hotel devolvido com sucesso!");, 						} else if(alj.getId() == id) {, 							System.out.println("\nQuarto de hotel disponivel para alugar.");, 						}, 					}, 				}, 				break;, 			case 8:, 				// fazer um checkout de um apartamento, 				System.out.print("\nEscolha o id do apartamento: ");, 				id = sc.nextInt();, 				for(Alojamento alj : alojamentos) {, 					if(alj instanceof Apartamento) {, 						if(alj.getId() == id && !alj.isDisponibilidade()) {, 							alj.checkout();, 							System.out.println("\nApartamento devolvido com sucesso!");, 						} else if(alj.getId() == id) {, 							System.out.println("\nApartamento disponivel para alugar.");, 						}, 					}, 				}, 				break;, 			case 9:, 				// devolver um carro, 				System.out.print("\nEscolha o id do carro: ");, 				id = sc.nextInt();, 				for(Carro c : carros) {, 					if(c.getId() == id && !c.isDisponibilidade()) {, 						c.entregar();, 						System.out.println("\nCarro devolvido com sucesso!");, 					} else if(c.getId() == id) {, 						System.out.println("\nCarro disponivel para alugar!");, 					}, 				}, 				break;, 			default:, 				System.out.println("\nNao implementado!");, 				break;, 			}, 		}, 	}, 	, 	public static int menu() {, 		Scanner sc = new Scanner(System.in);, 		System.out.println("\n1) Quartos de hoteis");, 		System.out.println("2) Apartamentos");, 		System.out.println("3) Carros");, 		System.out.println("4) Alugar quarto de hotel");, 		System.out.println("5) Alugar apartamento");, 		System.out.println("6) Alugar carro");, 		System.out.println("7) Devolver quarto de hotel");, 		System.out.println("8) Devolver apartamento");, 		System.out.println("9) Devolver carro");, 		System.out.println("10) Sair");, 		System.out.print("Opcao? ");, 		return sc.nextInt();, 	}, , }]
[package aula06;, , import java.util.Arrays;, , public class Equipa {, 	, 	private String nome;, 	private String responsavel;, 	private int nGolosM;, 	private int nGolosS;, 	private Robo[] jogadores = new Robo[5];, 	private int contador = 0;, 	, 	public Equipa(String nome, String responsavel) {, 		this.nome = nome;, 		this.responsavel = responsavel;, 	}, 	, 	@Override, 	public String toString() {, 		return "Equipa(" + " Nome: " + nome + ", Responsavel: " + responsavel + ", nGolosM: " + nGolosM + ", nGolosS: " + nGolosS, 				+ ", jogadores: " + Arrays.toString(jogadores) + ")";, 	}, , 	public String getNome() {, 		return nome;, 	}, , 	public void setNome(String nome) {, 		this.nome = nome;, 	}, , 	public String getResponsavel() {, 		return responsavel;, 	}, , 	public void setResponsavel(String responsavel) {, 		this.responsavel = responsavel;, 	}, , 	public int getnGolosM() {, 		int ngolos = 0;, 		for(Robo r : jogadores) {, 			ngolos += r.getnGolos();, 		}, 		this.nGolosM = ngolos;, 		return this.nGolosM;, 	}, , 	public int getnGolosS() {, 		return nGolosS;, 	}, , 	public Robo[] getJogadores() {, 		return jogadores;, 	}, , 	public void setJogadores(Robo[] jogadores) {, 		this.jogadores = jogadores;, 	}, 	, 	public void sofrerGolo() {, 		this.nGolosS += 1;, 	}, 	, 	public void addRobo(int x, int y, double velMax, String tipo) {, 		if(jogadores.length <= 5) {, 			jogadores[contador] = new Robo(x, y, velMax, tipo);, 			contador++;, 		} else {, 			System.out.println("Equipa cheia!");, 		}, 		, 	}, 	, }]
[package aula06;, , public class QuartoHotel extends Alojamento {, 	private String tipo = "single";, , 	public QuartoHotel(String nome, String local, double preco, boolean disponibilidade, String tipo) {, 		super(nome, local, preco, disponibilidade);, 		if(tipo.toLowerCase().equals("single") || tipo.toLowerCase().equals("double") || tipo.toLowerCase().equals("twin")) {, 			this.tipo = tipo;, 		}, 	}, , 	@Override, 	public String toString() {, 		return "QUARTO DE HOTEL: " + super.toString() + ", Tipo: " + tipo;, 	}, , 	public String getTipo() {, 		return tipo;, 	}, , 	public void setTipo(String tipo) {, 		this.tipo = tipo;, 	}, 	, 	, , }]
[package aula06;, , import java.util.Random;, , public class Alojamento {, 	, 	Random rand = new Random();, 	, 	private static int contador = 0;, 	private int id = 0;, 	private String nome;, 	private String local;, 	private double preco;, 	private boolean disponibilidade = true;, 	private double avaliacao = 1.0;, 	, 	public Alojamento(String nome, String local, double preco, boolean disponibilidade) {, 		id = contador;, 		contador++;, 		this.nome = nome;, 		this.local = local;, 		this.preco = preco;, 		this.disponibilidade = disponibilidade;, 		, 		double start = 1.0, end = 5.0;, 		, 		// novo numero aleatorio entre 0 e 1, 		double random = new Random().nextDouble();, 		, 		// novo numero aleatorio entre 1.0 e 5.0, 		double n = start + (random * (end - start));, 		, 		this.avaliacao = n;, 	}, , 	@Override, 	public String toString() {, 		return "Alojamento " + id + " - Nome: " + nome + ", Local:" + local + ", Preco: " + preco, 				+ ", Disponibilidade: " + disponibilidade + ", Avaliacao: " + avaliacao;, 	}, , 	public int getId() {, 		return id;, 	}, , 	public void setId(int id) {, 		this.id = id;, 	}, , 	public String getNome() {, 		return nome;, 	}, , 	public void setNome(String nome) {, 		this.nome = nome;, 	}, , 	public String getLocal() {, 		return local;, 	}, , 	public void setLocal(String local) {, 		this.local = local;, 	}, , 	public double getPreco() {, 		return preco;, 	}, , 	public void setPreco(double preco) {, 		this.preco = preco;, 	}, , 	public boolean isDisponibilidade() {, 		return disponibilidade;, 	}, , 	public void setDisponibilidade(boolean disponibilidade) {, 		this.disponibilidade = disponibilidade;, 	}, , 	public double getAvaliacao() {, 		return avaliacao;, 	}, , 	public void setAvaliacao(double avaliacao) {, 		this.avaliacao = avaliacao;, 	}, 	, 	public void checkin() {, 		this.disponibilidade = false;, 	}, 	public void checkout() {, 		this.disponibilidade = true;, 	}, 	, }]
[package aula06;, , import java.util.Arrays;, , public class AgenciaViagens {, 	private Alojamento[] alojamentos = new Alojamento[10];, 	private Carro[] carros = new Carro[5];, 	private String nome;, 	private String endereco;, 	private int contador1;, 	private int contador2;, 	, 	public AgenciaViagens(String nome, String endereco) {, 		this.nome = nome;, 		this.endereco = endereco;, 	}, , 	@Override, 	public String toString() {, 		return "Agencia de Viagens - Alojamentos: " + Arrays.toString(alojamentos) + ", Carros: " + Arrays.toString(carros), 				+ ", Nome: " + nome + ", Endereco: " + endereco;, 	}, , 	public Alojamento[] getAlojamentos() {, 		return alojamentos;, 	}, , 	public void setAlojamentos(Alojamento[] alojamentos) {, 		this.alojamentos = alojamentos;, 	}, , 	public Carro[] getCarros() {, 		return carros;, 	}, , 	public void setCarros(Carro[] carros) {, 		this.carros = carros;, 	}, , 	public String getNome() {, 		return nome;, 	}, , 	public void setNome(String nome) {, 		this.nome = nome;, 	}, , 	public String getEndereco() {, 		return endereco;, 	}, , 	public void setEndereco(String endereco) {, 		this.endereco = endereco;, 	}, 	, 	// metodo para adicionar um alojamento, 	public void addAlojamento(Alojamento alojamento) {, 		alojamentos[contador1] = alojamento;, 		contador1++;, 	}, 	, 	public void addCarro(Carro carro) {, 		carros[contador2] = carro;, 		contador2++;, 	}, 	, 	public void printQHotel() {, 		for(Alojamento alj : alojamentos) {, 			if(alj instanceof QuartoHotel) {, 				System.out.println("\n" + alj);, 			}, 		}, 	}, 	, 	public void printApartamentos() {, 		for(Alojamento alj : alojamentos) {, 			if(alj instanceof Apartamento) {, 				System.out.println("\n" + alj);, 			}, 		}, 	}, 	, 	public void printCarros() {, 		for(Carro c : carros) {, 			System.out.println("\n" + c);, 		}, 	}, 	, }]
[package aula06;, , import java.lang.Math;, , public class Objetomovel {, 	, 	private int x;, 	private int y;, 	private double velMax;, 	private double distancia;, 	, 	// construtor, 	public Objetomovel(int x, int y, double velMax) {, 		this.x = x;, 		this.y = y;, 		this.velMax = velMax;, 	}, , 	//toString, 	@Override, 	public String toString() {, 		return "(x: " + x + ", y: " + y + ", velMax: " + velMax + ", distancia:" + distancia + ")";, 	}, , 	// getters and setters, 	, 	public int getX() {, 		return x;, 	}, , 	public void setX(int x) {, 		this.x = x;, 	}, , 	public int getY() {, 		return y;, 	}, , 	public void setY(int y) {, 		this.y = y;, 	}, , 	public double getVelMax() {, 		return velMax;, 	}, , 	public void setVelMax(double velMax) {, 		this.velMax = velMax;, 	}, , 	public double getDistancia() {, 		return distancia;, 	}, , 	public void setDistancia(double distancia) {, 		this.distancia = distancia;, 	}, 	, 	// metodo move, 	public void move(int newX, int newY) {, 		this.distancia += Math.sqrt(Math.pow((this.x - newX), 2) + Math.pow((this.y - newY), 2));, 		this.x = newX;, 		this.y = newY;, 		, 	}, 	, 	, , }]
[package aula06;, , public class Bola extends Objetomovel {, 	, 	private String cor = "UNKNOWN";, , 	public Bola(int x, int y, double velMax, String cor) {, 		super(x, y, velMax);, 		switch (cor.toUpperCase()) {, 		case "AMARELA":, 			this.cor = cor;, 			break;, 		case "AZUL":, 			this.cor = cor;, 			break;, 		case "LARANJA":, 			this.cor = cor;, 			break;, 		case "VERMELHA":, 			this.cor = cor;, 			break;, 		default:, 			this.cor = "UNKNOWN";, 		}, 	}, , 	@Override, 	public String toString() {, 		return super.toString() + " , cor: " + cor;, 	}, , 	public String getCor() {, 		return cor;, 	}, , 	public void setCor(String cor) {, 		this.cor = cor;, 	}, 	, 	, 	, 	, , }]
[package aula06;, , public class Apartamento extends Alojamento {, 	private int nQuartos;, , 	public Apartamento(String nome, String local, double preco, boolean disponibilidade, int nQuartos) {, 		super(nome, local, preco, disponibilidade);, 		this.nQuartos = nQuartos;, 	}, , 	@Override, 	public String toString() {, 		return "APARTAMENTO: " + super.toString() + ", Numero de quartos: " + nQuartos;, 	}, , 	public int getnQuartos() {, 		return nQuartos;, 	}, , 	public void setnQuartos(int nQuartos) {, 		this.nQuartos = nQuartos;, 	}, 	, 	, 	, 	, 	, 	, , }]
[public class App{, 	public static void main(String[] args){, , 		try{, 			ContaCorrente C1 = new ContaCorrente(-1);, 			ContaCorrente C2 = new ContaCorrente(100);, 			ContaCorrente C3 = new ContaCorrente(1000);, 			ContaCorrente C4 = new ContaCorrente(-100);, , , 			//C2.deposito(-1);, 			//C2.deposito(1);, 			//C2.retirada(102);, , 			System.out.println("Valor C1: "+C1.getSaldo());, 			System.out.println("Valor C2: "+C2.getSaldo());, 			System.out.println("Valor C3: "+C3.getSaldo());, 			System.out.println("Valor C4: "+C4.getSaldo());, 		}, 		catch(IllegalArgumentException e){, 			System.out.println(e.getMessage());, 		}, , 		System.out.println();, 		System.out.println("Tentativas de criar: "+ContaCorrente.getTentativaDeCriarInstancia());, 		System.out.println("Sucedias: "+ContaCorrente.getNroInstancias());, , 	}, }]
[public class ContaCorrente {, 	private double saldo;, 	private static int criadas; , 	private static int tentativas;, , 	public ContaCorrente(double saldoInicial){, 		try{, 			if(saldoInicial < 0){, 				//throw new ValorInvalidoException("Saldo inicial invalido");, 				throw new IllegalArgumentException("Vish, o saldo inicial nao pode ser "+saldoInicial+" reais");, 			}, 			criadas++;, 			this.saldo = saldoInicial;, 		}, 		catch(IllegalArgumentException e){, 			System.out.println(e.getMessage());, 		}, 		finally{, 			tentativas++;, 		}, 	},  	,  	public void deposito(double valor){,  		if (valor < 0) {,  			throw new IllegalArgumentException("Cara, voce nao pode depositar "+valor+" reais");,  		},  		saldo += valor;,  	},  	,  	public void retirada(double valor){,  		if (valor > saldo) {,  			throw new IllegalArgumentException("Vish, voce nao pode retirar "+valor+" reais pois o seu saldo e "+saldo+" reais");,  		},  		saldo -= valor;,  	}, ,  	public static void tentativaDeCriarInstancia(){,  		tentativas++;,  	}, ,  	public static int getTentativaDeCriarInstancia(){,  		return tentativas;,  	},  	public static int getNroInstancias(){,  		return criadas;,  	},  ,  	public double getSaldo(){,  		return saldo;,  	}, }]
[public class ValorInvalidoException extends Exception{, 	public ValorInvalidoException(String msg){, 		super(msg);, 	}, }]
[import java.util.*;, , public class App{, 	, 	public static void main(String args[]){, 		AgenciaNoticias reuters = new AgenciaNoticias("Reuters");, 		AgenciaNoticias agBrasil = new AgenciaNoticias("Agencia Brasil");, 		, 		/*, 		AssinanteSMS a1 = new AssinanteSMS("90992266");, 		AssinanteSMS a2 = new AssinanteSMS("91187734");, 		AssinanteEmail a3 = new AssinanteEmail("pato@gmail.com");, 		AssinanteEmail a4 = new AssinanteEmail("pateta@gmail.com");, 		AssinanteEmail a5 = new AssinanteEmail("galo@gmail.com");, 		AssinanteWhatsApp a6 = new AssinanteWhatsApp("18918833");, 		AssinanteWhatsApp a7 = new AssinanteWhatsApp("23440914");, 		AssinanteFax a8 = new AssinanteFax("9237-4034");, 		*/, 		, 		/*, 		Assinante a1 = Factory.criaAssinante("90992266");, 		Assinante a2 = Factory.criaAssinante("91187734");, 		Assinante a3 = Factory.criaAssinante("pato@gmail.com");, 		Assinante a4 = Factory.criaAssinante("pateta@gmail.com");, 		Assinante a5 = Factory.criaAssinante("galo@gmail.com");, 		Assinante a6 = Factory.criaAssinante("WA18918833");, 		Assinante a7 = Factory.criaAssinante("WA23440914");, 		Assinante a8 = Factory.criaAssinante("FX92374034");, 		*/, 		, 		Factory F = Factory.getInstance();, 		, 		Assinante a1 = F.criaAssinante("90992266");, 		Assinante a2 = F.criaAssinante("91187734");, 		Assinante a3 = F.criaAssinante("pato@gmail.com");, 		Assinante a4 = F.criaAssinante("pateta@gmail.com");, 		Assinante a5 = F.criaAssinante("galo@gmail.com");, 		Assinante a6 = F.criaAssinante("WA18918833");, 		Assinante a7 = F.criaAssinante("WA23440914");, 		Assinante a8 = F.criaAssinante("FX92374034");, 		, 		, 		        , 		reuters.registraAssinante(a8);, 		reuters.registraAssinante(a1);, 		reuters.registraAssinante(a3);, 		reuters.registraAssinante(a4);, 		reuters.registraAssinante(a6);, 		reuters.registraAssinante(a7);, , , 		agBrasil.registraAssinante(a2);, 		agBrasil.registraAssinante(a3);, 		agBrasil.registraAssinante(a4);, 		agBrasil.registraAssinante(a5);, 		agBrasil.registraAssinante(a7);, 		agBrasil.registraAssinante(a8);, , 		reuters.registraNoticia("Dolar sobre 3.5%");, 		agBrasil.registraNoticia("Inflação supera a meta prevista");, 		reuters.registraNoticia("Terremoto na Indonésia");, 		agBrasil.registraNoticia("Bernardo Copstein ganha titulo de melhor professor do ano");, 	}, }, ]
[public class AssinanteFax implements Assinante{,     private String fax;,     ,     public AssinanteFax(String umFax){,         fax = umFax;,     },     ,     public void registraNaFonte(AgenciaNoticias fonte){,         fonte.registraAssinante(this);,     },     ,     @Override,     public void atualiza(AgenciaNoticias fonte){,         String noticia = fonte.getUltimaNoticia();,         System.out.println("Enviando fax para: "+fax+", informando: "+noticia+":"+fonte.getIdentificador());,     }, }, ]
[public class AssinanteEmail implements Assinante{,     private String email;,     ,     public AssinanteEmail(String umEmail){,         email = umEmail;,     },     ,     public void registraNaFonte(AgenciaNoticias fonte){,         fonte.registraAssinante(this);,     },     ,     @Override,     public void atualiza(AgenciaNoticias fonte){,         String noticia = fonte.getUltimaNoticia();,         System.out.println("Enviando email para: "+email+", informando: "+noticia+":"+fonte.getIdentificador());,     }, }, ]
[import java.util.*;, , public class AgenciaNoticias{,     private String identificador;,     private LinkedList<String> noticias;,     private LinkedList<Assinante> assinantes;,     ,     public AgenciaNoticias(String umId){,         identificador = umId;,         noticias = new LinkedList<>();,         assinantes = new LinkedList<>();,     },     ,     public String getIdentificador(){,         return(identificador);,     },     ,     public void registraAssinante(Assinante assinante){,         assinantes.add(assinante);,     },     ,     public void notificaAssinantes(){,         for(Assinante a:assinantes){,             a.atualiza(this);,         },     },     ,     public void registraNoticia(String noticia){,         noticias.add(noticia);,         notificaAssinantes();,     },     ,     public String getUltimaNoticia(){,         return(noticias.getLast());,     },     ,     public List<String> getTodasNoticias(){,         return((List<String>)(noticias.clone()));,     }, },         ]
[interface Assinante{,     void atualiza(AgenciaNoticias fonte);, }, ]
[public class Factory{, 	private static Factory ref = new Factory();, 	, 	private Factory(){, 	, 	}, 	, 	public static Assinante criaAssinante(String assinante){, 		if( assinante.contains("@") ), 			return new AssinanteEmail(assinante);, 		else if ( assinante.startsWith("WA") ), 			return new AssinanteWhatsApp(assinante);, 		else if ( assinante.startsWith("FX") ), 			return new AssinanteFax(assinante);, 		else, 			return new AssinanteSMS(assinante);, 	}, 	, 	public static Factory getInstance(){, 		return ref;, 	}, , , }]
[public class AssinanteWhatsApp implements Assinante{,     private String nroWhats;,     ,     public AssinanteWhatsApp(String umNroWhats){,         nroWhats = umNroWhats;,     },     ,     public void registraNaFonte(AgenciaNoticias fonte){,         fonte.registraAssinante(this);,     },     ,     @Override,     public void atualiza(AgenciaNoticias fonte){,         String noticia = fonte.getUltimaNoticia();,         System.out.println("Enviando WhatsApp para: "+nroWhats+", informando: "+noticia+":"+fonte.getIdentificador());,     }, }]
[public class AssinanteSMS implements Assinante{,     private String celular;,     ,     public AssinanteSMS(String umNroCelular){,         celular = umNroCelular;,     },     ,     public void registraNaFonte(AgenciaNoticias fonte){,         fonte.registraAssinante(this);,     },     ,     @Override,     public void atualiza(AgenciaNoticias fonte){,         String noticia = fonte.getUltimaNoticia();,         System.out.println("Enviando SMS para: "+celular+", informando: "+noticia+":"+fonte.getIdentificador());,     }, }, ]
[/**,  * Created by andri on 27-Sep-16.,  */, public class Escopo {,     private int a;,     private static int b;, ,     public Escopo (int a){,         a = a;,         b = a;,     }, ,     public int getA(){return a;},     public int getB(){return b;},     public /*static*/ int soma(int x){return (b + x);},     public int subtrai(int x){return (a - x);}, , //    public static void main(String[] args){, //        Escopo x = new Escopo(10);, //        Escopo y = new Escopo(20);, //, //        System.out.println("A = "+x.getA()+" / B = "+x.getB());, //        System.out.println("A = "+y.getA()+" / B = "+y.getB());, //    }, }]
[import javafx.scene.control.RadioButton;, , import java.util.Random;, , /**,  * Created by andri on 27-Sep-16.,  */, public class Eca {,     public static  int TAM = 1000000;,     private int[] vet;, ,     public Eca(int[] v){,         vet = v;,     }, ,     public void inverteV1(){,         int resp[] = new int[TAM];, ,         for (int i = 0; i < TAM; i++){,             resp[i] = vet[TAM - i - 1];,         }, ,         vet = resp;,     }, ,     public void inverteV2(){,         int resp[] = new int[TAM];,         inverteAux(vet, resp, 0);,         vet = resp;,     },     private void inverteAux(int v[], int resp[], int c){,         if(c == TAM),             return;,         else{,             resp[c] = v[TAM - c - 1];,             inverteAux(v, resp, ++c);,         },     }, ,     public void impVet(){,         for (int i = 0; i < TAM-1; i++),             System.out.print(vet[i]+", ");,         System.out.println(vet[TAM-1]);,     }, ,     public static void main(String[] args){,         Random r = new Random();,         int v[] = new int[TAM];,         for(int i = 0; i < TAM; i++),             v[i] = r.nextInt(1000);, ,         Eca eca = new Eca(v);, ,         eca.impVet();,         eca.inverteV1();,         //eca.inverteV2();,         eca.impVet();,     }, }]
[/**,  * Created by andri on 27-Sep-16.,  */, public interface Container {, ,     /*@ public invariant (\forall int i > 0 && i < posicoes, , ,      @*/, ,     //ensure posicoes() > 0,     /*@ pure helper */int posicoes();, , ,     //@requires posicao < posicoes(),     //@requires posicao >= 0,     /* pure helper */ boolean posicaoLivre(int posicao);, ,     //Retorna a quantidade de caixas armazenadas,     int caixas();, ,     //Retorna referência para a caixa armazenada na posição,     Caixa consulta(int posicao);, ,     //Armazena a "caixa" na posicao "pos",     void armazena(int pos, Caixa caixa);, ,     //Retira a caixa armazenada na posicao,     void retira(int posicao);, }]
[/**,  * Created by andri on 27-Sep-16.,  */, public interface Caixa {, ,     //Retorna o código de identificação da caixa,     int codigo();, ,     //Retorna true se a caixa tem conteudo fragil,     boolean fragil();, ,     // Retorna o peso em Kg da caixa,     int peso();, }]
[/**,  * Created by 16104961 on 9/6/16.,  */, public class App{,     public static void main(String args[]){,         Turma T = new Turma("Texto.txt");,         System.out.println(T.toString());,     }, }, ]
[/**,  * Created by 16104961 on 9/6/16.,  */, import java.io.BufferedReader;, import java.io.IOException;, import java.nio.charset.Charset;, import java.nio.file.Files;, import java.nio.file.Path;, import java.nio.file.Paths;, , public class Turma {,     class Node {,         String nome;,         int[] notas;,         Node[] colegas;,         Node prox;, ,         Node(String nome, int[] notas) {,             this.colegas = null;,             this.prox = null;,             this.nome = nome;,             this.notas = notas;,         }, ,         void add(Node[] colegas) {,             this.colegas = colegas;,         }, ,     }, ,     private Node amiguinho;,     Node first;,     Node last;, ,     private void leTexto(Path path) {,         String line = null;,         try (BufferedReader rd = Files.newBufferedReader(path,,                 Charset.defaultCharset())) {,             // Le o arquivo e quebra a string nos daos,             while ((line = rd.readLine()) != null) {,                 if (line.length() == 0) {,                     break;,                 },                 String[] dados = line.split(";");,                 // Imprime apenas para mostrar que esta funcionando <-- remover,                 criaAmiguinho(dados);,             },         } catch (IOException x) {,             System.err.format("Erro de E/S: %s%n", x);,         },     }, ,     private void leDnv(Path path) {,         String line = null;,         try (BufferedReader rd = Files.newBufferedReader(path,,                 Charset.defaultCharset())) {,             // Le o arquivo e quebra a string nos daos,             Node aux = first;,             while ((line = rd.readLine()) != null) {,                 if (line.length() == 0) {,                     break;,                 },                 String[] dados = line.split(";");, ,                 criaGrupinhos(dados[4], dados[5], aux);,                 aux = aux.prox;,             },         } catch (IOException x) {,             System.err.format("Erro de E/S: %s%n", x);,         },     }, ,     public Turma(String narq) {,         Node first = null;,         Node last = null;,         Path path = Paths.get(narq);,         leTexto(path);, ,     }, ,     public void insert(String[] dados) {,         int[] notas = {Integer.parseInt(dados[1]), Integer.parseInt(dados[2]), Integer.parseInt(dados[3])};, ,         amiguinho = new Node(dados[0], notas);, ,         if (first == null && last == null) {,             first = amiguinho;,             last = amiguinho;,             return;,         },         else,         last = last.prox = amiguinho;,     }, ,     public void criaAmiguinho(String[] dados){,         insert(dados);,     }, ,     public void criaGrupinhos(String amiguinho1, String amiguinho2, Node amiguinho){,         Node colega1 = procura(amiguinho1);,         Node colega2 = procura(amiguinho2);, ,         Node[] grupinho = {colega1, colega2};,         amiguinho.add(grupinho);,     }, ,     public Node procura(String migo){,         Node aux = first;,         while(aux.prox != null){,             if(aux.nome == migo) return aux;,             aux = aux.prox;,         },         return aux;,     }, ,     public String toString(){,         String aux = "";,         Node auxN = first;,         aux += "nome: " + auxN.nome + ", Notas: " + auxN.notas[0] + ", " + auxN.notas[1] + ", " + auxN.notas[2];,         return aux;,     }, }, , ]
[, public class App {, 	public static void main(String[] args) {, 	    if (args.length == 0){, 	        System.out.println("No arguments");, 	        System.exit(0);, 	    }, 		Turma t = new Turma(args[0]);, 		System.out.println("Alunos acima da media:");, 		ILista<String> melhores = t.melhoresDoGrupo();, 		melhores.reset();, 		while(melhores.hasNext()){, 			System.out.println(melhores.next());, 		}, 	}, }]
[, public class ListaLigada<E> implements ILista<E> {,     class Nodo<T>{,     	public T dado;,     	public Nodo<T> prox;,     ,     	public Nodo(T umDado){,     		dado = umDado;,     		prox = null;,     	},     },     , 	private Nodo<E> prim,ult,curr;, 	private int size;, 	, 	private Nodo<E> getNodo(int pos){, 		int p = 0;, 		Nodo<E> aux = prim;, 		while(p < pos){, 			aux = aux.prox;, 			p++;, 			if (aux == null){, 				return(null);, 			}, 		}, 		return(aux);, 	}, 	, 	public ListaLigada(){, 		prim = null;, 		ult = null;, 		size = 0;, 		reset();, 	} , 	, 	@Override, 	public boolean isFull(){, 		return(false);, 	}, 	, 	@Override, 	public boolean isEmpty(){, 		return(size == 0);, 	}, 	, 	@Override, 	public boolean add(E element){, 		// Cria o novo nodo, 		Nodo<E> novo = new Nodo<>(element);, 		// Se a lista esta vazia, este e o primeiro, 		if (prim == null){, 			prim = novo;, 			ult = novo;, 		}else{ // se a lista nao esta vazia, encadeia no final, 			ult.prox = novo;, 			ult = novo;, 		}, 		size++;, 		return(true);, 	}, 	, 	@Override, 	public boolean set(E element, int pos){, 		if (pos < 0 || pos >= size()){, 			return false;, 		}else{, 			Nodo<E> nodo = getNodo(pos);, 			nodo.dado = element;, 			return true;, 		}, 	}, 	, 	@Override, 	public int size(){, 		return(size);, 	}, 	, 	@Override, 	public E get(int i){, 		if (i<0 || i>=size()){, 			return null;, 		}else{, 			return(getNodo(i).dado);, 		}, 	}, , 	@Override, 	public void reset() {, 		curr = prim;, 	}, , 	@Override, 	public boolean hasNext() {, 		return curr != null;, 	}, , 	@Override, 	public E next() {,         E dado = curr.dado;,         curr = curr.prox;, 		return dado;, 	}, }]
[import java.io.BufferedReader;, import java.io.IOException;, import java.nio.charset.Charset;, import java.nio.file.Files;, import java.nio.file.Path;, import java.nio.file.Paths;, , public class Turma {, 	private ILista<Aluno> lstAl;, , 	private Aluno localiza(String nome){, 		Aluno aux = null;, 		lstAl.reset();, 		while(lstAl.hasNext()){, 			aux = lstAl.next();, 			if (aux.getNome().equals(nome)){, 				return(aux);, 			}, 		}, 		return(null);, 	}, 	, 	private void leTexto(Path path) {, 		String line = null;, 		// Primeira passada: armazena os dados dos alunos na lista, 		try (BufferedReader rd = Files.newBufferedReader(path,Charset.defaultCharset())) {, 			while ((line = rd.readLine()) != null) {, 			    System.out.println(line);, 				String[] dados = line.split(";");, 				Aluno a = new Aluno(dados[0],Integer.parseInt(dados[1]),Integer.parseInt(dados[2]),Integer.parseInt(dados[3]));, 				lstAl.add(a);, 			}, 		} catch (IOException x) {, 			System.err.format("Erro de E/S: %s%n", x);, 		}, , 		// Segunda passada: conecta os grupos, 		try (BufferedReader rd = Files.newBufferedReader(path,, 				Charset.defaultCharset())) {, 			while ((line = rd.readLine()) != null) {, 				String[] dados = line.split(";");, 				// Localiza os alunos envolvidos, 				Aluno aluno = localiza(dados[0]);, 				Aluno comp1 = localiza(dados[4]);, 				Aluno comp2 = localiza(dados[5]);, 				// Faz as conexoes, 				aluno.setC1(comp1);, 				aluno.setC2(comp2);, 			}, 		} catch (IOException x) {, 			System.err.format("Erro de E/S: %s%n", x);, 		}, 	}, , 	public Turma(String narq) {, 		lstAl = new ListaLigada<>();, 		Path path = Paths.get(narq);, 		leTexto(path);, 	}, 	, 	public ILista<String> melhoresDoGrupo(){, 		ILista<String> melhores = new ListaLigada<>();, 		lstAl.reset();, 		while(lstAl.hasNext()){, 			Aluno aux = lstAl.next();, 			if (aux.acimaMediaDoGrupo()){, 				melhores.add(aux.getNome());, 			}, 		}, 		return(melhores);, 	}, }]
[public interface ILista<E> {, 	boolean add(E element);, 	boolean set(E element, int pos);, 	int size();, 	E get(int i);, 	boolean isFull();, 	boolean isEmpty();, 	void reset();, 	boolean hasNext();, 	E next();, }]
[, public class Aluno {, 	private String nome;,     private int notas[];,     private Aluno c1,c2;, ,     public Aluno(String umNome,int n1,int n2,int n3){,     	nome = umNome;,     	notas = new int[3];,     	notas[0] = n1;,     	notas[1] = n2;,     	notas[2] = n3;,     },     ,     public Aluno getC1() {, 		return c1;, 	}, 	,     public void setC1(Aluno c1) {, 		this.c1 = c1;, 	}, 	,     public Aluno getC2() {, 		return c2;, 	}, 	,     public void setC2(Aluno c2) {, 		this.c2 = c2;, 	}, 	,     public String getNome() {, 		return nome;, 	}, 	,     public int getNota(int i) {, 		return notas[i-1];, 	},     ,     public int somaNotas(){,     	return(notas[0]+notas[1]+notas[2]);,     },     ,     public double media(){,     	return(somaNotas()/3.0);,     },     ,     public boolean acimaMediaDoGrupo(){,     	int somaGr = somaNotas()+getC1().somaNotas()+getC2().somaNotas();,     	double mediaGr = somaGr/9.0;,     	if (media() > mediaGr){,     		return true;,     	}else{,     		return false;,     	},     }, }]
[interface TemPreco{,    double getPreco();, }]
[public class App{,     public static void main(String args[]){,         Container<Bola> c = new Container<>(30);,         ,         c.armazena(new Bola("Branca"));        ,         c.armazena(new Bola("Vermelha"));,         c.armazena(new Bola("Azul"));        ,         c.armazena(new Bola("Amarela"));,         ,         while(!c.isEmpty()){,            System.out.println(c.get()+", dias embarcada: "+c.getDiasEmbarcada());    ,            c.retira();    ,         },     },  }]
[interface ILista<E>{,     boolean add(E element);,     boolean set(E element,int pos);,     boolean ins(E element,int pos);,     boolean remove(int pos);,     E get(int pos);,     int size();,     boolean isFull();,     boolean isEmpty();, }, ]
[public class ListaArr<E> implements ILista<E>{, 	private E[] elements;, 	private int last;, 	private int MAX;, 	, 	public ListaArr(){, 	    MAX = 100;, 	    inicializa();, 	} , 	, 	public ListaArr(int max){, 	    MAX = max;, 	    inicializa();, 	}, 	,     private void inicializa(){, 		elements = (E[])(new Object[MAX]);, 		last = 0;,     },         , 	public boolean isFull(){, 		return(last >= MAX);, 	}, 	, 	public boolean isEmpty(){, 		return(last == 0);, 	}, 	, 	public int size(){, 		return(last);, 	}, , 	public boolean add(E element){, 		if (last >= MAX){, 			return(false);, 		}else{, 			elements[last] = element;, 			last++;, 			return true;, 		}, 	}, , 	public boolean set(E element, int pos){, 		if (pos < 0 || pos >= last){, 			return false;, 		}else{, 			elements[pos] = element;, 			return true;, 		}, 	}, 		, 	public boolean ins(E element, int pos){, 		if (pos < 0 || pos >= last){, 			return false;, 		}else{, 		    for(int i=last; i>pos; i--){, 			    elements[i] = elements[i-1];, 			}, 			elements[pos] = element;, 			last++;, 			return true;, 		}, 	}, 		, 	public boolean remove(int pos){, 		if (pos < 0 || pos >= last){, 			return false;, 		}else{, 		    for(int i=pos; i<last-1; i++){, 			    elements[i] = elements[i+1];, 			}, 			last--;, 			return true;, 		}, 	}, 	, 	public E get(int i){, 		if (i<0 || i>=last){, 			return null;, 		}else{, 			return(elements[i]);, 		}, 	}, }]
[public class Bola implements TemPreco{,     private String cor;,     ,     public Bola(String cor){,         this.cor = cor;,     },     ,     public String getCor(){,         return(cor);,     },     ,     public String toString(){,         return("Cor da bola: "+cor);,     },     ,     public double getPreco(){,         return(49.90);,     }, }]
[import java.time.*;, import java.time.temporal.ChronoUnit;, , public class Container{, ,     class Lugar{,         private TemPreco mercadoria;,         private LocalDate dataEmbarque;,         ,         public Lugar(TemPreco umaMercadoria){,             mercadoria = umaMercadoria;,             dataEmbarque = LocalDate.now();,             //dataEmbarque = LocalDate.of(2016,8,22);,         },         ,         public TemPreco getMercadoria(){,             return(mercadoria);,         },         ,         public LocalDate getData(){,             return(dataEmbarque);,         },     },     ,     private ILista<Lugar> estante;,     ,     public Container(int tam){,         estante = new ListaArr(tam);,     },     ,     public boolean armazena(TemPreco mercadoria){,         if (estante.isFull()){,             return(false);,         },         Lugar lugar = new Lugar(mercadoria);,         estante.add(lugar);,         return(true);,     },     ,     private int ultimo(){,         return(estante.size()-1);,     },     ,     public TemPreco get(){,         if (estante.isEmpty()){,             return(null);,         },         return(estante.get(ultimo()).getMercadoria());,     },     ,     public int getDiasEmbarcada(){,         if (estante.isEmpty()){,             return(-1);,         },         return((int)ChronoUnit.DAYS.between(estante.get(ultimo()).getData(),LocalDate.now()));,     }    ,     ,     public TemPreco retira(){,         if (estante.isEmpty()){,             return(null);,         },         TemPreco aux = estante.get(ultimo()).getMercadoria();,         estante.remove(ultimo());,         return(aux);,     },     ,     public int size(){,         return(estante.size());,     }        ,     ,     public boolean isFull(){,         return(estante.isFull());,     },     ,     public boolean isEmpty(){,         return(estante.isEmpty());,     }, }]
[public class App{,     public static void main(String args[]){,         Container<Bola> c = new Container<>(30);,         ,         c.armazena(new Bola("Branca"));        ,         c.armazena(new Bola("Vermelha"));,         c.armazena(new Bola("Azul"));        ,         c.armazena(new Bola("Amarela"));,         ,         while(!c.isEmpty()){,            System.out.println(c.get()+", dias embarcada: "+c.getDiasEmbarcada());    ,            c.retira();    ,         },     },  }]
[interface ILista<E>{,     boolean add(E element);,     boolean set(E element,int pos);,     boolean ins(E element,int pos);,     boolean remove(int pos);,     E get(int pos);,     int size();,     boolean isFull();,     boolean isEmpty();, }, ]
[public class ListaArr<E> implements ILista<E>{, 	private E[] elements;, 	private int last;, 	private int MAX;, 	, 	public ListaArr(){, 	    MAX = 100;, 	    inicializa();, 	} , 	, 	public ListaArr(int max){, 	    MAX = max;, 	    inicializa();, 	}, 	,     private void inicializa(){, 		elements = (E[])(new Object[MAX]);, 		last = 0;,     },         , 	public boolean isFull(){, 		return(last >= MAX);, 	}, 	, 	public boolean isEmpty(){, 		return(last == 0);, 	}, 	, 	public int size(){, 		return(last);, 	}, , 	public boolean add(E element){, 		if (last >= MAX){, 			return(false);, 		}else{, 			elements[last] = element;, 			last++;, 			return true;, 		}, 	}, , 	public boolean set(E element, int pos){, 		if (pos < 0 || pos >= last){, 			return false;, 		}else{, 			elements[pos] = element;, 			return true;, 		}, 	}, 		, 	public boolean ins(E element, int pos){, 		if (pos < 0 || pos >= last){, 			return false;, 		}else{, 		    for(int i=last; i>pos; i--){, 			    elements[i] = elements[i-1];, 			}, 			elements[pos] = element;, 			last++;, 			return true;, 		}, 	}, 		, 	public boolean remove(int pos){, 		if (pos < 0 || pos >= last){, 			return false;, 		}else{, 		    for(int i=pos; i<last-1; i++){, 			    elements[i] = elements[i+1];, 			}, 			last--;, 			return true;, 		}, 	}, 	, 	public E get(int i){, 		if (i<0 || i>=last){, 			return null;, 		}else{, 			return(elements[i]);, 		}, 	}, }]
[public class Bola{,     private String cor;,     ,     public Bola(String cor){,         this.cor = cor;,     },     ,     public String getCor(){,         return(cor);,     },     ,     public String toString(){,         return("Cor da bola: "+cor);,     }, }]
[import java.time.*;, import java.time.temporal.ChronoUnit;, , public class Container<E>{, ,     class Lugar<M>{,         private M mercadoria;,         private LocalDate dataEmbarque;,         ,         public Lugar(M umaMercadoria){,             mercadoria = umaMercadoria;,             dataEmbarque = LocalDate.now();,             //dataEmbarque = LocalDate.of(2016,8,22);,         },         ,         public M getMercadoria(){,             return(mercadoria);,         },         ,         public LocalDate getData(){,             return(dataEmbarque);,         },     },     ,     private ILista<Lugar<E>> estante;,     ,     public Container(int tam){,         estante = new ListaArr(tam);,     },     ,     public boolean armazena(E mercadoria){,         if (estante.isFull()){,             return(false);,         },         Lugar lugar = new Lugar(mercadoria);,         estante.add(lugar);,         return(true);,     },     ,     private int ultimo(){,         return(estante.size()-1);,     },     ,     public E get(){,         if (estante.isEmpty()){,             return(null);,         },         return(estante.get(ultimo()).getMercadoria());,     },     ,     public int getDiasEmbarcada(){,         if (estante.isEmpty()){,             return(-1);,         },         return((int)ChronoUnit.DAYS.between(estante.get(ultimo()).getData(),LocalDate.now()));,     }    ,     ,     public E retira(){,         if (estante.isEmpty()){,             return(null);,         },         E aux = estante.get(ultimo()).getMercadoria();,         estante.remove(ultimo());,         return(aux);,     },     ,     public int size(){,         return(estante.size());,     }        ,     ,     public boolean isFull(){,         return(estante.isFull());,     },     ,     public boolean isEmpty(){,         return(estante.isEmpty());,     }, }]
[/**,  * Created by andriuslima on 01/09/16.,  */, public class App{,     class Nodo{,         public String texto;,         public boolean pergunta;,         public Nodo respostaSim;,         public Nodo respostaNao;, ,         public Nodo(String umTexto,boolean ePergunta){,             texto = umTexto;,             pergunta = ePergunta;,             respostaSim = null;,             respostaNao = null;,         },     }, ,     private Nodo primNodo, proxNodo;, ,     public AdivinhaBixo(){,         primNodo = new Nodo("E um peixe",false);,         proxNodo = primNodo;,     }, ,     public void inserePergDiferencia(String perg,String bixo){,         Nodo novoBixo = new Nodo(bixo,false);,         Nodo novaPergunta = new Nodo(perg,true);,         novaPergunta.respostaSim = novoBixo;,         novaPergunta.respostaNao = primNodo;,         primNodo = novaPergunta;,     }, ,     public void fazProxPergunta(){,         if (proxNodo.ePergunta == false){,             System.out.println("Adivinhei !!");,             System.out.println(proxNodo.texto);,         }else{,             System.out.println("Pergunta:");,             System.out.println(proxNodo.texto);,         },     }, ,     public void trataResposta(String resp){,         switch(resp){,             case "Sim":,                 break;,             case "Nao":,                 break;,             default:,                 System.out.println("Burro, não sabe jogar");,         },     }, }]
[class AdivinhaBixo{, ,     // Nodo da arvore de conhecimento,     class Nodo{ ,         public String texto; // Armazena uma pergunta ou um bixo,         public boolean pergunta; // Define se o texto e uma pergunta (true) ou um bixo (false),         public Nodo respostaSim; // Referencia para o nodo a ser usado em caso de resposta sim,         public Nodo respostaNao; // Referencia para o nodo a ser usado em caso de resposta nao,     ,         public Nodo(String umTexto,boolean ePergunta){,             texto = umTexto;,             pergunta = ePergunta;,             respostaSim = null;,             respostaNao = null;,         }    ,     },     ,     private Nodo primNodo; // Referencia fixa para o primeiro nodo da arvore de conhecimento,     private Nodo proxNodo; // Referencia o nodo corrente,     private Nodo antNodo;  // Referencia o nodo anterior ao nodo corrente,     private Estado estado; // Indica o estado atual do jogo,     ,     public AdivinhaBixo(){,         primNodo = new Nodo("peixe",false); // Define peixe como sendo o primeiro bixo na base de dados,         proxNodo = primNodo;,         antNodo = null;,         estado = Estado.JOGANDO;,     },     ,     // Retorna o estado do jogo,     public Estado getEstado(){,         return(estado);,     },     ,     // Retorna o bixo referenciado pelo nodo corrente,     // se o nodo corrente nao for uma pergunta,     public String getBixoCorrente(){,         if (!proxNodo.pergunta){,             return(proxNodo.texto);,         }else{,             return(null);,         },     }, ,     // Acerta a posicao de proxNodo e antNodo de maneira a permitir o inicio de nova partida,     public void encerraPartida(){,         // TODO:,     }, ,     // Insere nova pergunta e novo bixo na arvore de conhecimento        ,     public void aprender(String perg,String bixo){,         // TODO:,     },     ,     // Exibe a proxima manifestacao do programa,     // Pode ser uma pergunta ou uma tentativa de adivinhacao,     public String proximaPergunta(){,         if (proxNodo.pergunta == false){,           return("Acho que divinhei !!\nE um "+proxNodo.texto+"?");,         }else{,           return("O animal "+proxNodo.texto+"?");,         },     },     ,     // Conforme a resposta do usuario, define o estado do jogo e ,     // acerta as referencias proxNodo e antNodo,     public void trataResposta(String resp){,         switch(resp){,             case "sim":,                 // TODO,                 break;,             case "nao":,                 // TODO,                 break;,             default:,                 estado = Estado.BOBAGEM;,         },     }, },          , , , , , , , , , ]
[import java.util.*;, , public class App{,     private AdivinhaBixo ab = new AdivinhaBixo();,     private static String msgs[] = {"Jogo de adivinhacao de bixos",,                                     " ",,                                     "Pense em um bixo !!",,                                     "O sistema irá tentar adivinhar o bixo em que estas pensando",,                                     "Para tanto irá fazer uma serie de perguntas",,                                     "Responda apenas \"s\" (sim) ou \"n\" (nao) para as perguntas",,                                     "Caso o sistema não consiga adivinhar você sera solicitado a ajuda-lo a aprender",,                                     "de maneira que não erre novamente da proxima vez.",                                    };,     public void telaPrincipal(){,         // Exibe as mensagens iniciais,         for(String m:msgs){,             System.out.println(m);,         },         // Loop principal,         Scanner s = new Scanner(System.in);,         boolean novaPartida = true;,         while(novaPartida){,             Estado estado = Estado.JOGANDO;,             boolean fimPartida = false;,             while(!fimPartida){,                 System.out.println(ab.proximaPergunta());,                 String resp = s.nextLine();,                 ab.trataResposta(resp);,                 estado = ab.getEstado();,                 switch(estado){,                     case BOBAGEM:,                         System.out.println("Preste atencao!! Responda apenas \"s\" (para sim) ou \"n\" (para nao)");,                         break;,                     case JOGANDO:,                         ab.proximaPergunta();,                         break;,                     case GANHOU:,                         ab.encerraPartida();,                         System.out.println("Sou um gênio !!");,                         System.out.println("Adivinhei !!");,                         fimPartida = true;,                         break;,                     case APRENDENDO:,                         System.out.println("Em que bixo vocês estava pensando?");,                         String novoBixo = s.nextLine();,                         System.out.println("Que pergunta você faria para diferenciar um "+ab.getBixoCorrente()+" de um "+novoBixo+"?");,                         String novaPergunta = s.nextLine();,                         ab.aprender(novaPergunta,novoBixo);,                         fimPartida = true;,                         break;,                 },             },             System.out.println("Fim da partida!!");,             System.out.println("Deseja jogar outra vez? (sim/nao)");,             String resp = s.nextLine();,             if (!resp.equals("sim")){,                 novaPartida = false;,             },         },     },     ,     public static void main(String args[]){,         App ap = new App();,         ap.telaPrincipal();,     }, }]
[enum Estado{,     JOGANDO,GANHOU,APRENDENDO,BOBAGEM;, }, ]
[import java.awt.*;, import java.awt.geom.AffineTransform;, import java.awt.geom.Path2D;, import java.awt.geom.Rectangle2D;, import javax.swing.*;,  , /**,  * Canvas displaying a simple drawing: the coordinate-system axes + some points and their coordinates.,  * It is used to demonstrate the Zoom and Pan functionality.,  *,  * @author Sorin Postelnicu,  * @since July 13, 2009,  */,  , public class ZoomAndPanCanvas extends JComponent {,  ,     private boolean init = true;, ,     private ZoomAndPanListener zoomAndPanListener;,     private ListTAD listaOriginal;,     private JanelaAplicacao app;,  ,     public ZoomAndPanCanvas(JanelaAplicacao app, ListTAD lista) {,         this.zoomAndPanListener = new ZoomAndPanListener(this);,         this.addMouseListener(zoomAndPanListener);,         this.addMouseMotionListener(zoomAndPanListener);,         this.addMouseWheelListener(zoomAndPanListener);,         this.app = app;,         this.listaOriginal = lista;,     },  ,     public ZoomAndPanCanvas(int minZoomLevel, int maxZoomLevel, double zoomMultiplicationFactor) {,         this.zoomAndPanListener = new ZoomAndPanListener(this, minZoomLevel, maxZoomLevel, zoomMultiplicationFactor);,         this.addMouseListener(zoomAndPanListener);,         this.addMouseMotionListener(zoomAndPanListener);,         this.addMouseWheelListener(zoomAndPanListener);,     },  ,     public Dimension getPreferredSize() {,         return new Dimension(600, 600);,     },  ,     public void paintComponent(Graphics g1) {,         super.paintComponent(g1);,         Graphics2D g = (Graphics2D) g1;,         if (init) {,             // Initialize the viewport by moving the origin to the center of the window,,             // and inverting the y-axis to point upwards.,             init = false;,             Dimension d = getSize();,             int xc = d.width / 2;,             int yc = d.height / 2;,             g.translate(xc, yc);,             g.scale(1, -1);,             // Save the viewport to be updated by the ZoomAndPanListener,             zoomAndPanListener.setCoordTransform(g.getTransform());,         } else {,             // Restore the viewport after it was updated by the ZoomAndPanListener,             g.setTransform(zoomAndPanListener.getCoordTransform());,         }, ,         ListTAD pontos = app.getSimplified();,         ,         Path2D.Double path = new Path2D.Double();        ,         Ponto pontoInicio = (Ponto) pontos.get(0);,         path.moveTo(pontoInicio.getX(),pontoInicio.getY());        ,         for(int i=1; i<pontos.size()-1; i++) {,             Ponto p = (Ponto) pontos.get(i);,             path.lineTo(p.getX(), p.getY());,         },         path.lineTo(pontoInicio.getX(),pontoInicio.getY());,         Rectangle2D rect = path.getBounds2D();,         //System.out.println(rect);,         //System.out.println(rect.getCenterX());,         //System.out.println(rect.getCenterY());, ,         AffineTransform t = g.getTransform();,         g.scale(70,70);,         g.translate(-rect.getCenterX(),-rect.getCenterY());, ,         g.setStroke(new BasicStroke(0.01f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));,         g.draw(path);,         g.setTransform(t);, ,         //g2.setTransform(t);,          ,         // Create an "upside-down" font to correct for the inverted y-axis,         //Font font = g.getFont();,         //AffineTransform affineTransform = new AffineTransform();,         //affineTransform.scale(1, -1);,         //g.setFont(font.deriveFont(affineTransform));,     },  , }]
[import java.awt.*;, import java.awt.event.*;, import java.awt.geom.AffineTransform;, import java.awt.geom.NoninvertibleTransformException;, import java.awt.geom.Point2D;,  , /**,  * Listener that can be attached to a Component to implement Zoom and Pan functionality.,  *,  * @author Sorin Postelnicu,  * @since Jul 14, 2009,  */, public class ZoomAndPanListener implements MouseListener, MouseMotionListener, MouseWheelListener {,     public static final int DEFAULT_MIN_ZOOM_LEVEL = -20;,     public static final int DEFAULT_MAX_ZOOM_LEVEL = 10;,     public static final double DEFAULT_ZOOM_MULTIPLICATION_FACTOR = 1.2;,  ,     private Component targetComponent;,  ,     private int zoomLevel = 0;,     private int minZoomLevel = DEFAULT_MIN_ZOOM_LEVEL;,     private int maxZoomLevel = DEFAULT_MAX_ZOOM_LEVEL;,     private double zoomMultiplicationFactor = DEFAULT_ZOOM_MULTIPLICATION_FACTOR;,     ,     private Point dragStartScreen;,     private Point dragEndScreen;,     private AffineTransform coordTransform = new AffineTransform();,  ,     public ZoomAndPanListener(Component targetComponent) {,         this.targetComponent = targetComponent;,     },  ,     public ZoomAndPanListener(Component targetComponent, int minZoomLevel, int maxZoomLevel, double zoomMultiplicationFactor) {,         this.targetComponent = targetComponent;,         this.minZoomLevel = minZoomLevel;,         this.maxZoomLevel = maxZoomLevel;,         this.zoomMultiplicationFactor = zoomMultiplicationFactor;,     },   ,     public void mouseClicked(MouseEvent e) {,     },  ,     public void mousePressed(MouseEvent e) {,         dragStartScreen = e.getPoint();,         dragEndScreen = null;,     },  ,     public void mouseReleased(MouseEvent e) {, //        moveCamera(e);,     },  ,     public void mouseEntered(MouseEvent e) {,     },  ,     public void mouseExited(MouseEvent e) {,     },  ,     public void mouseMoved(MouseEvent e) {,     },  ,     public void mouseDragged(MouseEvent e) {,         moveCamera(e);,     },  ,     public void mouseWheelMoved(MouseWheelEvent e) {, //        System.out.println("============= Zoom camera ============");,         zoomCamera(e);,     },  ,     private void moveCamera(MouseEvent e) {, //        System.out.println("============= Move camera ============");,         try {,             dragEndScreen = e.getPoint();,             Point2D.Float dragStart = transformPoint(dragStartScreen);,             Point2D.Float dragEnd = transformPoint(dragEndScreen);,             double dx = dragEnd.getX() - dragStart.getX();,             double dy = dragEnd.getY() - dragStart.getY();,             coordTransform.translate(dx, dy);,             dragStartScreen = dragEndScreen;,             dragEndScreen = null;,             targetComponent.repaint();,         } catch (NoninvertibleTransformException ex) {,             ex.printStackTrace();,         },     },  ,     private void zoomCamera(MouseWheelEvent e) {,         try {,             int wheelRotation = e.getWheelRotation();,             Point p = e.getPoint();,             if (wheelRotation > 0) {,                 if (zoomLevel < maxZoomLevel) {,                     zoomLevel++;,                     Point2D p1 = transformPoint(p);,                     coordTransform.scale(1 / zoomMultiplicationFactor, 1 / zoomMultiplicationFactor);,                     Point2D p2 = transformPoint(p);,                     coordTransform.translate(p2.getX() - p1.getX(), p2.getY() - p1.getY());,                     targetComponent.repaint();,                 },             } else {,                 if (zoomLevel > minZoomLevel) {,                     zoomLevel--;,                     Point2D p1 = transformPoint(p);,                     coordTransform.scale(zoomMultiplicationFactor, zoomMultiplicationFactor);,                     Point2D p2 = transformPoint(p);,                     coordTransform.translate(p2.getX() - p1.getX(), p2.getY() - p1.getY());,                     targetComponent.repaint();,                 },             },         } catch (NoninvertibleTransformException ex) {,             ex.printStackTrace();,         },     },  ,     private Point2D.Float transformPoint(Point p1) throws NoninvertibleTransformException {, //        System.out.println("Model -> Screen Transformation:");, //        showMatrix(coordTransform);,         AffineTransform inverse = coordTransform.createInverse();, //        System.out.println("Screen -> Model Transformation:");, //        showMatrix(inverse);,  ,         Point2D.Float p2 = new Point2D.Float();,         inverse.transform(p1, p2);,         return p2;,     },  ,     private void showMatrix(AffineTransform at) {,         double[] matrix = new double[6];,         at.getMatrix(matrix);  // { m00 m10 m01 m11 m02 m12 },         int[] loRow = {0, 0, 1};,         for (int i = 0; i < 2; i++) {,             System.out.print("[ ");,             for (int j = i; j < matrix.length; j += 2) {,                 System.out.printf("%5.1f ", matrix[j]);,             },             System.out.print("]\n");,         },         System.out.print("[ ");,         for (int i = 0; i < loRow.length; i++) {,             System.out.printf("%3d   ", loRow[i]);,         },         System.out.print("]\n");,         System.out.println("---------------------");,     },  ,  ,     public int getZoomLevel() {,         return zoomLevel;,     },  ,     public void setZoomLevel(int zoomLevel) {,         this.zoomLevel = zoomLevel;,     },  ,     public AffineTransform getCoordTransform() {,         return coordTransform;,     },  ,     public void setCoordTransform(AffineTransform coordTransform) {,         this.coordTransform = coordTransform;,     }, }]
[public class ListSimpleLinked implements ListTAD {, ,     protected class Node {, ,         public Object element;,         public Node next;, ,         public Node(Object e) {,             element = e;,             next = null;,         },     },     private int iterator;,     private Node head;,     private Node tail;,     private int count;, ,     public int getContador(){return iterator;}, ,     public ListSimpleLinked() {,         head = null;,         tail = null;,         count = 0;,         iterator = 0;,     }, ,     public void add(Object element) {,         Node n = new Node(element);,         if (tail != null) {,             tail.next = n;, 			iterator += 1;,         } else {,             head = n;, 			iterator += 1;,         },         tail = n;,         count++;,     }, ,     public void addFirst(Object element) {,         Node n = new Node(element);,         if (tail == null) {,             tail = n;,         },         n.next = head;,         head = n;,         count++;, 		iterator += 1;,     }, ,     public void add(int index, Object element) {,         if (index < 0 || index > size()) {,             throw new IndexOutOfBoundsException("Fora do limite valido");,         }, ,         if (index == 0) // inserir no inicio da lista ?,         {,             addFirst(element);,             return;,         } else if (index == size()) // inserindo no final ?,         {,             add(element);,             return;,         }, ,         Node novo = new Node(element);,         Node ant = head;,         Node atual = head.next;,         int pos = 1;,         while (pos < index) {,             ant = ant.next;,             atual = atual.next;,             pos++;, 			iterator += 1;,         },         ant.next = novo;,         novo.next = atual;,         count++;,     }, ,     public void removeFirst() {,         if (head == null) {,             throw new IndexOutOfBoundsException("Lista vazia!");,         },         head = head.next;,         if (head == null) // removido o ultimo ?,         {,             tail = null;,         },     }, ,     public void clear() {,         head = null;,         tail = null;,         count = 0;,     }, ,     public boolean contains(Object element) {,         int pos = indexOf(element);,         if (pos == -1) {,             return false;,         },         return true;,     }, ,     public Object get(int index) {,         if ((index < 0) || (index >= count)) {,             throw new IndexOutOfBoundsException("Index = " + index);,         },         Node target = head;,         for (int i = 0; i < index; i++) {,             target = target.next;,             iterator += 1;,         },         return target.element;,     }, ,     public int indexOf(Object element) {,         Node target = head;,         int pos = 0;,         while (target != null) {,             if (target.element.equals(element)) {,                 return pos;,             },             target = target.next;,             pos++;, 			iterator += 1;,         },         return -1; // nao achou,     }, ,     public boolean isEmpty() {,         if (count == 0) {,             return true;,         } else {,             return false;,         },     }, ,     public boolean remove(Object e) {,         Node ant, aux;,         boolean achou = false;,         if (head == null) {,             achou = false;,         } else if (head.element.equals(e)) {,             if (tail == head) {,                 tail = null;,             },             head = head.next;,             count--;,             achou = true;,         } else {,             ant = head;,             aux = head.next;,             while ((aux != null) && (!achou)) {,                 if (aux.element.equals(e)) {,                     if (aux == tail) {,                         tail = ant;,                     },                     ant.next = aux.next;,                     count--;,                     achou = true;,                 } else {,                     ant = aux;,                     aux = aux.next;,                 }, 				iterator += 1;,             },         },         return achou;,     }, ,     public Object remove(int index) {,         if ((index < 0) || (index >= count)) {,             throw new IndexOutOfBoundsException("Index = " + index);,         },         Node atual = head;,         Node ant = null;,         // Buscar nodo pelo indice informado,         for (int i = 0; i < index; i++) {,             ant = atual;,             atual = atual.next;, 			iterator += 1;,         },         Object item = atual.element;,         // Testar caso remocao do primeiro,         if (atual == head) {,             head = atual.next;,         } else { // Se não é do primeiro, é no meio ...,             ant.next = atual.next;,         },         // Complementa o processo se for remocao do ultimo,         if (atual == tail) {,             tail = ant;,         },         atual.element = null;,         atual.next = null;,         count--;,         return item;,     }, ,     public void removeLast() {,         remove(count - 1);,     }, ,     public int size() {,         return count;,     }, ,     public Object set(int index, Object element) {,         if ((index < 0) || (index >= count)) {,             throw new IndexOutOfBoundsException("Index = " + index);,         },         Node target = head;,         for (int i = 0; i < index; i++) {,             target = target.next;, 			iterator += 1;,         },         Object aux = target.element;,         target.element = element;,         return aux;,     }, ,     public String toString() {,         String aux = "";,         Node atual = head;,         while (atual != null) {,             aux = aux + atual.element + " ";,             atual = atual.next;, 			iterator += 1;,          },         return aux;,     }, }]
[/**,  *,  * @author flash,  */, public class Ponto {,     private double x;,     private double y;, ,     public Ponto(double x, double y) {,         this.x = x;,         this.y = y;,     }, ,     public double getX() {,         return x;,     }, ,     public void setX(double x) {,         this.x = x;,     }, ,     public double getY() {,         return y;,     }, ,     public void setY(double y) {,         this.y = y;,     }, ,     public String toString() {,         return "("+x+","+y+")";,     }, ,     public double distancia(Ponto outro) {,         return Math.sqrt(Math.pow(x-outro.x,2)+Math.pow(y-outro.y,2));,     }, }]
[/**,  * @author Julio Machado, Marcelo Cohen,  */, import java.awt.*;, import java.awt.event.ActionEvent;, import java.awt.event.ActionListener;, import java.io.File;, import java.io.FileNotFoundException;, import java.util.Locale;, import java.util.Scanner;, import javax.swing.*;, , public class JanelaAplicacao extends JFrame {, ,     private ZoomAndPanCanvas painel;,     private JMenu menuEditar;,     private JScrollBar scroll;,     private JLabel labelTotal;,     private ListTAD lista, listaSimplificada;, ,     public JanelaAplicacao() {,         super("Simplificação de Polígonos");,         this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);,         JPanel principal = new JPanel();,         this.setContentPane(principal);, ,         lista = carregaArquivo("pontos.txt");,         painel = new ZoomAndPanCanvas(this, lista);, ,         principal.setLayout(new BorderLayout());,         principal.add(painel, BorderLayout.CENTER);, ,         JMenuBar menu = new JMenuBar();,         menuEditar = new JMenu("Arquivo");,         JMenuItem itemLoad = new JMenuItem("Carregar polígono");, ,         menuEditar.add(itemLoad);,         menu.add(menuEditar);,         //this.setJMenuBar(menu);, ,         labelTotal = new JLabel(String.format("%-6d", lista.size()));, ,         JPanel bottomPane = new JPanel();,         bottomPane.add(labelTotal);,         JButton botao18 = new JButton("1/8");,         JButton botao14 = new JButton("1/4");,         JButton botao12 = new JButton("1/2");,         JButton botaoTodos = new JButton("TODOS");,         bottomPane.add(botao18);,         bottomPane.add(botao14);,         bottomPane.add(botao12);,         bottomPane.add(botaoTodos);,         principal.add(bottomPane, BorderLayout.PAGE_END);, ,         botao18.addActionListener(new ActionListener() {, ,             public void actionPerformed(ActionEvent ae) {,                 listaSimplificada = simplify(lista.size() / 8);,                 labelTotal.setText(String.format("%-6d", listaSimplificada.size()));,                 painel.repaint();, 				,             },         });, ,         botao14.addActionListener(new ActionListener() {, ,             public void actionPerformed(ActionEvent ae) {,                 listaSimplificada = simplify(lista.size() / 4);,                 labelTotal.setText(String.format("%-6d", listaSimplificada.size()));,                 painel.repaint();,             },         });, ,         botao12.addActionListener(new ActionListener() {, ,             public void actionPerformed(ActionEvent ae) {,                 listaSimplificada = simplify(lista.size() / 2);,                 labelTotal.setText(String.format("%-6d", listaSimplificada.size()));,                 painel.repaint();,             },         });, ,         botaoTodos.addActionListener(new ActionListener() {, ,             public void actionPerformed(ActionEvent ae) {,                 listaSimplificada = simplify(lista.size());,                 labelTotal.setText(String.format("%-6d", listaSimplificada.size()));,                 painel.repaint();,             },         });, ,         itemLoad.addActionListener(new ActionListener() {, ,             public void actionPerformed(ActionEvent e) {,                 throw new UnsupportedOperationException();,             },         });,         this.setSize(500, 500);,         this.pack();, ,         listaSimplificada = simplify(lista.size());,         //painel.createBufferStrategy(2);,     }, ,     private ListTAD carregaArquivo(String nome) {,         ListTAD lista = new ListSimpleLinked();,         //ListTAD lista = new ListArrayObjectImpl();,         try {,             Scanner scanner = new Scanner(new File(nome));,             //scanner.useDelimiter("\n"); //System.getProperty("line.separator"));,             System.out.println(Locale.getDefault());,             scanner.useLocale(Locale.ENGLISH);,             while (scanner.hasNext()) {,                 double x = scanner.nextDouble();,                 double y = scanner.nextDouble();,                 //System.out.println("X="+x+", Y="+y);,                 lista.add(new Ponto(x, y));,             },             scanner.close();, ,         } catch (FileNotFoundException e) {,             throw new RuntimeException(e);,         }, 		System.out.println("Contador na leitura: " + lista.getContador() );,         return lista;,     }, ,     ListTAD getSimplified() {,         return listaSimplificada;,     }, ,     // Recebe o total de pontos desejado, ,     // e retorna uma nova lista apenas com os pontos necessários,     ListTAD simplify(int totalPontos) {,         ListTAD nova = new ListSimpleLinked();,         //ListTAD nova = new ListArrayObjectImpl();, ,         // Copia todos os pontos da lista original para a nova,         for (int i = 0; i < lista.size(); i++) {,             nova.add(lista.get(i));,         }, ,         // Gera a lista simplificada,         // Remove o ponto de menor "peso" da lista, um por vez,,         // até que a lista atinja o tamanho desejado,         // Para calcula o peso de um ponto Pi, calcula-se as,         // distancias entre: d1 = dist(Pi,Pi-1), d2=dist(Pi,Pi+1),         // e d3 = dist(Pi-1,Pi+1),         // O peso e dado pela formula: p = d1+d2-d3,         while (nova.size() > totalPontos) {,             double menorD = 10000;,             int menorPos = 0;,             int pos = 0;,             Ponto prev = (Ponto)nova.get(nova.size()-1);,             Ponto atual = (Ponto)nova.get(pos);,             Ponto next = (Ponto)nova.get(pos+1);,             while (pos < nova.size()-2) {,                 double l1 = atual.distancia(prev);,                 double l2 = atual.distancia(next);,                 double l3 = prev.distancia(next);,                 double d = l1 + l2 - l3;,                 if (d < menorD) {,                     menorD = d;,                     menorPos = pos;,                 },                 pos++;,                 prev = atual;,                 atual = next;,                 next = (Ponto)nova.get(pos+1);,             },             nova.remove(menorPos);,         }, 		System.out.println("contador para: " + nova.getContador());,         return nova;,     }, }]
[/**,  *,  * @author Bernardo Copstein,  */, public class ListArrayObjectImpl implements ListTAD {, ,     protected static final int INITIAL_SIZE = 10;,     protected Object[] data;,     protected int count;,     protected int capacity;, 	public int contador;, 	, 	public int getContador(){ return contador;}, ,     public ListArrayObjectImpl() {,         data = new Object[INITIAL_SIZE];,         count = 0;,         capacity = INITIAL_SIZE;, 		contador = 0;,     }, ,     @Override,     public void add(Object element) {,         if (count == capacity) {,             setCapacity(capacity * 2);,         },         data[count] = element;, 		contador += 1;,         count++;,     }, ,     @Override,     public void add(int index, Object element) {,         if ((index < 0) || (index > count)) {,             throw new IndexOutOfBoundsException("Index = " + index);,         },         if (count == capacity) {,             setCapacity(capacity * 2);,         },         for (int i = count - 1; i >= index; i--) {,             data[i + 1] = data[i];, 			contador += 1;,         },         data[index] = element;,         count++;,     }, ,     @Override,     public void clear() {,         data = new Object[INITIAL_SIZE];,         count = 0;,         capacity = INITIAL_SIZE;,     }, ,     @Override,     public boolean contains(Object element) {,         int target = 0;,         boolean achou = false;,         while ((target < count) && (!achou)) {,             if (data[target].equals(element)) {,                 achou = true;,             } else {,                 target++;,             }, 			contador += 1;,         },         return achou;,     }, ,     @Override,     public Object get(int index) {,         if ((index < 0) || (index >= count)) {,             throw new IndexOutOfBoundsException("Index = " + index);,         },         return data[index];,     }, ,     @Override,     public int indexOf(Object element) {,         int target = 0;,         boolean achou = false;,         while ((target < count) && (!achou)) {,             if (data[target].equals(element)) {,                 achou = true;,             } else {,                 target++;,             }, 			contador += 1;,         },         if (achou) {,             return target;,         } else {,             return -1;,         },     }, ,     @Override,     public boolean isEmpty() {,         return (count == 0);,     }, ,     @Override,     public boolean remove(Object element) {,         int i = indexOf(element);,         if (i > 0) {,             remove(i);,             return (true);,         },         return (false);,     }, ,     @Override,     public Object remove(int index) {,         if ((index < 0) || (index >= count)) {,             throw new IndexOutOfBoundsException("Index = " + index);,         },         Object item = data[index];,         for (int i = index; i < count - 1; i++) //deslocar item uma posição para esquerda,         {,             data[i] = data[i + 1];, 			contador += 1;,         },         count--;,         data[count] = null;,         return item;,     }, ,     @Override,     public Object set(int index, Object element) {,         if ((index < 0) || (index >= count)) {,             throw new IndexOutOfBoundsException("Index = " + index);,         },         Object item = data[index];,         data[index] = element;,         return item;,     }, ,     @Override,     public int size() {,         return count;,     }, ,     private void setCapacity(int newCapacity) {,         if (newCapacity != capacity) {,             int min = 0;,             Object[] newData = new Object[newCapacity];,             if (capacity < newCapacity) {,                 min = capacity;,             } else {,                 min = newCapacity;,             },             for (int i = 0; i < min; i++) {,                 newData[i] = data[i];, 				contador += 1;,             },             data = newData;,             capacity = newCapacity;,         },     }, }]
[/**,  * Tipo abstrato de dados Lista,  * @author Bernardo Copstein, Julio Machado, Marcelo Cohen,  */, public interface ListTAD {, 	/**, 	 * Adiciona um elemento ao final da lista, 	 * @param element elemento a ser adicionado ao final da lista, 	 */,     void add(Object element);,     /**,      * Insere um elemento em uma determinada posição da lista,      * @param index a posição da lista onde o elemento será inserido,      * @param element elemento a ser inserido,      * @throws IndexOutOfBoundsException se (index < 0 || index > size()),      */,     void add (int index, Object element);, ,     /**,      * Esvazia a lista,      *,      */,     void clear(); ,     /**,      * Retorna true se a lista contém o elemento especificado,      * @param element o elemento a ser testado,      * @return true se a lista contém o elemento especificado,      */,     boolean contains(Object element);,     /**,      * Retorna o elemento de uma determinada posi��o da lista,      * @param index a posição da lista,      * @return o elemento da posição especificada,      * @throws IndexOutOfBoundsException se (index < 0 || index >= size()),      */,     Object get(int index);,     ,     /**,      * Retorna o índice da primeira ocorrência do elemento na lista, ou -1 se a lista não contém o elemento,      * @param element o elemento a ser buscado,      * @return o índice da primeira ocorrência do elemento na lista, ou -1 se a lista não contém o elemento,      */,     int indexOf (Object element);,        ,     /**,      * Retorna true se a lista não contém elementos,      * @return true se a lista não contém elementos,      */,     boolean isEmpty();    ,     /**,      * Remove a primeira ocorrência do elemento na lista, se estiver presente,      * @param element o elemento a ser removido,      * @return true se a lista contém o elemento especificado,      */,     boolean remove(Object element);,     ,     /**,      * Remove o elemento de uma determinada posição da lista,      * @param index a posição da lista,      * @return o elemento que foi removido da lista,      * @throws IndexOutOfBoundsException se (index < 0 || index >= size()),      */,     Object remove(int index);,         ,     /**,      * Retorna o número de elementos da lista,      * @return o número de elementos da lista,      */,     int size();,     /**,      * Substitui o elemento armanzenado em uma determinada posição da lista pelo elemento indicado,      * @param index a posição da lista,      * @param element o elemento a ser armazenado na lista ,      * @return o elemento anterior armazenado na posição da lista,      * @throws IndexOutOfBoundsException se (index < 0 || index >= size()),      */,     Object set(int index, Object element);, 	int getContador();, }]
[/**,  * @author flash,  */, public class Main {, ,     public static void main(String args[]) {,         JanelaAplicacao app = new JanelaAplicacao();,         app.setVisible(true);,     }            , , }]
[import java.awt.*;, import java.awt.geom.AffineTransform;, import java.awt.geom.Path2D;, import java.awt.geom.Rectangle2D;, import javax.swing.*;,  , /**,  * Canvas displaying a simple drawing: the coordinate-system axes + some points and their coordinates.,  * It is used to demonstrate the Zoom and Pan functionality.,  *,  * @author Sorin Postelnicu,  * @since July 13, 2009,  */,  , public class ZoomAndPanCanvas extends JComponent {,  ,     private boolean init = true;, ,     private ZoomAndPanListener zoomAndPanListener;,     private ListTAD listaOriginal;,     private JanelaAplicacao app;,  ,     public ZoomAndPanCanvas(JanelaAplicacao app, ListTAD lista) {,         this.zoomAndPanListener = new ZoomAndPanListener(this);,         this.addMouseListener(zoomAndPanListener);,         this.addMouseMotionListener(zoomAndPanListener);,         this.addMouseWheelListener(zoomAndPanListener);,         this.app = app;,         this.listaOriginal = lista;,     },  ,     public ZoomAndPanCanvas(int minZoomLevel, int maxZoomLevel, double zoomMultiplicationFactor) {,         this.zoomAndPanListener = new ZoomAndPanListener(this, minZoomLevel, maxZoomLevel, zoomMultiplicationFactor);,         this.addMouseListener(zoomAndPanListener);,         this.addMouseMotionListener(zoomAndPanListener);,         this.addMouseWheelListener(zoomAndPanListener);,     },  ,     public Dimension getPreferredSize() {,         return new Dimension(600, 600);,     },  ,     public void paintComponent(Graphics g1) {,         super.paintComponent(g1);,         Graphics2D g = (Graphics2D) g1;,         if (init) {,             // Initialize the viewport by moving the origin to the center of the window,,             // and inverting the y-axis to point upwards.,             init = false;,             Dimension d = getSize();,             int xc = d.width / 2;,             int yc = d.height / 2;,             g.translate(xc, yc);,             g.scale(1, -1);,             // Save the viewport to be updated by the ZoomAndPanListener,             zoomAndPanListener.setCoordTransform(g.getTransform());,         } else {,             // Restore the viewport after it was updated by the ZoomAndPanListener,             g.setTransform(zoomAndPanListener.getCoordTransform());,         }, ,         ListTAD pontos = app.getSimplified();,         ,         Path2D.Double path = new Path2D.Double();        ,         Ponto pontoInicio = (Ponto) pontos.get(0);,         path.moveTo(pontoInicio.getX(),pontoInicio.getY());        ,         for(int i=1; i<pontos.size()-1; i++) {,             Ponto p = (Ponto) pontos.get(i);,             path.lineTo(p.getX(), p.getY());,         },         path.lineTo(pontoInicio.getX(),pontoInicio.getY());,         Rectangle2D rect = path.getBounds2D();,         //System.out.println(rect);,         //System.out.println(rect.getCenterX());,         //System.out.println(rect.getCenterY());, ,         AffineTransform t = g.getTransform();,         g.scale(70,70);,         g.translate(-rect.getCenterX(),-rect.getCenterY());, ,         g.setStroke(new BasicStroke(0.01f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));,         g.draw(path);,         g.setTransform(t);, ,         //g2.setTransform(t);,          ,         // Create an "upside-down" font to correct for the inverted y-axis,         //Font font = g.getFont();,         //AffineTransform affineTransform = new AffineTransform();,         //affineTransform.scale(1, -1);,         //g.setFont(font.deriveFont(affineTransform));,     },  , }]
[import java.awt.*;, import java.awt.event.*;, import java.awt.geom.AffineTransform;, import java.awt.geom.NoninvertibleTransformException;, import java.awt.geom.Point2D;,  , /**,  * Listener that can be attached to a Component to implement Zoom and Pan functionality.,  *,  * @author Sorin Postelnicu,  * @since Jul 14, 2009,  */, public class ZoomAndPanListener implements MouseListener, MouseMotionListener, MouseWheelListener {,     public static final int DEFAULT_MIN_ZOOM_LEVEL = -20;,     public static final int DEFAULT_MAX_ZOOM_LEVEL = 10;,     public static final double DEFAULT_ZOOM_MULTIPLICATION_FACTOR = 1.2;,  ,     private Component targetComponent;,  ,     private int zoomLevel = 0;,     private int minZoomLevel = DEFAULT_MIN_ZOOM_LEVEL;,     private int maxZoomLevel = DEFAULT_MAX_ZOOM_LEVEL;,     private double zoomMultiplicationFactor = DEFAULT_ZOOM_MULTIPLICATION_FACTOR;,     ,     private Point dragStartScreen;,     private Point dragEndScreen;,     private AffineTransform coordTransform = new AffineTransform();,  ,     public ZoomAndPanListener(Component targetComponent) {,         this.targetComponent = targetComponent;,     },  ,     public ZoomAndPanListener(Component targetComponent, int minZoomLevel, int maxZoomLevel, double zoomMultiplicationFactor) {,         this.targetComponent = targetComponent;,         this.minZoomLevel = minZoomLevel;,         this.maxZoomLevel = maxZoomLevel;,         this.zoomMultiplicationFactor = zoomMultiplicationFactor;,     },   ,     public void mouseClicked(MouseEvent e) {,     },  ,     public void mousePressed(MouseEvent e) {,         dragStartScreen = e.getPoint();,         dragEndScreen = null;,     },  ,     public void mouseReleased(MouseEvent e) {, //        moveCamera(e);,     },  ,     public void mouseEntered(MouseEvent e) {,     },  ,     public void mouseExited(MouseEvent e) {,     },  ,     public void mouseMoved(MouseEvent e) {,     },  ,     public void mouseDragged(MouseEvent e) {,         moveCamera(e);,     },  ,     public void mouseWheelMoved(MouseWheelEvent e) {, //        System.out.println("============= Zoom camera ============");,         zoomCamera(e);,     },  ,     private void moveCamera(MouseEvent e) {, //        System.out.println("============= Move camera ============");,         try {,             dragEndScreen = e.getPoint();,             Point2D.Float dragStart = transformPoint(dragStartScreen);,             Point2D.Float dragEnd = transformPoint(dragEndScreen);,             double dx = dragEnd.getX() - dragStart.getX();,             double dy = dragEnd.getY() - dragStart.getY();,             coordTransform.translate(dx, dy);,             dragStartScreen = dragEndScreen;,             dragEndScreen = null;,             targetComponent.repaint();,         } catch (NoninvertibleTransformException ex) {,             ex.printStackTrace();,         },     },  ,     private void zoomCamera(MouseWheelEvent e) {,         try {,             int wheelRotation = e.getWheelRotation();,             Point p = e.getPoint();,             if (wheelRotation > 0) {,                 if (zoomLevel < maxZoomLevel) {,                     zoomLevel++;,                     Point2D p1 = transformPoint(p);,                     coordTransform.scale(1 / zoomMultiplicationFactor, 1 / zoomMultiplicationFactor);,                     Point2D p2 = transformPoint(p);,                     coordTransform.translate(p2.getX() - p1.getX(), p2.getY() - p1.getY());,                     targetComponent.repaint();,                 },             } else {,                 if (zoomLevel > minZoomLevel) {,                     zoomLevel--;,                     Point2D p1 = transformPoint(p);,                     coordTransform.scale(zoomMultiplicationFactor, zoomMultiplicationFactor);,                     Point2D p2 = transformPoint(p);,                     coordTransform.translate(p2.getX() - p1.getX(), p2.getY() - p1.getY());,                     targetComponent.repaint();,                 },             },         } catch (NoninvertibleTransformException ex) {,             ex.printStackTrace();,         },     },  ,     private Point2D.Float transformPoint(Point p1) throws NoninvertibleTransformException {, //        System.out.println("Model -> Screen Transformation:");, //        showMatrix(coordTransform);,         AffineTransform inverse = coordTransform.createInverse();, //        System.out.println("Screen -> Model Transformation:");, //        showMatrix(inverse);,  ,         Point2D.Float p2 = new Point2D.Float();,         inverse.transform(p1, p2);,         return p2;,     },  ,     private void showMatrix(AffineTransform at) {,         double[] matrix = new double[6];,         at.getMatrix(matrix);  // { m00 m10 m01 m11 m02 m12 },         int[] loRow = {0, 0, 1};,         for (int i = 0; i < 2; i++) {,             System.out.print("[ ");,             for (int j = i; j < matrix.length; j += 2) {,                 System.out.printf("%5.1f ", matrix[j]);,             },             System.out.print("]\n");,         },         System.out.print("[ ");,         for (int i = 0; i < loRow.length; i++) {,             System.out.printf("%3d   ", loRow[i]);,         },         System.out.print("]\n");,         System.out.println("---------------------");,     },  ,  ,     public int getZoomLevel() {,         return zoomLevel;,     },  ,     public void setZoomLevel(int zoomLevel) {,         this.zoomLevel = zoomLevel;,     },  ,     public AffineTransform getCoordTransform() {,         return coordTransform;,     },  ,     public void setCoordTransform(AffineTransform coordTransform) {,         this.coordTransform = coordTransform;,     }, }]
[public class ListSimpleLinked implements ListTAD {, ,     protected class Node {, ,         public Object element;,         public Node next;, ,         public Node(Object e) {,             element = e;,             next = null;,         },     },     private int iterador;,     private Node head;,     private Node tail;,     private int count;, ,     public ListSimpleLinked() {,         head = null;,         tail = null;,         count = 0;,         iterador = 0;,     }, ,     public int getContador(){return iterador;}, ,     public void add(Object element) {,         Node n = new Node(element);,         if (tail != null) {,             tail.next = n;,             iterador++;,         } else {,             head = n;,             iterador++;,         },         tail = n;,         count++;,     }, ,     public void addFirst(Object element) {,         Node n = new Node(element);,         if (tail == null) {,             tail = n;,         },         n.next = head;,         head = n;,         count++;,         iterador++;,     }, ,     public void add(int index, Object element) {,         if (index < 0 || index > size()) {,             throw new IndexOutOfBoundsException("Fora do limite valido");,         }, ,         if (index == 0) // inserir no inicio da lista ?,         {,             addFirst(element);,             return;,         } else if (index == size()) // inserindo no final ?,         {,             add(element);,             return;,         }, ,         Node novo = new Node(element);,         Node ant = head;,         Node atual = head.next;,         int pos = 1;,         while (pos < index) {,             ant = ant.next;,             atual = atual.next;,             pos++;,             iterador++;,         },         ant.next = novo;,         novo.next = atual;,         count++;,     }, ,     public void removeFirst() {,         if (head == null) {,             throw new IndexOutOfBoundsException("Lista vazia!");,         },         head = head.next;,         if (head == null) // removido o ultimo ?,         {,             tail = null;,         },     }, ,     public void clear() {,         head = null;,         tail = null;,         count = 0;,     }, ,     public boolean contains(Object element) {,         int pos = indexOf(element);,         if (pos == -1) {,             return false;,         },         return true;,     }, ,     public Object get(int index) {,         if ((index < 0) || (index >= count)) {,             throw new IndexOutOfBoundsException("Index = " + index);,         },         Node target = head;,         for (int i = 0; i < index; i++) {,             target = target.next;,             iterador++;,         },         return target.element;,     }, ,     public int indexOf(Object element) {,         Node target = head;,         int pos = 0;,         while (target != null) {,             if (target.element.equals(element)) {,                 return pos;,             },             target = target.next;,             pos++;,             iterador++;,         },         return -1; // nao achou,     }, ,     public boolean isEmpty() {,         if (count == 0) {,             return true;,         } else {,             return false;,         },     }, ,     public boolean remove(Object e) {,         Node ant, aux;,         boolean achou = false;,         if (head == null) {,             achou = false;,         } else if (head.element.equals(e)) {,             if (tail == head) {,                 tail = null;,             },             head = head.next;,             count--;,             achou = true;,         } else {,             ant = head;,             aux = head.next;,             while ((aux != null) && (!achou)) {,                 if (aux.element.equals(e)) {,                     if (aux == tail) {,                         tail = ant;,                     },                     ant.next = aux.next;,                     count--;,                     achou = true;,                 } else {,                     ant = aux;,                     aux = aux.next;,                 },                 iterador++;,             },         },         return achou;,     }, ,     public Object remove(int index) {,         if ((index < 0) || (index >= count)) {,             throw new IndexOutOfBoundsException("Index = " + index);,         },         Node atual = head;,         Node ant = null;,         // Buscar nodo pelo indice informado,         for (int i = 0; i < index; i++) {,             ant = atual;,             atual = atual.next;,             iterador++;,         },         Object item = atual.element;,         // Testar caso remocao do primeiro,         if (atual == head) {,             head = atual.next;,         } else { // Se não é do primeiro, é no meio ...,             ant.next = atual.next;,         },         // Complementa o processo se for remocao do ultimo,         if (atual == tail) {,             tail = ant;,         },         atual.element = null;,         atual.next = null;,         count--;,         return item;,     }, ,     public void removeLast() {,         remove(count - 1);,     }, ,     public int size() {,         return count;,     }, ,     public Object set(int index, Object element) {,         if ((index < 0) || (index >= count)) {,             throw new IndexOutOfBoundsException("Index = " + index);,         },         Node target = head;,         for (int i = 0; i < index; i++) {,             target = target.next;,             iterador++;,         },         Object aux = target.element;,         target.element = element;,         return aux;,     }, ,     public String toString() {,         String aux = "";,         Node atual = head;,         while (atual != null) {,             aux = aux + atual.element + " ";,             atual = atual.next;,             iterador++;,          },         return aux;,     }, }]
[/**,  *,  * @author flash,  */, public class Ponto {,     private double x;,     private double y;, ,     public Ponto(double x, double y) {,         this.x = x;,         this.y = y;,     }, ,     public double getX() {,         return x;,     }, ,     public void setX(double x) {,         this.x = x;,     }, ,     public double getY() {,         return y;,     }, ,     public void setY(double y) {,         this.y = y;,     }, ,     public String toString() {,         return "("+x+","+y+")";,     }, ,     public double distancia(Ponto outro) {,         return Math.sqrt(Math.pow(x-outro.x,2)+Math.pow(y-outro.y,2));,     }, }]
[/**,  * @author Julio Machado, Marcelo Cohen,  */, import java.awt.*;, import java.awt.event.ActionEvent;, import java.awt.event.ActionListener;, import java.io.File;, import java.io.FileNotFoundException;, import java.util.Locale;, import java.util.Scanner;, import javax.swing.*;, , public class JanelaAplicacao extends JFrame {, ,     private ZoomAndPanCanvas painel;,     private JMenu menuEditar;,     private JScrollBar scroll;,     private JLabel labelTotal;,     private ListTAD lista, listaSimplificada;, ,     public JanelaAplicacao() {,         super("Simplificação de Polígonos");,         this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);,         JPanel principal = new JPanel();,         this.setContentPane(principal);, ,         lista = carregaArquivo("pontos.txt");,         painel = new ZoomAndPanCanvas(this, lista);, ,         principal.setLayout(new BorderLayout());,         principal.add(painel, BorderLayout.CENTER);, ,         JMenuBar menu = new JMenuBar();,         menuEditar = new JMenu("Arquivo");,         JMenuItem itemLoad = new JMenuItem("Carregar polígono");, ,         menuEditar.add(itemLoad);,         menu.add(menuEditar);,         //this.setJMenuBar(menu);, ,         labelTotal = new JLabel(String.format("%-6d", lista.size()));, ,         JPanel bottomPane = new JPanel();,         bottomPane.add(labelTotal);,         JButton botao18 = new JButton("1/8");,         JButton botao14 = new JButton("1/4");,         JButton botao12 = new JButton("1/2");,         JButton botaoTodos = new JButton("TODOS");,         bottomPane.add(botao18);,         bottomPane.add(botao14);,         bottomPane.add(botao12);,         bottomPane.add(botaoTodos);,         principal.add(bottomPane, BorderLayout.PAGE_END);, ,         botao18.addActionListener(new ActionListener() {, ,             public void actionPerformed(ActionEvent ae) {,                 listaSimplificada = simplify(lista.size() / 8);,                 labelTotal.setText(String.format("%-6d", listaSimplificada.size()));,                 painel.repaint();, ,             },         });, ,         botao14.addActionListener(new ActionListener() {, ,             public void actionPerformed(ActionEvent ae) {,                 listaSimplificada = simplify(lista.size() / 4);,                 labelTotal.setText(String.format("%-6d", listaSimplificada.size()));,                 painel.repaint();,             },         });, ,         botao12.addActionListener(new ActionListener() {, ,             public void actionPerformed(ActionEvent ae) {,                 listaSimplificada = simplify(lista.size() / 2);,                 labelTotal.setText(String.format("%-6d", listaSimplificada.size()));,                 painel.repaint();,             },         });, ,         botaoTodos.addActionListener(new ActionListener() {, ,             public void actionPerformed(ActionEvent ae) {,                 listaSimplificada = simplify(lista.size());,                 labelTotal.setText(String.format("%-6d", listaSimplificada.size()));,                 painel.repaint();,             },         });, ,         itemLoad.addActionListener(new ActionListener() {, ,             public void actionPerformed(ActionEvent e) {,                 throw new UnsupportedOperationException();,             },         });,         this.setSize(500, 500);,         this.pack();, ,         listaSimplificada = simplify(lista.size());,         //painel.createBufferStrategy(2);,     }, ,     private ListTAD carregaArquivo(String nome) {,         ListTAD lista = new ListSimpleLinked();,         //ListTAD lista = new ListArrayObjectImpl();,         try {,             Scanner scanner = new Scanner(new File(nome));,             //scanner.useDelimiter("\n"); //System.getProperty("line.separator"));,             System.out.println(Locale.getDefault());,             scanner.useLocale(Locale.ENGLISH);,             while (scanner.hasNext()) {,                 double x = scanner.nextDouble();,                 double y = scanner.nextDouble();,                 //System.out.println("X="+x+", Y="+y);,                 lista.add(new Ponto(x, y));,             },             scanner.close();, ,         } catch (FileNotFoundException e) {,             throw new RuntimeException(e);,         },         return lista;,     }, ,     ListTAD getSimplified() {,         return listaSimplificada;,     }, ,     // Recebe o total de pontos desejado, ,     // e retorna uma nova lista apenas com os pontos necessários,     ListTAD simplify(int totalPontos) {,         ListTAD nova = new ListSimpleLinked();,         //ListTAD nova = new ListArrayObjectImpl();, ,         // Copia todos os pontos da lista original para a nova,         for (int i = 0; i < lista.size(); i++) {,             nova.add(lista.get(i));,         }, ,         // Gera a lista simplificada,         // Remove o ponto de menor "peso" da lista, um por vez,,         // até que a lista atinja o tamanho desejado,         // Para calcula o peso de um ponto Pi, calcula-se as,         // distancias entre: d1 = dist(Pi,Pi-1), d2=dist(Pi,Pi+1),         // e d3 = dist(Pi-1,Pi+1),         // O peso e dado pela formula: p = d1+d2-d3,         while (nova.size() > totalPontos) {,             double menorD = 10000;,             int menorPos = 0;,             int pos = 0;,             Ponto prev = (Ponto)nova.get(nova.size()-1);,             Ponto atual = (Ponto)nova.get(pos);,             Ponto next = (Ponto)nova.get(pos+1);,             while (pos < nova.size()-2) {,                 double l1 = atual.distancia(prev);,                 double l2 = atual.distancia(next);,                 double l3 = prev.distancia(next);,                 double d = l1 + l2 - l3;,                 if (d < menorD) {,                     menorD = d;,                     menorPos = pos;,                 },                 pos++;,                 prev = atual;,                 atual = next;,                 next = (Ponto)nova.get(pos+1);,             },             nova.remove(menorPos);,         },         System.out.println(nova.getContador());,         return nova;,     }, }]
[/**,  *,  * @author Bernardo Copstein,  */, public class ListArrayObjectImpl implements ListTAD {, ,     protected static final int INITIAL_SIZE = 10;,     protected Object[] data;,     protected int count;,     protected int capacity;,     public int contador;, ,     public int getContador(){return contador;}, ,     public ListArrayObjectImpl() {,         data = new Object[INITIAL_SIZE];,         count = 0;,         capacity = INITIAL_SIZE;,         contador = 0;,     }, ,     @Override,     public void add(Object element) {,         if (count == capacity) {,             setCapacity(capacity * 2);,         },         data[count] = element;,         count++;,         contador++;,     }, ,     @Override,     public void add(int index, Object element) {,         if ((index < 0) || (index > count)) {,             throw new IndexOutOfBoundsException("Index = " + index);,         },         if (count == capacity) {,             setCapacity(capacity * 2);,         },         for (int i = count - 1; i >= index; i--) {,             data[i + 1] = data[i];,             contador++;,         },         data[index] = element;,         count++;,     }, ,     @Override,     public void clear() {,         data = new Object[INITIAL_SIZE];,         count = 0;,         capacity = INITIAL_SIZE;,     }, ,     @Override,     public boolean contains(Object element) {,         int target = 0;,         boolean achou = false;,         while ((target < count) && (!achou)) {,             if (data[target].equals(element)) {,                 achou = true;,             } else {,                 target++;,             },             contador++;,         },         return achou;,     }, ,     @Override,     public Object get(int index) {,         if ((index < 0) || (index >= count)) {,             throw new IndexOutOfBoundsException("Index = " + index);,         },         return data[index];,     }, ,     @Override,     public int indexOf(Object element) {,         int target = 0;,         boolean achou = false;,         while ((target < count) && (!achou)) {,             if (data[target].equals(element)) {,                 achou = true;,             }else{,                 target++;,             },             contador++;,         },         if (achou) {,             return target;,         } else {,             return -1;,         },     }, ,     @Override,     public boolean isEmpty() {,         return (count == 0);,     }, ,     @Override,     public boolean remove(Object element) {,         int i = indexOf(element);,         if (i > 0) {,             remove(i);,             return (true);,         },         return (false);,     }, ,     @Override,     public Object remove(int index) {,         if ((index < 0) || (index >= count)) {,             throw new IndexOutOfBoundsException("Index = " + index);,         },         Object item = data[index];,         for (int i = index; i < count - 1; i++) //deslocar item uma posição para esquerda,         {,             data[i] = data[i + 1];,             contador++;,         },         count--;,         data[count] = null;,         return item;,     }, ,     @Override,     public Object set(int index, Object element) {,         if ((index < 0) || (index >= count)) {,             throw new IndexOutOfBoundsException("Index = " + index);,         },         Object item = data[index];,         data[index] = element;,         return item;,     }, ,     @Override,     public int size() {,         return count;,     }, ,     private void setCapacity(int newCapacity) {,         if (newCapacity != capacity) {,             int min = 0;,             Object[] newData = new Object[newCapacity];,             if (capacity < newCapacity) {,                 min = capacity;,             } else {,                 min = newCapacity;,             },             for (int i = 0; i < min; i++) {,                 newData[i] = data[i];,                 contador++;,             },             data = newData;,             capacity = newCapacity;,         },     }, }]
[/**,  * Tipo abstrato de dados Lista,  * @author Bernardo Copstein, Julio Machado, Marcelo Cohen,  */, public interface ListTAD {, 	/**, 	 * Adiciona um elemento ao final da lista, 	 * @param element elemento a ser adicionado ao final da lista, 	 */,     void add(Object element);,     /**,      * Insere um elemento em uma determinada posição da lista,      * @param index a posição da lista onde o elemento será inserido,      * @param element elemento a ser inserido,      * @throws IndexOutOfBoundsException se (index < 0 || index > size()),      */,     void add (int index, Object element);, ,     /**,      * Esvazia a lista,      *,      */,     void clear(); ,     /**,      * Retorna true se a lista contém o elemento especificado,      * @param element o elemento a ser testado,      * @return true se a lista contém o elemento especificado,      */,     boolean contains(Object element);,     /**,      * Retorna o elemento de uma determinada posi��o da lista,      * @param index a posição da lista,      * @return o elemento da posição especificada,      * @throws IndexOutOfBoundsException se (index < 0 || index >= size()),      */,     Object get(int index);,     ,     /**,      * Retorna o índice da primeira ocorrência do elemento na lista, ou -1 se a lista não contém o elemento,      * @param element o elemento a ser buscado,      * @return o índice da primeira ocorrência do elemento na lista, ou -1 se a lista não contém o elemento,      */,     int indexOf (Object element);,        ,     /**,      * Retorna true se a lista não contém elementos,      * @return true se a lista não contém elementos,      */,     boolean isEmpty();    ,     /**,      * Remove a primeira ocorrência do elemento na lista, se estiver presente,      * @param element o elemento a ser removido,      * @return true se a lista contém o elemento especificado,      */,     boolean remove(Object element);,     ,     /**,      * Remove o elemento de uma determinada posição da lista,      * @param index a posição da lista,      * @return o elemento que foi removido da lista,      * @throws IndexOutOfBoundsException se (index < 0 || index >= size()),      */,     Object remove(int index);,         ,     /**,      * Retorna o número de elementos da lista,      * @return o número de elementos da lista,      */,     int size();,     /**,      * Substitui o elemento armanzenado em uma determinada posição da lista pelo elemento indicado,      * @param index a posição da lista,      * @param element o elemento a ser armazenado na lista ,      * @return o elemento anterior armazenado na posição da lista,      * @throws IndexOutOfBoundsException se (index < 0 || index >= size()),      */,     Object set(int index, Object element);, ,     int getContador();, }]
[, /**,  *,  * @author flash,  */, public class Main {, ,     public static void main(String args[]) {,         JanelaAplicacao app = new JanelaAplicacao();,         app.setVisible(true);,     }            , , }]
[public class App{,     public static void main(String args[]){,         Cadeado c = new Cadeado();,         ,         c.viraParaDireita(22);,         c.viraParaEsquerda(18);,         c.viraParaDireita(8);,         ,         System.out.println(c.getTentativas(0));,         System.out.println(c.getTentativas(1));,         System.out.println(c.getTentativas(2));,         System.out.println(c.abre());,     }, }, ]
[public class Cadeado{,     private int NLOCKS;,     private int locks[];      // Segredo do cadeado,     private int tentativas[]; // Tentativas,     private int currLock;     // Tentativa sendo armazenada,     private int display;      // Valor do display,     ,     /*@,       ensures getLock(0) >=0 && getLock(0) <=32;,       ensures getLock(1) >=0 && getLock(1) <=32;,       ensures getLock(2) >=0 && getLock(2) <=32;,       ensures getTentativas(0) == 0;,       ensures getTentativas(1) == 0;,       ensures getTentativas(2) == 0;,       ensures getCurrLock() == 0;,       ensures getDisplay() == 0;,     @*/,     public Cadeado(){,         NLOCKS = 3;,         locks = new int[NLOCKS];,         locks[0] = 22; locks[1] = 4; locks[2] = 12;,         inicializa();,     },     ,     /*@,       ensures getTentativas(0) == 0;,       ensures getTentativas(1) == 0;,       ensures getTentativas(2) == 0;,       ensures getCurrLock() == 0;,       ensures getDisplay() == 0;,     @*/,     public void inicializa(){,         tentativas = new int[NLOCKS];,         currLock = 0;,         display = 0;,     }    , ,     /*@,       requires i>=0 && i<getNLOCKS();,     @*/    ,     public /*@ pure @*/ int getLock(int i){,         return(locks[i]);,     }, ,     /*@,       requires i>=0 && i<getNLOCKS();,     @*/    ,     public  /*@ pure @*/ int getTentativas(int i){,         return(tentativas[i]);,     },     ,     public /*@ pure @*/ int getCurrLock(){,         return(currLock);,     },     ,     public /*@ pure @*/ int getNLOCKS(){,         return(NLOCKS);,     },     ,     public /*@ pure @*/ int getDisplay(){,         return(display);,     }, ,     /*@,       requires nClicks > 0;,       requires nClicks+getDisplay() >=0 && nClicks+getDisplay() <= 39;,       ensures (\old(getCurrLock()) < getNLOCKS()-1) ==> (getCurrLock() == \old(getCurrLock())+1);,       ensures (\old(getCurrLock()) == getNLOCKS()-1) ==> (getCurrLock() == 0);,       ensures getTentativas(\old(getCurrLock())) == getDisplay();,       ensures getDisplay() == \old(getDisplay())+nClicks;,     @*/,     public void viraParaDireita(int nClicks){,         display += nClicks;,         tentativas[currLock] = display;,         if (getCurrLock() == getNLOCKS()-1){,             currLock = 0;,         }else{,             currLock++;,         },     }, ,     /*@,       requires nClicks > 0;,       requires getDisplay()-nClicks >=0 && getDisplay()-nClicks <= 39;,       ensures getTentativas(\old(getCurrLock())) == getDisplay();,       ensures getDisplay() == \old(getDisplay())-nClicks;,       ensures (\old(getCurrLock()) < getNLOCKS()-1) ==> (getCurrLock() == \old(getCurrLock())+1);,       ensures (\old(getCurrLock()) == getNLOCKS()-1) ==> (getCurrLock() == 0);,     @*/,     public void viraParaEsquerda(int nClicks){,         display -= nClicks;,         tentativas[currLock] = display;,         if (getCurrLock() == getNLOCKS()-1){,             currLock = 0;,         }else{,             currLock++;,         },     }, ,     /*@,         requires (\forall int i;0<=i && i<getNLOCKS(); getTentativas(i) == getLock(i));,         ensures \result == true;,       also,         requires (\exists int i;0<=i && i<getNLOCKS(); getTentativas(i) != getLock(i));,         ensures \result == false;,     @*/,     public boolean abre(){,         for(int i=0;i<NLOCKS;i++){,             if (tentativas[i] != locks[i]){,                 return(false);,             },         },         return(true);,     }, }, ]
[public class Cadeado{, 	private byte tentativa[];, 	private byte senha[];, 	private byte tentativaAtual;, 	private byte qtdSenhas = 3;, 	private byte display;, , 	public Cadeado(){, 		senha = new senha[qtdSenhas];, 		senha[0] = 22; senha[1] = 7; senha[2] = 39;, 		inicializa();, 	}, , 	public void inicializa(){,         tentativa = new byte[qtdSenhas];,         tentativaAtual = 0;,         display = 0;,     }, ,     public /*@ pure @*/ byte getSenha(byte i){,         return senhas[i];,     },   ,     public  /*@ pure @*/ byte getTentativas(byte i){,         return tentativas[i];,     },     ,     public /*@ pure @*/ byte gettentativaAtual(){,         return tentativaAtual;,     },     ,     public /*@ pure @*/ byte getqtdSenhas(){,         return qtdSenhas;,     },     ,     public /*@ pure @*/ byte getDisplay(){,         return display;,     }, ,     public void viraDireita(byte voltas){, 	    display += voltas;, 	    tentativas[tentativaAtual] = display;, 	    if(gettentativaAtual() == getqtdSenhas()-1){, 	        tentativaAtual = 0;, 	    }else{, 	        tentativaAtual++;, 	    }, 	}, ,     public void viraEsquerda(int voltas){, 	    display -= voltas;, 	    tentativas[tentativaAtual] = display;, 	    if(gettentativaAtual() == getqtdSenhas()-1){, 	        tentativaAtual = 0;, 	    }else{, 	        tentativaAtual++;, 	    }, 	}, , }]
[public class BalaSemVento extends BalaCanhao{    ,     /*@,       requires alfa > 0.0 && alfa <= 90.0;,     @*/,     public BalaSemVento(double alfa,double vi){,         super(alfa,vi);,     },      ,     /*@,       requires t>=0;,       ensures getPx() == \old(getPx())+\old(getVx())*t+((0.0*t*t)/2.0); ,       ensures getPy() == \old(getPy())+\old(getVy())*t+((-9.8*t*t)/2.0); ,       ensures getVx() == vxNoTempo(0.0,t);,       ensures getVy() == vyNoTempo(t);,     @*/   ,     public void posNoTempo(double t){,         double px = getPx()+getVx()*t+((0.0*t*t)/2.0);,         double py = getPy()+getVy()*t+((-9.8*t*t)/2.0);,         setPx(px);,         setPy(py);,         setVx(vxNoTempo(0.0,t));,         setVy(vyNoTempo(t));,     }, }]
[public class App{,     public static void main(String args[]){,         BalaComVento bv = new BalaComVento(-3.4,Math.PI/4.0,3);,         BalaSemVento bs = new BalaSemVento(Math.PI/4.0,3);,         ,         System.out.println("Posicao da bala com vento:");,         for(double t=0.0; t<5.0; t+=0.25){,             bv.posNoTempo(t);,             System.out.println("T="+t+", Px="+bv.getPx()+", Py="+bv.getPx());,         }, ,         System.out.println("Posicao da bala sem vento:");,         for(double t=0.0; t<5.0; t+=0.25){,             bv.posNoTempo(t);,             System.out.println("T="+t+", Px="+bv.getPx()+", Py="+bv.getPx());,         },     }, }, ]
[public class BalaComVento extends BalaCanhao{,     private double acelVento;,     ,     /*@,       requires alfa > 0.0 && alfa <= 90.0;,       requires aVento < 0.0;,     @*/,     public BalaComVento(double aVento,double alfa,double vi){,         super(alfa,vi);,         acelVento = aVento;,     },  ,     public /*@ pure @*/ double getAcelVento(){ return(acelVento); },     ,     /*@,       requires t>=0;,       ensures getPx() == \old(getPx())+\old(getVx())*t+((getAcelVento()*t*t)/2.0); ,       ensures getPy() == \old(getPy())+\old(getVy())*t+((-9.8*t*t)/2.0); ,       ensures getVx() == vxNoTempo(getAcelVento(),t);,       ensures getVy() == vyNoTempo(t);,     @*/   ,     public void posNoTempo(double t){,         double px = getPx()+getVx()*t+((acelVento*t*t)/2.0);,         double py = getPy()+getVy()*t+((-9.8*t*t)/2.0);,         setPx(px);,         setPy(py);,         setVx(vxNoTempo(acelVento,t));,         setVy(vyNoTempo(t));,     }, }]
[public abstract class BalaCanhao{,     private double alfa;,     private double vx,vy;,     private double px,py;,     ,     /*@,       requires alfa > 0.0 && alfa <= 90.0;,       ensures getPx() == 0;,       ensures getPy() == 0;,       ensures getVx() == vi * Math.cos(getAlfa());,       ensures getVy() == vi * Math.sin(getAlfa());,       ensures getAlfa() == alfa;,     @*/,     public BalaCanhao(double alfa,double vi){,         this.alfa = alfa;,         vx = vi * Math.cos(alfa);,         vy = vi * Math.sin(alfa);,         px = 0.0;,         py = 0.0;,     },     ,     public /*@ pure @*/ double getVx(){ return vx; }    ,     public /*@ pure @*/ double getVy(){ return vy; },     public /*@ pure @*/ double getPx(){ return px; }    ,     public /*@ pure @*/ double getPy(){ return py; },     public /*@ pure @*/ double getAlfa(){ return alfa; },     ,     public void setVx(double v){ vx = v; },     public void setVy(double v){ vy = v; },     public void setPx(double p){ px = p; }    ,     public void setPy(double p){ py = p; },     ,     /*@,       requires t >= 0;,       ensures \result == \old(getVx())+ax*t; ,     @*/,     public double vxNoTempo(double ax,double t){,         return(vx+(ax*t));,     },     ,     /*@,       requires t >= 0;,       ensures \result == \old(getVy())-9.8*t; ,     @*/,     public double vyNoTempo(double t){,         return(vy+(-9.8*t));,     },     ,     public abstract void posNoTempo(double t); , }]
[public abstract class CtrlIngresso{,     private int capacidade;,     private int ocupAtual;,     ,     /*@ ,         requires cap > 0;,         ensures getCapacidade() == cap;,         ensures getOcupacaoAtual() == 0;,     @*/,     public CtrlIngresso(int cap){,         capacidade = cap;,         ocupAtual = 0;,     }, ,     // ensures getOcupacaoAtual() == 0;,     public void reset(){,         ocupAtual = 0;,     },     ,     public /*@ pure @*/int getCapacidade(){,         return(capacidade);,     },     ,     public /*@ pure @*/int getOcupacaoAtual(){,         return(ocupAtual);,     },     ,     //@ ensures getOcupacaoAtual() == \old(getOcupacaoAtual())+1;,     public void incOcupacao(){,         ocupAtual++;,     },     ,     public abstract /*@ pure @*/Situacao getSituacao();,     ,     public abstract Situacao entra();, }]
[class App{,     public static void main(String args[]){,         CtrlIngressoSentadoEmPe csep = new CtrlIngressoSentadoEmPe(5,2);,         for(int i=0; i<10;i++){,             System.out.println("Ocupacao: "+csep.getOcupacaoAtual()+", situacao: "+csep.entra().toString());,         },     }, }]
[public enum Situacao{,     LOTADO, LUGARES_DISPONIVEIS, SOMENTE_LUGARES_EM_PE;, }, ]
[public class CtrlIngressoSentadoEmPe extends CtrlIngresso{,     private int capacidadeSentado;,     private int capacidadeEmPe;,     ,     //@ requires capTotal > 0;,     //@ requires capEmPe > 0; ,     //@ ensures getCapacidade() == capTotal;,     //@ ensures getCapacidadeSentado() == capTotal-capEmPe;,     //@ ensures getCapacidadeEmPe() == capEmPe;,     public CtrlIngressoSentadoEmPe(int capTotal,int capEmPe){,         super(capTotal);,         capacidadeSentado = capTotal-capEmPe;,         capacidadeEmPe = capEmPe;,     },     ,     public /*@ pure @*/ int getCapacidadeSentado(){,         return(capacidadeSentado);,     },     ,     public /*@ pure @*/ int getCapacidadeEmPe(){,         return(capacidadeEmPe);,     }, ,     /*@,         requires getOcupacaoAtual() < getCapacidadeSentado();,         ensures \result == Situacao.LUGARES_DISPONIVEIS;,       also,         requires getOcupacaoAtual() >= getCapacidadeSentado() && getOcupacaoAtual() < getCapacidadeEmPe();,         ensures \result == Situacao.SOMENTE_LUGARES_EM_PE;,       also,         requires getOcupacaoAtual() >= getCapacidade();,         ensures \result == Situacao.LOTADO;,     @*/,     @Override,     public /*@ pure @*/Situacao getSituacao(){,         if (getOcupacaoAtual() >= getCapacidade()){,             return(Situacao.LOTADO);,         }else{,             if (getOcupacaoAtual() < getCapacidadeSentado()){,                 return(Situacao.LUGARES_DISPONIVEIS);,             }else{,                 return(Situacao.SOMENTE_LUGARES_EM_PE);,             },         },     },     ,     /*@,         requires getOcupacaoAtual() < getCapacidadeSentado();,         ensures \result == Situacao.LUGARES_DISPONIVEIS;,         ensures getOcupacaoAtual() == \old(getOcupacaoAtual())+1;,       also,         requires getOcupacaoAtual() >= getCapacidadeSentado() && ,                  getOcupacaoAtual() < (getCapacidadeEmPe()+getCapacidadeSentado());        ,         ensures \result == Situacao.SOMENTE_LUGARES_EM_PE;,         ensures getOcupacaoAtual() == \old(getOcupacaoAtual())+1;,       also,         requires getOcupacaoAtual() >= getCapacidade();,         ensures \result == Situacao.LOTADO;,         ensures getOcupacaoAtual() == \old(getOcupacaoAtual());,     @*/,     @Override,     public /*@ pure @*/Situacao entra(){,         if (getOcupacaoAtual() >= getCapacidade()){,             return(Situacao.LOTADO);,         }else{,             incOcupacao();,             if (getOcupacaoAtual() <= getCapacidadeSentado()){,                 return(Situacao.LUGARES_DISPONIVEIS);,             }else{,                 return(Situacao.SOMENTE_LUGARES_EM_PE);,             },         },     }, },     ]
[public class CtrlIngressoSentado extends CtrlIngresso{,     ,     //@ requires cap > 0;,     //@ ensures getCapacidade() == cap;,     public CtrlIngressoSentado(int cap){,         super(cap);,     },     ,     /*@,         requires getOcupacaoAtual() < getCapacidade();,         ensures \result == Situacao.LUGARES_DISPONIVEIS;,       also,         requires getOcupacaoAtual() >= getCapacidade();,         ensures \result == Situacao.LOTADO;,     @*/,     @Override,     public /*@ pure @*/ Situacao getSituacao(){,         if ( getOcupacaoAtual() >= getCapacidade() ){,             return(Situacao.LOTADO);,         }else{,             return(Situacao.LUGARES_SENTADO);,         },     },     ,     /*@,         requires getOcupacaoAtual() < getCapacidade();,         ensures \result == Situacao.LUGARES_DISPONIVEIS;,         ensures getOcupacaoAtual() == \old(getOcupacaoAtual())+1;,       also,         requires getOcupacaoAtual() >= getCapacidade();,         ensures \result == Situacao.LOTADO;,         ensures getOcupacaoAtual() == \old(getOcupacaoAtual());,     @*/,     @Override,     public /*@ pure @*/Situacao entra(){,         if (getOcupacaoAtual() >= getCapacidade()){,             return(Situacao.LOTADO);,         }else{,             incOcupacao();,             return(Situacao.LUGARES_DISPONIVEIS);,         },     }, },     ]
[interface FilaEspecial {, 	//@ ensures size()==0;, 	FilaEspecial();, , 	//@ requires !isFull();, 	//@ requires isEmpty() || (v>=0&&last()>=0) || (v<=0&&last()<=0) || (v+last()==0);, 	//@ ensures size()==\old(size())+1;, 	//@ ensures last()==v;, 	void enqueue(int v);, , 	//@ requires !isEmpty();, 	//@ ensures size()==\old(size())-1;, 	//@ ensures \result==\old(first());, 	//@ ensures \result > 0 && first() > 0 || \result < 0 && first() < 0 || \result + first() == 0;, 	int dequeue();, , 	//@ requires !isEmpty();, 	/*@ pure @*/int first();, , 	//@ requires !isEmpty();, 	/*@ pure @*/int last();, , 	/*@ pure @*/int size();, , 	/*@ pure @*/boolean isEmpty();, , 	/*@ pure @*/boolean isFull();, }]
[interface Aluno {    ,     //@ requires umNro > 100000 && umNro < 999999;,     //@ requires umNome.length() > 0;,     //@ ensures getMatricula() == umNro;,     //@ ensures getNome().equals(umNome);,     //@ ensures getNumNotas() == 0;,     void inicializa(int umNro,String umNome);,     , 	/*@ pure @*/ int getNumNotas();, , 	/*@ pure @*/int getMatricula();, 	, 	/*@ pure @*/String getNome();, 	,     /*@ pure @*/boolean notasValidas();	, , 	//@ requires i>0 && i<=getNumNotas();, 	/*@ pure @*/boolean notaValida(int i);, , 	//@ requires i>0 && i<=getNumNotas();, 	//@ requires nota >= 0 && nota <= 10;, 	//@ ensures notaValida(i) == true;, 	void infoNota(int i,int nota);, , 	//@ requires i>0 && i<=getNumNotas() && notaValida(i) == true;, 	/*@ pure @*/ int getNota(int i);, , 	//@ requires notasValidas();, 	//@ ensures \result >= 0.0;, 	double mediaFinal();, 	, 	//@ requires notasValidas();, 	//@ ensures \result == (mediaFinal() > 6.0);, 	boolean aprovado();, }]
[interface Fila {, 	//@ ensures size()==0;, 	public Fila();, , 	//@ requires !isFull();, 	//@ ensures size()==\old(size())+1;, 	//@ ensures last()==v;, 	public void enqueue(int v);, , 	//@ requires !isEmpty();, 	//@ ensures size()==\old(size())-1;, 	//@ ensures \result==\old(first());, 	public int dequeue();, , 	//@ requires !isEmpty();, 	public/*@ pure @*/int first();, , 	//@ requires !isEmpty();, 	public/*@ pure @*/int last();, , 	public/*@ pure @*/int size();, , 	public/*@ pure @*/boolean isEmpty();, , 	public/*@ pure @*/boolean isFull();, }]
[, public interface IPilha {,     //@ requires !isFull();   ,     //@ ensures size() == \old(size())+1;, 	//@ ensures top() == v;,     void push(int v);,      ,     //@ requires !isEmpty();,     //@ ensures size() == \old(size());,     /*@ pure @*/ int top();,     ,     /*@ requires !isEmpty();,       @ ensures \result == \old(top());,       @ ensures size() == \old(size())-1;,   	  @*/,     int pop();,     ,     //@ ensures \result >= 0;,     /*@ pure @*/int  size();,     ,     /*@ pure @*/boolean isEmpty();,     ,     /*@ pure @*/boolean isFull();, }]
[, public class PilhaArray implements IPilha{,     public static final int TMAX = 10;,     private int[] base;,     private int topo;,     ,     //@ ensures size() == 0;,     public PilhaArray(){,         base = new int[TMAX];    ,         topo = 0;,     },     ,     @Override,     public void push(int v) {,         base[topo] = v;,         topo++;,     }, ,     @Override,     public int top() {,         return(base[topo-1]); ,     }, ,     @Override,     public int pop() {,         int aux = top();,         topo--;,         return(aux);,     }, ,     @Override,     public int size() {,         return topo;,     }, ,     @Override,     public boolean isEmpty() {,         return size() == 0;,     }, ,     @Override,     public boolean isFull() {,         return(size() == TMAX);,     },     ,     public static void main(String args[]){,     	IPilha p = new PilhaArray();,     	,     	p.push(-10);,     	p.pop();,     	p.pop();,     }, }]
[public enum Status {,     ContaNova, ContaComum, ContaPremium, };, ]
[interface ContaNossGrana {, 	//@ ensures getSaldo()==0 && getStatus()==Status.ContaNova;, 	ContaNossGrana();, , 	//@ ensures \result==Status.ContaNova || \result==Status.ContaComum || \result==Status.ContaPremium;, 	/*@ pure @*/Status getStatus();, , 	//@ ensures getStatus()==s;, 	void setStatus(Status s);, ,     //@ requires getStatus() != Status.ContaNova;, 	/*@ pure @*/int getSaldo();, , 	//@ requires v>0 && getStatus()!=Status.ContaNova;, 	//@ ensures getSaldo() == \old(getSaldo())+v;, 	void deposito(int v);, , 	//@ requires v>0 && getStatus()!=Status.ContaNova && v<=getSaldo();, 	//@ ensures getSaldo() == \old(getSaldo())-v;, 	void retirada(int v);, , 	/*@ pure @*/int quantidadeOperacoesCredito();, , 	//@ requires v>0 && np>0 && np<=24 && getStatus()==Status.ContaPremium;, 	//@ ensures getSaldo() == \old(getSaldo())+v;, 	//@ ensures quantidadeParcelasEmAberto() == np;, 	//@ ensures valorParcela() == v/np;, 	void emprestimo(double v, int np);, 	, 	//@ requires quantidadeParcelasEmAberto()>0;, 	//@ requires valorParcela() <= getSaldo();, 	//@ensures quantidadeParcelasEmAberto() == \Old(QuantidadeParcelasEmAberto() - 1);, 	void quitarParcela();, 	, 	/*@ pure @*/int quantidadeParcelasEmAberto();, 	, 	/*@ pure @*/double valorParcela();, }]
[, public interface IBestScores {, 	final int MAXSCORES = 10;, 	/*@ , 		public invariant numRecords()>= 0 && numRecords() <=MAXSCORES;, 	    public invariant ( numRecords() < 2 || ( \forall int i; 1 <=i && i<numRecords()-1; getScore(i)>getScore(i+1) ) ); , 	@*/, 	, 	/*@ , 		requires umScore > 0;, 	    requires umNome != null && umNome.length() != 0;, 	    ensures !\result && numRecords() == MAXSCORES && umScore <= \old(worstScore());, 	    ensures \result && (\old(numRecords()) < MAXSCORES && (numRecords()==\old(numRecords())+1)) || (numRecords() == MAXSCORES && umScore > \old(worstScore()) && numRecords() == \old(numRecords()));, 	 @*/,     boolean add(String umNome,int umScore);,  ,     //@ ensures \result <= MAXSCORES;   ,     /*@ pure helper @*/ int numRecords();,         ,     //@ requires numRecords() > 0;,     //@ requires i>=0 && i<numRecords();,     /*@ pure helper @*/ int getScore(int i);,     ,     //@ requires numRecords() > 0;,     //@ ensures \result == getScore(numRecords()-1);,     /*@ pure helper @*/ int worstScore();, ,     //@ requires numRecords() > 0;,     //@ ensures \result == getScore(0);,     /*@ pure helper @*/ int bestScore();, }]
[import java.io.File;, , interface Audio{,     //@ public invariant (\exists int i; 0<=i && i<size();values()[i] == 255);,     ,     /*@ public normal_behavior,       @   requires arq != null;,       @   requires arq.exists();,       @   ensures (\forall int i;0<=i && i<size();values()[i]>=0 ,                                             && values()[i]<=255);,       @ also,       @ public exceptional_behavior,       @    requires arq != null;,       @    requires !arq.exists();,       @    signals (Exception e) e instanceof IllegalArgumentException;,       @*/,     void load(File arq) throws IllegalArgumentException;,     ,     //@ requires size() > 0;,     //@ ensures (\forall int i;0<=i&&i<size();values()[i] != 0);,     void clean();,     ,     //@ requires size() > 0;,     //@ ensures (\forall int i;1<=i && i<size()-1;values()[i] == (\old(values()[i-1])+\old(values()[i])+\old(values()[i+1]))/3);,     void smooth();,     ,     /*@ requires size() > 0;,       @ requires v > 0;,       @ ensures (\forall int i; 0<=i && i<size();((\old(values()[i])+v <= 255) && (values()[i]==\old(values()[i])+v)) ||,                                                  ((\old(values()[i])+v > 255)  && (values()[i]== 255)));,       @*/,     void volumeUp(int v);, ,     /*@ requires size() > 0;,       @ requires v > 0;,       @ ensures (\forall int i; 0<=i && i<size();((\old(values()[i])-v >= 0) && (values()[i]==\old(values()[i])-v)) ||,                                                  ((\old(values()[i])-v <  0) && (values()[i]== 0)));,       @*/,     void volumeDown(int v);,     ,     /*@ pure helper @*/int size();,     ,     /*@ pure helper @*/int[] values();, }, ]
[import java.util.HashSet;, import java.util.List;, , public interface QMagico{,     /*@ pure helper @*/int side(); // retorna o tamanho do lado do quadrado,     ,     /*@ pure helper @*/boolean created(); // retorna true se o quadrado já foi criado,     ,     //@ requires created() == true;,     /*@ pure helper @*/int[][] quad(); //retorna o quadrado magico na forma de matriz, ,     ,     //@ requires created() == true;,     /*@ pure helper @*/List<Integer> quadVet(); //retorna o quadrado magico na forma de lista de inteiros,     ,     /*@ requires n>2;,       @ ensures side() == n;,       @ ensures created() == true;,       @ ensures quadVet().size() == side()*side();,       @ ensures (\forall int v; 0<=v && v<(side()*side());((new HashSet<Integer>(quadVet())).contains(v)));,       @ ensures (\forall int i; 0<=i && i<(side()*side());quad()[i%n][i-((i%n)*n)] == quadVet().get(i));,       @*/,     void create(int n);, }]
[package Interface;, import java.awt.BorderLayout;, import java.awt.Color;, import java.awt.Container;, import java.awt.FlowLayout;, import java.awt.GridLayout;, import java.awt.event.ActionEvent;, import java.awt.event.ActionListener;, import java.util.Observable;, import java.util.Observer;, , import javax.swing.ImageIcon;, import javax.swing.JButton;, import javax.swing.JFrame;, import javax.swing.JLabel;, import javax.swing.JOptionPane;, import javax.swing.JPanel;, import javax.swing.JTextField;, import javax.swing.SwingConstants;, import javax.swing.SwingUtilities;, , import Game.Evento;, import Game.FimDeJogoException;, import Game.ITabuleiro;, import Game.JogadaInvalidaException;, import Game.Peca;, import Game.Tabuleiro;, , public class Xadrez extends JFrame implements ActionListener, Observer {, 	private JTextField tfDe, tfPara;, 	private JButton btPlay;, 	private JLabel lbJogada;, 	private JLabel lbNroJogada;, 	private JPanel[][] pnlChessCells = new JPanel[8][8];, 	private JPanel pnlMain = new JPanel(new GridLayout(8, 8));, , 	public static void main(String[] args) {, 		SwingUtilities.invokeLater(new Runnable() {, 			public void run() {, 				new Xadrez();, 			}, 		});, 	}, , 	@Override, 	public void update(Observable o, Object arg) {, 		if (o instanceof Tabuleiro) {, 			Evento evt = (Evento)arg;, 			if (evt.evento == ITabuleiro.EventoJogo.TrocaJogada) {, 				lbJogada.setText(Tabuleiro.getInstance().getJogada().name() + 's');, 				lbNroJogada.setText(Tabuleiro.getInstance().getNroJogada() + "");, 				return;, 			}, 			if (evt.evento == ITabuleiro.EventoJogo.Movimento) {, 				moveDePara(evt.lOrig,evt.cOrig,evt.lDest,evt.cDest);, 				return;, 			}, 		}, 	}, , 	// the whole constructor is for setting up the UI of the form, 	public Xadrez() {, 		// Registra-se na classe que controla o estado do jogo, 		Tabuleiro taux = Tabuleiro.getInstance();, 		taux.addObserver(this);, , 		// Configura a interface com o usuario, 		Container c = getContentPane();, 		setBackground(new Color(204, 204, 204));, 		setDefaultCloseOperation(EXIT_ON_CLOSE);, 		setTitle("Xadrez");, 		setResizable(false);, 		c.setLayout(new BorderLayout());, 		pnlMain.setBounds(3, 3, 460, 460);, 		pnlMain.setBackground(new Color(255, 255, 255));, 		c.add(pnlMain, BorderLayout.CENTER);, 		// Define os rotulos de jogada, os textfields e o botao da jogada, 		btPlay = new JButton("Play");, 		btPlay.addActionListener(this);, 		lbJogada = new JLabel(Tabuleiro.getInstance().getJogada().name() + 's');, 		lbNroJogada = new JLabel("" + Tabuleiro.getInstance().getNroJogada());, 		tfDe = new JTextField(3);, 		tfPara = new JTextField(3);, 		JPanel pnEntrada = new JPanel();, 		pnEntrada.setLayout(new FlowLayout());, 		pnEntrada.add(new JLabel("Jogada:"));, 		pnEntrada.add(lbNroJogada);, 		pnEntrada.add(lbJogada);, 		pnEntrada.add(new JLabel("De:"));, 		pnEntrada.add(tfDe);, 		pnEntrada.add(new JLabel("Para:"));, 		pnEntrada.add(tfPara);, 		pnEntrada.add(btPlay);, 		c.add(pnEntrada, BorderLayout.NORTH);, 		// Monta o painel de letras, 		JPanel hLine = new JPanel();, 		hLine.setLayout(new GridLayout(1, 8));, 		for (int i = 0; i < 8; i++) {, 			char l = (char) (Character.valueOf('A') + i);, 			hLine.add(new JLabel("" + l, SwingConstants.CENTER));, 		}, 		c.add(hLine, BorderLayout.SOUTH);, 		// Monta o painel de numeros, 		JPanel vLine = new JPanel();, 		vLine.setLayout(new GridLayout(8, 1));, 		for (int i = 0; i < 8; i++) {, 			char l = (char) (Character.valueOf('1') + i);, 			vLine.add(new JLabel(" " + l + " ", SwingConstants.CENTER));, 		}, 		c.add(vLine, BorderLayout.WEST);, 		this.drawChessBoard();, 		this.arrangeChessPieces();, 		pack();, 		setVisible(true);, 		this.setLocationRelativeTo(null);, 	}, , 	@Override, 	public void actionPerformed(ActionEvent e) {, 		try{, 			// Executa jogada, 		    Tabuleiro.getInstance().executaJogada(tfDe.getText(),tfPara.getText());, 		    // Limpa os campos de entrada de dados, 		    tfDe.setText("");, 		    tfPara.setText("");, 		    Tabuleiro.getInstance().novaJogada();, 		}catch(JogadaInvalidaException em){, 			JOptionPane.showMessageDialog(this, "Jogada Invalida!!");, 		}catch(FimDeJogoException em){, 			JOptionPane.showMessageDialog(this,"Fim de Jogo!!");, 		}, 	}, , , 	 private void moveDePara(int lOrig, int cOrig, int lDest, int cDest) { , 	     // Apaga desenho do destino, 	     for (int z = 0; z <pnlChessCells[lDest][cDest].getComponentCount(); z++){, 	    	 if(pnlChessCells[lDest][cDest].getComponent(z).getClass().toString().indexOf("JLabel") > -1){, 	    		 pnlChessCells[lDest][cDest].remove(z);,                  pnlChessCells[lDest][cDest].repaint();,              }, 	     } , 	     , 	     // Apaga desenho da origem, 	     for (int z = 0; z <pnlChessCells[lOrig][cOrig].getComponentCount(); z++){, 	    	 if (pnlChessCells[lOrig][cOrig].getComponent(z).getClass().toString().indexOf("JLabel") > -1){, 	    		 pnlChessCells[lOrig][cOrig].remove(z);, 	             pnlChessCells[lOrig][cOrig].repaint();, 	         }, 	     }, 	     , 	     // Desenha a figura no destino, 	     if (Tabuleiro.getInstance().getPeca(lDest, cDest) != null) {, 			JLabel lbPeca = getPieceObject(Tabuleiro.getInstance().getPeca(lDest, cDest));, 			pnlChessCells[lDest][cDest].add(lbPeca, BorderLayout.CENTER);, 			pnlChessCells[lDest][cDest].validate();, 		 },     }, 	 , 	// Given the code of a piece as a string, this method instantiates, 	// a label object with the right image inside it, 	private JLabel getPieceObject(Peca p) {, 		JLabel lblTemp;, , 		if (p.getNome().equals("RB")), 			lblTemp = new JLabel(this.rookBlack);, 		else if (p.getNome().equals("BB")), 			lblTemp = new JLabel(this.bishopBlack);, 		else if (p.getNome().equals("NB")), 			lblTemp = new JLabel(this.knightBlack);, 		else if (p.getNome().equals("QB")), 			lblTemp = new JLabel(this.queenBlack);, 		else if (p.getNome().equals("KB")), 			lblTemp = new JLabel(this.kingBlack);, 		else if (p.getNome().equals("PB")), 			lblTemp = new JLabel(this.pawnBlack);, 		else if (p.getNome().equals("RW")), 			lblTemp = new JLabel(this.rookWhite);, 		else if (p.getNome().equals("BW")), 			lblTemp = new JLabel(this.bishopWhite);, 		else if (p.getNome().equals("NW")), 			lblTemp = new JLabel(this.knightWhite);, 		else if (p.getNome().equals("QW")), 			lblTemp = new JLabel(this.queenWhite);, 		else if (p.getNome().equals("KW")), 			lblTemp = new JLabel(this.kingWhite);, 		else if (p.getNome().equals("PW")), 			lblTemp = new JLabel(this.pawnWhite);, 		else, 			lblTemp = new JLabel();, 		return lblTemp;, 	}, , 	// This method reads strChessBoard two-dimensional array of string, 	// and places chess pieces at their right positions, 	private void arrangeChessPieces() {, 		for (int y = 0; y < 8; y++), 			for (int x = 0; x < 8; x++) {, 				if (Tabuleiro.getInstance().getPeca(y, x) != null) {, 					JLabel lbPeca = getPieceObject(Tabuleiro.getInstance().getPeca(y, x));, 					pnlChessCells[y][x].add(lbPeca, BorderLayout.CENTER);, 					pnlChessCells[y][x].validate();, 				}, 			}, 	}, , 	// This method draws chess board, i.e. black and white cells on the board, 	private void drawChessBoard() {, 		for (int y = 0; y < 8; y++), 			for (int x = 0; x < 8; x++) {, 				pnlChessCells[y][x] = new JPanel(new BorderLayout());, 				pnlMain.add(pnlChessCells[y][x]);, 				if (y % 2 == 0), 					if (x % 2 != 0), 						pnlChessCells[y][x].setBackground(Color.DARK_GRAY);, 					else, 						pnlChessCells[y][x].setBackground(Color.WHITE);, 				else if (x % 2 == 0), 					pnlChessCells[y][x].setBackground(Color.DARK_GRAY);, 				else, 					pnlChessCells[y][x].setBackground(Color.WHITE);, 			}, 	}, , 	// rook = torre, pawn = peao, knight = caveleiro (cavalo), 	private ImageIcon rookBlack = new ImageIcon(System.getProperty("user.dir"), 			+ "/images/br.png");, , 	private ImageIcon rookWhite = new ImageIcon(System.getProperty("user.dir"), 			+ "/images/wr.png");, , 	private ImageIcon bishopBlack = new ImageIcon(, 			System.getProperty("user.dir") + "/images/bb.png");, , 	private ImageIcon bishopWhite = new ImageIcon(, 			System.getProperty("user.dir") + "/images/wb.png");, , 	private ImageIcon knightBlack = new ImageIcon(, 			System.getProperty("user.dir") + "/images/bn.png");, , 	private ImageIcon knightWhite = new ImageIcon(, 			System.getProperty("user.dir") + "/images/wn.png");, , 	private ImageIcon kingBlack = new ImageIcon(System.getProperty("user.dir"), 			+ "/images/bk.png");, , 	private ImageIcon kingWhite = new ImageIcon(System.getProperty("user.dir"), 			+ "/images/wk.png");, , 	private ImageIcon queenBlack = new ImageIcon(System.getProperty("user.dir"), 			+ "/images/bq.png");, , 	private ImageIcon queenWhite = new ImageIcon(System.getProperty("user.dir"), 			+ "/images/wq.png");, , 	private ImageIcon pawnBlack = new ImageIcon(System.getProperty("user.dir"), 			+ "/images/bp.png");, , 	private ImageIcon pawnWhite = new ImageIcon(System.getProperty("user.dir"), 			+ "/images/wp.png");, }]
[package Game;, , public class JogadaInvalidaException extends RuntimeException {,     public JogadaInvalidaException(){,     	super();,     }, }]
[package Game;, , public class Rei extends Peca{, 	public Rei(CorPeca c) {, 		super(c);, 	}, , 	@Override, 	public void defineNome() {, 		setNome("K"+letraCorPeca(getCorPeca()));, 	}, , 	@Override, 	public boolean movimentoValido(int lOrig,int cOrig,int lDest,int cDest) {, 		// Verifica se e movimento valido para um rei, 	    if (Math.abs(lOrig-lDest) > 1 || Math.abs(cOrig-cDest) > 1){, 				return(false);, 		}else{, 			return true;, 		}, 	}, }]
[package Game;, , public abstract class Peca {,     private CorPeca corPeca;,     private String nome;,     , 	public Peca(CorPeca c) {, 		super();, 		corPeca = c;, 		defineNome();, 	}, 		, 	public CorPeca getCorPeca(){, 		return corPeca;, 	}, , , 	public String getNome() {, 		return nome;, 	}, 	, 	public void setNome(String n){, 		nome = n;, 	}, , 	public static char letraCorPeca(CorPeca c){, 		switch(c){, 		case Branca:, 			return('W');, 		case Preta:, 			return('B');, 		default:, 			return('X');, 		}, 	}, 	, 	// Define o "nome" da peca baseado na classe e na cor, 	// Peao = P, Torre = R, Cavalo = N, Bispo = B, Rainha = Q, Rei = K, 	public abstract void defineNome();,     ,     // Define se um movimento e valido, 	public abstract boolean movimentoValido(int linhaOrigem,int colunaOrigem, int linhaDestino, int colunaDestino);, }]
[package Game;, , public class FimDeJogoException extends RuntimeException {, 	public FimDeJogoException() {, 	}, }]
[package Game;, , public class Cavalo extends Peca{, 	public Cavalo(CorPeca c) {, 		super(c);, 	}, , 	@Override, 	public void defineNome() {, 		setNome("N"+letraCorPeca(getCorPeca()));, 	}, , 	@Override, 	public boolean movimentoValido(int lOrig,int cOrig,int lDest,int cDest) {, 		// Verifica se e movimento valido para um rei, 	    if (Math.abs(lOrig-lDest) > 1 || Math.abs(cOrig-cDest) > 1){, 				return(false);, 		}else{, 			return true;, 		}, 	}, }]
[package Game;, , public class Torre extends Peca{, 	public Torre(CorPeca c) {, 		super(c);, 	}, , 	@Override, 	public void defineNome() {, 		setNome("R"+letraCorPeca(getCorPeca()));, 	}, , 	@Override, 	public boolean movimentoValido(int lOrig,int cOrig,int lDest,int cDest) {, 		// Verifica se e movimento valido para um rei, 	    if (Math.abs(lOrig-lDest) > 1 || Math.abs(cOrig-cDest) > 1){, 				return(false);, 		}else{, 			return true;, 		}, 	}, }]
[package Game;, , public class Peao extends Peca{, 	public Peao(CorPeca c) {, 		super(c);, 	}, , 	@Override, 	public void defineNome() {, 		setNome("P"+letraCorPeca(getCorPeca()));, 	}, , 	@Override, 	public boolean movimentoValido(int lOrig,int cOrig,int lDest,int cDest) {, 		// Verifica se e movimento valido para um rei, 	    if (Math.abs(lOrig-lDest) > 1 || Math.abs(cOrig-cDest) > 1){, 				return(false);, 		}else{, 			return true;, 		}, 	}, }]
[package Game;, public interface ITabuleiro {, 	public enum EventoJogo{ TrocaJogada, Movimento };, 	CorPeca getJogada(); // Devolve a "cor" do jogador corrente, 	int getNroJogada();  // Devolve o numero da jogada, 	boolean ocupada(int lDest, int cDest); // Retorna se uma casa esta ocupada, 	Peca getPeca(int lin,int col); // Retorna a peca na posicao informada ([0..7][0..7], 	boolean terminou(); // Retorna true se o jogo terminou, 	, 	// Incrementa o numero da jogada, 	// Troca a cor do jogador corrente, 	// Notifica observadores com "new Evento()", 	void novaJogada();   , 	, 	// Decodifica Strings de entrada, 	// Verifica se a jogada e valida , 	// Sinaliza JogadaInvalidaException, se for o caso, 	// Sinaliza FimDeJogoException, se for o caso, 	// Atualiza a posicao das pecas no tabuleiro, 	// Notifica observadores com "new Evento(lo,co,ld,cd)", 	void executaJogada(String posOrig, String posDest) throws JogadaInvalidaException,FimDeJogoException;, }]
[package Game;, public class Evento {,     public int lOrig,cOrig,lDest,cDest;,     public ITabuleiro.EventoJogo evento;,     , 	public Evento(int lo,int co,int ld,int cd) {, 		lOrig = lo;, 		cOrig = co;, 		lDest = ld;, 		cDest = cd;, 		evento = ITabuleiro.EventoJogo.Movimento;, 	}, 	, 	public Evento(){, 		evento = ITabuleiro.EventoJogo.TrocaJogada;, 		lOrig = 0;, 		cOrig = 0;, 		lDest = 0;, 		cDest = 0;		, 	}, }]
[package Game;, , public enum CorPeca { , 	Branca, Preta, };]
[package Game;, import java.util.Observable;, , , public class Tabuleiro extends Observable implements ITabuleiro{,     private static Tabuleiro edj = null;,     private static Peca[][] matriz;, , ,     // Não modificar este método,     public static Tabuleiro getInstance(){,     	if (edj == null){,     		edj = new Tabuleiro();,     	},         return(edj);,     },     ,     private Tabuleiro(){,         matriz = new Peca[8][8];, ,         for (int i = 0; i < matriz.length; i++) {,             matriz[1][i] = new Peao(CorPeca.Branca);,         }, ,        for (int i = 0; i < matriz.length; i++) {,             matriz[6][i] = new Peao(CorPeca.Preta);,         }, ,         matriz[0][0] = new Torre(CorPeca.Branca);,         matriz[0][1] = new Cavalo(CorPeca.Branca);,         matriz[0][2] = new Bispo(CorPeca.Branca);,         matriz[0][3] = new Rei(CorPeca.Branca);,         matriz[0][4] = new Rainha(CorPeca.Branca);,         matriz[0][5] = new Bispo(CorPeca.Branca);,         matriz[0][6] = new Cavalo(CorPeca.Branca);,         matriz[0][7] = new Torre(CorPeca.Branca);, ,         matriz[7][0] = new Torre(CorPeca.Preta);,         matriz[7][1] = new Cavalo(CorPeca.Preta);,         matriz[7][2] = new Bispo(CorPeca.Preta);,         matriz[7][3] = new Rei(CorPeca.Preta);,         matriz[7][4] = new Rainha(CorPeca.Preta);,         matriz[7][5] = new Bispo(CorPeca.Preta);,         matriz[7][6] = new Cavalo(CorPeca.Preta);,         matriz[7][7] = new Torre(CorPeca.Preta);,     },     ,     ,     @Override,     // Deve retornar se um dos reis foi morto,     public boolean terminou(){,     	return false;,     },     ,     @Override,     // Deve retornar a cor das pecas da jogada corrente, 	public CorPeca getJogada(){,     	return CorPeca.Branca;,     },     ,     @Override,     // Deve retornar o numero da jogada corrente, 	public int getNroJogada(){,     	return(0);,     },     ,     @Override,     // Deve retornar true se a posicao corrente estiver ocupada, 	public boolean ocupada(int lDest, int cDest) {, 		return (false);, 	}, , 	@Override, 	// Deve retornar uma referencia para a peca armazenada na posicao [lin][col], 	// ou null se a posicao estiver vazia, 	public Peca getPeca(int lin, int col) {, 		return matriz[lin][col];, 	}, , 	@Override, 	public void novaJogada(){,     	// TODO: Incrementa o numero da jogada e alterna a cor,         ,         ,         // Não modificar as linhas abaixo !!,     	this.setChanged();,     	this.notifyObservers(new Evento());,     },         ,     @Override, 	public void executaJogada(String posOrig,String posDest)throws JogadaInvalidaException,FimDeJogoException{, 	    // TODO: verificar se o jogo nao acabou,         // TODO: verificar se os strings informados sao validos,         // TODO: determinar a linha e coluna de origem e destino da jogada,         // TODO: determinar se e uma jogada valida (lancar excecao se nao for),         // TODO: se a jogada implicar na morte de um rei, lançar excecao correspondente ,         // TODO: efetivar a jogada na estrutura de dados, ,         // TODO: descomentar as linhas abaixo passando como parametro para "Evento" a posicao,         //       de origem e destino da peca a ser movida,     	//this.setChanged();,     	//this.notifyObservers(new Evento(lOrig,cOrig,lDest,cDest));,     }, }]
[package Game;, , public class Rainha extends Peca{, 	public Rainha(CorPeca c) {, 		super(c);, 	}, , 	@Override, 	public void defineNome() {, 		setNome("Q"+letraCorPeca(getCorPeca()));, 	}, , 	@Override, 	public boolean movimentoValido(int lOrig,int cOrig,int lDest,int cDest) {, 		// Verifica se e movimento valido para um rei, 	    if (Math.abs(lOrig-lDest) > 1 || Math.abs(cOrig-cDest) > 1){, 				return(false);, 		}else{, 			return true;, 		}, 	}, }]
[package Game;, , public class Bispo extends Peca{, 	public Bispo(CorPeca c) {, 		super(c);, 	}, , 	@Override, 	public void defineNome() {, 		setNome("B"+letraCorPeca(getCorPeca()));, 	}, , 	@Override, 	public boolean movimentoValido(int lOrig,int cOrig,int lDest,int cDest) {, 		// Verifica se e movimento valido para um rei, 	    if (Math.abs(lOrig-lDest) > 1 || Math.abs(cOrig-cDest) > 1){, 				return(false);, 		}else{, 			return true;, 		}, 	}, }]
[interface CardObserver{,     void cardSelected(CardView card);, }]
[import java.util.*;, import javafx.application.Application;, import javafx.beans.binding.Bindings;, import javafx.collections.FXCollections;, import javafx.collections.ObservableList;, import javafx.geometry.Insets;, import javafx.geometry.Pos;, import javafx.scene.Scene;, import javafx.scene.chart.PieChart;, import javafx.scene.control.Button;, import javafx.scene.control.ComboBox;, import javafx.scene.control.Label;, import javafx.scene.control.ToggleButton;, import javafx.scene.effect.Reflection;, import javafx.scene.image.Image;, import javafx.scene.image.ImageView;, import javafx.scene.layout.GridPane;, import javafx.scene.layout.HBox;, import javafx.scene.text.Font;, import javafx.scene.text.FontWeight;, import javafx.scene.text.Text;, import javafx.stage.Stage;, , public class DeckView extends HBox implements CardObserver,Observer{,     private int jogador;,     private CardDeck cDeck;,     private Card selectedCard;, , ,     public DeckView(int nroJog){,         super(4);,         this.setAlignment(Pos.CENTER);,         ,         jogador = nroJog;,         selectedCard = null;,         ,         cDeck = null;,         if (jogador == 1){,             cDeck = Game.getInstance().getDeckJ1();,         }else{,             cDeck = Game.getInstance().getDeckJ2();,         },         cDeck.addObserver(this);,         ,         for(Card card:cDeck.getCards()){,             CardView cv = new CardView(card);,             cv.setCardObserver(this);,             this.getChildren().add(cv);,         },     },     ,     @Override,     public void cardSelected(CardView cv){,         cDeck.setSelectedCard(cv.getCard());,         selectedCard = cv.getCard();,         Game.getInstance().play(cDeck);,     },         ,     private void removeSel(){,         List cards = getChildren();,         for(int i=0;i<cards.size();i++){,             CardView cv = (CardView)cards.get(i);,             if (cv.getCard() == selectedCard){,                 getChildren().remove(cv);,                 selectedCard = null;,             },         }      ,     },     ,     @Override,     public void update(Observable o,Object arg){,         if (arg == null){,             return;,         },         GameEvent ge = (GameEvent)arg;,         if (ge.getTarget() != GameEvent.Target.DECK){,             return;,         },         if (ge.getAction() == GameEvent.Action.REMOVESEL){,             removeSel();,         },     }, }, , , ]
[import java.util.*;, , // Esta classe tem de ser um container de cartas observavel ..., public class CardDeck extends Observable{,     public static final int NCARDS = 6;,     private List<Card> cartas;,     private Card selected;,     ,     public CardDeck(){,        cartas = new ArrayList<Card>(NCARDS);,        selected = null;,        Random r = new Random();,        for(int i=0;i<NCARDS;i++){,            int n = r.nextInt(10)+1;,            Card c = new Card("C"+n,"img"+n,n);,            c.flip();,            cartas.add(c);,        },     },         ,     public List<Card> getCards(){,         return(cartas);,     }, ,     public int getNumberOfCards(){,         return(cartas.size());,     },     ,     public void removeSel(){,         if (selected == null){,             return;,         },         cartas.remove(selected);,         selected = null;,         GameEvent gameEvent = new GameEvent(GameEvent.Target.DECK,GameEvent.Action.REMOVESEL,"");,         setChanged();,         notifyObservers(gameEvent);,     }    ,         ,     public void setSelectedCard(Card card){,         selected = card;,     },     ,     public Card getSelectedCard(){,         return(selected);,     }, }, ]
[import java.util.*;, import javafx.scene.image.Image;, import javafx.scene.image.ImageView;, , public class ImageFactory{,     private static ImageFactory imgf = new ImageFactory();,     private Map<String,Image> images;,     ,     public static ImageFactory getInstance(){,       return(imgf);,     },     ,     private ImageFactory(){,         images = new HashMap<>();,     },     ,     private String id2File(String imgId){,         switch(imgId){,             case "img1" : return("file:./images/Um.png");,             case "img2" : return("file:./images/Dois.png");,             case "img3" : return("file:./images/Tres.png");,             case "img4" : return("file:./images/Quatro.png");,             case "img5" : return("file:./images/Cinco.png");,             case "img6" : return("file:./images/Seis.png");,             case "img7" : return("file:./images/Sete.png");,             case "img8" : return("file:./images/Oito.png");,             case "img9" : return("file:./images/Nove.png");,             case "img10" : return("file:./images/Dez.png");,             case "imgBck" : return("file:./images/Back.png");,             default: throw new IllegalArgumentException("Invalid image Id");,         },     },     ,     public ImageView createImage(String imgId){,         Image img = images.get(imgId);,         if (img == null){,             img = new Image(id2File(imgId));,             images.put(imgId,img);,         },  ,         //Image img = new Image(id2File(imgId));,         return(new ImageView(img));,     }, }, ,         ,         ,     , ]
[import java.util.*;, import javafx.geometry.Insets;, import javafx.geometry.Pos;, import javafx.scene.Scene;, import javafx.scene.control.TextField;, import javafx.scene.control.Label;, import javafx.scene.layout.GridPane;, import javafx.scene.layout.HBox;, import javafx.stage.Stage;, , public class PlacarView extends GridPane implements Observer{,     private TextField ptsJ1,ptsJ2;,     ,     public PlacarView(){,         this.setAlignment(Pos.CENTER);,         this.setHgap(10);,         this.setVgap(10);,         this.setPadding(new Insets(25, 25, 25, 25));,         ,         Game.getInstance().addObserver(this);,         ,         ptsJ1 = new TextField();,         ptsJ2 = new TextField();,       ,         ptsJ1.setText(""+Game.getInstance().getPtsJ1());,         ptsJ2.setText(""+Game.getInstance().getPtsJ2());, ,         this.add(new Label("Jogador 1:"),0,0);,         this.add(ptsJ1,1,0);,         this.add(new Label("Jogador 2:"),0,1);,         this.add(ptsJ2,1,1);,     },     ,     @Override,     public void update(Observable o,Object arg){,         ptsJ1.setText(""+Game.getInstance().getPtsJ1());,         ptsJ2.setText(""+Game.getInstance().getPtsJ2());,     }    , }, ]
[import java.util.*;, , public class Game extends Observable{,     private static Game game = new Game();,     private int ptsJ1,ptsJ2;,     private CardDeck deckJ1,deckJ2;,     private int player;,     private int jogadas;,     ,     public static Game getInstance(){,         return(game);,     },     ,     private Game(){,         ptsJ1 = 0;,         ptsJ2 = 0;,         deckJ1 = new CardDeck();,         deckJ2 = new CardDeck();,         player = 1;,         jogadas = CardDeck.NCARDS;,     },     ,     private void nextPlayer(){,         player++;,         if (player == 4){,             player = 1;,         },     },         ,     public int getPtsJ1(){,         return(ptsJ1);,     }, ,     public int getPtsJ2(){,         return(ptsJ2);,     },     ,     public CardDeck getDeckJ1(){,         return(deckJ1);,     },     ,     public CardDeck getDeckJ2(){,         return(deckJ2);,     },     ,     public void play(CardDeck deckAcionado){,         GameEvent gameEvent = null;, ,         if (player == 3){,                 gameEvent = new GameEvent(GameEvent.Target.GWIN,GameEvent.Action.MUSTCLEAN,"");,                 setChanged();,                 notifyObservers((Object)gameEvent);,                 return;,         }        ,         if (deckAcionado == deckJ1){,             if (player != 1){,                 gameEvent = new GameEvent(GameEvent.Target.GWIN,GameEvent.Action.INVPLAY,"2");,                 setChanged();,                 notifyObservers((Object)gameEvent);,             }else{,                 // Vira a carta,                 deckJ1.getSelectedCard().flip();,                 // Proximo jogador,                 nextPlayer();,             },         }else if (deckAcionado == deckJ2){,             if (player != 2){,                 gameEvent = new GameEvent(GameEvent.Target.GWIN,GameEvent.Action.INVPLAY,"2");,                 setChanged();,                 notifyObservers((Object)gameEvent);,             }else{,                 // Vira a carta,                 deckJ2.getSelectedCard().flip();,                 // Verifica quem ganhou a rodada,                 if (deckJ1.getSelectedCard().getValue() > deckJ2.getSelectedCard().getValue()){,                     ptsJ1++;,                 }else if (deckJ1.getSelectedCard().getValue() < deckJ2.getSelectedCard().getValue()){,                     ptsJ2++;,                 },                 setChanged();,                 notifyObservers((Object)gameEvent);,                 // Próximo jogador,                 nextPlayer();,             },         }          ,     }, ,     // Acionada pelo botao de limpar    ,     public void removeSelected(){,         GameEvent gameEvent = null;,         ,         if (player != 3){,             return;,         },         jogadas--;,         if (jogadas == 0){,             gameEvent = new GameEvent(GameEvent.Target.GWIN,GameEvent.Action.ENDGAME,"");,             setChanged();,             notifyObservers((Object)gameEvent);,             //return;,         },         deckJ1.removeSel();,         deckJ2.removeSel();,         nextPlayer();,     }, }]
[import java.util.*;, , public class Card extends Observable{,     private String id;,     private String imageId;,     private int value;,     private boolean faceUp;,     ,     public Card(String anId,String anImageId,int val){,         id = anId;,         imageId = anImageId;,         value = val;,         faceUp = true;,     },     ,     public String getId(){,         return(id);,     },     ,     public String getImageId(){,         return(imageId);,     },     ,     public int getValue(){,         return(value);,     },     ,     public boolean isFacedUp(){,         return(faceUp);,     },     ,     public void flip(){,         if (faceUp == true){,             faceUp = false;,         }else{,             faceUp = true;,         },         setChanged();,         notifyObservers();,     }, },         , ]
[import java.util.*;, import javafx.application.Application;, import javafx.beans.binding.Bindings;, import javafx.geometry.Insets;, import javafx.geometry.Pos;, import javafx.scene.Scene;, import javafx.scene.control.ScrollPane;, import javafx.scene.control.Button;, import javafx.scene.control.TextField;, import javafx.scene.control.Label;, import javafx.scene.control.Alert;, import javafx.scene.control.Alert.AlertType;, import javafx.scene.image.Image;, import javafx.scene.image.ImageView;, import javafx.scene.layout.GridPane;, import javafx.scene.layout.HBox;, import javafx.scene.text.Font;, import javafx.scene.text.FontWeight;, import javafx.scene.text.Text;, import javafx.stage.Stage;, import javafx.event.*;, , , public class GameWindow extends Application implements Observer{,    ,     public static void main(String[] args) {,         launch(args);,     }, ,     @Override,     public void start(Stage primaryStage) {,         Game.getInstance().addObserver(this);,         ,         primaryStage.setTitle("Batalha de Cartas");, ,         GridPane grid = new GridPane();,         grid.setAlignment(Pos.CENTER);,         grid.setHgap(10);,         grid.setVgap(10);,         grid.setPadding(new Insets(25, 25, 25, 25));,        ,         DeckView deckJ1 = new DeckView(1);,         ScrollPane sd1 = new ScrollPane();,         sd1.setPrefSize(950, 320);,         sd1.setContent(deckJ1);,         grid.add(sd1,0,0);,         ,         PlacarView placar = new PlacarView();,         grid.add(placar,0,1);,         ,         Button butClean = new Button("Clean");,         grid.add(butClean,1,1);,         butClean.setOnAction(new EventHandler<ActionEvent>() {,             @Override,             public void handle(ActionEvent e) {,                 Game.getInstance().removeSelected();,             },         });, ,         DeckView deckJ2 = new DeckView(2);,         ScrollPane sd2 = new ScrollPane();,         sd2.setPrefSize(950, 320);,         sd2.setContent(deckJ2);,         grid.add(sd2,0,2);,                 ,         Scene scene = new Scene(grid);,         primaryStage.setScene(scene);        ,         primaryStage.show();,     }, ,     @Override,     public void update(Observable o,Object arg){,         Alert alert;,         ,         if (arg == null){,             return;,         },         GameEvent eg = (GameEvent)arg;,         if (eg.getTarget() == GameEvent.Target.GWIN){,             switch(eg.getAction()){,                 case INVPLAY:,                     alert = new Alert(AlertType.WARNING);,                     alert.setTitle("Atenção !!");,                     alert.setHeaderText("Jogada inválida!!");,                     alert.setContentText("Era a vez do jogador "+eg.getArg());,                     alert.showAndWait();,                     break;                    ,                 case MUSTCLEAN:,                     alert = new Alert(AlertType.WARNING);,                     alert.setTitle("Atenção !!");,                     alert.setHeaderText(null);,                     alert.setContentText("Utilize o botao \"Clean\"");,                     alert.showAndWait();,                     break;                    ,                 case ENDGAME:,                     alert = new Alert(AlertType.WARNING);,                     alert.setTitle("Atenção !!");,                     alert.setHeaderText(null);,                     alert.setContentText("Fim de Jogo !!");,                     alert.showAndWait();,                     break;                    ,             },         },     },     , }]
[public class GameEvent{,     public enum Target {DECK,GWIN};,     public enum Action {INVPLAY,MUSTCLEAN,ENDGAME,REMOVESEL};,     ,     private Target target;,     private Action action;,     private String arg;,     ,     public GameEvent(Target aTarget,Action anAction,String anArg){,         target = aTarget;,         action = anAction;,         arg = anArg;,     },     ,     public Target getTarget(){,         return(target);,     },     ,     public Action getAction(){,         return(action);,     },     ,     public String getArg(){,         return(arg);,     },     ,     public String toString(){,         return target + ":"+ action + ":" + arg;,     }, }, ]
[import javafx.scene.control.Button;, import javafx.scene.image.Image;, import javafx.scene.image.ImageView;, import java.util.*;, import javafx.event.*;, , public class CardView extends Button implements Observer{,     private Card card;,     private CardView thisCard;,     private CardObserver observer;,     ,     public CardView(Card aCard){,         super("",ImageFactory.getInstance().createImage("imgBck"));,         card = aCard;,         card.addObserver(this);,         thisCard = this;,         ,         this.setOnAction(new EventHandler<ActionEvent>() {,             @Override,             public void handle(ActionEvent e) {,                 if (observer != null){,                     observer.cardSelected(thisCard);,                 },             },         });,     },     ,     @Override,     public void update(Observable o,Object args){,         if (card.isFacedUp()){,             this.setGraphic(ImageFactory.getInstance().createImage(card.getImageId()));,         }else{,             this.setGraphic(ImageFactory.getInstance().createImage("imgBck"));,         }   ,     },     ,     public void setCardObserver(CardObserver obs){,         observer = obs;,     },     ,     public Card getCard(){,         return(card);,     }, }, ]
[/**,  * Created by Andrius Lima on 8/16/16.,  */, public class AlunoArr implements IAluno {,     private String matricula;,     private int notas[];,     private int cargaHoraria;,     private int frequencia;,     private boolean cancelado;,     private static final int MAXNOTAS = 3;, ,     public AlunoArr() {,         matricula = "";,         notas = new int[MAXNOTAS];,         for (int i = 0; i < MAXNOTAS; i++) {,             notas[i] = -1;,         },         cargaHoraria = -1;,         frequencia = -1;,         cancelado = false;,     }, ,     public void efetivaMatricula(String mat) {,         matricula = mat;,         cancelado = false;,     }, ,     public void cancelaMatricula() {,         cancelado = true;,     }, ,     private boolean confereIndice(int indice) {,         return !(indice < 1 || indice > MAXNOTAS);,     }, ,     public boolean insereNota(int nota, int indice) {,         if (!confereIndice(indice)) return false;,         notas[indice - 1] = nota;,         return true;,     }, ,     public void insereFreq(int presencas) {, ,     }, ,     public boolean insereCH(int ch) {,         return false;,     }, ,     public int getNota(int indice) {,         return 0;,     }, ,     public String getMatricula() {,         return null;,     }, ,     public int getFrequencia() {,         return 0;,     }, ,     public int getCH() {,         return 0;,     }, ,     public boolean aprovado() {,         return true;,     }, ,     public double media() {,         return 0;,     }, ,     public boolean matriculado() {,         return false;,     }, , }]
[/**,  * Created by 16104961 on 8/16/16.,  */, public class AlunoVar implements IAluno{, private String matricula;, private int n1,n2,n3;, private int cargaHoraria;, private int frequencia;, private boolean cancelado;, , public AlunoVar(){,         matricula = "";,         n1 = -1; n2 = -1; n3 = -1;,         cargaHoraria = -1;,         frequencia = -1;,         cancelado = false;,         }, , public void efetivaMatricula(String mat){,         matricula = mat;,         cancelado = false;,         }, , public void cancelaMatricula(){,         cancelado = true;,         }, , public boolean insereNota(int nota, int indice){,         switch(indice){,         case 1: n1 = nota;,         break;,         case 2: n2 = nota;,         break;,         case 3: n3 = nota;,         break;, default: return false;,         },         return true;,         }, , public void insereFreq(int presencas) {,         frequencia = presencas;, }, , public boolean insereCH(int ch) {,         cargaHoraria = ch;,         return(true);, }, , public int getNota(int indice) {,         switch(indice){,         case 1: return n1;,         case 2: return n2;,         case 3: return n3;,         default: return -1;,         }, }, , public String getMatricula(){,         return(matricula);,         }, , public int getFrequencia(),         {,         return frequencia;,         }, , public int getCH(){,         return cargaHoraria;,         }, , public boolean aprovado() {,         if(media() >= 5.0){,             return true;,         }else{,             return false;,         }, }, , public double media(){,         if (n1 == -1 || n2 == -1 || n3 == -1){,             return(-1.0);,         }else{,             return (n1+n2+n3)/3;,         }, }, , public boolean matriculado(){,         return(!cancelado);, }, , , }]
[/**,  * Created by 16104961 on 8/16/16.,  */, import java.time.*;, public interface ITurma {,     void inicializa(int tamTurma,LocalDate limMat,LocalDate limCan);,     boolean efetivaMatricula(IAluno umAluno);,     boolean cancelaMatricula(IAluno umAluno);,     IAluno[] getMatriculados();,     IAluno[] getCancelados();,     IAluno getAluno(String matricula);, }]
[public interface IAluno {,     void efetivaMatricula(String mat);,     void cancelaMatricula();,     boolean insereNota(int nota, int indice);    // os indices variam de 1 a 3,     void insereFreq(int presencas);,     boolean insereCH(int ch);,     int getNota(int indice);,     String getMatricula();,     int getFrequencia();,     int getCH();,     boolean aprovado();,     double media();,     boolean matriculado();, }]
[/**,  * Created by 16104961 on 9/2/16.,  */, class App{,     public static void main(String args[]){,         ILista<Integer> lst = new LstEncadeada<>();,         lst.add(17);,         lst.add(15);,         lst.add(3);,         for(int i = 0; i < 50; i++){,             lst.add(i);,         },         System.out.print("Elemento de indice 2: ");,         System.out.println(lst.get(2));,         System.out.print("Elemento de indice 10: ");,         System.out.println(lst.get(10));,         System.out.println("Lista completa:");,         System.out.println(lst.toString());,     }, }]
[/**,  * Created by 16104961 on 9/2/16.,  */, public interface ILista<E> {,     boolean add(E element);,     boolean set(E element,int pos);,     boolean ins(E element,int pos);,     boolean remove(int pos);,     E get(int pos);,     int size();,     boolean isFull();,     boolean isEmpty();, }]
[/**,  * Created by 16104961 on 9/2/16.,  */, public class LstEncadeada<E> implements ILista<E>{,     class Nodo<U>{ // classe aninhada (só é visível dentro desta classe),         public U dado;,         public Nodo<U> prox;, ,         public Nodo(U umDado){,             dado = umDado;,             prox = null;,         },     }, ,     private Nodo<E> prim;,     private Nodo<E> ult;,     private int cont;, ,     public LstEncadeada(){,         prim = null;,         ult = null;,         cont = 0;,     }, ,     public boolean add(E umDado){,         Nodo<E> aux = new Nodo<>(umDado);,         if (prim == null) {,             prim = aux;,         }else {,             ult.prox = aux;,         },         ult = aux;,         cont++;,         return true;,     }, ,     public E get(int i){,         Nodo<E> aux = prim;,         if (i < 0 || i >= cont) {,             return null;,         }else {,             while (i > 0) {,                 aux = aux.prox;,                 i--;,             },         },         return aux.dado;,     }, ,     public boolean set(E element,int pos){,         if(pos < 0 || pos>= cont){,             return false;,         }else{,             Nodo<E> aux = prim;,             while(pos > 0){,                 aux = aux.prox;,                 pos--;,             },             aux.dado = element;,         },         return true;,     }, ,     public int size(){,         return cont;,     }, ,     public boolean isFull(){,         // TODO:,         return(false);,     }, ,     public boolean isEmpty(){,         return ult == null;,     }, ,     public boolean ins(E element,int pos){,         // TODO:,         return(false);,     }, ,     public boolean remove(int pos){,         // TODO:,         return(false);,     }, ,     @Override,     public String toString(){,         String str = " ";,         if (prim == null),             return null;,         /*for (int i = 0; i < size(); i++){,             str = str + get(i) + " ";,         }*/,         Nodo<E> aux = prim;,         do {,             str = str + aux.dado + " ";,             aux = aux.prox;,         }while(aux.prox != null);,         return str;,     }, }]
[, public class LstAlunoArr implements IListaAluno {,     private IAluno alunos[];,     private int ult;, ,     public LstAlunoArr(int tMax){,         alunos = new IAluno[tMax];,         ult=0;,     }, ,     public boolean insereAluno(IAluno umAluno){,         if (ult == alunos.length){,             return(false);,         }else{,             alunos[ult] = umAluno;,             ult++;,             return(true);,         },     }, ,     public IAluno getAluno(int pos){,         if (pos < 0 || pos>=ult){,             return(null);,         }else{,             return(alunos[pos]);,         },     }, ,     public boolean removeAluno(int pos){,         if (pos < 0 || pos>=ult){,             return(false);,         }else{,             for(int i=pos; i<ult-1; i++){,                 alunos[i] = alunos[i+1];,             },             ult--;,             return(true);,         },     }, ,     public int tamanho(){,         return(ult);,     }, ,     public IListaAluno duplica(){,         IListaAluno aux = new LstAlunoArr(alunos.length);,         for(int i=0; i<ult; i++){,             aux.insereAluno(this.getAluno(i));,         },         return(aux);,     }, ,     public IAluno[] toArray(){,         return(alunos);,     }, }]
[import java.time.LocalDate;, , public class App {,     public static void main(String args[]){,         LocalDate dLimMatr = LocalDate.of(2016,9,1);,         LocalDate dLimCanc = LocalDate.of(2016,12,1);,         ITurma turma = new TurmaNew(60,dLimMatr,dLimCanc);, ,         IAluno al1 = new AlunoVar();,         al1.efetivaMatricula("1108591");,         IAluno al2 = new AlunoArr();,         al2.efetivaMatricula("2004561");,         IAluno al3 = new AlunoArr();,         al3.efetivaMatricula("1866577");,         turma.efetivaMatricula(al1);,         turma.efetivaMatricula(al2);,         turma.efetivaMatricula(al3);, ,         IAluno matriculados[] = turma.getMatriculados();,         for(IAluno a:matriculados){,             System.out.println(a);,         },     }, }]
[/**,  * Created by Andrius Lima on 8/16/16.,  */, public class AlunoArr implements IAluno {,     private String matricula;,     private int notas[];,     private int cargaHoraria;,     private int frequencia;,     private boolean cancelado;,     private static final int MAXNOTAS = 3;, ,     public AlunoArr() {,         matricula = "";,         notas = new int[MAXNOTAS];,         for (int i = 0; i < MAXNOTAS; i++) {,             notas[i] = -1;,         },         cargaHoraria = -1;,         frequencia = -1;,         cancelado = false;,     }, ,     public void efetivaMatricula(String mat) {,         matricula = mat;,         cancelado = false;,     }, ,     public void cancelaMatricula() {,         cancelado = true;,     }, ,     private boolean confereIndice(int indice) {,         return !(indice < 1 || indice > MAXNOTAS);,     }, ,     public boolean insereNota(int nota, int indice) {,         if (!confereIndice(indice)) return false;,         notas[indice - 1] = nota;,         return true;,     }, ,     public boolean insereFreq(int presencas) {,         frequencia = presencas;,         return true;,     }, ,     public boolean insereCH(int ch) {,         cargaHoraria = ch;,         return(true);,     }, ,     public int getNota(int indice) {,         if(!confereIndice(indice)) return -1;,         return notas[indice-1];,     }, ,     public String getMatricula() {,         return(matricula);,     }, ,     public int getFrequencia() {,         return frequencia;,     }, ,     public int getCH() {,         return cargaHoraria;,     }, ,     public boolean aprovado() {,         return media() >= 5.0;,     }, ,     public double media() {,         int acum = 0;,         for(Integer n:notas){,             if (n == -1){,                 return(-1);,             }else{,                 acum += n;,             },         },         return ((double)(acum)/MAXNOTAS);,     }, ,     public boolean matriculado() {,         return(!cancelado);,     }, ,     public String toString(){,         return (getMatricula());,     }, , }]
[/**,  * Created by 16104961 on 8/16/16.,  */, public class AlunoVar implements IAluno{, private String matricula;, private int n1,n2,n3;, private int cargaHoraria;, private int frequencia;, private boolean cancelado;, , public AlunoVar(){,         matricula = "";,         n1 = -1; n2 = -1; n3 = -1;,         cargaHoraria = -1;,         frequencia = -1;,         cancelado = false;,         }, , public void efetivaMatricula(String mat){,         matricula = mat;,         cancelado = false;,         }, , public void cancelaMatricula(){,         cancelado = true;,         }, , public boolean insereNota(int nota, int indice){,         switch(indice){,         case 1: n1 = nota;,         break;,         case 2: n2 = nota;,         break;,         case 3: n3 = nota;,         break;, default: return false;,         },         return true;,         }, , public boolean insereFreq(int presencas) {,         frequencia = presencas;,         return true;, }, , public boolean insereCH(int ch) {,         cargaHoraria = ch;,         return(true);, }, , public int getNota(int indice) {,         switch(indice){,         case 1: return n1;,         case 2: return n2;,         case 3: return n3;,         default: return -1;,         }, }, , public String getMatricula(){,         return(matricula);,         }, , public int getFrequencia(),         {,         return frequencia;,         }, , public int getCH(){,         return cargaHoraria;,         }, , public boolean aprovado() {,         if(media() >= 5.0){,             return true;,         }else{,             return false;,         }, }, , public double media(){,         if (n1 == -1 || n2 == -1 || n3 == -1){,             return(-1.0);,         }else{,             return (n1+n2+n3)/3;,         }, }, , public boolean matriculado(){,         return(!cancelado);, }, , public String toString(){,         return (getMatricula());, }, }]
[/**,  * Created by 16104961 on 8/16/16.,  */, import java.time.*;, public interface ITurma {,     void inicializa(int tamTurma,LocalDate limMat,LocalDate limCan);,     boolean efetivaMatricula(IAluno umAluno);,     boolean cancelaMatricula(IAluno umAluno);,     IAluno[] getMatriculados();,     IAluno[] getCancelados();,     IAluno getAluno(String matricula);, }]
[public interface IListaAluno {,     boolean insereAluno(IAluno umAluno);,     IAluno getAluno(int pos);,     boolean removeAluno(int pos);,     IListaAluno duplica();,     IAluno[] toArray();,     int tamanho();, }]
[public interface IAluno {,     void efetivaMatricula(String mat);,     void cancelaMatricula();,     boolean insereNota(int nota, int indice);    // os indices variam de 1 a 3,     boolean insereFreq(int presencas);,     boolean insereCH(int ch);,     int getNota(int indice);,     String getMatricula();,     int getFrequencia();,     int getCH();,     boolean aprovado();,     double media();,     boolean matriculado();,     String toString();, }]
[import java.time.*;, , public class TurmaArray implements ITurma{,     private IAluno alunos[];,     private LocalDate limiteMatricula;,     private LocalDate limiteCancelamento;,     private int ult,ativos;, ,     public TurmaArray(int tamTurma,LocalDate limMat,LocalDate limCan){,         inicializa(tamTurma,limMat,limCan);,     }, ,     public void inicializa(int tamTurma,LocalDate limMat,LocalDate limCan){,         limiteMatricula = limMat;,         limiteCancelamento = limCan;,         alunos = new IAluno[tamTurma];,         ult = 0;,         ativos = 0;,     }, , ,     public boolean efetivaMatricula(IAluno umAluno){,         // Se esta fora do prazo de matricula, retorna false,         if (LocalDate.now().isAfter(limiteMatricula)){,             return(false);,         },         // Se tem matricula duplicada retorna false,         for(int i=0;i<ult;i++){,             if (alunos[i].getMatricula().equals(umAluno.getMatricula())){,                 return(false);,             },         },         // Se a turma esta cheia retorna false,         if (ult == alunos.length){,             return(false);,         },         // Insere o aluno na turma,         alunos[ult] = umAluno;,         ult++;,         ativos++;,         return(true);,     }, ,     public boolean cancelaMatricula(IAluno umAluno){,         // Se esta fora do prazo de cancelamento, retorna false,         if (LocalDate.now().isAfter(limiteCancelamento)){,             return(false);,         },         // Cancela a matricula ou retorna false se não encontrar,         for(int i=0;i<ult;i++){,             if (alunos[i].getMatricula().equals(umAluno.getMatricula())){,                 alunos[i].cancelaMatricula();,                 ativos--;,                 return(true);,             },         },         return(false);,     }, ,     public IAluno[] getMatriculados(){,         IAluno aux[] = new IAluno[ativos];,         int j = 0;,         for(int i=0; i<ult; i++){,             if (alunos[i].matriculado()){,                 aux[j] = alunos[i];,                 j++;,             },         },         return(aux);,     }, ,     public IAluno[] getCancelados(){,         IAluno aux[] = new IAluno[ativos];,         int j = 0;,         for(int i=0; i<ult; i++){,             if (!alunos[i].matriculado()){,                 aux[j] = alunos[i];,                 j++;,             },         },         return(aux);,     }, ,     public IAluno getAluno(String matricula){,         for(IAluno a:alunos){,             if (a.getMatricula().equals(matricula)){,                 return(a);,             },         },         return(null);,     }, }]
[import java.time.LocalDate;, , public class TurmaNew implements ITurma {,     private LstAlunoArr alunos;,     private LocalDate limiteMatricula;,     private LocalDate limiteCancelamento;,     private int ativos, tamTurma;, ,     public TurmaNew (int tamTurma,LocalDate limMat,LocalDate limCan){,         inicializa(tamTurma,limMat,limCan);,     }, ,     public void inicializa(int tamTurma,LocalDate limMat,LocalDate limCan){,         limiteMatricula = limMat;,         limiteCancelamento = limCan;,         alunos = new LstAlunoArr(tamTurma);,         ativos = 0;,         this.tamTurma = tamTurma;,     }, , ,     public boolean efetivaMatricula(IAluno umAluno){,         if (LocalDate.now().isAfter(limiteMatricula)),             return(false);, ,         for(int i=0;i<alunos.tamanho();i++){,             if (alunos.getAluno(i).getMatricula().equals(umAluno.getMatricula())){,                 return(false);,             },         },         if (alunos.tamanho() == tamTurma){,             return(false);,         }, ,         alunos.insereAluno(umAluno);,         ativos++;,         return(true);,     }, ,     public boolean cancelaMatricula(IAluno umAluno){,         if (LocalDate.now().isAfter(limiteCancelamento)){,             return(false);,         },         for(int i=0;i<alunos.tamanho();i++){,             if (alunos.getAluno(i).equals(umAluno.getMatricula())){,                 alunos.getAluno(i).cancelaMatricula();,                 ativos--;,                 return(true);,             },         },         return(false);,     }, ,     public IAluno[] getMatriculados(){,         LstAlunoArr aux = new LstAlunoArr (ativos);,         for(int i=0; i<alunos.tamanho(); i++){,             if (alunos.getAluno(i).matriculado()){,                 aux.insereAluno(alunos.getAluno(i));,             },         },         return(aux.toArray());,     }, ,     public IAluno[] getCancelados(){,         LstAlunoArr aux = new LstAlunoArr (ativos);,         for(int i=0; i<alunos.tamanho(); i++){,             if (!alunos.getAluno(i).matriculado()){,                 aux.insereAluno(alunos.getAluno(i));,             },         },         return(aux.toArray());,     }, ,     public IAluno getAluno(String matricula){,         for(int i = 0; i < alunos.tamanho(); i++){,             if (alunos.getAluno(i).getMatricula().equals(matricula)){,                 return(alunos.getAluno(i));,             },         },         return(null);,     }, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.cards;, , /**,  * An immutable description of a playing card. This abstraction,  * is designed to be independent of game logic, so it does,  * not provide any service that relies on the knowledge,  * of the rules of any particular game.,  * ,  * This class implements the Flyweight design pattern: ,  * there can only ever be one instance of a card that ,  * represents a specific real-world playing card (such as ace,  * of spaces). In the absence of serialization and reflection,,  * this ensures that the behavior of the == operator is identical ,  * to that of the equals method when two card arguments are ,  * provided.,  */, public final class Card, {, 	// Indexed by suit, then rank, 	private static final Card[][] CARDS = new Card[Suit.values().length][];, 	, 	// Create the flyweight objects, 	static, 	{, 		for( Suit suit : Suit.values() ), 		{, 			CARDS[suit.ordinal()] = new Card[Rank.values().length];, 			for( Rank rank : Rank.values() ), 			{, 				CARDS[suit.ordinal()][rank.ordinal()] = new Card(rank, suit);, 			}, 		}, 	}, 	, 	/**, 	 * Represents the rank of the card., 	 */, 	public enum Rank , 	{ ACE, TWO, THREE, FOUR, FIVE, SIX,, 		SEVEN, EIGHT, NINE, TEN, JACK, QUEEN, KING }, 	, 	/**, 	 * Represents the suit of the card., 	 */, 	public enum Suit , 	{ CLUBS, DIAMONDS, HEARTS, SPADES }, 	, 	private final Rank aRank;, 	private final Suit aSuit;, 	, 	private Card(Rank pRank, Suit pSuit ), 	{, 		aRank = pRank;, 		aSuit = pSuit;, 	}, 	, 	/**, 	 * @param pRank The rank of the card (from ace to kind), 	 * @param pSuit The suit of the card (clubs, diamond, spades, hearts), 	 * @return The card object representing the card with pRank and pSuit, 	 */, 	public static Card get(Rank pRank, Suit pSuit), 	{, 		assert pRank != null && pSuit != null;, 		return CARDS[pSuit.ordinal()][pRank.ordinal()];, 	}, 	, 	/**, 	 * @param pId The id string for the card. This is needs to have, 	 * been produced by Card.getIDString to be considered a, 	 * valid input to this method., 	 * @return The card object with id string pId, 	 */, 	public static Card get( String pId ), 	{, 		assert pId != null;, 		int id = Integer.parseInt(pId);, 		return get(Rank.values()[id % Rank.values().length],, 				Suit.values()[id / Rank.values().length]);, 	}, 	, 	/**, 	 * Obtain the rank of the card., 	 * @return An object representing the rank of the card., 	 */, 	public Rank getRank(), 	{, 		return aRank;, 	}, 	, 	/**, 	 * @param pCard The card to compare against, 	 * @return True if and only if pCard's suit is of the same color as , 	 * this card., 	 */, 	public boolean sameColorAs(Card pCard), 	{, 		assert pCard != null;, 		if( getSuit() == Suit.DIAMONDS || getSuit() == Suit.HEARTS ), 		{, 			return pCard.getSuit() == Suit.DIAMONDS || pCard.getSuit() == Suit.HEARTS;, 		}, 		else, 		{, 			return pCard.getSuit() == Suit.CLUBS || pCard.getSuit() == Suit.SPADES;, 		}, 	}, 	, 	/**, 	 * @return A string uniquely representing this card. The string, 	 * format is not specified except that it is fully compatible, 	 * with the format expected by Card.get(String)., 	 */, 	public String getIDString(), 	{, 		return Integer.toString(getSuit().ordinal() * Rank.values().length + getRank().ordinal());, 	}, 	, 	/**, 	 * Obtain the suit of the card., 	 * @return An object representing the suit of the card , 	 */, 	public Suit getSuit(), 	{, 		return aSuit;, 	}, 	, 	/**, 	 * @see java.lang.Object#toString(), 	 */, 	@Override, 	public String toString(), 	{, 		return aRank + " of " + aSuit;, 	}, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.cards;, , import java.util.Collections;, import java.util.Stack;, , import ca.mcgill.cs.stg.solitaire.cards.Card.Rank;, import ca.mcgill.cs.stg.solitaire.cards.Card.Suit;, , /**,  * Models a deck of 52 cards.,  */, public class Deck , {, 	private Stack<Card> aCards;, 	, 	/**, 	 * Creates a new deck of 52 cards, shuffled., 	 */, 	public Deck(), 	{, 		aCards = new Stack<Card>();, 		reset();, 		shuffle();, 	}, 	, 	private void reset(), 	{, 		aCards.clear();, 		for( Suit lSuit : Suit.values() ), 		{,             for( Rank lRank : Rank.values() ),             {,                 aCards.add( Card.get( lRank, lSuit ));,             }, 		}, 	}, , 	/**, 	 * Shuffles the deck., 	 */, 	public void shuffle(), 	{, 		reset();, 		Collections.shuffle( aCards );, 	}, 	, 	/**, 	 * Draws a card from the deck and removes the card from the deck., 	 * @return The card drawn., 	 * @pre initial.size() > 0, 	 * @post final.size() == initial.size() - 1, 	 */, 	public Card draw(), 	{, 		assert size() > 0;, 		return aCards.pop();, 	}, 	, 	/**, 	 * @return The number of cards in the deck., 	 */, 	public int size(), 	{, 		return aCards.size();, 	}, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.cards;, , , import java.util.HashMap;, import java.util.Map;, , import javafx.scene.image.Image;, , /**,  * A class to store and manage images of the 52 cards.,  */, public final class CardImages , {, 	private static final String IMAGE_LOCATION = "";, 	private static final String IMAGE_SUFFIX = ".gif";, 	private static final String[] RANK_CODES = {"a", "2", "3", "4", "5", "6", "7", "8", "9", "t", "j", "q", "k"};, 	private static final String[] SUIT_CODES = {"c", "d", "h", "s"};	, 	, 	private static Map<String, Image> aCards = new HashMap<String, Image>();, 	, 	private CardImages(), 	{}, 	, 	/**, 	 * Return the image of a card., 	 * @param pCard the target card, 	 * @return An icon representing the chosen card., 	 */, 	public static Image getCard( Card pCard ), 	{, 		assert pCard != null;, 		return getCard( getCode( pCard ) );, 	}, 	, 	/**, 	 * Return an image of the back of a card., 	 * @return An icon representing the back of a card., 	 */, 	public static Image getBack(), 	{, 		return getCard( "b" );, 	}, 	, 	private static String getCode( Card pCard ), 	{, 		return RANK_CODES[ pCard.getRank().ordinal() ] + SUIT_CODES[ pCard.getSuit().ordinal() ];		, 	}, 	, 	private static Image getCard( String pCode ), 	{, 		Image image = (Image) aCards.get( pCode );, 		if( image == null ), 		{, 			image = new Image(CardImages.class.getClassLoader().getResourceAsStream( IMAGE_LOCATION + pCode + IMAGE_SUFFIX ));, 			aCards.put( pCode, image );, 		}, 		return image;, 	}, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.gui;, , import ca.mcgill.cs.stg.solitaire.cards.CardImages;, import ca.mcgill.cs.stg.solitaire.model.GameModel;, import ca.mcgill.cs.stg.solitaire.model.GameModelListener;, import javafx.event.EventHandler;, import javafx.geometry.VPos;, import javafx.scene.canvas.Canvas;, import javafx.scene.canvas.GraphicsContext;, import javafx.scene.control.Button;, import javafx.scene.image.ImageView;, import javafx.scene.input.MouseEvent;, import javafx.scene.layout.HBox;, import javafx.scene.paint.Color;, import javafx.scene.text.Font;, import javafx.scene.text.TextAlignment;, , /**,  * Component that shows the deck and allows clicking,  * it to draw cards. Listens to game model state changes,  * and updates itself to disappear if it is empty.,  */, class DeckView extends HBox implements GameModelListener, {, 	private static final String BUTTON_STYLE_NORMAL = "-fx-background-color: transparent; -fx-padding: 5, 5, 5, 5;";,     private static final String BUTTON_STYLE_PRESSED = "-fx-background-color: transparent; -fx-padding: 6 4 4 6;";,     private static final int IMAGE_NEW_LINE_WIDTH = 10;,     private static final int IMAGE_FONT_SIZE = 15;, 	, 	DeckView(), 	{,         final Button button = new Button();,         button.setGraphic(new ImageView(CardImages.getBack()));,         button.setStyle(BUTTON_STYLE_NORMAL);, ,     	button.setOnMousePressed(new EventHandler<MouseEvent>() ,     	{,     		@Override,     		public void handle(MouseEvent pEvent) ,     		{,     			((Button)pEvent.getSource()).setStyle(BUTTON_STYLE_PRESSED);,     		}            ,     	});, ,     	button.setOnMouseReleased(new EventHandler<MouseEvent>() ,     	{,     		@Override,     		public void handle(MouseEvent pEvent) ,     		{,     			((Button)pEvent.getSource()).setStyle(BUTTON_STYLE_NORMAL);,     			if( GameModel.instance().isEmptyDeck() ),     			{,     				GameModel.instance().reset();,     			},     			else,     			{,     				GameModel.instance().discard();,     			},     		}            ,     	});,         ,         getChildren().add(button);,     	GameModel.instance().addListener(this);, 	}, 	, 	private Canvas createNewGameImage(), 	{, 		double width = CardImages.getBack().getWidth();, 		double height = CardImages.getBack().getHeight();, 		Canvas canvas = new Canvas( width, height );, 		GraphicsContext context = canvas.getGraphicsContext2D();, 		, 		// The reset image, 		context.setStroke(Color.DARKGREEN);, 		context.setLineWidth(IMAGE_NEW_LINE_WIDTH);, 		context.strokeOval(width/4, height/2-width/4 + IMAGE_FONT_SIZE, width/2, width/2);, , 		// The text, 		, 		context.setTextAlign(TextAlignment.CENTER);, 		context.setTextBaseline(VPos.CENTER);, 		context.setFill(Color.DARKKHAKI);, 		context.setFont(Font.font(Font.getDefault().getName(), IMAGE_FONT_SIZE));, 		, 		, 		, 		if( GameModel.instance().isCompleted() ), 		{, 			context.fillText("You won!", Math.round(width/2), IMAGE_FONT_SIZE);, 		}, 		else, 		{, 			context.fillText("Give up?", Math.round(width/2), IMAGE_FONT_SIZE);, 		}, 		context.setTextAlign(TextAlignment.CENTER);, 		return canvas;, 	}, 	, 	@Override, 	public void gameStateChanged(), 	{, 		if( GameModel.instance().isEmptyDeck() ), 		{, 			((Button)getChildren().get(0)).setGraphic(createNewGameImage());, 		}, 		else, 		{, 			((Button)getChildren().get(0)).setGraphic(new ImageView(CardImages.getBack()));, 		}, 	}, 	, 	public void reset(), 	{, 		getChildren().get(0).setVisible(true);, 	}, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.gui;, , import ca.mcgill.cs.stg.solitaire.cards.Card.Suit;, import ca.mcgill.cs.stg.solitaire.model.GameModel;, import ca.mcgill.cs.stg.solitaire.model.GameModel.StackIndex;, import ca.mcgill.cs.stg.solitaire.model.GameModel.SuitStackIndex;, import javafx.application.Application;, import javafx.event.EventHandler;, import javafx.geometry.Insets;, import javafx.scene.Scene;, import javafx.scene.input.KeyEvent;, import javafx.scene.layout.GridPane;, import javafx.stage.Stage;, , /**,  * Application class for Solitaire. The responsibility,  * of this class is limited to assembling the major UI components ,  * and launching the application. All gesture handling logic is ,  * handled by its composed elements, which act as observers,  * of the game model.,  */, public class Solitaire extends Application, {, 	private static final int WIDTH = 680;, 	private static final int HEIGHT = 500;, 	private static final int MARGIN_OUTER = 10;, 	private static final String TITLE = "Solitaire";, 	private static final String VERSION = "0.3";, ,     private DeckView aDeckView = new DeckView();,     private DiscardPileView aDiscardPileView = new DiscardPileView();,     private SuitStack[] aSuitStacks = new SuitStack[Suit.values().length];,     private CardStack[] aStacks = new CardStack[StackIndex.values().length];,     , 	/**, 	 * Launches the application., 	 * @param pArgs This program takes no argument., 	 */, 	public static void main(String[] pArgs) , 	{,         launch(pArgs);,     },     ,     @Override,     public void start(Stage pPrimaryStage) ,     {, 		pPrimaryStage.setTitle(TITLE + " " + VERSION); ,            ,         GridPane root = new GridPane();,         root.setStyle("-fx-background-color: green;");,         root.setHgap(MARGIN_OUTER);,         root.setVgap(MARGIN_OUTER);,         root.setPadding(new Insets(MARGIN_OUTER));,         ,         root.add(aDeckView, 0, 0);,         root.add(aDiscardPileView, 1, 0);,                 ,         for( SuitStackIndex index : SuitStackIndex.values() ),         {,         	aSuitStacks[index.ordinal()] = new SuitStack(index);,         	root.add(aSuitStacks[index.ordinal()], 3+index.ordinal(), 0);,         },       ,         for( StackIndex index : StackIndex.values() ),         {,         	aStacks[index.ordinal()] = new CardStack(index);,         	root.add(aStacks[index.ordinal()], index.ordinal(), 1);,         },         ,         root.setOnKeyTyped(new EventHandler<KeyEvent>(), 		{, , 			@Override, 			public void handle(final KeyEvent pEvent), 			{, 				if( pEvent.getCharacter().equals("\r")), 				{, 					GameModel.instance().tryToAutoPlay();, 				}, 				pEvent.consume();, 			},         	, 		});,         ,         pPrimaryStage.setResizable(false);,         pPrimaryStage.setScene(new Scene(root, WIDTH, HEIGHT));,         pPrimaryStage.show();,     }, }, ]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.gui;, , import ca.mcgill.cs.stg.solitaire.cards.Card;, import ca.mcgill.cs.stg.solitaire.cards.CardImages;, import ca.mcgill.cs.stg.solitaire.model.GameModel;, import ca.mcgill.cs.stg.solitaire.model.GameModel.SuitStackIndex;, import ca.mcgill.cs.stg.solitaire.model.GameModelListener;, import javafx.event.EventHandler;, import javafx.geometry.Insets;, import javafx.scene.image.ImageView;, import javafx.scene.input.DragEvent;, import javafx.scene.input.Dragboard;, import javafx.scene.input.TransferMode;, import javafx.scene.layout.StackPane;, , /**,  * Component that shows a stack of cards in ,  * which a completed suit is accumulated.,  */, public class SuitStack extends StackPane implements GameModelListener, {, 	private static final int PADDING = 5;, 	private static final String BORDER_STYLE = "-fx-border-color: lightgray;", 			+ "-fx-border-width: 3;" + " -fx-border-radius: 10.0";, 	private static final String BORDER_STYLE_DRAGGED = "-fx-border-color: darkgray;", 			+ "-fx-border-width: 3;" + " -fx-border-radius: 10.0";, 	private static final String BORDER_STYLE_NORMAL = "-fx-border-color: lightgray;", 			+ "-fx-border-width: 3;" + " -fx-border-radius: 10.0";, 	, 	private CardDragHandler aDragHandler;, 	private SuitStackIndex aIndex;, 	, 	SuitStack(SuitStackIndex pIndex), 	{, 		aIndex = pIndex;, 		setPadding(new Insets(PADDING));, 		setStyle(BORDER_STYLE);, 		final ImageView image = new ImageView(CardImages.getBack());,     	image.setVisible(false);,        	getChildren().add(image);,     	aDragHandler = new CardDragHandler(image);,     	image.setOnDragDetected(aDragHandler);,     	setOnDragOver(createOnDragOverHandler(image));,     	setOnDragEntered(createOnDragEnteredHandler());,     	setOnDragExited(createOnDragExitedHandler());,     	setOnDragDropped(createOnDragDroppedHandler());,     	GameModel.instance().addListener(this);, 	}, 	, 	@Override, 	public void gameStateChanged(), 	{, 		if( GameModel.instance().isEmptySuitStack(aIndex)), 		{, 			getChildren().get(0).setVisible(false);, 		}, 		else, 		{, 			getChildren().get(0).setVisible(true);, 			Card topCard = GameModel.instance().peekSuitStack(aIndex);, 			ImageView image = (ImageView)getChildren().get(0);, 			image.setImage(CardImages.getCard(topCard));, 			aDragHandler.setCard(topCard);, 		}, 	}, 	, 	private EventHandler<DragEvent> createOnDragOverHandler(final ImageView pView), 	{, 		return new EventHandler<DragEvent>(),     	{,     	    public void handle(DragEvent pEvent) ,     	    {,     	    	if(pEvent.getGestureSource() != pView && pEvent.getDragboard().hasString()),     	    	{,     	    		CardTransfer transfer = new CardTransfer(pEvent.getDragboard().getString());,     	    		if( transfer.size() == 1 && GameModel.instance().isLegalMove(transfer.getTop(), aIndex) ),     	    		{,     	    			pEvent.acceptTransferModes(TransferMode.MOVE);,     	    		},     	    	}, ,     	    	pEvent.consume();,     	    },     	};, 	}, 	, 	private EventHandler<DragEvent> createOnDragEnteredHandler(), 	{, 		return new EventHandler<DragEvent>(),     	{,     		public void handle(DragEvent pEvent) ,     		{,     			CardTransfer transfer = new CardTransfer(pEvent.getDragboard().getString());, 	    		if( transfer.size() == 1 && GameModel.instance().isLegalMove(transfer.getTop(), aIndex) ),     			{,     				setStyle(BORDER_STYLE_DRAGGED);,     			},     			pEvent.consume();,     		},     	};, 	}, 	, 	private EventHandler<DragEvent> createOnDragExitedHandler(), 	{, 		return new EventHandler<DragEvent>(),     	{,     		public void handle(DragEvent pEvent),     		{,     			setStyle(BORDER_STYLE_NORMAL);,     			pEvent.consume();,     		},     	};, 	}, 	, 	private EventHandler<DragEvent> createOnDragDroppedHandler(), 	{, 		return new EventHandler<DragEvent>() ,     	{,     		public void handle(DragEvent pEvent),     		{,     			Dragboard db = pEvent.getDragboard();,     			boolean success = false;,     			if(db.hasString()) ,     			{,     				CardTransfer transfer = new CardTransfer(pEvent.getDragboard().getString());,     				GameModel.instance().move(transfer.getTop(), aIndex);,     				success = true;,     			},     			pEvent.setDropCompleted(success);,     			pEvent.consume();,     		},     	};, 	}, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.gui;, , import ca.mcgill.cs.stg.solitaire.cards.Card;, import ca.mcgill.cs.stg.solitaire.cards.CardImages;, import ca.mcgill.cs.stg.solitaire.model.CardView;, import ca.mcgill.cs.stg.solitaire.model.GameModel;, import ca.mcgill.cs.stg.solitaire.model.GameModelListener;, import ca.mcgill.cs.stg.solitaire.model.GameModel.StackIndex;, import javafx.event.EventHandler;, import javafx.geometry.Insets;, import javafx.geometry.Pos;, import javafx.scene.effect.DropShadow;, import javafx.scene.image.ImageView;, import javafx.scene.input.ClipboardContent;, import javafx.scene.input.DragEvent;, import javafx.scene.input.Dragboard;, import javafx.scene.input.MouseEvent;, import javafx.scene.input.TransferMode;, import javafx.scene.layout.StackPane;, , /**,  * Component that shows a stack of cards in ,  * the bottom stacks.,  */, public class CardStack extends StackPane implements GameModelListener, {, 	private static final int PADDING = 5;, 	private static final int Y_OFFSET = 17;, 	, 	private StackIndex aIndex;, 	, 	CardStack(StackIndex pIndex), 	{, 		aIndex = pIndex;, 		setPadding(new Insets(PADDING));,     	setAlignment(Pos.TOP_CENTER);,     	buildLayout();,     	GameModel.instance().addListener(this);, 	}, 	, 	private void buildLayout(),     {, 		getChildren().clear();, 		, 		int offset = 0;, 		CardView[] stack = GameModel.instance().getStack(aIndex);, 		if( stack.length == 0 ) // this essentially acts as a spacer, 		{, 			ImageView image = new ImageView(CardImages.getBack());, 			image.setVisible(false);, 			getChildren().add(image);, 			return;, 		}, 		, 		for( CardView cardView : stack), 		{, 			final ImageView image = new ImageView(cardView.getImage());,         	image.setTranslateY(Y_OFFSET * offset);,         	offset++;,         	getChildren().add(image);,         ,         	setOnDragOver(createDragOverHandler(image, cardView.getCard()));,     		setOnDragEntered(createDragEnteredHandler(image, cardView.getCard()));,     		setOnDragExited(createDragExitedHandler(image, cardView.getCard()));,     		setOnDragDropped(createDragDroppedHandler(image, cardView.getCard()));,     		,         	if( cardView.isVisible() ),         	{,         		image.setOnDragDetected(createDragDetectedHandler(image, cardView.getCard()));,         	}, 		},     }, 	, 	private EventHandler<MouseEvent> createDragDetectedHandler(final ImageView pImageView, final Card pCard), 	{, 		return new EventHandler<MouseEvent>() , 		{, 			@Override, 			public void handle(MouseEvent pMouseEvent) , 			{, 				Dragboard db = pImageView.startDragAndDrop(TransferMode.ANY);, 				ClipboardContent content = new ClipboardContent();, 				content.putString(CardTransfer.serialize(GameModel.instance().getSubStack(pCard, aIndex)));, 				db.setContent(content);, 				pMouseEvent.consume();, 			}, 		};, 	}, 	, 	private EventHandler<DragEvent> createDragOverHandler(final ImageView pImageView, final Card pCard), 	{, 		return new EventHandler<DragEvent>(), 		{, 			public void handle(DragEvent pEvent) , 			{, 				if(pEvent.getGestureSource() != pImageView && pEvent.getDragboard().hasString()), 				{, 					CardTransfer transfer = new CardTransfer(pEvent.getDragboard().getString());, 					if( GameModel.instance().isLegalMove(transfer.getTop(), aIndex) ), 					{, 						pEvent.acceptTransferModes(TransferMode.MOVE);, 					}, 				}, 				pEvent.consume();, 			}, 		};, 	}, 	, 	private EventHandler<DragEvent> createDragEnteredHandler(final ImageView pImageView, final Card pCard), 	{, 		return new EventHandler<DragEvent>(), 		{, 			public void handle(DragEvent pEvent), 			{, 				CardTransfer transfer = new CardTransfer(pEvent.getDragboard().getString());, 				if( GameModel.instance().isLegalMove(transfer.getTop(), aIndex) ), 				{, 					pImageView.setEffect(new DropShadow());, 				}, 				pEvent.consume();, 			}, 		};, 	}, 	, 	private EventHandler<DragEvent> createDragExitedHandler(final ImageView pImageView, final Card pCard), 	{, 		return new EventHandler<DragEvent>(), 		{, 			public void handle(DragEvent pEvent), 			{, 				pImageView.setEffect(null);, 				pEvent.consume();, 			}, 		};, 	}, 	, 	private EventHandler<DragEvent> createDragDroppedHandler(final ImageView pImageView, final Card pCard), 	{, 		return new EventHandler<DragEvent>() , 		{, 			public void handle(DragEvent pEvent), 			{, 				Dragboard db = pEvent.getDragboard();, 				boolean success = false;, 				if(db.hasString()) , 				{, 					GameModel.instance().move(new CardTransfer(db.getString()).getTop(), aIndex); , 					success = true;, 				}, , 				pEvent.setDropCompleted(success);, , 				pEvent.consume();, 			}, 		};, 	}, , 	@Override, 	public void gameStateChanged(), 	{, 		buildLayout();, 	}, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.gui;, , import ca.mcgill.cs.stg.solitaire.cards.Card;, import javafx.event.EventHandler;, import javafx.scene.image.ImageView;, import javafx.scene.input.ClipboardContent;, import javafx.scene.input.Dragboard;, import javafx.scene.input.MouseEvent;, import javafx.scene.input.TransferMode;, , /**,  * Stores a string representing the card dragged.,  */, public class CardDragHandler implements EventHandler<MouseEvent>, {, 	private Card aCard;, 	private ImageView aImageView;, 	, 	CardDragHandler( ImageView pView ), 	{, 		aImageView = pView;, 	}, 	, 	void setCard(Card pCard), 	{, 		aCard = pCard;, 	}, 	, 	@Override, 	public void handle(MouseEvent pMouseEvent), 	{, 		Dragboard db = aImageView.startDragAndDrop(TransferMode.ANY);,         ClipboardContent content = new ClipboardContent();,         content.putString(aCard.getIDString());,         db.setContent(content);,         pMouseEvent.consume();, 	}, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.gui;, , import ca.mcgill.cs.stg.solitaire.cards.Card;, , /**,  * An immutable utility object to facilitate the transfer of card ,  * through the drag board (drag and drop space).,  */, public class CardTransfer, {, 	private static final String SEPARATOR = ";";, 	, 	private Card[] aCards;, 	, 	/**, 	 * Creates a card transfer from a serialized, 	 * version of the cards., 	 * @param pString The serialized version, 	 */, 	public CardTransfer(String pString), 	{, 		assert pString != null && pString.length() > 0;, 		String[] tokens = pString.split(SEPARATOR);, 		aCards = new Card[tokens.length];, 		for( int i = 0; i < tokens.length; i++ ), 		{, 			aCards[i] = Card.get(tokens[i]);, 		}, 		assert aCards.length > 0;, 	}, 	, 	/**, 	 * Converts an array of cards into an id string, 	 * that can be deserialized by the constructor., 	 * @param pCards The array of cards with high-ranking cards first., 	 * @return The id string., 	 */, 	public static String serialize(Card[] pCards), 	{, 		String lReturn = pCards[0].getIDString();, 		for( int i = 1; i < pCards.length; i++ ), 		{, 			lReturn += ";" + pCards[i].getIDString();, 		}, 		return lReturn;, 	}, 	, 	/**, 	 * @return The top card in the transfer, 	 * (the one with the highest rank), 	 */, 	public Card getTop(), 	{, 		return aCards[0];, 	}, 	, 	/**, 	 * @return The number of cards in the tranfer., 	 */, 	public int size(), 	{, 		return aCards.length;, 	}, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.gui;, , import ca.mcgill.cs.stg.solitaire.cards.Card;, import ca.mcgill.cs.stg.solitaire.cards.CardImages;, import ca.mcgill.cs.stg.solitaire.model.GameModel;, import ca.mcgill.cs.stg.solitaire.model.GameModelListener;, import javafx.geometry.Insets;, import javafx.scene.image.ImageView;, import javafx.scene.layout.HBox;, , /**,  * Component that shows the state of the discard pile and allows,  * dragging cards from it.,  */, class DiscardPileView extends HBox implements GameModelListener, {, 	private static final int PADDING = 5;, 	private CardDragHandler aDragHandler;, 	, 	DiscardPileView(), 	{, 		setPadding(new Insets(PADDING));,     	final ImageView image = new ImageView(CardImages.getBack());,     	image.setVisible(false);,        	getChildren().add(image);,     	aDragHandler = new CardDragHandler(image);,     	image.setOnDragDetected(aDragHandler);,     	GameModel.instance().addListener(this);, 	}, 	, 	@Override, 	public void gameStateChanged(), 	{, 		if( GameModel.instance().isEmptyDiscardPile()), 		{, 			getChildren().get(0).setVisible(false);, 		}, 		else, 		{, 			getChildren().get(0).setVisible(true);, 			Card topCard = GameModel.instance().peekDiscardPile();, 			ImageView image = (ImageView)getChildren().get(0);, 			image.setImage(CardImages.getCard(topCard));, 			aDragHandler.setCard(topCard);, 		}, 	}, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.model;, , import ca.mcgill.cs.stg.solitaire.cards.Card;, import ca.mcgill.cs.stg.solitaire.model.GameModel.Location;, import ca.mcgill.cs.stg.solitaire.model.GameModel.StackIndex;, import ca.mcgill.cs.stg.solitaire.model.GameModel.SuitStackIndex;, , /**,  * A read-only version of a game model.,  */, public interface GameModelView, {, 	/**, 	 * @return True if the discard pile has no card in it., 	 */, 	boolean isEmptyDiscardPile();, 	, 	/**, 	 * @return True if the deck has no card left in it., 	 */, 	boolean isEmptyDeck();, 	, 	/**, 	 * @param pIndex The suit stack to check, 	 * @return True if the suit stack for pSuit is empty, 	 */, 	boolean isEmptySuitStack(SuitStackIndex pIndex);, 	, 	/**, 	 * @return The card on top of the discard pile., 	 * @pre !emptyDiscardPile(), 	 */, 	Card peekDiscardPile();, 	, 	/**, 	 * @param pIndex The position of the stack to return., 	 * @return A copy of the stack at position pIndex, 	 */, 	CardView[] getStack(StackIndex pIndex);, 	, 	/**, 	 * Determines if pCard can be moved to pLocation, 	 * according to the rules of the game and given the current, 	 * game state. , 	 * @param pCard The card to move. , 	 * @param pDestination The destination of the move., 	 * @return True if the move is a legal move., 	 */, 	boolean isLegalMove(Card pCard, Location pDestination );, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.model;, , /**,  * Represents taking a card from the deck and ,  * moving it to the top of the discard pile.,  */, public class DiscardMove implements Move, {, 	/**, 	 * Creates a discard move., 	 */, 	public DiscardMove(), 	{}, 	, 	@Override, 	public String toString(), 	{, 		return "Discard";, 	}, , 	@Override, 	public void perform(GameModel pModel), 	{, 		assert !pModel.isEmptyDeck();, 		pModel.discard();, 	}, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.model;, , import java.util.HashMap;, import java.util.Map;, import java.util.Stack;, , import ca.mcgill.cs.stg.solitaire.cards.Card;, import ca.mcgill.cs.stg.solitaire.cards.Card.Rank;, import ca.mcgill.cs.stg.solitaire.model.GameModel.SuitStackIndex;, , /**,  * Manages the state of the four stacks where completed,  * suits are accumulated.,  */, class SuitStackManager, {, 	private Map<SuitStackIndex, Stack<Card>> aStacks = new HashMap<>();, 	, 	/**, 	 * Creates an initialized suit stack manager., 	 */, 	SuitStackManager(), 	{, 		initialize();, 	}, 	, 	/**, 	 * @return The number of cards in the suit stacks., 	 */, 	int getScore(), 	{, 		int total = 0;, 		for( Stack<Card> stack : aStacks.values()), 		{, 			total += stack.size();, 		}, 		return total;, 	}, 	, 	/**, 	 * Initialize the internal data structures., 	 */, 	void initialize(), 	{, 		for( SuitStackIndex index : SuitStackIndex.values() ), 		{, 			aStacks.put(index, new Stack<Card>());, 		}, 	}, 	, 	/**, 	 * @param pSuit, 	 * @return True if the stack at index pIndex is empty, 	 */, 	boolean isEmpty(SuitStackIndex pIndex), 	{, 		return aStacks.get(pIndex).isEmpty();, 	}, 	, 	/**, 	 * @param pCard The card to test, 	 * @param pIndex The suitstack to test, 	 * @return True if pCard can be moved to the top of its suit stack., 	 * This is only possible if its rank is immediately superior, 	 * to that of the card currently on top of the suit stack., 	 */, 	boolean canMoveTo(Card pCard, SuitStackIndex pIndex ), 	{, 		assert pCard != null && pIndex != null;, 		if( isEmpty(pIndex)), 		{, 			return pCard.getRank() == Rank.ACE;, 		}, 		else, 		{, 			return pCard.getSuit() == peek(pIndex).getSuit() && pCard.getRank().ordinal() == peek(pIndex).getRank().ordinal()+1;, 		}, 	}, 	, 	/**, 	 * @param pIndex The index of the stack to peek, 	 * @return The card on top of the stack at index pIndex, 	 */, 	Card peek(SuitStackIndex pIndex), 	{, 		assert !aStacks.get(pIndex).isEmpty();, 		return aStacks.get(pIndex).peek();, 	}, 	, 	/**, 	 * Push pCard onto the stack corresponding to its, 	 * index., 	 * @param pCard The card to push., 	 * @param pIndex The index where to push the card., 	 */, 	void push(Card pCard, SuitStackIndex pIndex), 	{, 		aStacks.get(pIndex).push(pCard);, 	}, 	, 	/**, 	 * Pop the top card of the stack., 	 * @param pIndex the index of the stack to pop, 	 * @pre !isEmpty(pSuit), 	 */, 	Card pop(SuitStackIndex pIndex), 	{, 		assert !isEmpty(pIndex);, 		return aStacks.get(pIndex).pop();, 	}, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.model;, , import java.util.ArrayList;, import java.util.List;, import java.util.Stack;, , import ca.mcgill.cs.stg.solitaire.ai.GreedyPlayingStrategy;, import ca.mcgill.cs.stg.solitaire.ai.PlayingStrategy;, import ca.mcgill.cs.stg.solitaire.cards.Card;, import ca.mcgill.cs.stg.solitaire.cards.Card.Rank;, import ca.mcgill.cs.stg.solitaire.cards.Card.Suit;, import ca.mcgill.cs.stg.solitaire.cards.Deck;, , /**,  * Keeps track of the current state of the game and provides,  * a facade to it. Implements the Singleton design pattern.,  * ,  * The game state can logically be separated into four distinct ,  * conceptual elements: the deck, the discard pile, the four,  * "suit stacks" where completed suits are accumulated, and the,  * seven "working stacks" where cards can be accumulated in sequences,  * of alternating suit colors.,  * ,  * To prevent,  * this class from degenerating into a God class, responsibilities,  * are separated into package-private "manager" classes ,  * in charge of managing the state. However, these manager classes,  * are not responsible for notifying observers.,  */, public final class GameModel implements GameModelView, {, 	private static final GameModel INSTANCE = new GameModel();, 	, 	private Deck aDeck = new Deck();, 	private Stack<Card> aDiscard = new Stack<>();, 	private SuitStackManager aSuitStacks = new SuitStackManager();, 	private WorkingStackManager aWorkingStacks = new WorkingStackManager();, 	private List<GameModelListener> aListeners = new ArrayList<>();, 	private PlayingStrategy aPlayingStrategy = new GreedyPlayingStrategy();, 	, 	/**, 	 * Represents anywhere a card can be placed in , 	 * Solitaire., 	 */, 	public interface Location , 	{}, 	, 	/**, 	 * Places where a card can be obtained., 	 */, 	public enum CardSources implements Location, 	{ DISCARD_PILE  }, 	, 	/**, 	 * Represents the different stacks where cards, 	 * can be accumulated., 	 */, 	public enum StackIndex implements Location, 	{ FIRST, SECOND, THIRD, FOURTH, FIFTH, SIXTH, SEVENTH }, 	, 	/**, 	 * Represents the different stacks where completed, 	 * suits can be accumulated., 	 */, 	public enum SuitStackIndex implements Location, 	{, 		FIRST, SECOND, THIRD, FOURTH;, 	}, 	, 	private GameModel(), 	{, 		reset();, 	}, 	, 	/**, 	 * @return The number of cards in the suit stacks., 	 */, 	public int getScore(), 	{, 		return aSuitStacks.getScore();, 	}, 	, 	/**, 	 * Try to automatically make a move. , 	 * This may result in nothing happening, 	 * if the auto-play strategy cannot make a , 	 * decision., 	 * @return whether a move was performed or not., 	 */, 	public boolean tryToAutoPlay(), 	{, 		Move move = aPlayingStrategy.computeNextMove(this);, 		move.perform(this);, 		return !(move instanceof NullMove);, 	}, 	, 	/**, 	 * @return The singleton instance for this class., 	 */, 	public static GameModel instance(), 	{, 		return INSTANCE;, 	}, 	, 	/**, 	 * Registers an observer for the state of the game model., 	 * @param pListener A listener to register., 	 */, 	public void addListener(GameModelListener pListener), 	{, 		aListeners.add(pListener);, 	}, 	, 	private void notifyListeners(), 	{, 		for( GameModelListener listener : aListeners ), 		{, 			listener.gameStateChanged();, 		}, 	}, 	, 	/**, 	 * Restores the model to the state , 	 * corresponding to the start of a new game., 	 */, 	public void reset(), 	{, 		aDeck.shuffle();, 		aDiscard.clear();, 		aSuitStacks.initialize();, 		aWorkingStacks.initialize(aDeck);, 		notifyListeners();, 	}, 	, 	/**, 	 * @return True if the game is completed., 	 */, 	public boolean isCompleted(), 	{, 		return aSuitStacks.getScore() == Rank.values().length * Suit.values().length;, 	}, 	, 	@Override, 	public boolean isEmptyDeck(), 	{, 		return aDeck.size() == 0;, 	}, 	, 	@Override, 	public boolean isEmptyDiscardPile(), 	{, 		return aDiscard.size() == 0;, 	}, 	, 	@Override, 	public boolean isEmptySuitStack(SuitStackIndex pIndex), 	{, 		return aSuitStacks.isEmpty(pIndex);, 	}, 	, 	/**, 	 * Draw a card from the deck and place it on top, 	 * of the discard pile., 	 * @pre !isEmptyDeck(), 	 */, 	public void discard(), 	{, 		assert !isEmptyDeck();, 		aDiscard.push(aDeck.draw());, 		notifyListeners();, 	}, 	, 	/**, 	 * Obtain the card on top of the suit stack for, 	 * pIndex without discarding it., 	 * @param pIndex The index of the stack to check, 	 * @return The card on top of the stack., 	 * @pre !isEmptySuitStack(pIndex), 	 */, 	public Card peekSuitStack(SuitStackIndex pIndex), 	{, 		assert !isEmptySuitStack(pIndex);, 		return aSuitStacks.peek(pIndex);, 	}, 	, 	@Override, 	public Card peekDiscardPile(), 	{, 		assert aDiscard.size() != 0;, 		return aDiscard.peek();, 	}, 	, 	/**, 	 * @param pCard A card to locate, 	 * @return The game location where this card currently is., 	 * @pre the card is in a location where it can be found and moved., 	 */, 	private Location find(Card pCard), 	{, 		if( !aDiscard.isEmpty() && aDiscard.peek() == pCard ), 		{, 			return CardSources.DISCARD_PILE;, 		}, 		for( SuitStackIndex index : SuitStackIndex.values() ), 		{, 			if( !aSuitStacks.isEmpty(index) && aSuitStacks.peek(index) == pCard ), 			{, 				return index;, 			}, 		}, 		for( StackIndex index : StackIndex.values() ), 		{, 			if( aWorkingStacks.contains(pCard, index)), 			{, 				return index;, 			}, 		}, 		, 		assert false; // We did not find the card: the precondition was not met., 		return null;, 	}, 	, 	/**, 	 * Moves pCard from the source to the destination. Assumes this, 	 * is a legal move., 	 * @param pCard The card to move. Not null., 	 * @param pDestination The destination location., 	 */, 	public void move(Card pCard, Location pDestination), 	{, 		assert isLegalMove(pCard, pDestination);, 		Location source = find(pCard);, 		Card[] cardsToMove = processSource(pCard, source);, 		if( pDestination instanceof SuitStackIndex ), 		{, 			for( Card card : cardsToMove ), 			{, 				aSuitStacks.push(card, (SuitStackIndex)pDestination);, 			}, 		}, 		else, 		{, 			assert pDestination instanceof StackIndex;, 			for( Card card : cardsToMove ), 			{, 				aWorkingStacks.push(card, (StackIndex)pDestination);, 			}, 		}, 		notifyListeners();, 	}, 	, 	private Card[] processSource(Card pCard, Location pSource), 	{, 		if( pSource == CardSources.DISCARD_PILE ), 		{, 			assert !aDiscard.isEmpty() && aDiscard.peek() == pCard;, 			aDiscard.pop();, 			return new Card[]{pCard};, 		}, 		else if( pSource instanceof SuitStackIndex ), 		{, 			assert !aSuitStacks.isEmpty((SuitStackIndex)pSource) && , 				aSuitStacks.peek((SuitStackIndex)pSource) == pCard;, 			aSuitStacks.pop((SuitStackIndex)pSource);, 			return new Card[]{pCard};, 		}, 		else, 		{, 			assert pSource instanceof StackIndex && , 				aWorkingStacks.contains(pCard, (StackIndex)pSource);, 			return aWorkingStacks.removeSequence(pCard, (StackIndex)pSource);, 		}, 	}, 	, 	@Override, 	public CardView[] getStack(StackIndex pIndex), 	{, 		return aWorkingStacks.getStack(pIndex); , 	}, 	, 	/**, 	 * Get the sub-stack consisting of pCard and all , 	 * the other cards below it., 	 * @param pCard The top card of the sub-stack, 	 * @param pIndex The position of the stack to return., 	 * @return A non-empty sequence of cards., 	 * @pre pCard is in stack pIndex, 	 */, 	public Card[] getSubStack(Card pCard, StackIndex pIndex), 	{, 		return aWorkingStacks.getSequence(pCard, pIndex);, 	}, , 	@Override, 	public boolean isLegalMove(Card pCard, Location pDestination ), 	{ , 		if( pDestination instanceof SuitStackIndex ), 		{, 			return aSuitStacks.canMoveTo(pCard, (SuitStackIndex) pDestination);, 		}, 		else if( pDestination instanceof StackIndex ), 		{, 			return aWorkingStacks.canMoveTo(pCard, (StackIndex) pDestination);, 		}, 		else, 		{, 			return false;, 		}, 	}, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.model;, , import java.util.ArrayList;, import java.util.HashMap;, import java.util.List;, import java.util.Map;, import java.util.Stack;, , import ca.mcgill.cs.stg.solitaire.cards.Card;, import ca.mcgill.cs.stg.solitaire.cards.Card.Rank;, import ca.mcgill.cs.stg.solitaire.cards.Deck;, import ca.mcgill.cs.stg.solitaire.model.GameModel.StackIndex;, , /**,  * Manages the state of the bottom stacks where partial,  * suits are accumulated.,  */, class WorkingStackManager, {, 	private Map<StackIndex, Stack<CardView>> aStacks = new HashMap<>();, 	, 	/**, 	 * Creates working stacks with no cards in them., 	 */, 	WorkingStackManager(), 	{, 		for( StackIndex index : StackIndex.values() ), 		{, 			aStacks.put(index, new Stack<CardView>());, 		}, 	}, 	, 	/**, 	 * Fills the working stacks by drawing cards from the deck., 	 */, 	void initialize(Deck pDeck), 	{, 		for( int i = 0; i < StackIndex.values().length; i++ ), 		{, 			aStacks.get(StackIndex.values()[i]).clear();, 			for( int j = 0; j < i+1; j++ ), 			{, 				CardView view = new CardView(pDeck.draw());, 				if( j == i ), 				{, 					view.makeVisible();, 				}, 				aStacks.get(StackIndex.values()[i]).push(view);, 			}, 		}, 	}, 	, 	boolean canMoveTo(Card pCard, StackIndex pIndex ), 	{, 		Stack<CardView> stack = aStacks.get(pIndex);, 		if( stack.isEmpty() ), 		{, 			return pCard.getRank() == Rank.KING;, 		}, 		else, 		{ , 			return pCard.getRank().ordinal() == stack.peek().getCard().getRank().ordinal()-1 && , 					!pCard.sameColorAs(stack.peek().getCard());, 		}, 	}, 	, 	CardView[] getStack(StackIndex pIndex), 	{, 		return aStacks.get(pIndex).toArray(new CardView[aStacks.get(pIndex).size()]);, 	}, 	, 	public Card[] getSequence(Card pCard, StackIndex pIndex), 	{, 		Stack<CardView> stack = aStacks.get(pIndex);, 		List<Card> lReturn = new ArrayList<>();, 		boolean aSeen = false;, 		for( CardView card : stack ), 		{, 			if( card.getCard() == pCard ), 			{, 				aSeen = true;, 			}, 			if( aSeen ), 			{, 				lReturn.add(card.getCard());, 			}, 		}, 		return lReturn.toArray(new Card[lReturn.size()]);, 	}, 	, 	/**, 	 * Removes and returns a sequence of cards starting at , 	 * pCard and running until the top of the stack., 	 * @param pCard The card to start the sequence at., 	 * @param pIndex The stack index., 	 * @return The first card was further from the bottom, 	 * of the stack., 	 */, 	Card[] removeSequence(Card pCard, StackIndex pIndex), 	{, 		Stack<CardView> stack = aStacks.get(pIndex);, 		List<Card> lReturn = new ArrayList<>();, 		boolean aSeen = false;, 		for( CardView card : stack ), 		{, 			if( card.getCard() == pCard ), 			{, 				aSeen = true;, 			}, 			if( aSeen ), 			{, 				lReturn.add(card.getCard());, 			}, 		}, 		for( int i = 0; i < lReturn.size(); i++ ), 		{, 			pop(pIndex);, 		}, 		return lReturn.toArray(new Card[lReturn.size()]);, 	}, 	, 	boolean contains(Card pCard, StackIndex pIndex), 	{, 		for( CardView card : aStacks.get(pIndex)), 		{, 			if( card.getCard() == pCard ), 			{, 				return true;, 			}, 		}, 		return false;, 	}, 	, 	void pop(StackIndex pIndex), 	{, 		assert !aStacks.get(pIndex).isEmpty();, 		aStacks.get(pIndex).pop();, 		if( !aStacks.get(pIndex).isEmpty()), 		{, 			aStacks.get(pIndex).peek().makeVisible();, 		}, 	}, 	, 	void push(Card pCard, StackIndex pIndex), 	{, 		CardView cardView = new CardView(pCard);, 		cardView.makeVisible();, 		aStacks.get(pIndex).push(cardView);, 	}, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.model;, , /**,  * A do-nothing move. Useful as a stand-in to ,  * represent an attempt at computing a move,  * that was unsuccessful.,  */, public class NullMove implements Move, {, 	@Override, 	public void perform(GameModel pModel), 	{, 		// This method does nothing on purpose., 	}, 	, 	@Override, 	public String toString(), 	{, 		return "No move";, 	}, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.model;, , /**,  * Represents one possible action in the game.,  */, public interface Move, {, 	/**, 	 * Perform the move. , 	 * @param pModel A game model upon which the move can be performed., 	 * @pre The move is legal, 	 */, 	void perform(GameModel pModel);, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.model;, , import ca.mcgill.cs.stg.solitaire.cards.Card;, import ca.mcgill.cs.stg.solitaire.cards.CardImages;, import javafx.scene.image.Image;, , /**,  * A mutable wrapper around a card that keeps,  * track of whether the value of the card is ,  * visible to a user or not.,  */, public class CardView, {, 	private Card aCard;, 	private boolean aVisible;, 	, 	/**, 	 * Create a view of a card that is not, 	 * visible by default., 	 * @param pCard The card to wrap., 	 */, 	public CardView(Card pCard), 	{, 		assert pCard != null;, 		aCard = pCard;, 		aVisible = false;, 	}, 	, 	/**, 	 * Make the card permanently visible., 	 */, 	public void makeVisible(), 	{, 		aVisible = true;, 	}, 	, 	/**, 	 * @return true if the card is visible, 	 */, 	public boolean isVisible(), 	{, 		return aVisible;, 	}, 	, 	/**, 	 * @return The image of the card, either , 	 * the value side of the card if it is visible,, 	 * or the back of the card if the card is not visible., 	 */, 	public Image getImage(), 	{, 		if( !aVisible ), 		{, 			return CardImages.getBack();, 		}, 		else, 		{, 			return CardImages.getCard(aCard);, 		}, 	}, 	, 	/**, 	 * @return The underlying card for this view., 	 */, 	public Card getCard(), 	{, 		return aCard;, 	}, 	, 	@Override, 	public String toString(), 	{, 		return aCard.toString() + "(" + aVisible + ")";, 	}, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.model;, , /**,  * Observer interface to be implemented by classes whose,  * objects are interested in being notified of a change,  * in the state of the game model.,  */, public interface GameModelListener, {, 	/**, 	 * Called whenever the state of the , 	 * game model changes., 	 */, 	void gameStateChanged();, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.model;, , import ca.mcgill.cs.stg.solitaire.cards.Card;, import ca.mcgill.cs.stg.solitaire.model.GameModel.Location;, , /**,  * Represents a single card-playing action,  * in solitaire.,  */, public class CardMove implements Move, {, 	private Card aCard;, 	private Location aDestination; , 	, 	/**, 	 * A move that represents the intention to move pCard, 	 * to pDestination, possibly including all cards stacked, 	 * on top of pCard if pCard is in a working stack., 	 * @param pCard The card to move., 	 * @param pDestination The destination., 	 */, 	public CardMove(Card pCard, Location pDestination), 	{, 		aCard = pCard;, 		aDestination = pDestination;, 	}, 	, 	/**, 	 * @return The card to move., 	 */, 	public Card getCard(), 	{, 		return aCard;, 	}, 	, 	/**, 	 * @return The destination., 	 */, 	public Location getDestination(), 	{, 		return aDestination;, 	}, 	, 	@Override, 	public String toString(), 	{, 		return aCard + " to " + aDestination.getClass().getSimpleName() + "."+ aDestination;, 	}, , 	@Override, 	public void perform(GameModel pModel), 	{, 		assert pModel.isLegalMove(aCard, aDestination);, 		pModel.move(aCard, aDestination);, 	}, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.ai;, , import ca.mcgill.cs.stg.solitaire.model.GameModel;, , /**,  * Plays 100,000 games and computes the ,  * number of wins.,  */, public final class Driver, {, 	private static final int ALL_CARDS = 52;, 	private static final int NUMBER_OF_GAMES = 10000;, 	private static final int TO_PERCENT = 100;, 	, 	private Driver() {}, 	, 	/**, 	 * @param pArgs Not used., 	 */, 	public static void main(String[] pArgs), 	{, 		int total = 0;, 		int totalWon = 0;, 		for( int i = 0; i < NUMBER_OF_GAMES; i++ ), 		{, 			playGame(GameModel.instance());, 			int score = GameModel.instance().getScore();, 			total += score;, 			if( score == ALL_CARDS ), 			{, 				totalWon++;, 			}, 		}, 		System.out.println(String.format("Ratio won     %d/%d=%.1f%%", totalWon, NUMBER_OF_GAMES,, 				((double)totalWon)/((double)NUMBER_OF_GAMES)*TO_PERCENT));, 		System.out.println(String.format("Average score %d/%d=%.1f", total, NUMBER_OF_GAMES, , 				((double)total)/((double)NUMBER_OF_GAMES)));, 	}, 	, 	private static void playGame(GameModel pModel), 	{, 		pModel.reset();, 		boolean advanced = true;, 		while( advanced ), 		{, 			advanced = pModel.tryToAutoPlay();, 		}, 	}, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.ai;, , import java.util.ArrayList;, import java.util.List;, , import ca.mcgill.cs.stg.solitaire.cards.Card;, import ca.mcgill.cs.stg.solitaire.model.CardMove;, import ca.mcgill.cs.stg.solitaire.model.CardView;, import ca.mcgill.cs.stg.solitaire.model.DiscardMove;, import ca.mcgill.cs.stg.solitaire.model.GameModel.StackIndex;, import ca.mcgill.cs.stg.solitaire.model.GameModel.SuitStackIndex;, import ca.mcgill.cs.stg.solitaire.model.GameModelView;, import ca.mcgill.cs.stg.solitaire.model.Move;, import ca.mcgill.cs.stg.solitaire.model.NullMove;, , /**,  * Makes the first possible move in this order: ,  * 0. Discarding if the discard pile is empty,  * 1. Moving a card from the discard pile to a suit stack,  * 2. Moving a card from the discard pile to a working stack,  * 3. Moving a card from a working stack to a suit stack, in order,  * of working stacks.,  * 4. Moving from a working stack to another, if this either reveals,  * a fresh card or frees up a spot for a kind.,  * 5. If no moves are possible, discards.,  */, public class GreedyPlayingStrategy implements PlayingStrategy, {, 	// CSOFF:, 	@Override , 	public Move computeNextMove(GameModelView pModel), 	{, 		if( pModel.isEmptyDiscardPile() && !pModel.isEmptyDeck() ), 		{, 			return new DiscardMove();, 		}, 		else, 		{, 			ArrayList<CardMove> moves = new ArrayList<>();, 			moves.addAll(movesFromWorkingStacksRevealsCard(pModel));, 			if( moves.size() > 0 ), 			{, 				return moves.get(0);, 			}, 			moves.addAll(movesFromDiscardPileToSuitStack(pModel));, 			if( moves.size() > 0 ), 			{, 				return moves.get(0);, 			}, 			moves.addAll(movesFromDiscardPileToWorkingStacks(pModel));, 			if( moves.size() > 0 ), 			{, 				return moves.get(0);, 			}, 			moves.addAll(movesFromWorkingStacksToSuitStacks(pModel));, 			if( moves.size() > 0 ), 			{, 				return moves.get(0);, 			}, 			, 			if( !pModel.isEmptyDeck() ), 			{, 				return new DiscardMove();, 			}, 			else, 			{, 				return new NullMove();, 			}, 		}, 	} // CSON:, 	, 	private List<CardMove> movesFromDiscardPileToSuitStack(GameModelView pModel), 	{, 		ArrayList<CardMove> moves = new ArrayList<>();, 		if( !pModel.isEmptyDiscardPile()), 		{, 			for(SuitStackIndex index : SuitStackIndex.values()), 			{, 				if( pModel.isLegalMove(pModel.peekDiscardPile(), index)), 				{, 					moves.add(new CardMove(pModel.peekDiscardPile(), index));, 					if( pModel.isEmptySuitStack(index)), 					{, 						break; // we take the first possible blank space, 					}, 				}, 		}}, 		return moves;, 	}, 	, 	private List<CardMove> movesFromDiscardPileToWorkingStacks(GameModelView pModel), 	{, 		ArrayList<CardMove> moves = new ArrayList<>();, 		if( !pModel.isEmptyDiscardPile() ), 		{, 			for(StackIndex index : StackIndex.values()), 			{, 				if( pModel.isLegalMove(pModel.peekDiscardPile(), index)), 				{, 					moves.add(new CardMove(pModel.peekDiscardPile(), index));, 				}, 			}, 		}, 		return moves;, 	}, 	, 	private List<CardMove> movesFromWorkingStacksToSuitStacks(GameModelView pModel), 	{, 		ArrayList<CardMove> moves = new ArrayList<>();, 		for(StackIndex index : StackIndex.values()), 		{, 			CardView[] stack = pModel.getStack(index);, 			if( stack.length > 0 ), 			{, 				Card card = stack[stack.length-1].getCard();, 				for(SuitStackIndex index2 : SuitStackIndex.values()), 				{, 					if( pModel.isLegalMove(card, index2)), 					{, 						moves.add(new CardMove(card, index2));, 						if( pModel.isEmptySuitStack(index2)), 						{, 							break; // we take the first possible blank space, 						}, 					}, 				}, 			}	, 		}, 		return moves;, 	}, 	, 	private List<CardMove> movesFromWorkingStacksRevealsCard(GameModelView pModel), 	{, 		ArrayList<CardMove> moves = new ArrayList<>();, 		for(StackIndex index : StackIndex.values()), 		{, 			CardView[] stack = pModel.getStack(index);, 			for(int i = 0; i < stack.length; i++ ), 			{, 				if( stack[i].isVisible() && i > 0 && !stack[i-1].isVisible() ), 				{, 					for( StackIndex index2 : StackIndex.values() ), 					{, 						if( pModel.isLegalMove(stack[i].getCard(), index2)), 						{, 							moves.add(new CardMove(stack[i].getCard(), index2));, 						}, 					}, 				}, 				else if( stack[i].isVisible() && i == 0 ), 				{, 					for( StackIndex index2 : StackIndex.values() ), 					{, 						// we don't want to just move a card around, 						if( pModel.isLegalMove(stack[i].getCard(), index2) && pModel.getStack(index2).length > 0) , 						{, 							moves.add(new CardMove(stack[i].getCard(), index2));, 						}, 					}, 				}, 			}, 		}, 		, 		return moves;, 	}, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.ai;, , import ca.mcgill.cs.stg.solitaire.model.GameModelView;, import ca.mcgill.cs.stg.solitaire.model.Move;, import ca.mcgill.cs.stg.solitaire.model.NullMove;, , /**,  * Never does anything.,  */, public class NullPlayingStrategy implements PlayingStrategy, {, 	@Override, 	public Move computeNextMove(GameModelView pModel), 	{, 		return new NullMove();, 	}, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.ai;, , import ca.mcgill.cs.stg.solitaire.model.GameModelView;, import ca.mcgill.cs.stg.solitaire.model.Move;, , /**,  * Defines the behavior necessary to make ,  * a decision.,  */, public interface PlayingStrategy, {, 	/**, 	 * If a move is both legal and supported , 	 * by the concrete strategy, execute the move. If, 	 * not, do nothing., 	 * @param pModel A game model to query., 	 * @return The next move., 	 */, 	Move computeNextMove(GameModelView pModel);, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.cards;, , import static org.junit.Assert.assertEquals;, import static org.junit.Assert.assertFalse;, , import java.util.HashSet;, import java.util.Set;, , import org.junit.Test;, , public class TestDeck, {, 	@Test, 	public void testdraw(), 	{, 		Deck lDeck = new Deck();, 		lDeck.shuffle();, 		Set<Card> lCards = new HashSet<Card>();, 		for( int i = 0; i < 52; i++ ), 		{, 			Card lCard = lDeck.draw();, 			assertFalse( lCards.contains(lCard));, 			lCards.add( lCard );, 			assertEquals( i, 51 - lDeck.size() );, 		}, 		assertEquals( 0, lDeck.size() );, 	}, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.cards;, , import static org.junit.Assert.assertEquals;, import static org.junit.Assert.assertTrue;, import static org.junit.Assert.assertFalse;, , , import org.junit.Test;, , import ca.mcgill.cs.stg.solitaire.cards.Card.Rank;, import ca.mcgill.cs.stg.solitaire.cards.Card.Suit;, , public class TestCard, {, 	@Test, 	public void testToIDString(), 	{, 		assertEquals("0", Card.get(Rank.ACE, Suit.CLUBS).getIDString());, 		assertEquals("9", Card.get(Rank.TEN, Suit.CLUBS).getIDString());, 		assertEquals("12", Card.get(Rank.KING, Suit.CLUBS).getIDString());, 		assertEquals("13", Card.get(Rank.ACE, Suit.DIAMONDS).getIDString());, 		assertEquals("26", Card.get(Rank.ACE, Suit.HEARTS).getIDString());, 		assertEquals("39", Card.get(Rank.ACE, Suit.SPADES).getIDString());, 	}, 	, 	@Test, 	public void testFromIDString(), 	{, 		assertEquals(Card.get(Rank.ACE, Suit.CLUBS), Card.get("0"));, 		assertEquals(Card.get(Rank.TEN, Suit.CLUBS), Card.get("9"));, 		assertEquals(Card.get(Rank.KING, Suit.CLUBS), Card.get("12"));, 		assertEquals(Card.get(Rank.ACE, Suit.DIAMONDS), Card.get("13"));, 		assertEquals(Card.get(Rank.ACE, Suit.HEARTS), Card.get("26"));, 		assertEquals(Card.get(Rank.ACE, Suit.SPADES), Card.get("39"));, 	}, 	, 	@Test, 	public void testToString(), 	{, 		assertEquals("ACE of CLUBS", Card.get(Rank.ACE, Suit.CLUBS).toString());, 		assertEquals("TWO of CLUBS", Card.get(Rank.TWO, Suit.CLUBS).toString());, 		assertEquals("KING of CLUBS", Card.get(Rank.KING, Suit.CLUBS).toString());, 		assertEquals("ACE of DIAMONDS", Card.get(Rank.ACE, Suit.DIAMONDS).toString());, 		assertEquals("TWO of DIAMONDS", Card.get(Rank.TWO, Suit.DIAMONDS).toString());, 		assertEquals("KING of DIAMONDS", Card.get(Rank.KING, Suit.DIAMONDS).toString());, 		assertEquals("ACE of HEARTS", Card.get(Rank.ACE, Suit.HEARTS).toString());, 		assertEquals("TWO of HEARTS", Card.get(Rank.TWO, Suit.HEARTS).toString());, 		assertEquals("KING of HEARTS", Card.get(Rank.KING, Suit.HEARTS).toString());, 		assertEquals("ACE of SPADES", Card.get(Rank.ACE, Suit.SPADES).toString());, 		assertEquals("TWO of SPADES", Card.get(Rank.TWO, Suit.SPADES).toString());, 		assertEquals("KING of SPADES", Card.get(Rank.KING, Suit.SPADES).toString());, 	}, 	, 	@Test, 	public void testSameColor(), 	{, 		assertTrue(Card.get(Rank.ACE, Suit.CLUBS).sameColorAs(Card.get(Rank.ACE, Suit.CLUBS)));, 		assertTrue(Card.get(Rank.ACE, Suit.CLUBS).sameColorAs(Card.get(Rank.ACE, Suit.SPADES)));, 		assertTrue(Card.get(Rank.ACE, Suit.CLUBS).sameColorAs(Card.get(Rank.KING, Suit.SPADES)));, 		assertTrue(Card.get(Rank.ACE, Suit.SPADES).sameColorAs(Card.get(Rank.KING, Suit.SPADES)));, 		assertTrue(Card.get(Rank.ACE, Suit.SPADES).sameColorAs(Card.get(Rank.KING, Suit.CLUBS)));, 		assertTrue(Card.get(Rank.ACE, Suit.DIAMONDS).sameColorAs(Card.get(Rank.ACE, Suit.DIAMONDS)));, 		assertTrue(Card.get(Rank.ACE, Suit.DIAMONDS).sameColorAs(Card.get(Rank.ACE, Suit.HEARTS)));, 		assertTrue(Card.get(Rank.ACE, Suit.DIAMONDS).sameColorAs(Card.get(Rank.KING, Suit.HEARTS)));, 		assertTrue(Card.get(Rank.ACE, Suit.HEARTS).sameColorAs(Card.get(Rank.KING, Suit.HEARTS)));, 		assertTrue(Card.get(Rank.ACE, Suit.HEARTS).sameColorAs(Card.get(Rank.KING, Suit.DIAMONDS)));, 		, 		assertFalse(Card.get(Rank.ACE, Suit.CLUBS).sameColorAs(Card.get(Rank.ACE, Suit.DIAMONDS)));, 		assertFalse(Card.get(Rank.ACE, Suit.CLUBS).sameColorAs(Card.get(Rank.ACE, Suit.HEARTS)));, 		assertFalse(Card.get(Rank.ACE, Suit.SPADES).sameColorAs(Card.get(Rank.ACE, Suit.DIAMONDS)));, 		assertFalse(Card.get(Rank.ACE, Suit.SPADES).sameColorAs(Card.get(Rank.ACE, Suit.HEARTS)));, 		assertFalse(Card.get(Rank.ACE, Suit.DIAMONDS).sameColorAs(Card.get(Rank.ACE, Suit.SPADES)));, 	}, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.model;, , import static org.junit.Assert.assertEquals;, import static org.junit.Assert.assertFalse;, import static org.junit.Assert.assertTrue;, , import java.lang.reflect.Field;, , import org.junit.Before;, import org.junit.Test;, , import ca.mcgill.cs.stg.solitaire.cards.Card;, import ca.mcgill.cs.stg.solitaire.cards.Card.Rank;, import ca.mcgill.cs.stg.solitaire.cards.Card.Suit;, import ca.mcgill.cs.stg.solitaire.model.GameModel.StackIndex;, import ca.mcgill.cs.stg.solitaire.model.GameModel.SuitStackIndex;, , public class TestGameModel, {, 	@Before, 	public void setup() throws Exception, 	{, 		Field deckField = GameModel.class.getDeclaredField("aDeck");, 		deckField.setAccessible(true);, 		deckField.set(GameModel.instance(), new TestDeck());, 		GameModel.instance().reset();, 	}, 	, 	@Test, 	public void testListeners(), 	{, 		final boolean[] test = {false};, 		class ListenerStub implements GameModelListener, 		{, 			@Override, 			public void gameStateChanged(), 			{, 				test[0] = true;, 			}, 		};, 		// Test no crash, 		GameModel.instance().discard();, 		GameModel.instance().addListener(new ListenerStub());, 		GameModel.instance().discard();, 		assertTrue(test[0]);, 	}, 	, 	@Test, 	public void testDiscard(), 	{, 		assertTrue(GameModel.instance().isEmptyDiscardPile());, 		assertFalse(GameModel.instance().isEmptyDeck());// 3 of hearts, 		for( int i = 0; i < 24; i++ ), 		{, 			assertFalse(GameModel.instance().isEmptyDeck());, 			GameModel.instance().discard();, 			// Test a few cards, 			if( i == 0 ), 			{, 				assertEquals(Card.get(Rank.JACK, Suit.DIAMONDS), GameModel.instance().peekDiscardPile());, 			}, 			if( i == 1 ), 			{, 				assertEquals(Card.get(Rank.TEN, Suit.DIAMONDS), GameModel.instance().peekDiscardPile());, 			}, 			assertFalse(GameModel.instance().isEmptyDiscardPile());, 		}, 		assertTrue(GameModel.instance().isEmptyDeck());, 	}, 	, 	@Test, 	public void testGetStack(), 	{, 		GameModel model = GameModel.instance();, 		CardView[] stack = model.getStack(StackIndex.FIRST);, 		assertEquals(Card.get(Rank.KING, Suit.SPADES), stack[0].getCard());, 		assertEquals(1, stack.length);, 		// Test that the method returns a clone, 		stack[0] = new CardView(Card.get(Rank.QUEEN, Suit.CLUBS));, 		stack = model.getStack(StackIndex.FIRST);, 		assertEquals(Card.get(Rank.KING, Suit.SPADES), stack[0].getCard());, 		assertEquals(1, stack.length);, 		stack = model.getStack(StackIndex.SECOND);, 		assertEquals(2, stack.length);, 		assertEquals(Card.get(Rank.QUEEN, Suit.SPADES), stack[0].getCard());, 		assertEquals(Card.get(Rank.JACK, Suit.SPADES), stack[1].getCard());, 	}, 	, 	@Test, 	public void testGetSubStack(), 	{, 		GameModel model = GameModel.instance();, 		Card[] stack = model.getSubStack(Card.get(Rank.KING, Suit.SPADES), StackIndex.FIRST);, 		assertEquals(Card.get(Rank.KING, Suit.SPADES), stack[0]);, 		assertEquals(1, stack.length);, 		// Test that the method returns a clone, 		stack[0] = Card.get(Rank.QUEEN, Suit.CLUBS);, 		stack = model.getSubStack(Card.get(Rank.KING, Suit.SPADES), StackIndex.FIRST);, 		assertEquals(Card.get(Rank.KING, Suit.SPADES), stack[0]);, 		assertEquals(1, stack.length);, , 		stack = model.getSubStack(Card.get(Rank.TEN, Suit.SPADES), StackIndex.THIRD);, 		assertEquals(3, stack.length);, 		stack = model.getSubStack(Card.get(Rank.NINE, Suit.SPADES), StackIndex.THIRD);, 		assertEquals(2, stack.length);, 		stack = model.getSubStack(Card.get(Rank.EIGHT, Suit.SPADES), StackIndex.THIRD);, 		assertEquals(1, stack.length);, 	}, 	, 	@Test , 	public void testMoves(), 	{, 		GameModel model = GameModel.instance();, 		assertTrue(model.isEmptySuitStack(SuitStackIndex.FIRST)); // Clusts on first, 		assertFalse(model.isLegalMove(Card.get(Rank.THREE, Suit.CLUBS), SuitStackIndex.SECOND));, 		assertFalse(model.isLegalMove(Card.get(Rank.THREE, Suit.CLUBS), SuitStackIndex.FIRST));, 		assertFalse(model.isLegalMove(Card.get(Rank.TWO, Suit.CLUBS), SuitStackIndex.FIRST));, 		assertTrue(model.isLegalMove(Card.get(Rank.ACE, Suit.CLUBS), SuitStackIndex.FIRST));, 		model.discard(); // Jack of diamond, 		model.discard(); // Ten of diamond, 		assertTrue(model.isLegalMove(model.peekDiscardPile(), StackIndex.SECOND));, 		model.move(model.peekDiscardPile(), StackIndex.SECOND);, 		model.discard();, 		assertFalse(model.isLegalMove(model.peekDiscardPile(), StackIndex.SECOND));, 		model.discard();, 		assertEquals(Card.get(Rank.EIGHT, Suit.DIAMONDS), model.peekDiscardPile());, 		model.discard();, 		assertTrue(model.isLegalMove(model.peekDiscardPile(), StackIndex.THIRD));, 		model.move(model.peekDiscardPile(), StackIndex.THIRD);, 		model.discard();, 		model.discard();, 		assertEquals(Card.get(Rank.FIVE, Suit.DIAMONDS), model.peekDiscardPile());, 		model.discard();, 		model.discard();, 		model.discard();, 		model.discard();, 		assertEquals(Card.get(Rank.ACE, Suit.DIAMONDS), model.peekDiscardPile());, 		assertTrue(model.isLegalMove(model.peekDiscardPile(), SuitStackIndex.SECOND));, 		model.move(model.peekDiscardPile(), SuitStackIndex.SECOND);, 		assertEquals(Card.get(Rank.ACE, Suit.DIAMONDS), model.peekSuitStack(SuitStackIndex.SECOND));, 		assertEquals(Card.get(Rank.TWO, Suit.DIAMONDS), model.peekDiscardPile());, 		model.move(model.peekDiscardPile(), SuitStackIndex.SECOND);, 		assertEquals(Card.get(Rank.TWO, Suit.DIAMONDS), model.peekSuitStack(SuitStackIndex.SECOND));, 		model.move(model.peekDiscardPile(), SuitStackIndex.SECOND);, 		model.move(model.peekDiscardPile(), SuitStackIndex.SECOND);, 		model.move(model.peekDiscardPile(), SuitStackIndex.SECOND);, 		model.move(model.peekDiscardPile(), SuitStackIndex.SECOND); , 		// 8th of diamond is on top of the discard pile, 		assertFalse(model.isLegalMove(model.peekDiscardPile(), SuitStackIndex.SECOND));, 		model.move(Card.get(Rank.SEVEN, Suit.DIAMONDS), SuitStackIndex.SECOND);, 		// move the 7th back to the working stack, 		model.move(Card.get(Rank.SEVEN, Suit.DIAMONDS), StackIndex.THIRD);, 	}, 	, 	@Test , 	public void testMoves2(), 	{, 		GameModel model = GameModel.instance();, 		model.discard();, 		model.discard(); // 10D on discard pile, 		model.move(model.peekDiscardPile(), StackIndex.SECOND);, 		model.discard();, 		model.discard();, 		model.discard();, 		model.discard();, 		model.discard();, 		model.discard();, 		model.discard();, 		model.discard();, 		model.discard();, 		model.discard();, 		model.discard();, 		model.discard();, 		model.discard();, 		model.discard(); // 9C on discard pile, 		assertEquals(Card.get(Rank.NINE, Suit.CLUBS), model.peekDiscardPile());, 		model.move(model.peekDiscardPile(), StackIndex.SECOND);, 		// move three card sequence to pile 7, 		Card[] stack = model.getSubStack(Card.get(Rank.JACK, Suit.SPADES), StackIndex.SECOND);, 		assertEquals(3, stack.length);, 		assertEquals(Card.get(Rank.JACK, Suit.SPADES), stack[0]);, 		assertEquals(Card.get(Rank.TEN, Suit.DIAMONDS), stack[1]);, 		assertEquals(Card.get(Rank.NINE, Suit.CLUBS), stack[2]);, 		model.move(stack[0], StackIndex.SEVENTH);, 		assertEquals(1, model.getStack(StackIndex.SECOND).length);, 		stack = model.getSubStack(Card.get(Rank.JACK, Suit.SPADES), StackIndex.SEVENTH);, 		assertEquals(10, model.getStack(StackIndex.SEVENTH).length);, 		model.move(model.getSubStack(Card.get(Rank.QUEEN, Suit.DIAMONDS), StackIndex.SEVENTH)[0], StackIndex.FIRST);, 		CardView[] stack2 = model.getStack(StackIndex.FIRST);, 		assertEquals(5, stack2.length);, 	}, 	, 	@Test , 	public void testMoves3(), 	{, 		GameModel model = GameModel.instance();, 		for( int i = 0; i < 14; i++ ), 		{, 			model.discard();, 		}, 		assertEquals(Card.get(Rank.JACK, Suit.CLUBS), model.peekDiscardPile());, 		model.move(model.peekDiscardPile(), StackIndex.FIFTH);, 		assertEquals(6, model.getStack(StackIndex.FIFTH).length);, 		model.move(model.getSubStack(Card.get(Rank.JACK, Suit.CLUBS), StackIndex.FIFTH)[0], StackIndex.SEVENTH);, 		assertEquals(5, model.getStack(StackIndex.FIFTH).length);, 		assertEquals(8, model.getStack(StackIndex.SEVENTH).length);, 	}, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.model;, , import static org.junit.Assert.assertEquals;, import static org.junit.Assert.assertTrue;, , import org.junit.Before;, import org.junit.Test;, , import ca.mcgill.cs.stg.solitaire.cards.Card;, import ca.mcgill.cs.stg.solitaire.cards.Card.Rank;, import ca.mcgill.cs.stg.solitaire.cards.Card.Suit;, import ca.mcgill.cs.stg.solitaire.model.GameModel.SuitStackIndex;, , public class TestSuitStackManager, {, 	private SuitStackManager aSuitStackManager;, 	private static final Card CAC = Card.get(Rank.ACE, Suit.CLUBS);, 	private static final Card CAD = Card.get(Rank.ACE, Suit.DIAMONDS);, 	private static final Card C3D = Card.get(Rank.THREE, Suit.DIAMONDS);, 	, 	@Before, 	public void setup(), 	{, 		aSuitStackManager = new SuitStackManager();, 	}, 	, 	@Test, 	public void testInitialize(), 	{, 		assertTrue( aSuitStackManager.isEmpty(SuitStackIndex.FIRST));, 		assertTrue( aSuitStackManager.isEmpty(SuitStackIndex.SECOND));, 		assertTrue( aSuitStackManager.isEmpty(SuitStackIndex.THIRD));, 		assertTrue( aSuitStackManager.isEmpty(SuitStackIndex.FOURTH));, 	}, 	, 	@Test, 	public void testPushPop(), 	{, 		aSuitStackManager.push(CAC, SuitStackIndex.FIRST);, 		assertTrue( aSuitStackManager.isEmpty(SuitStackIndex.SECOND));, 		assertTrue( aSuitStackManager.isEmpty(SuitStackIndex.THIRD));, 		assertTrue( aSuitStackManager.isEmpty(SuitStackIndex.FOURTH));, 		aSuitStackManager.push(CAD, SuitStackIndex.SECOND);, 		assertEquals(CAD, aSuitStackManager.peek(SuitStackIndex.SECOND));, 		aSuitStackManager.push(C3D, SuitStackIndex.SECOND);, 		assertEquals(C3D, aSuitStackManager.peek(SuitStackIndex.SECOND));, 		aSuitStackManager.pop(SuitStackIndex.SECOND);, 		assertEquals(CAD, aSuitStackManager.peek(SuitStackIndex.SECOND));, 		aSuitStackManager.pop(SuitStackIndex.SECOND);, 		assertTrue( aSuitStackManager.isEmpty(SuitStackIndex.SECOND));, 	}, 	, 	@Test, 	public void testGetScore(), 	{, 		assertEquals(0, aSuitStackManager.getScore());, 		aSuitStackManager.push(CAC, SuitStackIndex.FIRST);, 		aSuitStackManager.push(CAD, SuitStackIndex.SECOND);, 		assertEquals(2, aSuitStackManager.getScore());, 	}, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.model;, , import static org.junit.Assert.assertEquals;, import static org.junit.Assert.assertFalse;, import static org.junit.Assert.assertTrue;, , import org.junit.Test;, , import ca.mcgill.cs.stg.solitaire.cards.Card;, import ca.mcgill.cs.stg.solitaire.cards.Card.Rank;, import ca.mcgill.cs.stg.solitaire.cards.Card.Suit;, import ca.mcgill.cs.stg.solitaire.cards.Deck;, import ca.mcgill.cs.stg.solitaire.model.GameModel.StackIndex;, , public class TestWorkingStackManager, {, 	private WorkingStackManager aWorkingStackManager = new WorkingStackManager();, 	private static final Card CKC = Card.get(Rank.KING, Suit.CLUBS);, 	private static final Card CAC = Card.get(Rank.ACE, Suit.CLUBS);, 	private static final Card C5D = Card.get(Rank.FIVE, Suit.DIAMONDS);, 	private static final Card C4D = Card.get(Rank.FOUR, Suit.DIAMONDS);, 	private static final Card C4C = Card.get(Rank.FOUR, Suit.CLUBS);, 	private static final Card C4S = Card.get(Rank.FOUR, Suit.SPADES);, 	private static final Card C4H = Card.get(Rank.FOUR, Suit.HEARTS);, 	private static final Card C3H = Card.get(Rank.THREE, Suit.HEARTS);, 	, 	@Test, 	public void testInitialize(), 	{, 		for( StackIndex index : StackIndex.values()), 		{, 			assertEquals(0, aWorkingStackManager.getStack(index).length);, 		}, 		Deck deck = new Deck();, 		aWorkingStackManager.initialize(deck);, 		assertEquals(1,aWorkingStackManager.getStack(StackIndex.FIRST).length);, 		assertEquals(2,aWorkingStackManager.getStack(StackIndex.SECOND).length);, 		assertEquals(3,aWorkingStackManager.getStack(StackIndex.THIRD).length);, 		assertEquals(4,aWorkingStackManager.getStack(StackIndex.FOURTH).length);, 		assertEquals(5,aWorkingStackManager.getStack(StackIndex.FIFTH).length);, 		assertEquals(6,aWorkingStackManager.getStack(StackIndex.SIXTH).length);, 		assertEquals(7,aWorkingStackManager.getStack(StackIndex.SEVENTH).length);, 		assertEquals(24, deck.size());, 		deck.shuffle();, 		aWorkingStackManager.initialize(deck);, 		assertEquals(1,aWorkingStackManager.getStack(StackIndex.FIRST).length);, 		assertEquals(2,aWorkingStackManager.getStack(StackIndex.SECOND).length);, 		assertEquals(3,aWorkingStackManager.getStack(StackIndex.THIRD).length);, 		assertEquals(4,aWorkingStackManager.getStack(StackIndex.FOURTH).length);, 		assertEquals(5,aWorkingStackManager.getStack(StackIndex.FIFTH).length);, 		assertEquals(6,aWorkingStackManager.getStack(StackIndex.SIXTH).length);, 		assertEquals(7,aWorkingStackManager.getStack(StackIndex.SEVENTH).length);, 		assertEquals(24, deck.size());, 	}, 	, 	@Test, 	public void testContains(), 	{, 		assertFalse(aWorkingStackManager.contains(CAC, StackIndex.FIRST));, 		aWorkingStackManager.push(CAC, StackIndex.FIRST);, 		assertTrue(aWorkingStackManager.contains(CAC, StackIndex.FIRST));, 		aWorkingStackManager.push(C3H, StackIndex.FIRST);, 		aWorkingStackManager.push(C5D, StackIndex.FIRST);, 		assertTrue(aWorkingStackManager.contains(C5D, StackIndex.FIRST));, 	}, 	, 	@Test, 	public void testRemoveSequence(), 	{, 		aWorkingStackManager.push(Card.get(Rank.TEN, Suit.CLUBS), StackIndex.FIRST);, 		aWorkingStackManager.push(Card.get(Rank.NINE, Suit.DIAMONDS), StackIndex.FIRST);, 		aWorkingStackManager.push(Card.get(Rank.EIGHT, Suit.CLUBS), StackIndex.FIRST);, 		aWorkingStackManager.push(Card.get(Rank.SEVEN, Suit.DIAMONDS), StackIndex.FIRST);, 		aWorkingStackManager.push(Card.get(Rank.SIX, Suit.CLUBS), StackIndex.FIRST);, 		aWorkingStackManager.push(Card.get(Rank.FIVE, Suit.DIAMONDS), StackIndex.FIRST);, 		aWorkingStackManager.push(Card.get(Rank.FOUR, Suit.CLUBS), StackIndex.FIRST);, 		aWorkingStackManager.push(Card.get(Rank.THREE, Suit.DIAMONDS), StackIndex.FIRST);, 		Card[] sequence = aWorkingStackManager.removeSequence(Card.get(Rank.NINE, Suit.DIAMONDS), StackIndex.FIRST);, 		CardView[] stack = aWorkingStackManager.getStack(StackIndex.FIRST);, 		assertEquals(1, stack.length);, 		assertEquals(Card.get(Rank.TEN, Suit.CLUBS), stack[0].getCard());, 		assertEquals( 7, sequence.length);, 		assertEquals( Card.get(Rank.NINE, Suit.DIAMONDS), sequence[0]);, 		assertEquals( Card.get(Rank.EIGHT, Suit.CLUBS), sequence[1]);, 	}, 	, 	@Test, 	public void testCanMoveTo(), 	{, 		assertFalse(aWorkingStackManager.canMoveTo(CAC, StackIndex.FIRST)); , 		assertTrue(aWorkingStackManager.canMoveTo(CKC, StackIndex.FIRST)); , 		aWorkingStackManager.push(C5D, StackIndex.FIRST);, 		assertFalse(aWorkingStackManager.canMoveTo(CAC, StackIndex.FIRST));, 		assertFalse(aWorkingStackManager.canMoveTo(C4D, StackIndex.FIRST));, 		assertFalse(aWorkingStackManager.canMoveTo(C4H, StackIndex.FIRST));, 		assertTrue(aWorkingStackManager.canMoveTo(C4C, StackIndex.FIRST));, 		assertTrue(aWorkingStackManager.canMoveTo(C4S, StackIndex.FIRST));, 	}, 	, 	@Test, 	public void testGetSequence(), 	{, 		aWorkingStackManager.push(C5D, StackIndex.SECOND);, 		Card[] sequence = aWorkingStackManager.getSequence(C5D, StackIndex.SECOND);, 		assertEquals(1, sequence.length);, 		assertEquals(C5D, sequence[0]);, 		aWorkingStackManager.push(C4C, StackIndex.SECOND);, 		sequence = aWorkingStackManager.getSequence(C5D, StackIndex.SECOND);, 		assertEquals(2, sequence.length);, 		assertEquals(C5D, sequence[0]);, 		assertEquals(C4C, sequence[1]);, 		sequence = aWorkingStackManager.getSequence(C4C, StackIndex.SECOND);, 		assertEquals(1, sequence.length);, 		assertEquals(C4C, sequence[0]);, 	}, }]
[/*******************************************************************************,  * Solitaire,  *,  * Copyright (C) 2016 by Martin P. Robillard,  *,  * See: https://github.com/prmr/Solitaire,  *,  * This program is free software: you can redistribute it and/or modify,  * it under the terms of the GNU General Public License as published by,  * the Free Software Foundation, either version 3 of the License, or,  * (at your option) any later version.,  *,  * This program is distributed in the hope that it will be useful,,  * but WITHOUT ANY WARRANTY; without even the implied warranty of,  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the,  * GNU General Public License for more details.,  *,  * You should have received a copy of the GNU General Public License,  * along with this program.  If not, see <http://www.gnu.org/licenses/>.,  *******************************************************************************/, package ca.mcgill.cs.stg.solitaire.model;, , import java.lang.reflect.Method;, , import ca.mcgill.cs.stg.solitaire.cards.Deck;, , /**,  * Models a deck of 52 cards that is not ,  * shuffled so that the cards drawn can be predicted,,  * in order of suit then rank.,  */, public class TestDeck extends Deck, {, 	/**, 	 * Only resets the deck without shuffling it., 	 */, 	@Override, 	public void shuffle(), 	{, 		try, 		{, 			Method reset = Deck.class.getDeclaredMethod("reset");, 			reset.setAccessible(true);, 			reset.invoke(this, new Object[0]);, 		}, 		catch( Exception pException ), 		{, 			pException.printStackTrace();, 		}, 	}, }]
[public class ListaLigada<E> implements ILista<E>{,     class Nodo<U>{ // classe aninhada (só é visível dentro desta classe),         public U dado;,         public Nodo<U> prox;,         ,         public Nodo(U umDado){,             dado = umDado;,             prox = null;,         },     },     ,     private Nodo<E> prim;,     private Nodo<E> ult;,     private int cont;,     ,     private int ctOp;,     ,     public ListaLigada(){,         prim = null;,         ult = null;,         cont = 0;,         resetContaOperacoes();,     }, ,     public ListaLigada(int tam){,         prim = null;,         ult = null;,         cont = 0;,         resetContaOperacoes();,     },     ,     public void resetContaOperacoes(){,         ctOp = 0;,     },     ,     public int totalOperacoes(){,         return(ctOp);,     }, ,     public boolean add(E umDado){,         Nodo<E> novo = new Nodo<>(umDado);,         if (prim == null){,             prim = novo;,         }else{,             ult.prox = novo;,         },         ult = novo; ctOp++;,         cont++;,         return(true);,     },     ,     public E get(int i){,         if (i<0 || i>=cont){,             return(null);,         }else{,             Nodo<E> aux = prim;,             while(i>0){,                 aux = aux.prox; ctOp++;,                 i--;,             },             return(aux.dado);,         },     }    , ,     public boolean set(E element,int pos){,         if (pos<0 || pos>=cont){,             return(false);,         }else{,             Nodo<E> aux = prim;,             while(pos>0){,                 aux = aux.prox; ctOp++;,                 pos--;,             },             aux.dado = element;,             return(true);,         },     },     ,     public int size(){,         return(cont);,     }, ,     public boolean isFull(){,         return(false);,     },     ,     public boolean isEmpty(){,         return(prim==null);,     },     ,    	private Nodo<E> getNodo(int pos){, 		int p = 0;, 		Nodo<E> aux = prim; ctOp++;, 		while(p < pos){, 			aux = aux.prox;  ctOp++;, 			p++;, 			if (aux == null){, 				return(null);, 			}, 		}, 		return(aux);, 	} , ,     public boolean ins(E element,int pos){, 	    if(pos < 0 || pos > size()){, 	    	return false;, 	    }, 	    Nodo<E> novo = new Nodo<>(element);, 	    if(pos == 0){, 	    	novo.prox = prim; ctOp++;, 	    	prim = novo;, 	    }else{, 	    	Nodo<E> ins = getNodo(pos-1);, 	    	novo.prox = ins.prox;  ctOp++;, 	    	ins.prox = novo;, 	    }, 	    cont++;,         return(true);,     },     ,     public boolean remove(int i){, 	    Nodo<E> old;, 	    , 	    if(i < 0 || i > size()){, 	    	return false;, 	    }, 	    if (i == 0){, 	    	old = prim;, 	    	prim = prim.prox; ctOp++;, 	    	if (size() == 1) {, 	    		ult = null;, 	    	} , 	    } else {, 	    	Nodo<E> rem = getNodo(i-1);, 	    	old = rem.prox;, 	    	rem.prox = old.prox; ctOp++;, 	    	if (i == size()-1) {, 	    		ult = rem;, 	    	}, 	    }	    , 	    cont--;, 	    return true;,     },     ,     @Override,     public String toString(){,         String str = "";,         if (prim != null){,             Nodo<E> aux = prim;,             do{,                 str = str+aux.dado+" ";,                 aux = aux.prox;,             }while(aux != null);,         },         return str;,     },   },   ,         /*,         for(int i=0; i<size(); i++),         {,         	str = str + get(i) + " ";,         }*/,   ,   ,   ,   ,   ,   ,   ,   ,   ]
[interface ILista<E>{,     boolean add(E element);,     boolean set(E element,int pos);,     boolean ins(E element,int pos);,     boolean remove(int pos);,     E get(int pos);,     int size();,     boolean isFull();,     boolean isEmpty();,     ,     void resetContaOperacoes();,     int totalOperacoes();, }, ]
[public class ListaArr<E> implements ILista<E>{, 	private E[] elements;, 	private int last;, 	private int MAX;, 	, 	private int ctOp; // Contador de operacoes, 	, 	public ListaArr(){, 	    MAX = 100;, 	    inicializa();, 	} , 	, 	public ListaArr(int max){, 	    MAX = max;, 	    inicializa();, 	}, 	,     private void inicializa(){, 		elements = (E[])(new Object[MAX]);, 		last = 0;, 		resetContaOperacoes();,     },         ,     public void resetContaOperacoes(){,         ctOp = 0;,     },     ,     public int totalOperacoes(){,         return(ctOp);,     }, 	, 	public boolean isFull(){, 		return(last >= MAX);, 	}, 	, 	public boolean isEmpty(){, 		return(last == 0);, 	}, 	, 	public int size(){, 		return(last);, 	}, , 	public boolean add(E element){, 		if (last >= MAX){, 			return(false);, 		}else{, 			elements[last] = element; ctOp++;, 			last++;, 			return true;, 		}, 	}, , 	public boolean set(E element, int pos){, 		if (pos < 0 || pos >= last){, 			return false;, 		}else{, 			elements[pos] = element; ctOp++;, 			return true;, 		}, 	}, 		, 	public boolean ins(E element, int pos){, 		if (pos < 0 || pos >= last){, 			return false;, 		}else{, 		    for(int i=last; i>pos; i--){, 			    elements[i] = elements[i-1]; ctOp++;, 			}, 			elements[pos] = element; ctOp++;, 			last++;, 			return true;, 		}, 	}, 		, 	public boolean remove(int pos){, 		if (pos < 0 || pos >= last){, 			return false;, 		}else{, 		    for(int i=pos; i<last-1; i++){, 			    elements[i] = elements[i+1]; ctOp++;, 			}, 			last--;, 			return true;, 		}, 	}, 	, 	public E get(int i){, 		if (i<0 || i>=last){, 			return null;, 		}else{, 		    ctOp++;, 			return(elements[i]); , 		}, 	}, }]
[import java.util.*;, , public class AppTestP{,   public static void main(String args[]) {,     int TAM = 100;,     ILista<Integer> lista = new ListaLigada<>(TAM);,     //ILista<Integer> lista = new ListaArr<>(TAM);,     Random gerador = new Random();, ,     // Insere TAM elementos no final da lista,     for (int i = 0; i < TAM; i++) {,         int x = gerador.nextInt(100);,         lista.add(x);,     },     // Lista os elementos da lista,     System.out.println("Lista apos remocao");,     for (int i = 0; i < lista.size(); i++) {,         System.out.print(lista.get(i)+" ");,     },     System.out.println("\n");,     ,     // Remove metade dos elementos do inicio da lista,     for (int i = 0; i < lista.size() / 2; i++) {,         lista.remove(0);,     },     // Lista os elementos remanescentes na lista,     System.out.println("Lista apos remocao");,     for (int i = 0; i < lista.size(); i++) {,         System.out.print(lista.get(i)+" ");,     },     System.out.println("\n");,     ,     // Exibe o total de operações efetuadas,     System.out.println("Total de operações para "+TAM+" valores usando "+,                         lista.getClass().getName().toString()+": "+lista.totalOperacoes());,   }, }, ]
[import java.util.*;, import java.util.Iterator;, , public class ListaLigada<E> implements ILista<E>{,     class Nodo<U>{ // classe aninhada (só é visível dentro desta classe),         public U dado;,         public Nodo<U> prox;,         ,         public Nodo(U umDado){,             dado = umDado;,             prox = null;,         },     }, ,     class IteratorListaLigada<E> implements Iterator<E>{,         private Nodo<E> corrente;, ,         public IteratorListaLigada(){,             corrente = (Nodo<E>) prim;,         }, ,         public boolean hasNext(){,             return !(corrente == null);,         }, ,         public E next(){,             E dado = corrente.dado;ctOp++;,             corrente = corrente.prox;,             return dado;,         },     },     ,     private Nodo<E> prim;,     private Nodo<E> ult;,     private int cont;,     ,     private int ctOp;,     ,     public ListaLigada(){,         prim = null;,         ult = null;,         cont = 0;,         resetContaOperacoes();,     }, ,     public ListaLigada(int tam){,         prim = null;,         ult = null;,         cont = 0;,         resetContaOperacoes();,     },     ,     public void resetContaOperacoes(){,         ctOp = 0;,     },     ,     public int totalOperacoes(){,         return(ctOp);,     },     public Iterator getIterator(){,         return new IteratorListaLigada();,     },     public boolean add(E umDado){,         Nodo<E> novo = new Nodo<>(umDado);,         if (prim == null){,             prim = novo;,         }else{,             ult.prox = novo;,         },         ult = novo; ctOp++;,         cont++;,         return(true);,     },     ,     public E get(int i){,         if (i<0 || i>=cont){,             return(null);,         }else{,             Nodo<E> aux = prim;,             while(i>0){,                 aux = aux.prox; ctOp++;,                 i--;,             },             return(aux.dado);,         },     }    , ,     public boolean set(E element,int pos){,         if (pos<0 || pos>=cont){,             return(false);,         }else{,             Nodo<E> aux = prim;,             while(pos>0){,                 aux = aux.prox; ctOp++;,                 pos--;,             },             aux.dado = element;,             return(true);,         },     },     ,     public int size(){,         return(cont);,     }, ,     public boolean isFull(){,         return(false);,     },     ,     public boolean isEmpty(){,         return(prim==null);,     },     ,    	private Nodo<E> getNodo(int pos){, 		int p = 0;, 		Nodo<E> aux = prim; ctOp++;, 		while(p < pos){, 			aux = aux.prox;  ctOp++;, 			p++;, 			if (aux == null){, 				return(null);, 			}, 		}, 		return(aux);, 	} , ,     public boolean ins(E element,int pos){, 	    if(pos < 0 || pos > size()){, 	    	return false;, 	    }, 	    Nodo<E> novo = new Nodo<>(element);, 	    if(pos == 0){, 	    	novo.prox = prim; ctOp++;, 	    	prim = novo;, 	    }else{, 	    	Nodo<E> ins = getNodo(pos-1);, 	    	novo.prox = ins.prox;  ctOp++;, 	    	ins.prox = novo;, 	    }, 	    cont++;,         return(true);,     },     ,     public boolean remove(int i){, 	    Nodo<E> old;, 	    , 	    if(i < 0 || i > size()){, 	    	return false;, 	    }, 	    if (i == 0){, 	    	old = prim;, 	    	prim = prim.prox; ctOp++;, 	    	if (size() == 1) {, 	    		ult = null;, 	    	} , 	    } else {, 	    	Nodo<E> rem = getNodo(i-1);, 	    	old = rem.prox;, 	    	rem.prox = old.prox; ctOp++;, 	    	if (i == size()-1) {, 	    		ult = rem;, 	    	}, 	    }	    , 	    cont--;, 	    return true;,     },     ,     @Override,     public String toString(){,         String str = "";,         if (prim != null){,             Nodo<E> aux = prim;,             do{,                 str = str+aux.dado+" ";ctOp++;,                 aux = aux.prox;,             }while(aux != null);,         },         return str;,     },   },   ,         /*,         for(int i=0; i<size(); i++),         {,         	str = str + get(i) + " ";,         }*/,   ,   ,   ,   ,   ,   ,   ,   ,   ]
[import java.util.Iterator;, , interface ILista<E>{,     boolean add(E element);,     boolean set(E element,int pos);,     boolean ins(E element,int pos);,     boolean remove(int pos);,     E get(int pos);,     int size();,     boolean isFull();,     boolean isEmpty();,     Iterator getIterator();,     ,     void resetContaOperacoes();,     int totalOperacoes();, }, ]
[import java.util.Iterator;, , public class ListaArr<E> implements ILista<E>{, 	private E[] elements;, 	private int last;, 	private int MAX;, , 	class IteratorListaArranjo<E> implements Iterator<E>{, 		private int corrente;, , 		public IteratorListaArranjo(){, 			corrente = 0;, 		}, , 		public boolean hasNext(){, 			return corrente < last;, 		}, , 		public E next(){, 			E dado = (E) elements[corrente]; ctOp++;, 			corrente++;, 			return dado;, 		}, , 		public void remove(){}, 	}, , 	private int ctOp; // Contador de operacoes, 	, 	public ListaArr(){, 	    MAX = 100;, 	    inicializa();, 	} , 	, 	public ListaArr(int max){, 	    MAX = max;, 	    inicializa();, 	}, 	,     private void inicializa(){, 		elements = (E[])(new Object[MAX]);, 		last = 0;, 		resetContaOperacoes();,     },         ,     public void resetContaOperacoes(){,         ctOp = 0;,     },     ,     public int totalOperacoes(){,         return(ctOp);,     }, , 	public Iterator getIterator(){, 		return new IteratorListaArranjo<>();, 	}, , 	public boolean isFull(){, 		return(last >= MAX);, 	}, 	, 	public boolean isEmpty(){, 		return(last == 0);, 	}, 	, 	public int size(){, 		return(last);, 	}, , 	public boolean add(E element){, 		if (last >= MAX){, 			return(false);, 		}else{, 			elements[last] = element; ctOp++;, 			last++;, 			return true;, 		}, 	}, , 	public boolean set(E element, int pos){, 		if (pos < 0 || pos >= last){, 			return false;, 		}else{, 			elements[pos] = element; ctOp++;, 			return true;, 		}, 	}, 		, 	public boolean ins(E element, int pos){, 		if (pos < 0 || pos >= last){, 			return false;, 		}else{, 		    for(int i=last; i>pos; i--){, 			    elements[i] = elements[i-1]; ctOp++;, 			}, 			elements[pos] = element; ctOp++;, 			last++;, 			return true;, 		}, 	}, 		, 	public boolean remove(int pos){, 		if (pos < 0 || pos >= last){, 			return false;, 		}else{, 		    for(int i=pos; i<last-1; i++){, 			    elements[i] = elements[i+1]; ctOp++;, 			}, 			last--;, 			return true;, 		}, 	}, 	, 	public E get(int i){, 		if (i<0 || i>=last){, 			return null;, 		}else{, 		    ctOp++;, 			return(elements[i]); , 		}, 	}, , 	public String toStting(){, 		String aux = "";, 		for (int i = 0; i<size(); i++){, 			aux = aux + elements[i] + " "; ctOp++;, 		}, 		return aux;, 	}, }]
[import java.util.*;, , public class AppTestP{,   public static void main(String args[]) {,     int TAM = 50000;,     ///ILista<Integer> lista = new ListaLigada<>(TAM);,     ILista<Integer> lista = new ListaArr<>(TAM);,     Random gerador = new Random();, ,     // Insere TAM elementos no final da lista,     for (int i = 0; i < TAM; i++) {,         int x = gerador.nextInt(100);,         lista.add(x);,     },     // Lista os elementos da lista,     System.out.println("Lista antes da remocao");,     for (int i = 0; i < lista.size(); i++) {,         System.out.print(lista.get(i)+" ");,     },     System.out.println("\n");, ,     // Remove metade dos elementos do inicio da lista,       for (int i = 0; i < lista.size() / 2; i++) {,         lista.remove(0);,     },     // Lista os elementos remanescentes na lista,     System.out.println("Lista apos remocao");,     for (int i = 0; i < lista.size(); i++) {,         System.out.print(lista.get(i)+" ");,     },     System.out.println("\n");,     // Exibe o total de operações efetuadas,     System.out.println("Total de operações para "+TAM+" valores usando "+,                         lista.getClass().getName().toString()+": "+lista.totalOperacoes());,   }, }, ]
[import java.util.*;, , public class App{,     public static void impLista(ILista l){,         for(int i=0; i<l.size(); i++){,             System.out.print("["+l.get(i)+"]");,         },         System.out.println("\nTamanho da lista: "+l.size());        ,     },     ,     public static void main(String args[]){,         Random nros = new Random();,         int QTDADE = 100;, ,         //ILista lst = new ListaLigada();,         ILista lst = new ListaArranjo();,         ,         for(int i=0;i<QTDADE;i++){,             lst.add(nros.nextInt(1000));,         },                 ,         impLista(lst);,         ,         lst.set(35,1);,         lst.set(999,QTDADE-1);,         ,         impLista(lst);,         ,         lst.remove(0);,         lst.insert(36,2);,         ,         impLista(lst);,         ,     }, }, ,         ]
[, public class ListaArranjo<E> implements ILista<E> {, 	private E[] elements;, 	private int last;, 	private static final int MAX = 100;, 	, 	public ListaArranjo(){, 		elements = (E[])(new Object[MAX]);, 		last = 0;, 	} , 	, 	@Override, 	public boolean isFull(){, 		return(last >= MAX);, 	}, 	, 	@Override, 	public boolean isEmpty(){, 		return(last == 0);, 	}, , 	@Override, 	public int size(){, 		return(last);, 	}, 	, 	@Override, 	public boolean add(E element){, 		if (last >= MAX){, 			return(false);, 		}else{, 			elements[last] = element;, 			last++;, 			return true;, 		}, 	}, 	, 	@Override, 	public boolean set(E element, int pos){, 		if (pos < 0 || pos >= last){, 			return false;, 		}else{, 			elements[pos] = element;, 			return true;, 		}, 	}, 		, 	@Override, 	public E get(int i){, 		if (i<0 || i>=last){, 			return null;, 		}else{, 			return(elements[i]);, 		}, 	}, 	, 	@Override, 	public void remove(E element){, 	    // To do ..., 	}, 	, 	@Override, 	public E remove(int i){, 	    // To do ..., 	    return null;, 	}, 	, 	@Override, 	public void insert(E element, int pos){, 	    // To do ..., 	}, }]
[, public class ListaLigada<E> implements ILista<E> {,     class Nodo<T>{,     	public T dado;,     	public Nodo<T> prox;,     ,     	public Nodo(T umDado){,     		dado = umDado;,     		prox = null;,     	},     },     , 	private Nodo<E> prim,ult;, 	private int size;, 	, 	private Nodo<E> getNodo(int pos){, 		int p = 0;, 		Nodo<E> aux = prim;, 		while(p < pos){, 			aux = aux.prox;, 			p++;, 			if (aux == null){, 				return(null);, 			}, 		}, 		return(aux);, 	}, 	, 	public ListaLigada(){, 		prim = null;, 		ult = null;, 		size = 0;, 	} , 	, 	@Override, 	public boolean isFull(){, 		return(false);, 	}, 	, 	@Override, 	public boolean isEmpty(){, 		return(size == 0);, 	}, 	, 	@Override, 	public int size(){, 		return(size);, 	}, 	, 	@Override, 	public boolean add(E element){, 		// Cria o novo nodo, 		Nodo<E> novo = new Nodo<>(element);, 		// Se a lista esta vazia, este e o primeiro, 		if (prim == null){, 			prim = novo;, 			ult = novo;, 		}else{ // se a lista nao esta vazia, encadeia no final, 			ult.prox = novo;, 			ult = novo;, 		}, 		size++;, 		return(true);, 	}, 	, 	@Override, 	public boolean set(E element, int pos){, 		if (pos < 0 || pos >= size()){, 			return false;, 		}else{, 			Nodo<E> nodo = getNodo(pos);, 			nodo.dado = element;, 			return true;, 		}, 	}, 		, 	@Override, 	public E get(int i){, 		if (i<0 || i>=size()){, 			return null;, 		}else{, 			return(getNodo(i).dado);, 		}, 	}, 	, 	@Override, 	public void remove(E element){, 	    // To do ..., 	}, 	, 	@Override, 	public E remove(int i){, 	    // To do ..., 	    return null;, 	}, 	, 	@Override, 	public void insert(E element, int pos){, 	    // To do ..., 	}, 	, }]
[public interface ILista<E> {, 	boolean add(E element);, 	boolean set(E element, int pos);, 	E get(int i);, 	void remove(E element);, 	E remove(int i);, 	void insert(E element, int pos);, 	int size();, 	boolean isFull();, 	boolean isEmpty();, }]
[import java.util.Scanner;, , public class App{,     private int MAXQ = 4;,     private ILista<Questao> questoes;,     ,     public App(){,         questoes = new ListaArranjo<>(MAXQ);, ,         Questao questao = new Questao();,         questao.definePergunta("Quem inventou o tear automatizado?");,         questao.defineResposta("Jacquardt");,         questoes.add(questao);,         ,         questao = new Questao();,         questao.definePergunta("Quem foi um dois principais matemáticos a definir as bases da computação?");,         questao.defineResposta("Allan Turing");,         questoes.add(questao);,         ,         QuestEscSimples qes = new QuestEscSimples();,         qes.definePergunta("Qual o lanche preferido do Guilherme?");,         qes.insereAlternativa("Bolacha",false);,         qes.insereAlternativa("Omelete",true);,         qes.insereAlternativa("Pizza",false);,         questoes.add(qes);,         ,         qes = new QuestEscSimples();,         qes.definePergunta("Quais são os tipos de exceções da linguagem de programacao Java?");,         qes.insereAlternativa("Verificadas e não verificadas",true);,         qes.insereAlternativa("Exception e Error",false);,         qes.insereAlternativa("Previstas e não previstas",false);,         qes.insereAlternativa("Catchable e Don't catchable",false);,         questoes.add(qes);, ,         //QuestMat qm = new QuestMat();,         //qm.definePergunta("Quanto é 2+2?");,         //qm.defineResposta("4");,         //questoes.add(qm);,     },     ,     public int getMAXQ(){,         return(MAXQ);,     },     ,     public void fazPergunta(int nro){,         Scanner s = new Scanner(System.in);,         ,         System.out.println(questoes.get(nro).textoQuestao());,         String resp = s.nextLine();,         if (questoes.get(nro).verificaResposta(resp)){,             System.out.println("Resposta correta!!");,         }else{,             System.out.println("Resposta errada!!");,         },     },       ,     public static void main(String args[]){     ,         App ap = new App();,         for(int i=0;i<ap.getMAXQ();i++){,             ap.fazPergunta(i);,         },     }, }        ,         ]
[, public class Questao {,     private String textoQuestao;,     private String textoResposta;,     , 	public Questao() {, 		this.textoQuestao = null;, 		this.textoResposta = null;, 	}, 	, 	public void definePergunta(String umTexto){, 		textoQuestao = umTexto;, 	}, 	, 	public void defineResposta(String umTexto){, 		textoResposta = umTexto;, 	}, 	, 	public String textoQuestao(){, 		return(textoQuestao);, 	}, 	, 	public boolean verificaResposta(String resposta){, 		return resposta.equals(textoResposta);, 	}, ,     @Override, 	public String toString(){, 	    return(textoQuestao()+"\n"+textoResposta);, 	}, }]
[, public class ListaArranjo<E> implements ILista<E> {, 	private E[] elements;, 	private int last;, 	private int MAX;, 	, 	public ListaArranjo(int tam){, 	    MAX = tam;, 		elements = (E[])(new Object[MAX]);, 		last = 0;, 	} , 	, 	@Override, 	public boolean isFull(){, 		return(last >= MAX);, 	}, 	, 	@Override, 	public boolean isEmpty(){, 		return(last == 0);, 	}, 	, 	@Override, 	public boolean add(E element){, 		if (last >= MAX){, 			return(false);, 		}else{, 			elements[last] = element;, 			last++;, 			return true;, 		}, 	}, 		, 	@Override, 	public int size(){, 		return(last);, 	}, 	, 	@Override, 	public E get(int i){, 		if (i<0 || i>=last){, 			return null;, 		}else{, 			return(elements[i]);, 		}, 	}, }]
[public class QuestMat extends Questao{,     @Override,     public void defineResposta(String resp){,         try{,             double x = Double.parseDouble(resp);,         }catch(NumberFormatException e){,             super.defineResposta("0");,             return;,         },         super.defineResposta(resp);,     }, }      ]
[public interface ILista<E> {, 	boolean add(E element);, 	int size();, 	E get(int i);, 	boolean isFull();, 	boolean isEmpty();, }]
[public class QuestEscSimples extends Questao{,     private ILista<String> alt;,     ,     public QuestEscSimples(){,         alt = new ListaArranjo(10);,     },     ,     public void insereAlternativa(String texto,boolean correta){,         alt.add(texto);,         if (correta){,             defineResposta(""+alt.size());,         },     },     ,     ,     @Override,     public String textoQuestao(){,       String txt = "";,       txt = txt + super.textoQuestao()+"\n";,       for(int i=0;i<alt.size();i++){,           txt += (i+1)+") "+alt.get(i)+"\n";,       },       return(txt);,     }, }]
[public class EmbConica extends Embalagem{,     public int raioBase,altura;,     ,     public EmbConica(int umCod,double umPreco,int umRB,int umaAlt){,         super(umCod,umPreco);,         raioBase = umRB;,         altura = umaAlt;,     },     ,     @Override,     public double getVolume(){,         return((Math.PI*Math.pow(raioBase,2)*altura)/3);,     }, }, ]
[public class App{,   public static void main(String args[]){,       //Embalagem e = new Embalagem(10,112); ,       Embalagem er = new EmbRetangular(20,250,10,10,30);,       Embalagem ec = new EmbConica(30,300,15,50);,       ,       //System.out.println(e);,       System.out.println(er);,       System.out.println(ec);,   }, }]
[public class EmbRetangular extends Embalagem{,   private int lado1,lado2,altura;,   ,   public EmbRetangular(int umCod,double umPreco,int l1,int l2,int alt){,       super(umCod,umPreco);,       lado1 = l1;,       lado2 = l2;,       altura = alt;,   },   ,   @Override,   public double getVolume(){,       int base = lado1*lado2;,       return(base*altura);,   }, }]
[public abstract class Embalagem{,     private int codigo;  ,     private double precoUnit;,     ,     public Embalagem(int umCod,double umPreco){,         codigo = umCod;,         precoUnit = umPreco;,     },     ,     public int getCodigo(){,         return(codigo);,     },     ,     public double getPreco(){,         return(precoUnit);,     },     ,     public abstract double getVolume();,     /*public double getVolume(){,         return(0.0);,     },     */,     @Override,     public String toString(){,         return(getClass().getName()+": codigo: "+getCodigo()+", volume: "+getVolume()+", preco: R$"+getPreco());,     }, }]
[/**,  * Created by Andrius Lima on 10-Aug-16.,  */, import java.util.*;, , public class App {,     private Scanner sc;, ,     public App() {,         sc = new Scanner(System.in);,     }, ,     private String menu[] = {,             "<1> - Entra veiculo",,             "<2> - Consulta box",,             "<3> - Sai veiculo",,             "<4> - Fim",,             " ",,             "Digite sua opcao:",     };, ,     private void impMenu(Estacionamento e){,         System.out.println("\n");,         System.out.println("Estacionamento ACME");,         System.out.println("Total de vagas: "+e.totalDeVagas());,         System.out.println("Veiculos estacionados: "+e.veiculosEstacionados());,         System.out.println("Vagas livres: "+(e.totalDeVagas()-e.veiculosEstacionados()));,         System.out.println();,         for(String op:menu){,             System.out.println(op);,         },     }, ,     private int getOpcao(){,         int op = sc.nextInt();,         if (op < 0 || op > 4){,             return(-1);,         }else{,             return(op);,         },     }, ,     public void entraVeiculo(Estacionamento e){,         System.out.println("Digite a placa do veículo");,         String placa = sc.next();,         System.out.println("Digite o box onde estacionou");,         int box = sc.nextInt();,         box = e.entraVeiculo(placa,box);,         if (box == -1){,             System.out.println("Box invalido ou ocupado !!");,         }else{,             System.out.println("Veiculo "+placa+" estacionado no box: "+box);,         },     }, ,     public void consultaBox(Estacionamento e){,         System.out.println("Digite o box");,         int box = sc.nextInt();,         String placa = e.getVeiculo(box);,         if (placa == null){,             System.out.println("Box inexistente ou vazio!!");,         }else{,             System.out.println("Placa: "+placa);,         },     }, ,     public void saiVeiculo(Estacionamento e){,         System.out.println("Digite o box");,         int box = sc.nextInt();,         String placa = e.saiVeiculo(box);,         if (placa == null){,             System.out.println("Box vazio ou inválido !!");,         }else{,             System.out.println("Veiculo placa: "+placa+" liberado");,         },     }, ,     public void executa(Estacionamento est,int op){,         switch(op){,             case -1:,                 System.out.println("Opcao invalida !! Tente novamente !!");,                 System.out.println("\n");,                 break;,             case 1:,                 entraVeiculo(est);,                 break;,             case 2:,                 consultaBox(est);,                 break;,             case 3:,                 saiVeiculo(est);,                 break;,             case 4:,                 System.out.println("Estacionamento fechado");,                 System.exit(0);,         },     }, ,     public static void main(String[] args) {,         App a = new App();,         //Estacionamento estacionamento = new EstacImplConv(2000);,         Estacionamento estacionamento = new EstacImplEsparca(2000);,         while(true){,             a.impMenu(estacionamento);,             a.executa(estacionamento,a.getOpcao());,         },     }, , }]
[/**,  * Created by Andrius Lima on 10-Aug-16.,  */, interface Estacionamento {,     ///void inicializa(int totalVagas); Não encontrei aplicação no programa,     int entraVeiculo(String placa, int box);,     String getVeiculo(int box);,     String saiVeiculo(int box);,     //int saiVeiculo(String placa); Não encontrei aplicação no programa.,     int veiculosEstacionados();,     int totalDeVagas();, , }]
[/**,  * Created by Andrius Lima on 10-Aug-16.,  */, public class EstacImplEsparca implements Estacionamento{,     private int veiculos;,     private int totalVagas;,     private boolean[] vagas;,     private String[] placas;, ,     public EstacImplEsparca(int tVagas){,         this.veiculos = 0;,         this.totalVagas = tVagas;,         this.vagas = new boolean[this.totalVagas];,         this.placas = new String[this.totalVagas];,         for (int i = 0; i < vagas.length; i++){,             vagas[i] = false;,         },     }, ,     public int entraVeiculo(String placa, int box){,         if (vagas[box-1]) {,             return -1;,         } else {,             vagas[box-1] = true;,             placas[box-1] = placa;,             --this.totalVagas;,             ++veiculos;,             return box;,         },     }, ,     public String getVeiculo(int box) {,         return placas[box-1];,     }, ,     public String saiVeiculo(int box) {,         if (placas[box-1] != null){,             ++this.totalVagas;,             --veiculos;,             String placa = placas[box-1];,             placas[box-1] = null;,             vagas[box-1] = false;,             return placa;,         },         else{,             return null;,         },     },     public int veiculosEstacionados() {,         return this.veiculos;,     },     public int totalDeVagas() {,         return this.totalVagas;,     }, , }]
[public class CxRefrigerada extends Caixa{,     private boolean energia;,         ,     public CxRefrigerada(String umId,int umPeso){,         super(umId,umPeso);,         energia = false;,     },         ,     public void ligaEnergia(){,         energia = true;,     },     ,     public void desligaEnergia(){,         energia = false;,     },     ,     public boolean ligado(){,         return(energia);,     },     ,     @Override,     public int getPesoMax(){,         return(100);,     },     ,     @Override,     public double getCusto(){,         return(750);,     }, }, ]
[public class CxNormal extends Caixa{    ,     public CxNormal(String umId,int umPeso){,         super(umId,umPeso);,     },         ,     public int getPesoMax(){,         return(1000);,     },     ,     public double getCusto(){,         if (getPeso() <= 200){,             return(getPeso() * 5);,         }else{,           return(((getPeso()-200)*7.5)+(200*5));,         },     }, }, ]
[import java.time.*;, import java.time.temporal.ChronoUnit;, , public class CaixaFactory{,     private static CaixaFactory cf = new CaixaFactory();,     private static int cxId = 0;,     ,     private CaixaFactory(){,     },     ,     public static CaixaFactory getInstance(){,         return(cf);,     },     ,     public Caixa createInstance(TipoCaixa tx,int peso, LocalDate dtVal){,         cxId++;,         String id = "Cx"+cxId;,         switch(tx){,             case NORMAL:,                 return(new CxNormal(id,peso));,             case REFRIGERADA:,                 return(new CxRefrigerada(id,peso));,             case PERECIVEL:,                 return(new CxPerecivel(id,peso,dtVal));,         },         return null;,     },     ,     public Caixa createInstance(TipoCaixa tx,int peso){,         return(createInstance(tx,peso,null));,     }, }, ]
[public enum TipoCaixa{,     NORMAL,PERECIVEL,REFRIGERADA;, }, ]
[public class CxRefrigerada extends Caixa{,     private boolean energia;,         ,     public CxRefrigerada(String umId,int umPeso){,         super(umId,umPeso);,         energia = false;,     },         ,     public void ligaEnergia(){,         energia = true;,     },     ,     public void desligaEnergia(){,         energia = false;,     },     ,     public boolean ligado(){,         return(energia);,     },     ,     @Override,     public int getPesoMax(){,         return(100);,     },     ,     @Override,     public double getCusto(){,         return(750);,     }, }, ]
[import javafx.application.Application;, import javafx.event.ActionEvent;, import javafx.event.EventHandler;, import javafx.scene.Scene;, import javafx.scene.control.Button;, import javafx.scene.control.RadioButton;, import javafx.scene.control.ToggleGroup;, import javafx.scene.control.ComboBox;, import javafx.scene.control.Label;, import javafx.scene.control.PasswordField;, import javafx.scene.control.TextField;, import javafx.scene.control.DatePicker;, import javafx.scene.control.Alert;, import javafx.scene.control.Alert.AlertType;, import javafx.scene.layout.GridPane;, import javafx.scene.layout.HBox;, import javafx.scene.text.Text;, import javafx.geometry.Insets;, import javafx.geometry.Pos;, import javafx.scene.layout.StackPane;, import javafx.scene.text.*;, import javafx.stage.Stage;, import javafx.stage.Modality;, import java.util.Locale;, import javafx.scene.media.AudioClip;, , public class ExibePedidos extends Application{,     private TextField tfId,tfDataPrev,tfDestino,tfQtdCaixas;,     private TextField tfDlgId,tfDlgDataPrev,tfDlgDestino,tfDlgQtdCaixas;,     private TextField tfDlgQtNormal,tfDlgQtRefrigerada,tfDlgQtPerecivel;,     private Stage dlgStage;,   ,     public ExibePedidos(){,     },     ,     private void exibeDados(){,         Pedidos ped = Pedidos.getInstance();,         tfId.setText(ped.getCorrente().getId());,         tfDestino.setText(ped.getCorrente().getLocal().getCidade());,         tfQtdCaixas.setText(""+ped.getCorrente().qtdadeCaixas());,     },         ,     @Override,     public void start(Stage primaryStage) {,         // Define o grid basico,         GridPane grid = new GridPane();,         grid.setAlignment(Pos.CENTER);,         grid.setHgap(20);,         grid.setVgap(10);,         grid.setPadding(new Insets(25, 25, 25, 25));, ,         // Define o título do form,         Text tfTitulo = new Text("Pedidos:");,         tfTitulo.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));,         grid.add(tfTitulo, 0, 0, 2, 1);    ,        ,         // Cria e posiciona ,         grid.add(new Label("Pedido:"), 0, 1);,         tfId = new TextField();,         grid.add(tfId, 1, 1);        ,         grid.add(new Label("Destino:"), 0, 2);,         tfDestino = new TextField();,         grid.add(tfDestino, 1, 2);       ,         grid.add(new Label("Qtdade caixas:"), 0, 3);,         tfQtdCaixas = new TextField();,         grid.add(tfQtdCaixas, 1, 3);        ,      ,         exibeDados();,         ,         // Define os botoes,         Button btPrev = new Button();,         btPrev.setText("<<");,         btPrev.setOnAction(new EventHandler<ActionEvent>() {,             @Override,             public void handle(ActionEvent e) {,                 if (Pedidos.getInstance().getAnterior() == null){,                     Alert alert = new Alert(AlertType.WARNING);,                     alert.setTitle("Atenção !!");,                     alert.setHeaderText(null);,                     alert.setContentText("Este é o primeiro pedido!");,                     alert.showAndWait();,                 }else{,                     exibeDados();,                 },             },         });, ,         Button btNext = new Button();,         btNext.setText(">>");,         btNext.setOnAction(new EventHandler<ActionEvent>() {,             @Override,             public void handle(ActionEvent e) {,                 if (Pedidos.getInstance().getProximo() == null){,                     Alert alert = new Alert(AlertType.WARNING);,                     alert.setTitle("Atenção !!");,                     alert.setHeaderText(null);,                     alert.setContentText("Este é o ultimo pedido!");,                     alert.showAndWait();,                 }else{,                     exibeDados();,                 },             },         });, ,         Button btView = new Button();,         btView.setText("Visualizar");,         btView.setOnAction(new EventHandler<ActionEvent>() {,             @Override,             public void handle(ActionEvent e) {,                 criaDialogoPedido();,             },         });, ,         Button btClose = new Button();,         btClose.setText("Fechar");,         btClose.setOnAction(new EventHandler<ActionEvent>() {,             @Override,             public void handle(ActionEvent e) {,                 primaryStage.close();,             },         });,         ,         // Agrupa os botoes em um HBox e posiciona,         HBox hbBtn = new HBox(30);,         hbBtn.getChildren().add(btPrev);,         hbBtn.getChildren().add(btNext);,         grid.add(hbBtn, 0, 4);,         HBox hbView = new HBox(30);,         hbView.setAlignment(Pos.CENTER);,         hbView.getChildren().add(btView);,         grid.add(hbView, 0, 5);,         HBox hbClose = new HBox(30);,         hbClose.setAlignment(Pos.BOTTOM_RIGHT);,         hbClose.getChildren().add(btClose);,         grid.add(hbClose,1,5);, ,         // Adiciona o painel a cena e exibe        ,         Scene scene = new Scene(grid);,         primaryStage.setTitle("So vai - Transportadora");,         primaryStage.setScene(scene);,         primaryStage.show();,     }, ,     private void criaDialogoPedido(){,         // Define o grid basico,         GridPane grid = new GridPane();,         grid.setAlignment(Pos.CENTER);,         grid.setHgap(20);,         grid.setVgap(10);,         grid.setPadding(new Insets(25, 25, 25, 25));,        ,         // Cria e posiciona ,         grid.add(new Label("Pedido:"), 0, 1);,         tfDlgId = new TextField();,         tfDlgId.setEditable(false);,         grid.add(tfDlgId, 1, 1);        ,         grid.add(new Label("Destino:"), 0, 2);,         tfDlgDestino = new TextField();,         tfDlgDestino.setEditable(false);,         grid.add(tfDlgDestino, 1, 2);       ,         grid.add(new Label("Qtdade caixas:"), 0, 3);,         tfDlgQtdCaixas = new TextField();,         tfDlgQtdCaixas.setEditable(false);,         grid.add(tfDlgQtdCaixas, 1, 3);        ,         grid.add(new Label("Qtdade caixas normais:"), 0, 4);,         tfDlgQtNormal = new TextField();,         tfDlgQtNormal.setEditable(false);,         grid.add(tfDlgQtNormal, 1, 4);        ,         grid.add(new Label("Qtdade caixas refrigeradas:"), 0, 5);,         tfDlgQtRefrigerada = new TextField();,         tfDlgQtRefrigerada.setEditable(false);,         grid.add(tfDlgQtRefrigerada, 1, 5);        ,         grid.add(new Label("Qtdade caixas pereciveis:"), 0, 6);,         tfDlgQtPerecivel = new TextField();,         tfDlgQtPerecivel.setEditable(false);,         grid.add(tfDlgQtPerecivel, 1, 6);        , , ,         Button btClose = new Button();,         btClose.setText("Fechar");,         btClose.setOnAction(new EventHandler<ActionEvent>() {,             @Override,             public void handle(ActionEvent e) {,                 dlgStage.close();,             },         });,         HBox hbClose = new HBox(30);,         hbClose.setAlignment(Pos.BOTTOM_RIGHT);,         hbClose.getChildren().add(btClose);,         grid.add(hbClose,1,7);,         ,         // Exibe os dados,         Pedidos ped = Pedidos.getInstance();,         tfDlgId.setText(ped.getCorrente().getId());,         tfDlgDestino.setText(ped.getCorrente().getLocal().getCidade());,         tfDlgQtdCaixas.setText(""+ped.getCorrente().qtdadeCaixas());,         tfDlgQtNormal.setText(""+ped.getCorrente().qtdadeCaixasTipo(TipoCaixa.NORMAL));,         tfDlgQtRefrigerada.setText(""+ped.getCorrente().qtdadeCaixasTipo(TipoCaixa.REFRIGERADA));,         tfDlgQtPerecivel.setText(""+ped.getCorrente().qtdadeCaixasTipo(TipoCaixa.PERECIVEL));, ,         // Adiciona o painel a cena e exibe        ,         Scene scene = new Scene(grid);,         dlgStage = new Stage();,         dlgStage.setTitle("Detalhamento do pedido");,         dlgStage.initModality(Modality.APPLICATION_MODAL);,         dlgStage.setScene(scene);,         dlgStage.showAndWait();,     },         ,     public static void main(String[] args) {,         launch(args);,     }, }, ]
[public class CxNormal extends Caixa{    ,     public CxNormal(String umId,int umPeso){,         super(umId,umPeso);,     },         ,     public int getPesoMax(){,         return(1000);,     },     ,     public double getCusto(){,         if (getPeso() <= 200){,             return(getPeso() * 5);,         }else{,           return(((getPeso()-200)*7.5)+(200*5));,         },     }, }, ]
[import java.time.*;, import java.time.temporal.ChronoUnit;, , public class CaixaFactory{,     private static CaixaFactory cf = new CaixaFactory();,     private static int cxId = 0;,     ,     private CaixaFactory(){,     },     ,     public static CaixaFactory getInstance(){,         return(cf);,     },     ,     public Caixa createInstance(TipoCaixa tx,int peso, LocalDate dtVal){,         cxId++;,         String id = "Cx"+cxId;,         switch(tx){,             case NORMAL:,                 return(new CxNormal(id,peso));,             case REFRIGERADA:,                 return(new CxRefrigerada(id,peso));,             case PERECIVEL:,                 return(new CxPerecivel(id,peso,dtVal));,         },         return null;,     },     ,     public Caixa createInstance(TipoCaixa tx,int peso){,         return(createInstance(tx,peso,null));,     }, }, ]
[public enum TipoCaixa{,     NORMAL,PERECIVEL,REFRIGERADA;, }, ]
[public class Local{,     private String cidade;,     private int distancia;,     ,     public Local(String umaCidade,int umaDistanciaKm){,         cidade = umaCidade;,         distancia = umaDistanciaKm;,     },     ,     public String getCidade(){,         return(cidade);,     },     ,     public int getDistancia(){,         return(distancia);,     }, }]
[import java.util.*;, import java.time.*;, import java.time.temporal.ChronoUnit;, , public class Pedidos{,     private static Pedidos lstPed = new Pedidos();,     private List<Pedido> pedidos;,     private int corrente;,     ,     private Pedidos(){,         pedidos = new ArrayList<>();,         corrente = 0;,         Locais locais = Locais.getInstance();,         CaixaFactory cf = CaixaFactory.getInstance();,         ,         Pedido p = new Pedido(LocalDate.of(2016,12,10),locais.getLocal(0));,         p.addCaixa(cf.createInstance(TipoCaixa.NORMAL,450));,         p.addCaixa(cf.createInstance(TipoCaixa.NORMAL,850));,         p.addCaixa(cf.createInstance(TipoCaixa.NORMAL,940));,         p.addCaixa(cf.createInstance(TipoCaixa.REFRIGERADA,85));,         p.addCaixa(cf.createInstance(TipoCaixa.REFRIGERADA,18));,         p.addCaixa(cf.createInstance(TipoCaixa.PERECIVEL,35,LocalDate.of(2016,12,12)));,         pedidos.add(p);,         ,         p = new Pedido(LocalDate.of(2016,12,10),locais.getLocal(2));,         p.addCaixa(cf.createInstance(TipoCaixa.NORMAL,360));,         p.addCaixa(cf.createInstance(TipoCaixa.NORMAL,721));,         p.addCaixa(cf.createInstance(TipoCaixa.NORMAL,190));,         p.addCaixa(cf.createInstance(TipoCaixa.PERECIVEL,25,LocalDate.of(2016,12,11)));,         pedidos.add(p);,         ,         p = new Pedido(LocalDate.of(2016,12,11),locais.getLocal(4));,         p.addCaixa(cf.createInstance(TipoCaixa.NORMAL,500));,         p.addCaixa(cf.createInstance(TipoCaixa.NORMAL,300));,         p.addCaixa(cf.createInstance(TipoCaixa.REFRIGERADA,12));,         p.addCaixa(cf.createInstance(TipoCaixa.REFRIGERADA,57));,         pedidos.add(p);,     },     ,     public static Pedidos getInstance(){,         return(lstPed);,     }, ,     public Pedido getCorrente(){,         return(pedidos.get(corrente));,     } ,     ,     public Pedido getAnterior(){,         if (corrente > 0){,             corrente--;,             return(pedidos.get(corrente));,         }else{,             return(null);,         },     },     ,     public Pedido getProximo(){,         if (corrente < pedidos.size()-1){,             corrente++;,             return(pedidos.get(corrente));,         }else{,             return(null);,         },     }   , }]
[import java.util.*;, , public class Locais{,     private static Locais lstLoc = new Locais();,     private List<Local> locais;,     ,     private Locais(){,         locais = new ArrayList<Local>(5);,         locais.add(new Local("Florianopolis",480));,         locais.add(new Local("Curitiba",750));,         locais.add(new Local("Sao Paulo",1143));,         locais.add(new Local("Rio de Janeiro",1569));,         locais.add(new Local("Campo Grande",1418));  ,     },     ,     public static Locais getInstance(){,         return(lstLoc);,     },     ,     public Local getLocal(int i){,         return(locais.get(i));,     },     ,     public int qtdadeLocais(){,         return(locais.size());,     }, }]
[import java.time.*;, import java.time.temporal.ChronoUnit;, , public class CxPerecivel extends Caixa{,     private LocalDate dataValidade;,     ,     public CxPerecivel(String umId,int umPeso,LocalDate umaDataVal){,         super(umId,umPeso);,         dataValidade = umaDataVal;,     },        ,     public LocalDate getDataValidade(){,         return(dataValidade);,     },     ,     public boolean naValidade(LocalDate hoje){,         if (dataValidade.compareTo(hoje) <= 0){,             return(true);,         }else{,             return(false);,         },     },     public int getPesoMax(){,         return(50);,     },     ,     public double getCusto(){,         return(500);,     }, }, ]
[public class ExcessoDePesoException extends RuntimeException{,     public ExcessoDePesoException(String msg){,         super(msg);,     }, }, ]
[import java.util.*;, import java.time.*;, import java.time.temporal.ChronoUnit;, , public class Pedido implements Iterable<Caixa>{,     private static int nroPed = 0;,     private String id;,     private LocalDate dataPrev;,     private LocalDate dataEntrega;,     private Local local;,     private List<Caixa> caixas;,     ,     public Pedido(LocalDate umaData,Local umLocal){,         nroPed++;,         id = "Ped"+nroPed;,         dataPrev = umaData;,         dataEntrega = null;,         local = umLocal;,         caixas = new LinkedList<Caixa>();,     },     ,     public String getId(){,         return(id);,     },     ,     public LocalDate getDataPrevista(){,         return(dataPrev);,     }, ,     public LocalDate getDataEntrega(){,         return(dataEntrega);,     },     ,     public boolean entregue(){,         return(dataEntrega != null);,     },     ,     public void entregueEm(LocalDate data){,         dataEntrega = data;,     },     ,     public Local getLocal(){,         return(local);,     },     ,     @Override,     public Iterator<Caixa> iterator(){,         return(caixas.iterator());,     },     ,     public void addCaixa(Caixa cx){,         caixas.add(cx);,     },     ,     public int qtdadeCaixas(){,         return(caixas.size());,     },     ,     public int qtdadeCaixasTipo(TipoCaixa tx){,         int cont = 0;,         for(Caixa c:caixas){,           switch(tx){,               case NORMAL:,                   if (c instanceof CxNormal){,                       cont++;,                   },                   break;,               case REFRIGERADA:,                   if (c instanceof CxRefrigerada){,                       cont++;,                   },                   break;,               case PERECIVEL:,                   if (c instanceof CxPerecivel){,                       cont++;,                   },                   break;,           },         },         return(cont);,     }              , },     ]
[public abstract class Caixa{,     private String id;,     private int peso;,     ,     public Caixa(String umId,int umPeso){,         if (umPeso > getPesoMax()){,             throw new ExcessoDePesoException("Excesso de peso!!");,         },         id = umId;,         peso = umPeso;,     },     ,     public String getId(){,         return(id);,     },     ,     public int getPeso(){,         return(peso);,     },        ,     public abstract int getPesoMax();,     ,     public abstract double getCusto();, }, ]
[public class Local{,     private String cidade;,     private int distancia;,     ,     public Local(String umaCidade,int umaDistanciaKm){,         cidade = umaCidade;,         distancia = umaDistanciaKm;,     },     ,     public String getCidade(){,         return(cidade);,     },     ,     public int getDistancia(){,         return(distancia);,     }, }]
[import java.util.*;, import java.time.*;, import java.time.temporal.ChronoUnit;, , public class Pedidos{,     private static Pedidos lstPed = new Pedidos();,     private List<Pedido> pedidos;,     private int corrente;,     ,     private Pedidos(){,         pedidos = new ArrayList<>();,         corrente = 0;,         Locais locais = Locais.getInstance();,         CaixaFactory cf = CaixaFactory.getInstance();,         ,         Pedido p = new Pedido(LocalDate.of(2016,12,10),locais.getLocal(0));,         p.addCaixa(cf.createInstance(TipoCaixa.NORMAL,450));,         p.addCaixa(cf.createInstance(TipoCaixa.NORMAL,850));,         p.addCaixa(cf.createInstance(TipoCaixa.NORMAL,940));,         p.addCaixa(cf.createInstance(TipoCaixa.REFRIGERADA,85));,         p.addCaixa(cf.createInstance(TipoCaixa.REFRIGERADA,18));,         p.addCaixa(cf.createInstance(TipoCaixa.PERECIVEL,35,LocalDate.of(2016,12,12)));,         pedidos.add(p);,         ,         p = new Pedido(LocalDate.of(2016,12,10),locais.getLocal(2));,         p.addCaixa(cf.createInstance(TipoCaixa.NORMAL,360));,         p.addCaixa(cf.createInstance(TipoCaixa.NORMAL,721));,         p.addCaixa(cf.createInstance(TipoCaixa.NORMAL,190));,         p.addCaixa(cf.createInstance(TipoCaixa.PERECIVEL,25,LocalDate.of(2016,12,11)));,         pedidos.add(p);,         ,         p = new Pedido(LocalDate.of(2016,12,11),locais.getLocal(4));,         p.addCaixa(cf.createInstance(TipoCaixa.NORMAL,500));,         p.addCaixa(cf.createInstance(TipoCaixa.NORMAL,300));,         p.addCaixa(cf.createInstance(TipoCaixa.REFRIGERADA,12));,         p.addCaixa(cf.createInstance(TipoCaixa.REFRIGERADA,57));,         pedidos.add(p);,     },     ,     public static Pedidos getInstance(){,         return(lstPed);,     }, ,     public Pedido getCorrente(){,         return(pedidos.get(corrente));,     } ,     ,     public Pedido getAnterior(){,         if (corrente > 0){,             corrente--;,         },         return(pedidos.get(corrente));,     },     ,     public Pedido getProximo(){,         if (corrente < pedidos.size()-1){,             corrente++;,         },         return(pedidos.get(corrente));,     }   , }]
[import java.util.*;, , public class Locais{,     private static Locais lstLoc = new Locais();,     private List<Local> locais;,     ,     private Locais(){,         locais = new ArrayList<Local>(5);,         locais.add(new Local("Florianopolis",480));,         locais.add(new Local("Curitiba",750));,         locais.add(new Local("Sao Paulo",1143));,         locais.add(new Local("Rio de Janeiro",1569));,         locais.add(new Local("Campo Grande",1418));  ,     },     ,     public static Locais getInstance(){,         return(lstLoc);,     },     ,     public Local getLocal(int i){,         return(locais.get(i));,     },     ,     public int qtdadeLocais(){,         return(locais.size());,     }, }]
[import java.time.*;, import java.time.temporal.ChronoUnit;, , public class CxPerecivel extends Caixa{,     private LocalDate dataValidade;,     ,     public CxPerecivel(String umId,int umPeso,LocalDate umaDataVal){,         super(umId,umPeso);,         dataValidade = umaDataVal;,     },        ,     public LocalDate getDataValidade(){,         return(dataValidade);,     },     ,     public boolean naValidade(LocalDate hoje){,         if (dataValidade.compareTo(hoje) <= 0){,             return(true);,         }else{,             return(false);,         },     },     public int getPesoMax(){,         return(50);,     },     ,     public double getCusto(){,         return(500);,     }, }, ]
[public class ExcessoDePesoException extends RuntimeException{,     public ExcessoDePesoException(String msg){,         super(msg);,     }, }, ]
[import java.util.*;, import java.time.*;, import java.time.temporal.ChronoUnit;, , public class Pedido implements Iterable<Caixa>{,     private static int nroPed = 0;,     private String id;,     private LocalDate dataPrev;,     private LocalDate dataEntrega;,     private Local local;,     private List<Caixa> caixas;,     ,     public Pedido(LocalDate umaData,Local umLocal){,         nroPed++;,         id = "Ped"+nroPed;,         dataPrev = umaData;,         dataEntrega = null;,         local = umLocal;,         caixas = new LinkedList<Caixa>();,     },     ,     public String getId(){,         return(id);,     },     ,     public LocalDate getDataPrevista(){,         return(dataPrev);,     }, ,     public LocalDate getDataEntrega(){,         return(dataEntrega);,     },     ,     public boolean entregue(){,         return(dataEntrega != null);,     },     ,     public void entregueEm(LocalDate data){,         dataEntrega = data;,     },     ,     public Local getLocal(){,         return(local);,     },     ,     @Override,     public Iterator<Caixa> iterator(){,         return(caixas.iterator());,     },     ,     public void addCaixa(Caixa cx){,         caixas.add(cx);,     },     ,     public int qtdadeCaixas(){,         return(caixas.size());,     },     ,     public int qtdadeCaixasTipo(TipoCaixa tx){,         int cont = 0;,         for(Caixa c:caixas){,           switch(tx){,               case NORMAL:,                   if (c instanceof CxNormal){,                       cont++;,                   },                   break;,               case REFRIGERADA:,                   if (c instanceof CxRefrigerada){,                       cont++;,                   },                   break;,               case PERECIVEL:,                   if (c instanceof CxPerecivel){,                       cont++;,                   },                   break;,           },         },         return(cont);,     }              , },     ]
[public abstract class Caixa{,     private String id;,     private int peso;,     ,     public Caixa(String umId,int umPeso){,         if (umPeso > getPesoMax()){,             throw new ExcessoDePesoException("Excesso de peso!!");,         },         id = umId;,         peso = umPeso;,     },     ,     public String getId(){,         return(id);,     },     ,     public int getPeso(){,         return(peso);,     },        ,     public abstract int getPesoMax();,     ,     public abstract double getCusto();, }, ]
[public class FuncionarioAdministrativo extends Funcionario{,     ,     private int anosTrabalhados;,     ,     public FuncionarioAdministrativo(String nome,String cpf,double sal,int anosT){,         super(nome,cpf,sal);,         anosTrabalhados = anosT;,     },     ,     ,     public double getAdicional(){        ,         double adicional = (anosTrabalhados/10)*0.05;,         adicional = getSalarioBase()*adicional;,         return adicional;,     },  ,     @Override,     public double getSalarioLiquido(){,         return(super.getSalarioLiquido()+getAdicional());,     }       , , }]
[import java.util.*;, public class App{    ,   public static void main(String Args[]){,       Funcionario f1 = new Diretores("Ber","343",50000.0,75);,       ,       System.out.println(f1.getNome()+" R$"+f1.getSalarioLiquido());,       ,       Funcionario f[] = new Funcionario[10];,       f[0] = new Diretores("Ze","3434",10000,20);,       f[1] = new FuncionarioAdministrativo("Jorge","23456",5000,50);,       f[2] = new FuncionarioPiso("Luiz","2856",8500,12);,       f[3] = new Funcionario("Silvia","5490",100000);,       f[4] = new Diretores("Luiza","5678",100000,66);,       ,       for(int i=0; i<5; i++){,           if (f[i] instanceof Diretores){,               Diretores dir = (Diretores)f[i];,               System.out.print(dir.getNroFuncCoordenados()+", ");,           },           System.out.print(f[i].getNome()+", R$ ");,           System.out.print(f[i].getSalarioBase()+", R$ ");,           System.out.println(f[i].getSalarioLiquido());,       },   }, }]
[public class Funcionario{,     ,     private String nome, cpf;,     private double salario, inss;,     ,     /*,     public Funcionario(){,         nome = "";,         cpf = "";,         salario = 0;,     },     */,     ,     public Funcionario(String n, String c, double sal){,         nome = n;,         cpf = c;,         salario = sal;,     },     ,     /*,     public void setNome(String n){,         nome = n;,     },     ,     public void setCPF(String c){,         cpf = c;,     }, ,     public void setSalario(double s){,         salario = s;,     },     */,     ,     public String getNome(){,         return nome;,     },     ,     public String getCpf(){,         return cpf;,     },     ,     public double getSalarioBase(){,         return salario;,     },     ,     public double getSalarioLiquido(){,         return(getSalarioBase()-descontoInss());,     },     ,     public double descontoInss(){,         inss = salario * 0.1;,         return inss;,     }, }]
[public class Diretores extends Funcionario{,     private int nFuncionarios;,     ,     public Diretores(String nome, String cpf, double sal, int nf){,         super(nome, cpf, sal);,         nFuncionarios = nf;,     },     ,     public int getNroFuncCoordenados(){,         return(nFuncionarios);,     },         ,     public double getAdicional(){,         double adicional = nFuncionarios * 0.01;,         adicional = adicional * getSalarioBase();,         return adicional;,     },     ,     @Override,     public double getSalarioLiquido(){,         return(super.getSalarioLiquido()+getAdicional());,     }, }]
[public class FuncionarioPiso extends Funcionario{,     private double percent = 0;,     ,     public FuncionarioPiso(String nome,String cpf,double sal,double p){,         super(nome,cpf,sal);,         percent = p*0.01;,     },     ,     public double getPercentual(){,         return(percent);,     },     ,     public double getAdicionalPericulosidade(){,         return(getSalarioBase()*percent);,     },     ,     @Override,     public double getSalarioLiquido(){,         return(super.getSalarioLiquido()+getAdicionalPericulosidade());,     }    , }]
[public class fixoResidencial extends TelefoniaFixa{, 	fixoResidencial(String t, String cpf, String c, int cb){, 		super(t, cpf, c, cb, 0.1, 0.8);, 	}, , 	@Override, 	public double custoMensal(){, 		return getCustoBase() + (getCustoMovel() * getMinMovel()) + (getCustoFixo() * getMinFixo());, 	}, , 	public String toString(){, 		return super.toString() + " | " + custoMensal();, 	}, }]
[public abstract class Contrato{, 	private String telefone, cpf, cliente;, 	private double minFixo;, 	private double minMovel;, , 	Contrato(String t, String cpf, String c, double minFixo, int minMovel){, 		telefone = t;, 		this.cpf = cpf;, 		cliente = c;, 		this.minMovel = minMovel;, 		this.minFixo = minFixo;, 	}, , 	public void setMinFixo(double minutos){, 		minFixo = minutos;, 	}, , 	public void setMinMovel(double minutos){, 		minMovel = minutos;, 	}, , 	public String getCliente(){, 		return cliente;, 	}, , 	public String getCPF(){, 		return this.cpf;, 	}, , 	public String getTelefone(){, 		return telefone;, 	}, , 	public double getMinFixo(){ return minFixo; }, 	public double getMinMovel(){ return minMovel;}, , 	public abstract double custoMensal();, , 	@Override, 	public String toString(){, 		return getCliente()+" , "+getCPF()+" , "+getTelefone()+" , "+custoMensal()+" , "+getMinMovel()+" , "+getMinFixo();, 	}, }]
[public class movelPrePago{, 	, }]
[public abstract class TelefoniaFixa extends Contrato{, 	private double custoBasico;, 	private double custoFixo;, 	private double custoMovel;, , 	TelefoniaFixa(String t, String cpf, String c, double minMovel, double minFixo, double cb, double cf, double cm){, 		super(t, cpf, c, minFixo, minMovel);, 		custoBasico = cb;, 		custoMovel = cm;, 		custoFixo = cf;, 	}, , 	public double getCustoBase(){return custoBasico;}, 	public double getCustoFixo(){return custoFixo;}, 	public double getCustoMovel(){return custoMovel;}, , 	@Override, 	public String toString(){, 		return super.toString() +"| "+ getCustoMovel() +" | "+ getCustoFixo() +" | "+ getCustoBase();, 	}, }]
[public class App{, 	public static void main(String[] args){, 		List<Contrato> t = new ArrayList<>;, , 		Telefone x = t.add(new TelefoniaFixa("999999", "1224", "eu", 100, 100, 10, 20, 30));, 		System.out.println();, 	}, }]
[public class movelPosPago{, 	, }]
[public class fixoComercial{, 	private int franquia;, }]
[public class TelefoniaMovel{, 	private int franquia;, }]
[public class FaltandoOtimiz{,     public int getValorNaoConstaNaSequencia2(int vet[]) {,         int soma = (vet.length * (vet.length+1) ) / 2;,         int acum = 0;,         for (int i=0; i<vet.length; i++),             acum += vet[i];,         return soma - acum;,     }, ,     public static void main(String args[]){,         int vet[] = {6,4,1,2,3,0};,         ,         Faltando f = new Faltando();,         int nro = f.faltando(vet);,         System.out.println("Faltando: "+nro);,     }, }]
[import java.util.*;, class Faltando{,     public boolean procuraValor(int vet[],int n){        ,         for(int i=0; i<vet.length; i++){,             if (n == vet[i]){,                 return(true);,             },         },         return(false);,     },        ,     public int faltando(int vet[]){,         int num;,         for (num=0; num<=vet.length; num++) {,             boolean achou = procuraValor(vet,num);,             if (!achou){,                 return(num);,             },         },         return -1;,     },     ,     public static void main(String args[]){,         int max = 3;, 	int vet[] = new int[max];,         , 	Scanner sc = new Scanner(System.in);, 	, 	for(int i = 0; i<max; i++){, 		vet[i] = sc.nextInt();, 	}, ,         Faltando f = new Faltando();,         int nro = f.faltando(vet);,         System.out.println("Faltando: "+nro);,     }, }                   ]
[import java.util.*;, , public class GeraNros{,     public static void main(String args[]){,         int max = 4;,         Random r = new Random();,         int excluido = r.nextInt(max);,         for(int i=0; i<max; i++){,             if (i != excluido){,                 System.out.print(i+" ");,             },         },     }, }, ]
[public class Converte{,     public int converte(String bin[]) {,         int dec=0;,         ,         for (int i=0; i<bin.length; i++) {,             char digit = bin[i].charAt(0);,             if (digit == '0' || digit == '1'){,                 int ival = digit - '0';,                 dec = dec + ( ival * (int)Math.pow(2, bin.length-1-i) );,             }else{,                 if (digit == ' '){,                     continue;,                 }else{,                     return(-1);,                 },             },         },         return dec;,     },     ,     public static void main(String args[]){,         Converte conv = new Converte();,         int val = conv.converte(args);,         if (val == -1){,             System.out.println("Sequencia de dígitos inválida !!");,         }else{,             System.out.println("Valor equivalente em decimal: "+val);,         },     } , }]
[import javafx.application.Application;, import javafx.event.ActionEvent;, import javafx.event.EventHandler;, import javafx.geometry.Insets;, import javafx.geometry.Pos;, import javafx.scene.Scene;, import javafx.scene.control.Button;, import javafx.scene.control.Label;, import javafx.scene.control.PasswordField;, import javafx.scene.control.TextField;, import javafx.scene.layout.GridPane;, import javafx.scene.layout.HBox;, import javafx.scene.text.Text;, import javafx.scene.paint.Color;, import javafx.scene.text.*;, import javafx.stage.Stage;, , , public class WelcomeV3 extends Application {,     private TextField userTextField;,     private PasswordField pwBox;,     ,     @Override,     public void start(Stage primaryStage) {,         primaryStage.setTitle("JavaFX - Welcome");, ,         GridPane grid = new GridPane();,         grid.setAlignment(Pos.CENTER);,         grid.setHgap(10);,         grid.setVgap(10);,         grid.setPadding(new Insets(25, 25, 25, 25));,         //grid.setGridLinesVisible(true);, ,         Text scenetitle = new Text("Welcome");,         scenetitle.setId("welcome-text");,         scenetitle.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));,         grid.add(scenetitle, 0, 0, 2, 1);, ,         Label userName = new Label("User Name:");,         grid.add(userName, 0, 1);, ,         userTextField = new TextField();,         grid.add(userTextField, 1, 1);, ,         Label pw = new Label("Password:");,         grid.add(pw, 0, 2);, ,         pwBox = new PasswordField();,         grid.add(pwBox, 1, 2);, ,         Button btn = new Button("Sign in");,         HBox hbBtn = new HBox(10);,         hbBtn.setAlignment(Pos.BOTTOM_RIGHT);,         hbBtn.getChildren().add(btn);,         grid.add(hbBtn, 1, 4);, ,         final Text actiontarget = new Text();,         grid.add(actiontarget, 1, 6);,         actiontarget.setId("actiontarget");, ,         btn.setOnAction(new EventHandler<ActionEvent>() {,             @Override,             public void handle(ActionEvent e) {,                 String user = userTextField.getText();,                 String pass = pwBox.getText();,                 actiontarget.setFill(Color.FIREBRICK);,                 actiontarget.setText("Usuario:"+user+"Senha:"+pass);,             },         });, ,         Scene scene = new Scene(grid);,         primaryStage.setScene(scene);,         primaryStage.show();,     },     ,     public static void main(String[] args) {,         launch(args);,     }, }, ]
[import javafx.application.Application;, import javafx.event.ActionEvent;, import javafx.event.EventHandler;, import javafx.geometry.Insets;, import javafx.geometry.Pos;, import javafx.scene.Scene;, import javafx.scene.control.Button;, import javafx.scene.control.Label;, import javafx.scene.control.PasswordField;, import javafx.scene.control.TextField;, import javafx.scene.layout.GridPane;, import javafx.scene.layout.HBox;, import javafx.scene.text.Text;, import javafx.scene.paint.Color;, import javafx.scene.text.*;, import javafx.stage.Stage;, , , public class Welcome extends Application {,     @Override,     public void start(Stage primaryStage) {,         primaryStage.setTitle("JavaFX - Welcome");, ,         GridPane grid = new GridPane();,         grid.setAlignment(Pos.CENTER);,         grid.setHgap(10);,         grid.setVgap(10);,         grid.setPadding(new Insets(25, 25, 25, 25));,         //grid.setGridLinesVisible(true);, ,         Text scenetitle = new Text("Formulario Candidato Vestibular");,         scenetitle.setId("welcome-text");,         scenetitle.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));,         grid.add(scenetitle, 0, 0, 2, 1);, ,         Label userName = new Label("Nome: ");,         grid.add(userName, 0, 1);, ,         TextField userTextField = new TextField();,         grid.add(userTextField, 1, 1);,         ,         Label userEndereco = new Label("Endereco: ");,         grid.add(userEndereco, 0, 2);, ,         TextField userEnderecoTXT = new TextField();,         grid.add(userEnderecoTXT, 1, 2);,         ,         Label userEnderecoComp = new Label("Comp: ");,         grid.add(userEnderecoComp, 2, 2);, ,         TextField userEnderecoCompTXT = new TextField();,         grid.add(userEnderecoCompTXT, 3, 2);, ,         Label pw = new Label("Password:");,         grid.add(pw, 0, 3);, ,         PasswordField pwBox = new PasswordField();,         grid.add(pwBox, 1, 3);, ,         Button btn = new Button("Sign in");,         HBox hbBtn = new HBox(10);,         hbBtn.setAlignment(Pos.BOTTOM_RIGHT);,         hbBtn.getChildren().add(btn);,         grid.add(hbBtn, 1, 4);, ,         final Text actiontarget = new Text();,         grid.add(actiontarget, 1, 6);,         actiontarget.setId("actiontarget");, ,         btn.setOnAction(new EventHandler<ActionEvent>() {,             @Override,             public void handle(ActionEvent e) {,                 actiontarget.setFill(Color.FIREBRICK);,                 actiontarget.setText("Sign in button pressed");,             },         });, ,         Scene scene = new Scene(grid);,         primaryStage.setScene(scene);,         primaryStage.show();,     },     ,     public static void main(String[] args) {,         launch(args);,     }, }, ]
[import javafx.application.Application;, import javafx.event.ActionEvent;, import javafx.event.EventHandler;, import javafx.geometry.Insets;, import javafx.geometry.Pos;, import javafx.scene.Scene;, import javafx.scene.control.Button;, import javafx.scene.control.Label;, import javafx.scene.control.PasswordField;, import javafx.scene.control.TextField;, import javafx.scene.layout.GridPane;, import javafx.scene.layout.HBox;, import javafx.scene.text.Text;, import javafx.scene.paint.Color;, import javafx.scene.text.*;, import javafx.stage.Stage;, , , public class WelcomeV2 extends Application implements EventHandler<ActionEvent>{,     private Text actiontarget;,     ,     @Override,     public void handle(ActionEvent event){,         actiontarget.setFill(Color.FIREBRICK);,         actiontarget.setText("Sign in button pressed");,     },     ,     @Override,     public void start(Stage primaryStage) {,         primaryStage.setTitle("JavaFX - Welcome");, ,         GridPane grid = new GridPane();,         grid.setAlignment(Pos.CENTER);,         grid.setHgap(10);,         grid.setVgap(10);,         grid.setPadding(new Insets(25, 25, 25, 25));,         grid.setGridLinesVisible(true);, ,         Text scenetitle = new Text("Welcome");,         scenetitle.setId("welcome-text");,         scenetitle.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));,         grid.add(scenetitle, 0, 0, 2, 1);, ,         Label userName = new Label("User Name:");,         grid.add(userName, 0, 1);, ,         TextField userTextField = new TextField();,         grid.add(userTextField, 1, 1);, ,         Label pw = new Label("Password:");,         grid.add(pw, 0, 2);, ,         PasswordField pwBox = new PasswordField();,         grid.add(pwBox, 1, 2);, ,         Button btn = new Button("Sign in");,         HBox hbBtn = new HBox(10);,         hbBtn.setAlignment(Pos.BOTTOM_RIGHT);,         hbBtn.getChildren().add(btn);,         grid.add(hbBtn, 1, 4);, ,         actiontarget = new Text();,         grid.add(actiontarget, 1, 6);,         actiontarget.setId("actiontarget");, ,         btn.setOnAction(this);, ,         Scene scene = new Scene(grid);,         primaryStage.setScene(scene);,         primaryStage.show();,     },     ,     public static void main(String[] args) {,         launch(args);,     }, }, ]
[import java.util.List;, import java.util.LinkedList;, import javafx.collections.ObservableList;, import javafx.collections.ListChangeListener;, import javafx.collections.FXCollections;, , public class FlightData{,     private static FlightData fd = new FlightData();,     ,     private List<String> cidadesAtendidas;,     private List<Integer> qtdadeAssentos;,     ,     private List<String> loadCidadesAtendidas(){,         List<String> lst = new LinkedList<String>();,         lst.add("Porto Alegre");,         lst.add("Florianopolis");,         lst.add("Curitiba");,         lst.add("São Paulo");,         lst.add("Rio de Janeiro");,         lst.add("Brasilia");,         lst.add("Belo Horizonte");,         return lst;,     },     ,     private List<Integer> loadQtdadeAssentos(){,         List<Integer> lst = new LinkedList<>();,         for(int i=1;i<10;i++){,             lst.add(i);,         },         return lst;,     },     ,     private FlightData(){,         cidadesAtendidas = loadCidadesAtendidas();,         qtdadeAssentos = loadQtdadeAssentos();,     },     ,     public static FlightData getInstance(){,         return(fd);,     },     ,     public ObservableList getCidadesAtendidas(){,         return FXCollections.observableList(cidadesAtendidas);,     }, ,     public ObservableList getQtdadeAssentos(){,         return FXCollections.observableList(qtdadeAssentos);,     },     , }]
[import javafx.application.Application;, //import static javafx.application.Application.launch;, import javafx.event.ActionEvent;, import javafx.event.EventHandler;, import javafx.event.*;, import javafx.geometry.Insets;, import javafx.geometry.Pos;, import javafx.scene.Scene;, import javafx.scene.control.Button;, import javafx.scene.control.Label;, import javafx.scene.control.PasswordField;, import javafx.scene.control.RadioButton;, import javafx.scene.control.TextField;, import javafx.scene.control.ToggleGroup;, import javafx.scene.control.*;, import javafx.scene.layout.GridPane;, import javafx.scene.layout.HBox;, import javafx.scene.paint.Color;, import javafx.scene.text.Font;, import javafx.scene.text.FontWeight;, import javafx.scene.text.Text;, import javafx.stage.Stage;, import javafx.collections.FXCollections;, import java.time.LocalDate;, , public class AcmeAir extends Application  implements EventHandler<ActionEvent>{,     private Text actiontarget;,     private Button btnEnviar;,     private Button btnCancelar;, ,     /*,    @Override,    public void handle(ActionEvent event, String s){,         actiontarget.setFill(Color.FIREBRICK);,         actiontarget.setText(s);,     },     */, ,     @Override,     public void handle(ActionEvent event){,         if(event.getSource() == btnEnviar){,             actiontarget.setFill(Color.FIREBRICK);,             actiontarget.setText("Sign in button pressed");,         },         if(event.getSource() == btnCancelar){,             actiontarget.setFill(Color.FIREBRICK);,             actiontarget.setText("Tu cancelou seu idiota!");,         },     }, ,     public static void main(String[] args) {,         launch(args);,     }, ,     @Override,     public void start(Stage primaryStage) {,         primaryStage.setTitle("AcmeAir");, ,         GridPane grid = new GridPane();,         grid.setAlignment(Pos.CENTER);,         grid.setHgap(10);,         grid.setVgap(10);,         grid.setPadding(new Insets(10, 10, 10, 10));, 		, 		,         Text scenetitle = new Text("Selecione sua busca");,         scenetitle.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));,         ,         grid.add(scenetitle, 0, 0, 4, 1);, ,         Label nome = new Label("Passageiro:");,         grid.add(nome, 0, 1);, ,         TextField nomeTextField = new TextField();,         grid.add(nomeTextField, 1, 1, 3, 1);  ,         ,         Label de = new Label("De: ");,         grid.add(de, 0, 2);,         ,         ChoiceBox deBox = new ChoiceBox(FXCollections.observableArrayList(FlightData.getInstance().getCidadesAtendidas()));,         grid.add(deBox, 1, 2);,         ,         Label para = new Label("Para: ");,         grid.add(para, 0, 3);,         ,         ChoiceBox paraBox = new ChoiceBox(FXCollections.observableArrayList(FlightData.getInstance().getCidadesAtendidas()));,         grid.add(paraBox, 1, 3);,         ,         Label acentos = new Label("Acentos: ");,         grid.add(acentos, 0, 4);,         ,         ChoiceBox acentosBox = new ChoiceBox();,         acentosBox.getItems().addAll("Til", "Crase", "circunflexo");,         grid.add(acentosBox, 1, 4);,         ,         ,         RadioButton rbF = new RadioButton("Somente Ida");,         RadioButton rbM = new RadioButton("Ida e volta");,         ToggleGroup group = new ToggleGroup();,         rbF.setToggleGroup(group);,         rbF.setSelected(true);,         rbM.setToggleGroup(group);,         grid.add(rbF, 4, 1);,         grid.add(rbM, 4, 2);,         ,         Label Ida = new Label("Data de ida: ");,         grid.add(Ida, 4, 3);,         ,         DatePicker datePickerIda = new DatePicker();,         ,         Label Volta = new Label("Data de volta: ");,         grid.add(Volta, 4, 4);,         DatePicker datePickerVolta = new DatePicker();,          ,         grid.add(datePickerIda, 5, 3);,         grid.add(datePickerVolta, 5, 4);,  		,  		,  		btnEnviar = new Button("Enviar");,         btnCancelar = new Button("Cancelar");, ,         actiontarget = new Text();,         grid.add(actiontarget, 1, 6);,         actiontarget.setId("actiontarget");, ,         btnCancelar.setOnAction(this);,         btnEnviar.setOnAction(this);, ,         /*,         btnCancelar.setOnAction(this, "Cancelar!");,         btnEnviar.setOnAction(this, "Enviar!");,          */, ,         HBox hbBtn = new HBox(10);,         hbBtn.setAlignment(Pos.BOTTOM_RIGHT);,         hbBtn.getChildren().add(btnEnviar);,         hbBtn.getChildren().add(btnCancelar);,         grid.add(hbBtn, 5, 6);,         , , ,         , 		,         Scene scene = new Scene(grid);,         primaryStage.setScene(scene);, ,         primaryStage.show();,     },     , }, ]
[package entities;, , public class Product {, 	private  String name;, 	private double price;, 	private int quantity;, , 	public Product(){, 	}, , 	public Product(String name, double price){, 		this.name = name;, 		this.price = price;, 	}, , 	public Product(String name, double price, int quantity){, 		this.name = name;, 		this.price = price;, 		this.quantity = quantity;		, 	}, 	, 	public String getName() {, 		return name;, 	}, , 	public void setName(String name) {, 		this.name = name;, 	}, , 	public double getPrice() {, 		return price;, 	}, , 	public void setPrice(double price) {, 		this.price = price;, 	}, , 	public int getQuantity() {, 		return quantity;, 	}, , 	public double totalValueInStock() {, 		return price * quantity;, 	}		, 	, 	public void addProducts(int quantity) {, 		this.quantity += quantity;, 	}, 	, 	public void removeProducts(int quantity) {, 		this.quantity -= quantity;, 	}, , 	public String toString() {, 		return name, 		+ ", $ ", 		+ String.format("%.2f", price), 		+ ", ", 		+ quantity, 		+ " units, Total: $ ", 		+ String.format("%.2f", totalValueInStock());, 	}, }]
[package app;, , import java.util.Locale;, import java.util.Scanner;, , import entities.Product;, , public class Program {, ,     public static void main(String[] args) {, , ,         Locale.setDefault(Locale.US);,         Scanner sc = new Scanner(System.in);, ,         System.out.println("Enter product data: ");,         System.out.print("Name: ");,         String name = sc.nextLine();, ,         System.out.print("Price: ");,         double price = sc.nextDouble();, ,         System.out.print("Quantity in stock: ");,         int quantity = sc.nextInt();,         System.out.println();, ,         Product product = new Product(name,price,quantity);, ,         System.out.println("Product data: " + product);,         System.out.println();, ,         System.out.print("Enter the number of products to be added in stock: ");,         quantity = sc.nextInt();,         product.addProducts(quantity);,         System.out.println();, ,         System.out.println("Updated data: " + product);,         System.out.println();, ,         System.out.print("Enter the number of products to be removed from stock: ");,         quantity = sc.nextInt();,         product.removeProducts(quantity);,         System.out.println();,         System.out.println("Updated data: " + product);, ,         sc.close();, ,     }, , }]
[package entities;, , public class Product{, 	public String name;, 	public double price;, 	public int quantity;, , 	public Product(){, 	}, , 	public Product(String name, double price){, 		this.name = name;, 		this.price = price;, 	}, , 	public Product(String name, double price, int quantity){, 		this.name = name;, 		this.price = price;, 		this.quantity = quantity;		, 	}, , 	public double totalValueInStock() {, 		return price * quantity;, 	}		, 	, 	public void addProducts(int quantity) {, 		this.quantity += quantity;, 	}, 	, 	public void removeProducts(int quantity) {, 		this.quantity -= quantity;, 	}, , 	public String toString() {, 		return name, 		+ ", $ ", 		+ String.format("%.2f", price), 		+ ", ", 		+ quantity, 		+ " units, Total: $ ", 		+ String.format("%.2f", totalValueInStock());, 	}, }]
[package app;, , import java.util.Locale;, import java.util.Scanner;, , import entities.Product;, , public class Program{, 	public static void main(String[] args){, 			, 		Locale.setDefault(Locale.US);, 		Scanner sc = new Scanner(System.in);, , 		System.out.println("Enter product data: ");, 		System.out.print("Name: ");, 		String name = sc.nextLine();, 		, 		System.out.print("Price: ");, 		double price = sc.nextDouble();, 		, 		System.out.print("Quantity in stock: ");, 		int quantity = sc.nextInt();, 		System.out.println();, 		, 		Product product = new Product(name,price,quantity);, , 		System.out.println("Product data: " + product);, 		System.out.println();, 		, 		System.out.print("Enter the number of products to be added in stock: ");, 		quantity = sc.nextInt();, 		product.addProducts(quantity);, 		System.out.println();, 		, 		System.out.println("Updated data: " + product);, 		System.out.println();, 		, 		System.out.print("Enter the number of products to be removed from stock: ");, 		quantity = sc.nextInt();, 		product.removeProducts(quantity);, 		System.out.println();, 		System.out.println("Updated data: " + product);, 		, 		sc.close();, , 	}, }, , ]
[package entities;, , public class Product{, 	public String name;, 	public double price;, 	public int quantity;, , 	public Product(String name, double price, int quantity){, 		this.name = name;, 		this.price = price;, 		this.quantity = quantity;		, 	}, , 	public double totalValueInStock() {, 		return price * quantity;, 	}		, 	, 	public void addProducts(int quantity) {, 		this.quantity += quantity;, 	}, 	, 	public void removeProducts(int quantity) {, 		this.quantity -= quantity;, 	}, , 	public String toString() {, 		return name, 		+ ", $ ", 		+ String.format("%.2f", price), 		+ ", ", 		+ quantity, 		+ " units, Total: $ ", 		+ String.format("%.2f", totalValueInStock());, 	}, }]
[package app;, , import java.util.Locale;, import java.util.Scanner;, , import entities.Product;, , public class Program{, 	public static void main(String[] args){, 			, 		Locale.setDefault(Locale.US);, 		Scanner sc = new Scanner(System.in);, , 		System.out.println("Enter product data: ");, 		System.out.print("Name: ");, 		String name = sc.nextLine();, 		, 		System.out.print("Price: ");, 		double price = sc.nextDouble();, 		, 		System.out.print("Quantity in stock: ");, 		int quantity = sc.nextInt();, 		System.out.println();, 		, 		Product product = new Product(name,price,quantity);, , 		System.out.println("Product data: " + product);, 		System.out.println();, 		, 		System.out.print("Enter the number of products to be added in stock: ");, 		quantity = sc.nextInt();, 		product.addProducts(quantity);, 		System.out.println();, 		, 		System.out.println("Updated data: " + product);, 		System.out.println();, 		, 		System.out.print("Enter the number of products to be removed from stock: ");, 		quantity = sc.nextInt();, 		product.removeProducts(quantity);, 		System.out.println();, 		System.out.println("Updated data: " + product);, 		, 		sc.close();, , 	}, }, , ]
[package entities;, , public class Account {, 	private int number;, 	private String holder;, 	private double balance;, 	, 	public Account(int number, String holder) {, 		this.number = number;, 		this.holder = holder;, 	}, 	public Account(int number, String holder, double initialDeposit) {, 		this.number = number;, 		this.holder = holder;, 		//this.balance = balance;, 		deposit(initialDeposit);, 	}, 	public Integer getNumber() {, 		return number;, 	}, //	public void setNumber(Integer number) {, //		this.number = number;, //	}, 	public String getHolder() {, 		return holder;, 	}, 	public void setHolder(String holder) {, 		this.holder = holder;, 	}, 	public Double getBalance() {, 		return balance;, 	}, 	, 	public void deposit(double amount) {, 		balance += amount;, 	}, 	public void withraw(double amount) {, 		balance -= amount + 5.0;, 	}, 	@Override, 	public String toString() {, 		return "Account ", 				+ number, 				+ ", Holder: ", 				+ holder, 				+ ", Balance: $ ", 				+ String.format("%.2f", balance);, , 	}, 	, 	, 	, }]
[package app;, , import java.util.Locale;, import java.util.Scanner;, import entities.Account;, , public class Program {, , 	public static void main(String[] args) {, , 		Locale.setDefault(Locale.US);, 		Scanner sc = new Scanner(System.in);, 		Account account;, , 		System.out.print("Enter account number: ");, 		Integer number = sc.nextInt();, , 		System.out.print("Enter account holder: ");, 		sc.nextLine();, 		String holder = sc.nextLine();, , 		System.out.print("Enter account holder: (y/n)");, 		char confirm = sc.next().charAt(0);, , 		if (confirm == 'y') {, 			System.out.println("Enter initial deposit value:");, 			double initialDeposit = sc.nextDouble();, 			account = new Account(number, holder, initialDeposit);, 		} else {, 			account = new Account(number, holder);, 		}, , 		System.out.println();, 		System.out.println("Account data:");, 		System.out.println(account);, , 		System.out.println();, 		System.out.print("Enter a deposit value: ");, 		double deposit = sc.nextDouble();, 		account.deposit(deposit);, , 		System.out.print("Updated account data:");, 		System.out.print(account);, 		, 		System.out.println();, 		System.out.print("Enter a withdraw value: ");, 		double withdrawValue = sc.nextDouble();, 		account.withraw(withdrawValue);, 		System.out.println("Updated account data:");, 		System.out.println(account);, , , 		sc.close();, 	}, , }]
[package app;, , import java.text.ParseException;, import java.text.SimpleDateFormat;, import java.time.Instant;, import java.util.Date;, import java.util.TimeZone;, , public class Program {, , 	public static void main(String[] args) throws ParseException {, , 		SimpleDateFormat sdf1 = new SimpleDateFormat("dd/MM/yyyy");, 		SimpleDateFormat sdf2 = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");, 		SimpleDateFormat sdf3 = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");, 		sdf3.setTimeZone(TimeZone.getTimeZone("GMT"));, 		, 		Date x1 = new Date();, 		Date x2 = new Date(System.currentTimeMillis());, 		Date x3 = new Date(0L);, 		Date x4 = new Date(1000L * 60L * 60L * 5L);, 		, 		Date y1 = sdf1.parse("25/06/2018");, 		Date y2 = sdf2.parse("25/06/2018 15:42:07");, 		Date y3 = Date.from(Instant.parse("2018-06-25T15:42:07Z"));, 		, 		System.out.println("x1: " + x1);, 		System.out.println("x2: " + x2);, 		System.out.println("x3: " + x3);, 		System.out.println("x4: " + x4);, 		System.out.println("y1: " + y1);, 		System.out.println("y2: " + y2);, 		System.out.println("y3: " + y3);, 		System.out.println("-------------");, 		System.out.println("x1: " + sdf2.format(x1));, 		System.out.println("x2: " + sdf2.format(x2));, 		System.out.println("x3: " + sdf2.format(x3));, 		System.out.println("x4: " + sdf2.format(x4));, 		System.out.println("y1: " + sdf2.format(y1));, 		System.out.println("y2: " + sdf2.format(y2));, 		System.out.println("y3: " + sdf2.format(y3));, 		System.out.println("-------------");, 		System.out.println("x1: " + sdf3.format(x1));, 		System.out.println("x2: " + sdf3.format(x2));, 		System.out.println("x3: " + sdf3.format(x3));, 		System.out.println("x4: " + sdf3.format(x4));, 		System.out.println("y1: " + sdf3.format(y1));, 		System.out.println("y2: " + sdf3.format(y2));, 		System.out.println("y3: " + sdf3.format(y3));, 	}, , }]
[package app;, , import java.text.SimpleDateFormat;, import java.time.Instant;, import java.util.Calendar;, import java.util.Date;, , public class Somando {, , 	public static void main(String[] args) {, 		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");, 		Date d = Date.from(Instant.parse("2018-06-25T15:42:07Z"));, , 		System.out.println(sdf.format(d));, 		Calendar cal = Calendar.getInstance();, 		cal.setTime(d);, 		cal.add(Calendar.HOUR_OF_DAY, 4);, 		d = cal.getTime();, , 		System.out.println(sdf.format(d));, , 	}, , }]
[package app;, , import java.text.SimpleDateFormat;, import java.time.Instant;, import java.util.Calendar;, import java.util.Date;, , public class Obtendo {, , 	public static void main(String[] args) {, , 		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");, 		Date d = Date.from(Instant.parse("2018-06-25T15:42:07Z"));, 		System.out.println(sdf.format(d));, 		Calendar cal = Calendar.getInstance();, 		cal.setTime(d);, 		int minutes = cal.get(Calendar.MINUTE);, 		int month = 1 + cal.get(Calendar.MONTH);, 		System.out.println("Minutes: " + minutes);, 		System.out.println("Month: " + month);, , 	}, , }]
[package entities;, , public class Employee {, , 	public String name;, 	public double grossSalary;, 	public double tax;, 	, 	public double netSalary() {, 		return this.grossSalary - this.tax;, 	}, 	, 	public void increaseSalary(double percentage) {, 		this.grossSalary += this.grossSalary * percentage / 100.0;, 	}, , 	@Override, 	public String toString() {, 		return name + ", $ " + String.format("%.2f", netSalary());, 	}, }]
[package app;, , import java.util.Locale;, import java.util.Scanner;, , import entities.Employee;, , public class Program {, , 	public static void main(String[] args) {, 		, 		Locale.setDefault(Locale.US);, 		Scanner sc = new Scanner(System.in);, 		, 		Employee emp = new Employee();, 		, 		System.out.print("Name: ");, 		emp.name = sc.nextLine();, 		, 		System.out.print("Gross Salary: ");, 		emp.grossSalary = sc.nextDouble();, 		, 		System.out.print("Tax: ");, 		emp.tax = sc.nextDouble();, 		, 		System.out.println();, 		System.out.println("Employee: " + emp);, 		System.out.println();, 		System.out.print("Which percentage to increase salary? ");, 		double percentage = sc.nextDouble();, 		emp.increaseSalary(percentage);, 		System.out.println();, 		System.out.println("Updated data: " + emp);, 		sc.close();, 		, 	}, , }]
[package app;, , import java.util.Locale;, import java.util.Scanner;, , public class Program {, , 	public static void main(String[] args) {, , 		Locale.setDefault(Locale.US);, 		Scanner sc = new Scanner(System.in);, , 		double xA, xB, xC, yA, yB, yC;, , 		System.out.println("Enter the measures of triangle X:");, 		xA = sc.nextDouble();, 		xB = sc.nextDouble();, 		xC = sc.nextDouble();, 		System.out.println("Enter the measures of triangle Y:");, 		yA = sc.nextDouble();, 		yB = sc.nextDouble();, 		yC = sc.nextDouble();, , 		double p = (xA + xB + xC) / 2.0;, 		, 		double areaX = Math.sqrt(p * (p - xA) * (p - xB) * (p - xC));, 		, 		p = (yA + yB + yC) / 2.0;, 		, 		double areaY = Math.sqrt(p * (p - yA) * (p - yB) * (p - yC));, 		, 		System.out.printf("Triangle X area: %.4f%n", areaX);, 		, 		System.out.printf("Triangle Y area: %.4f%n", areaY);, 		, 		if (areaX > areaY) {, 			System.out.println("Larger area: X");, 		} else {, 			System.out.println("Larger area: Y");, 		}, 		sc.close();, , 	}, , }]
[package app;, , import java.util.Locale;, import java.util.Scanner;, , import util.Calculator;, , public class Program{, 	public static final double PI = 3.14;, , 	public static void main(String[] args){, 		Locale.setDefault(Locale.US);, 		Scanner sc = new Scanner(System.in);, , 		System.out.print("Enter Radius: ");, 		double radius = sc.nextDouble();, , 		double c = Calculator.circumference(radius);, 		double v = Calculator.volume(radius);, , 		System.out.printf("Circumference: %.2f%n", c);, 		System.out.printf("Volume: %.2f%n", v);, 		System.out.printf("PI value: %.2f%n", Calculator.PI);, 		sc.close();, 	}, }]
[package util;, , public class Calculator{, 	public static final double PI= 3.14;, , 	public static double circumference(double radius){, 		return 2.0 * PI * radius;, 	}, , 	public static double volume(double radius){, 		return 4.0 * PI * radius * radius * radius / 3.0;, 	}, }]
[import java.util.Locale;, import java.util.Scanner;, , public class Program{, 	public static final double PI = 3.14;, , 	public static void main(String[] args){, 		Locale.setDefault(Locale.US);, 		Scanner sc = new Scanner(System.in);, , 		System.out.print("Enter Radius: ");, 		double radius = sc.nextDouble();, , 		double c = circuference(radius);, 		double v = volume(radius);, , 		System.out.printf("Circumference: %.2f%n", c);, 		System.out.printf("Volume: %.2f%n", v);, 		System.out.printf("PI value: %.2f%n", PI);, 		sc.close();, 	}, , 	public static double circuference(double radius){, 		return 2.0 * PI * radius;, 	}, , 	public static double volume(double radius){, 		return 4.0 * PI * radius;, 	}, }]
[package app;, , import java.util.Locale;, import java.util.Scanner;, , import util.Calculator;, , public class Program{, 	public static final double PI = 3.14;, , 	public static void main(String[] args){, 		Locale.setDefault(Locale.US);, 		Scanner sc = new Scanner(System.in);, , 		Calculator calc = new Calculator();, , 		System.out.print("Enter Radius: ");, 		double radius = sc.nextDouble();, , 		double c = calc.circumference(radius);, 		double v = calc.volume(radius);, , 		System.out.printf("Circumference: %.2f%n", c);, 		System.out.printf("Volume: %.2f%n", v);, 		System.out.printf("PI value: %.2f%n", calc.PI);, 		sc.close();, 	}, }]
[package util;, , public class Calculator{, 	public final double PI= 3.14;, , 	public double circumference(double radius){, 		return 2.0 * PI * radius;, 	}, , 	public double volume(double radius){, 		return 4.0 * PI * radius * radius * radius / 3.0;, 	}, }]
[package app;, , import java.util.Locale;, import java.util.Scanner;, , import util.CurrencyConverter;, , public class Program{, , 	public static void main(String args[]){, 	, 		Locale.setDefault(Locale.US);, 		Scanner sc = new Scanner(System.in);, , 		System.out.print("What is the dollar price?");, 		double dollarPrice = sc.nextDouble();, , 		System.out.print("How many dollars will be bought?");, 		double amount = sc.nextDouble();, , 		System.out.printf("Amount to be paid in reais = %.2f%n", CurrencyConverter.convertDolla(amount, dollarPrice));, , 		sc.close();, 	}, , }]
[package util;, , public class CurrencyConverter{, , 	public static final  double IOF = 0.06;, , 	public static double convertDolla(double amount, double dollarPrice){, 		return amount * dollarPrice * (1.0 + IOF);, 	}, , }]
[package entities;, , public class Rectangle {, 	, 	public double width;, 	public double height;, 	, 	public double area() {, 		return this.width * this.height;, 	}, 	public double perimeter() {, 		return 2 * (this.height + this.width);, 	}, 	, 	public double diagonal() {, 		return Math.sqrt(this.height * this.height + this.width *  this.width );, 	}, , }]
[package app;, , import java.util.Locale;, import java.util.Scanner;, , import entities.Rectangle;, , public class Program {, , 	public static void main(String[] args) {, 		, 		Locale.setDefault(Locale.US);, 		Scanner sc = new Scanner(System.in);, 		, 		System.out.println("Enter rectangle width and height: ");, 		, 		Rectangle retangle = new Rectangle();, 		retangle.height = sc.nextDouble();, 		retangle.width = sc.nextDouble();, 		, 		System.out.printf("AREA = %.2f%n", retangle.area());, 		System.out.printf("PERIMETER = %.2f%n", retangle.perimeter());, 		System.out.printf("DIAGONAL = %.2f%n", retangle.diagonal());, 		sc.close();, 		, , 	}, , }]
[package entities;, , public class Triangle {, 	public double a;, 	public double b;, 	public double c;, }]
[package app;, , import java.util.Locale;, import java.util.Scanner;, , import entities.Triangle;, , public class Program {, , 	public static void main(String[] args) {, , 		Locale.setDefault(Locale.US);, 		Scanner sc = new Scanner(System.in);, , 		//double x.a, x.b, x.c, y.a, y.b, y.c;, 		, 		Triangle x, y;, 		x = new Triangle();, 		y = new Triangle();, 		, , 		System.out.println("Enter the measures of triangle X:");, 		x.a = sc.nextDouble();, 		x.b = sc.nextDouble();, 		x.c = sc.nextDouble();, 		System.out.println("Enter the measures of triangle Y:");, 		y.a = sc.nextDouble();, 		y.b = sc.nextDouble();, 		y.c = sc.nextDouble();, , 		double p = (x.a + x.b + x.c) / 2.0;, 		, 		double areaX = Math.sqrt(p * (p - x.a) * (p - x.b) * (p - x.c));, 		, 		p = (y.a + y.b + y.c) / 2.0;, 		, 		double areaY = Math.sqrt(p * (p - y.a) * (p - y.b) * (p - y.c));, 		, 		System.out.printf("Triangle X area: %.4f%n", areaX);, 		, 		System.out.printf("Triangle Y area: %.4f%n", areaY);, 		, 		if (areaX > areaY) {, 			System.out.println("Larger area: X");, 		} else {, 			System.out.println("Larger area: Y");, 		}, 		sc.close();, , 	}, , }]
[package entities;, , public class Product {, 	public String name;, 	public double price;, 	public int quantity;, , 	public double totalValueInStock() {, 		return price * this.quantity;, 	}, , 	public void addProducts(int quantity) {, 		this.quantity += quantity;, 	}, , 	public void removeProducts(int quantity) {, 		this.quantity -= quantity;, 	}, , 	public String toString() {, 		return name + ", $ " , 					+ String.format("%.2f", price) + ", " , 					+ quantity + " units, Total: $ ", 					+ String.format("%.2f", totalValueInStock());, 	}, }]
[package app;, , import java.util.Locale;, import java.util.Scanner;, , import entities.Product;, , public class Program {, , 	public static void main(String[] args) {, , 		Locale.setDefault(Locale.US);, 		Scanner sc = new Scanner(System.in);, , 		Product product = new Product();, 		System.out.println("Enter product data:");, , 		System.out.print("Name: ");, 		product.name = sc.nextLine();, , 		System.out.print("Price: ");, 		product.price = sc.nextDouble();, , 		System.out.print("Quantity in Stock: ");, 		product.quantity = sc.nextInt();, , 		System.out.println();, 		System.out.println("Product data: " + product);, 		System.out.println();, 		, 		System.out.print("Enter the number of products to be added in stock: ");, 		int quantity = sc.nextInt();, 		product.addProducts(quantity);, 		, 		System.out.println();, 		System.out.println("Updated data: " + product);, 		System.out.println();, 		, 		System.out.print("Enter the number of products to be removed from stock: ");, 		quantity = sc.nextInt();, 		product.removeProducts(quantity);, 		System.out.println();, 		System.out.println("Updated data: " + product);, , 		sc.close();, 	}, , }]
[package entities;, , public class Triangle {, 	public double a;, 	public double b;, 	public double c;, , 	public double area() {, 		double p = (a + b + c) / 2.0;, 		return Math.sqrt(p * (p - a) * (p - b) * (p - c));, 	}, , }]
[package app;, , import java.util.Locale;, import java.util.Scanner;, , import entities.Triangle;, , public class Program {, , 	public static void main(String[] args) {, , 		Locale.setDefault(Locale.US);, 		Scanner sc = new Scanner(System.in);, , 		//double x.a, x.b, x.c, y.a, y.b, y.c;, 		, 		Triangle x, y;, 		x = new Triangle();, 		y = new Triangle();, 		, , 		System.out.println("Enter the measures of triangle X:");, 		x.a = sc.nextDouble();, 		x.b = sc.nextDouble();, 		x.c = sc.nextDouble();, 		System.out.println("Enter the measures of triangle Y:");, 		y.a = sc.nextDouble();, 		y.b = sc.nextDouble();, 		y.c = sc.nextDouble();, , 		//double p = (x.a + x.b + x.c) / 2.0;, 		//double areaX = Math.sqrt(p * (p - x.a) * (p - x.b) * (p - x.c));, 		//p = (y.a + y.b + y.c) / 2.0;, 		//double areaY = Math.sqrt(p * (p - y.a) * (p - y.b) * (p - y.c));, 		double areaX = x.area();, 		double areaY = y.area();, 		, 		System.out.printf("Triangle X area: %.4f%n", areaX);, 		, 		System.out.printf("Triangle Y area: %.4f%n", areaY);, 		, 		if (areaX > areaY) {, 			System.out.println("Larger area: X");, 		} else {, 			System.out.println("Larger area: Y");, 		}, 		sc.close();, , 	}, , }]
[package entities;, , public class Student {, 	public String name;, 	public double grade1;, 	public double grade2;, 	public double grade3;, , 	public double finalGrade() {, 		return grade1 + grade2 + grade3;, 	}, , 	public double missingPoints() {, 		if (finalGrade() < 60.0) {, 			return 60.0 - finalGrade();, 		} else {, 			return 0.0;, 		}, 	}, , }]
[package app;, , import java.util.Locale;, import java.util.Scanner;, , import entities.Student;, , public class Program {, , 	public static void main(String[] args) {, , 		Locale.setDefault(Locale.US);, 		Scanner sc = new Scanner(System.in);, , 		Student student = new Student();, , 		student.name = sc.nextLine();, 		student.grade1 = sc.nextDouble();, 		student.grade2 = sc.nextDouble();, 		student.grade3 = sc.nextDouble();, , 		System.out.printf("FINAL GRADE: %.2f%n", student.finalGrade());, , 		if (student.finalGrade() < 60.0) {, 			System.out.println("FAILED");, 			System.out.printf("MISSING %.2f POINTS%n", student.missingPoints());, 		} else {, 			System.out.println("PASS");, 		}, 		sc.close();, , 	}, , }]
[package exercicio;, , import java.util.Locale;, import java.util.Scanner;, , public class Programm {, , 	public static void main(String[] args) {, , 		Locale.setDefault(Locale.US);, 		Scanner sc = new Scanner(System.in);, 		, 		System.out.println("Enter your full name:");, 		String fullName = sc.nextLine();, 		, 		System.out.println("How many bedrooms are there in your house?");, 		int bedrooms = sc.nextInt();, 		, 		System.out.println("Enter product price:");, 		double price = sc.nextDouble();, 		, 		System.out.println("Enter your last name, age and height (same line):");, 		String lastName = sc.next();, 		int age = sc.nextInt();, 		double height = sc.nextDouble();, 		, 		System.out.println(fullName);, 		System.out.println(bedrooms);, 		System.out.printf("%.2f%n", price);, 		System.out.println(lastName);, 		System.out.println(age);, 		System.out.printf("%.2f%n", height);, 		, 		sc.close();, , 	}, , }]
[package app;, , import java.util.Locale;, import java.util.Scanner;, , public class Program {, , 	public static void main(String[] args) {, , 		Locale.setDefault(Locale.US);, 		Scanner sc = new Scanner(System.in);, , 		int n1 = sc.nextInt();, , 		sc.nextLine(); // Limpeza de stream de entrada (flush), , 		String name = sc.nextLine();, 		char gender = sc.next().charAt(0);, , 		String s = sc.next();, 		char letter = s.charAt(0);, 		int digit = Integer.parseInt(s.substring(1));, , 		double n2 = sc.nextDouble(); // 4.32, , 		String name2 = sc.next(); // Maria F 23 1.68, 		char ch = sc.next().charAt(0);, 		int age = sc.nextInt();, 		double height = sc.nextDouble();, , 		System.out.println(n1);, 		System.out.println(name);, 		System.out.println(gender);, 		System.out.println(letter);, 		System.out.println(digit);, 		System.out.println(n2);, 		System.out.println(name2);, 		System.out.println(ch);, 		System.out.println(age);, 		System.out.println(height);, 		, 		sc.close();, , 	}, , }]
[package app;, , import java.util.Scanner;, , public class Programm {, , 	public static void main(String[] args) {, 		Scanner sc = new Scanner(System.in);, 		, 		//double price = 400;, 		double discount;, 		, 		double price = sc.nextDouble();, 		if (price > 100.0) {, 			discount = price * 0.1;, 		}else {, 			discount = 0;, 		}, 		System.out.println(discount);, 		sc.close();, 	}, , }]
[package exercicio;, , import java.util.Locale;, import java.util.Scanner;, , public class Exercicio_1 {, , 	public static void main(String[] args) {, , 		Locale.setDefault(Locale.US);, 		Scanner sc = new Scanner(System.in);, 		, 		int a = sc.nextInt();, 		int b = sc.nextInt();, 		int c = sc.nextInt();, 		, 		if( a > b && a > c) {, 			System.out.println("Highter = " + a);, 		}else if(b > c) {, 			System.out.println("Highter = " + b);, 		}else {, 			System.out.println("Highter = " + c);, 		}, 		sc.close();, , 	}, , }]
[package exemplos;, , import java.util.Scanner;, , public class Program_1 {, , 	public static void main(String[] args) {, 		, 		Scanner sc = new Scanner(System.in);, 		System.out.println("Enter an integer numver: ");, 		, 		int n = sc.nextInt();, 		, 		if(n % 2 == 0) {, 			System.out.println("Even!");, 		}else{, 			System.out.println("Odd!");, 		}, 		sc.close();, , 	}, , }]
[package exemplos;, , import java.util.Scanner;, , public class Program_2 {, 	public static void main(String[] args) {, 		, 		Scanner sc = new Scanner(System.in);, 		, 		System.out.println("What time is it?");, 		int time = sc.nextInt();, 		, 		if(time < 12) {, 			System.out.println("Good morning");, 		}else if(time < 18 ) {, 			System.out.println("Good afternoon!!");, 		}else {, 			System.out.println("Good Evening");, 		}, 		sc.close();, 		, 	}, }]
[package app;, , public class Programm {, , 	public static void main(String[] args) {, , 		int a = 10;, 		boolean c1 = a < 10;, 		boolean c2 = a < 20;, 		boolean c3 = a > 10;, 		boolean c4 = a > 5;, 		System.out.println(c1);, 		System.out.println(c2);, 		System.out.println(c3);, 		System.out.println(c4);, 		System.out.println("------------");, 		, 		boolean c5 = a <= 10;, 		boolean c6 = a >= 10;, 		boolean c7 = a == 10;, 		boolean c8 = a != 10;, 		System.out.println(c5);, 		System.out.println(c6);, 		System.out.println(c7);, 		System.out.println(c8);, , 	}, , }]
[package exemplo1;, , public class Exemplo1 {, , 	public static void main(String[] args) {, 		int n1 = 89;, 		int n2 = 60;, 		System.out.println(n1 & n2);, 		System.out.println(n1 | n2);, 		System.out.println(n1 ^ n2);, 		, 		/*, 		 * 24 , 		 * 125 , 		 * 101, 		 * , 		 */, , 	}, , }]
[package exemplo2;, , import java.util.Scanner;, , public class Exemplo2 {, , 	public static void main(String[] args) {, , 		Scanner sc = new Scanner(System.in);, 		int mask = 0b100000;, 		int n = sc.nextInt();, 		, 		if ((n & mask) != 0) {, 			System.out.println("6th bit is true!");, 		} else {, 			System.out.println("6th bit is false");, 		}, 		sc.close();, , 	}, , }]
[package app;, , public class Programm {, , 	public static void main(String[] args) {, 		, 		boolean c1 = 2 > 3 || 4 != 5;, 		boolean c2 = !(2 > 3) && 4 != 5;, 		, 		System.out.println(c1);, 		System.out.println(c2);, 		, 		System.out.println();, 		, 		boolean c3 = 10 < 5;, 		boolean c4 = c1 || c2 && c3;, 		System.out.println(c4);, , 	}, , }]
[package app;, , import java.util.Locale;, , public class Exercicio {, 	public static void main(String[] args) {, 		String product1 = "Computer";, 		String product2 = "Office desk";, 		byte age = 30;, 		int code = 5290;, 		char gender = 'F';, 		double price1 = 2100.0;, 		double price2 = 650.50;, 		double measure = 53.234567;, 		, 		System.out.println("Products:");, 		System.out.printf("%s, which price is $ %.2f%n", product1, price1);, 		System.out.printf("%s, which price is $ %.2f%n", product2, price2);, 		System.out.println();, 		System.out.printf("Record: %d years old, code %d and gender: %c%n", age, code, gender);, 		System.out.println();, 		System.out.printf("Measue with eight decimal places: %.8f%n", measure);, 		System.out.printf("Rouded (three decimal places): %.3f%n", measure);, 		, 		Locale.setDefault(Locale.US);, 		System.out.printf("US decimal point: %.3f%n", measure);, 	}, }]
[package app;, , import java.util.Locale;, , public class Programm {, , 	public static void main(String[] args) {, 		, 		char gender = 'F';, 		int age = 32;, 		double balance = 10.35784;, 		String name = "Maria";, 		, 		System.out.print("Good morning!");, 		System.out.println("Good afternoon!");, 		System.out.println("Good night!");, 		System.out.println("---------------------------");, 		System.out.println(balance);, 		System.out.printf("%.2f%n", balance);, 		System.out.printf("%.4f%n", balance);, 		Locale.setDefault(Locale.US);, 		System.out.printf("%.4f%n", balance);, 		System.out.println("---------------------------");, 		System.out.printf("%s is %d years old, gender %c, and got balance = %.2f bitcoins%n", name, age,gender, balance);, , 	}, , }]
[package app;, , import java.util.Scanner;, , public class Program {, , 	public static void main(String[] args) {, 		, 		Scanner sc = new Scanner(System.in);, 		, 		System.out.println("Enter three number");, 		int a = sc.nextInt();, 		int b = sc.nextInt();, 		int c = sc.nextInt();, 		, 		int higher = max(a,b,c);, 		showResult(higher);, 		, 		sc.close();, 		, 	}, 	, 	public static int max(int a, int b, int c) {, 		int aux;, 		if(a > b && a > c) {, 			aux = a;, 		} else if(b > c) {, 			aux = b;, 		}else {, 			aux = c;, 		}, 		return aux;, 	}, 	public static void showResult( int value) {, 		System.out.println("Higher = " + value);, 	}, , }]
[package app;, , import java.util.Scanner;, , public class Program {, , 	public static void main(String[] args) {, , 		Scanner sc = new Scanner(System.in);, 		int x = sc.nextInt();, 		String day;, 		switch (x) {, 		case 1:, 			day = "Sunday";, 			break;, 		case 2:, 			day = "Monday";, 			break;, 		case 3:, 			day = "Tuesday";, 			break;, 		case 4:, 			day = "Wednesday";, 			break;, 		case 5:, 			day = "Thursday";, 			break;, 		case 6:, 			day = "Friday";, 			break;, 		case 7:, 			day = "Saturday";, 			break;, 		default:, 			day = "Invalid value";, 		}, 		System.out.println("Day: " + day);, 		, 		sc.close();, , 	}, , }]
[package app;, , import java.util.Scanner;, , public class Program {, , 	public static void main(String[] args) {, 		, 		Scanner sc  = new Scanner(System.in);, 		, 		System.out.print("Enter N: ");, 		int n = sc.nextInt();, 		while(n <= 0) {, 			System.out.println("N nust be positive! try again!: ");, 			n = sc.nextInt();, 		}, 		, 		int higher = Integer.MIN_VALUE;, 		for(int i = 1 ; i <= n ; i++) {, 			System.out.println("Value #"+ i + ": ");, 			int x = sc.nextInt();, 			if(x > higher) {, 				higher = x;, 			}, 		}, , 		System.out.println("Higher = "+ higher);, 		, 		sc.close();, , 	}, , }]
[package app;, , public class Programm {, , 	public static void main(String[] args) {, 		, 		// Exemplo 1, 		/*, 		double a;, 		float b;, 		a = 5.0;, 		b = (float)a;, 		System.out.println(b);, 		*/, 		, 		// Exemplo 2, 		/*, 		double a;, 		int b;, 		a = 5.0;, 		b = (int)a;, 		System.out.println(b);, 		 */, , 		//Exemplo 3, 		int a, b;, 		double result;, 		a = 5;, 		b = 2;, 		result = (double) a / b;, 		System.out.println(result);, , 	}, , }]
[package app;, , public class Programm {, , 	public static void main(String[] args) {, , 		double n1 = 10;, 		double n2 = 30;, 		String s = "ABC";, 		System.out.println(n1);, 		System.out.println(n2);, 		System.out.println(s);, 		System.out.println("-------------");, 		, 		n1 *= 2;, 		n2 += n1;, 		s += "DEF";, 		System.out.println(n1);, 		System.out.println(n2);, 		System.out.println(s);, , 	}, , }]
[package exemplos;, , public class Program_1 {, 	public static void main(String[] args) {, 		String original = "abcde FGHIJ ABC abc DEFG ";, 		String s01 = original.toLowerCase();, 		String s02 = original.toUpperCase();, 		String s03 = original.trim();, 		String s04 = original.substring(2);, 		String s05 = original.substring(2, 9);, 		String s06 = original.replace('a', 'x');, 		String s07 = original.replace("abc", "xy");, 		int i = original.indexOf("bc");, 		int j = original.lastIndexOf("bc");, 		System.out.println("Original: -" + original + "-");, 		System.out.println("toLowerCase: -" + s01 + "-");, 		System.out.println("toUpperCase: -" + s02 + "-");, 		System.out.println("trim: -" + s03 + "-");, 		System.out.println("substring(2): -" + s04 + "-");, 		System.out.println("substring(2, 9): -" + s05 + "-");, 		System.out.println("replace('a', 'x'): -" + s06 + "-");, 		System.out.println("replace('abc', 'xy'): -" + s07 + "-");, 		System.out.println("Index of 'bc': " + i);, 		System.out.println("Last index of 'bc': " + j);, 		, 		System.out.println("---------------------");, 		, 		String s = "potato apple lemon";, 		String[] vect = s.split(" ");, //		String word1 = vect[0];, //		String word2 = vect[1];, //		String word3 = vect[2];, 		System.out.println(vect[0]);, 		System.out.println(vect[1]);, 		System.out.println(vect[2]);, 		, 		, 	}, }]
[package course;, , public class Program {, , 	public static void main(String[] args) {, , 		System.out.println("Hello world!");, , 	}, , }]
[package app;, , import java.util.Scanner;, , public class Program {, , 	public static void main(String[] args) {, 		, 		Scanner sc = new Scanner(System.in);, 		, 		String sentence = sc.nextLine();, 		String x,y,z;, 		, 		x = sc.next();, 		y = sc.next();, 		z = sc.next();, 		, 		System.out.println(sentence);, 		System.out.println(x);, 		System.out.println(y);, 		System.out.println(z);, 		, 		x = sc.next();, 		y = sc.next();, 		z = sc.next();, 		System.out.println(x);, 		System.out.println(y);, 		System.out.println(z);, 		, 		sc.close();, , 	}, , }]
[package app;, , import java.util.Locale;, import java.util.Scanner;, , /*, Este programa calcula as raízes de uma equação do segundo grau, Os valores dos coeficientes devem ser digitados um por linha, */, , public class Programm {, , 	public static void main(String[] args) {, 		, 		Locale.setDefault(Locale.US);, 		Scanner sc = new Scanner(System.in);, 		double a, b, c, delta;, 		System.out.println("Digite os valores dos coeficientes:");, 		a = sc.nextDouble();, 		b = sc.nextDouble();, 		c = sc.nextDouble();, 		delta = b * b - 4 * a * c; // cálculo do valor de delta, 		, 		System.out.println(delta);, 		, 		sc.close();, , 	}, , }]
[package app;, , import java.util.Scanner;, , public class Program {, , 	public static void main(String[] args) {, 		, 		Scanner sc = new Scanner(System.in);, 		, 		System.out.println("How many integer number are you going to enter: ");, 		int n = sc.nextInt();, 		, 		int sum = 0;, 		, 		for(int i = 1; i<= n ; i++) {, 			System.out.print("Value #" + i + ": ");, 			int x = sc.nextInt();, 			sum += x;, 		}, 		System.out.println("Sum = "+ sum);, 		, 		sc.close();, , 	}, , }]
[package app;, , import java.util.Locale;, import java.util.Scanner;, , public class Program {, , 	public static void main(String[] args) {, 		, 		Locale.setDefault(Locale.US);, 		Scanner sc = new Scanner(System.in);, 		, 		System.out.println("ENter a number: ");, 		double n = sc.nextDouble();, 		, 		while(n > 0.0) {, 			double sr = Math.sqrt(n);, 			System.out.printf("%.3f%n", sr);, 			System.out.println("Enter another number");, 			n = sc.nextDouble();, 		}, 		, 		System.out.println("NEgative number... end!");, 		sc.close();, , 	}, , }]
[package app;, , import java.util.Scanner;, , public class Program {, , 	public static void main(String[] args) {, 		, 		Scanner sc = new Scanner(System.in);, 		, 		System.out.println("Enter three number");, 		int a = sc.nextInt();, 		int b = sc.nextInt();, 		int c = sc.nextInt();, 		, //		if(a > b && a > c) {, //			System.out.println("Higher = " + a);, //		} else if(b > c) {, //			System.out.println("Higher = "+ b );, //		}else {, //			System.out.println("Higher = "+ c);, //		}, 		int higher = max(a,b,c);, 		showResult(higher);, 		, 		sc.close();, 		, 	}, 	, 	public static int max(int a, int b, int c) {, 		int aux;, 		if(a > b && a > c) {, 			aux = a;, 		} else if(b > c) {, 			aux = b;, 		}else {, 			aux = c;, 		}, 		return aux;, 	}, 	public static void showResult( int value) {, 		System.out.println("Higher = " + value);, 	}, , }]
[package app;, , public class Programm {, , 	public static void main(String[] args) {, , 		double preco = 34.5;, 		//double desconto;, 		, //		if (preco < 20.0) {, //			desconto = preco * 0.1;, //		} else {, //			desconto = preco * 0.05;, //		}, 		, 		double desconto = (preco < 20.0) ? preco * 0.1 : preco * 0.05;, 		, 		System.out.println(desconto);, 	}, , }]
[package app;, , import java.util.Locale;, import java.util.Scanner;, , public class Program {, , 	public static void main(String[] args) {, 		, 		Locale.setDefault(Locale.US);, 		Scanner sc = new Scanner(System.in);, 		, 		char resp;, 		, 		do {, 			System.out.print("Enter a number");, 			double n = sc.nextDouble();, 			double sq = Math.sqrt(n);, 			System.out.printf("Square root = %.3f%n", sq);, 			, 			System.out.print("Repeat? 'y' or 'n'");, 			resp = sc.next().charAt(0);, 			, 		}while(resp != 'n');, 		sc.close();, 	}, , }]
[package app;, , public class Programm {, , 	public static void main(String[] args) {, , 		boolean completed = false;, 		char gender = 'F';, 		char letter = '\u0041';, 		byte n1 = 126;, 		int n2 = 1000;, 		int n3 = 2147483647;, 		long n4 = 2147483648L;, 		float n5 = 4.5f;, 		double n6 = 4.5;, 		, 		String name = "Maria Green";, 		Object obj1 = "Alex Brown";, 		Object obj2 = 4.5f;, 		, 		System.out.println(completed);, 		System.out.println(gender);, 		System.out.println(letter);, 		System.out.println(n1);, 		System.out.println(n2);, 		System.out.println(n3);, 		System.out.println(n4);, 		System.out.println(n5);, 		System.out.println(n6);, 		System.out.println(name);, 		System.out.println(obj1);, 		System.out.println(obj2);, , 	}, , }]
[package app;, , public class Programm {, , 	public static void main(String[] args) {, , 		int n1 = 3 + 4 * 2;, 		int n2 = (3 + 4) * 2;, 		int n3 = 17 % 3;, 		double n4 = 10.0 / 8.0;, 		, 		double a = 1.0, b = -3.0, c = -4.0;, 		double x1 = (-b + Math.sqrt(b * b - 4 * a * c)) / (2 * a);, , 		System.out.println(n1);, 		System.out.println(n2);, 		System.out.println(n3);, 		System.out.println(n4);, 		System.out.println(x1);, , 	}, , }]
[package entities;, , public class BusinessAccount extends Acconunt{, ,     private Double loanLimit;, ,     public BusinessAccount() {,         super();,     }, ,     public BusinessAccount(Integer number, String holder, Double balance, Double loanLimit) {,         super(number, holder, balance);,         this.loanLimit = loanLimit;,     }, ,     public Double getLoanLimit() {,         return loanLimit;,     }, ,     public void setLoanLimit(Double loanLimit) {,         this.loanLimit = loanLimit;,     }, ,     /* ------- Methods -----------------*/, ,     public void loan(double amount){,         if(amount <= loanLimit){,             //deposit(amount);,             balance += amount - 10.0;,         },     }, ,     @Override,     public void withdraw(double amount) {,         super.withdraw(amount);,         balance -= 2.0;,     }, }]
[package entities;, , public class SavingsAccount extends Acconunt {, ,     private Double interestRate;, ,     public SavingsAccount() {,         super();,     }, ,     public SavingsAccount(Integer number, String holder, Double balance, Double interestRate) {,         super(number, holder, balance);,         this.interestRate = interestRate;,     }, ,     public Double getInterestRate() {,         return interestRate;,     }, ,     public void setInterestRate(Double interestRate) {,         this.interestRate = interestRate;,     }, ,     /* ------------- methods ----------- */, ,     public void updateBalance() {,         balance += balance * interestRate;,     }, ,     @Override,     public void withdraw(double amount) {,         balance -= amount;,     }, }]
[package entities;, , public class Acconunt {,     private Integer number;,     private String holder;,     //private Double balance;,     protected Double balance;, ,     public Acconunt() {,     }, ,     public Acconunt(Integer number, String holder, Double balance) {,         this.number = number;,         this.holder = holder;,         this.balance = balance;,     }, ,     public Integer getNumber() {,         return number;,     }, ,     public void setNumber(Integer number) {,         this.number = number;,     }, ,     public String getHolder() {,         return holder;,     }, ,     public void setHolder(String holder) {,         this.holder = holder;,     }, ,     public Double getBalance() {,         return balance;,     }, ,     /* ------------- Methods ------------------- */, ,     public void withdraw(double amount){,         balance -= amount + 5.0;,     },     public void deposit(double amount){,         balance += amount;,     }, }]
[package app;, , import entities.Acconunt;, import entities.BusinessAccount;, import entities.SavingsAccount;, , public class Program {,     public static void main(String[] args) {, ,         Acconunt acc1 = new Acconunt(1001, "Alex", 1000.0);,         acc1.withdraw(200.00);,         System.out.println(acc1.getBalance());, ,         Acconunt acc2 = new SavingsAccount(1002, "Jose", 1000.0, 0.01);,         acc2.withdraw(200.0);,         System.out.println(acc2.getBalance());, ,         Acconunt acc3 = new BusinessAccount(1003, "bob", 1000.0, 500.0);,         acc3.withdraw(200.0);,         System.out.println(acc3.getBalance());, ,     }, }]
[package entities;, , public class Employee {, ,     private String name;,     private Integer hours;,     private Double valuePerHour;, ,     public Employee() {,     }, ,     public Employee(String name, Integer hours, Double valuePerHour) {,         this.name = name;,         this.hours = hours;,         this.valuePerHour = valuePerHour;,     }, ,     public String getName() {,         return name;,     }, ,     public void setName(String name) {,         this.name = name;,     }, ,     public Integer getHours() {,         return hours;,     }, ,     public void setHours(Integer hours) {,         this.hours = hours;,     }, ,     public Double getValuePerHour() {,         return valuePerHour;,     }, ,     public void setValuePerHour(Double valuePerHour) {,         this.valuePerHour = valuePerHour;,     }, ,     public double payment() {,         return hours * valuePerHour;,     }, }]
[package entities;, , public class OutsourcedEmployee extends Employee {, ,     private Double additionalCharge;, ,     public OutsourcedEmployee() {,         super();,     }, ,     public OutsourcedEmployee(String name, Integer hours, Double valuePerHour, Double additionalCharge) {,         super(name, hours, valuePerHour);,         this.additionalCharge = additionalCharge;,     }, ,     public Double getAdditionalCharge() {,         return additionalCharge;,     }, ,     public void setAdditionalCharge(Double additionalCharge) {,         this.additionalCharge = additionalCharge;,     }, ,     @Override,     public double payment() {,         return super.payment() + additionalCharge * 1.1;,     }, }]
[package app;, , import entities.Employee;, import entities.OutsourcedEmployee;, , import java.util.ArrayList;, import java.util.List;, import java.util.Locale;, import java.util.Scanner;, , public class Program {,     public static void main(String[] args) {,         Locale.setDefault(Locale.US);,         Scanner sc = new Scanner(System.in);, ,         List<Employee> list = new ArrayList<>();, ,         System.out.print("Enter the number of employees: ");,         int n = sc.nextInt();, ,         for (int i = 1; i <= n; i++) {,             System.out.println("Employee #" + i + " data:");,             System.out.print("Outsourced (y/n)? ");,             char ch = sc.next().charAt(0);,             System.out.print("Name: ");,             sc.nextLine();,             String name = sc.nextLine();,             System.out.print("Hours: ");,             int hours = sc.nextInt();,             System.out.print("Value per hour: ");,             double valuePerHour = sc.nextDouble();,             if (ch == 'y') {,                 System.out.print("Additional charge: ");,                 double additionalCharge = sc.nextDouble();,                 list.add(new OutsourcedEmployee(name, hours, valuePerHour, additionalCharge));,             } else {,                 list.add(new Employee(name, hours, valuePerHour));,             },         }, ,         System.out.println();,         System.out.println("PAYMENTS:");,         for (Employee emp : list) {,             System.out.println(emp.getName() + " - $ " + String.format("%.2f", emp.payment()));,         }, ,         sc.close();,     }, }]
[package entities;, , public class BusinessAccount extends Acconunt{, ,     private Double loanLimit;, ,     public BusinessAccount() {,         super();,     }, ,     public BusinessAccount(Integer number, String holder, Double balance, Double loanLimit) {,         super(number, holder, balance);,         this.loanLimit = loanLimit;,     }, ,     public Double getLoanLimit() {,         return loanLimit;,     }, ,     public void setLoanLimit(Double loanLimit) {,         this.loanLimit = loanLimit;,     }, ,     /* ------- Methods -----------------*/, ,     public void loan(double amount){,         if(amount <= loanLimit){,             //deposit(amount);,             balance += amount - 10.0;,         },     }, }]
[package entities;, , public class SavingsAccount extends Acconunt {, ,     private Double interestRate;, ,     public SavingsAccount() {,         super();,     }, ,     public SavingsAccount(Integer number, String holder, Double balance, Double interestRate) {,         super(number, holder, balance);,         this.interestRate = interestRate;,     }, ,     public Double getInterestRate() {,         return interestRate;,     }, ,     public void setInterestRate(Double interestRate) {,         this.interestRate = interestRate;,     }, ,     /* ------------- methods ----------- */, ,     public void updateBalance() {,         balance += balance * interestRate;,     }, }]
[package entities;, , public class Acconunt {,     private Integer number;,     private String holder;,     //private Double balance;,     protected Double balance;, ,     public Acconunt() {,     }, ,     public Acconunt(Integer number, String holder, Double balance) {,         this.number = number;,         this.holder = holder;,         this.balance = balance;,     }, ,     public Integer getNumber() {,         return number;,     }, ,     public void setNumber(Integer number) {,         this.number = number;,     }, ,     public String getHolder() {,         return holder;,     }, ,     public void setHolder(String holder) {,         this.holder = holder;,     }, ,     public Double getBalance() {,         return balance;,     }, ,     /* ------------- Methods ------------------- */, ,     public void withdraw(double amount){,         balance -= amount;,     },     public void deposit(double amount){,         balance += amount;,     }, }]
[package app;, , import entities.Acconunt;, import entities.BusinessAccount;, import entities.SavingsAccount;, , public class Programm {,     public static void main(String[] args) {, ,         Acconunt acc = new Acconunt(1001, "Alex", 0.0);,         BusinessAccount bacc = new BusinessAccount(1002, "Jose", 0.0, 500.00);, ,         /* UPCASTING */,         Acconunt acc1 = bacc;,         Acconunt acc2 = new BusinessAccount(1003, "Bob", 0.0, 200.0);,         Acconunt acc3 = new SavingsAccount(1004, "Anna", 0.0, 10.0);, ,         // DOWNCASTING,         BusinessAccount acc4 = (BusinessAccount) acc2;,         acc4.loan(100.00);, ,         //BusinessAccount acc5 = (BusinessAccount) acc3; // acc3 -> é um SavingsAccount | Dará erro em tempo de execução, ,         if(acc3 instanceof BusinessAccount){,             BusinessAccount acc5 = (BusinessAccount) acc3;,             acc5.loan(200.00);,             System.out.println("LOAN!");,         },         if(acc3 instanceof SavingsAccount){,             SavingsAccount acc5 = (SavingsAccount) acc3;,             acc5.updateBalance();,             System.out.println("UPDATE");,         },     }, }]
[package entities;, , public class Product {, , 	private String name;, 	private double price;, 	, 	public Product(String name, double price) {, 		this.name = name;, 		this.price = price;, 	}, , 	public String getName() {, 		return name;, 	}, , 	public void setName(String name) {, 		this.name = name;, 	}, , 	public double getPrice() {, 		return price;, 	}, , 	public void setPrice(double price) {, 		this.price = price;, 	}, 	, 	, 	, 	, 	, }]
[package app;, , import java.util.Locale;, import java.util.Scanner;, , import entities.Product;, , public class Program {, , 	public static void main(String[] args) {, , 		Locale.setDefault(Locale.US);, 		Scanner sc = new Scanner(System.in);, 		, 		int n = sc.nextInt();, 		Product[] vect = new Product[n];, 		, 		for(int i = 0 ; i < vect.length ; i++) {, 			sc.nextLine(); // limpa, 			String name = sc.nextLine();, 			double price = sc.nextDouble();, 			vect[i] = new Product(name, price);, 		}, 		, 		double sum = 0.0;, 		for(int i = 0 ; i < vect.length ; i++) {, 			sum += vect[i].getPrice();, 		}, 		, 		double avg = sum / vect.length;, 		, 		System.out.printf("AVERAGE PRICE = %.2f%n", avg);, 			, 		sc.close();, 		, 	}, , }]
[package app;, , import java.util.Scanner;, , public class Program {, , 	public static void main(String[] args) {, , 		Scanner sc = new Scanner(System.in);, 		, 		int n = sc.nextInt();, 		int[][] mat = new int[n][n];, 		, 		for (int i = 0; i < mat.length; i++) {, 			for (int j = 0; j < mat[i].length; j++) {, 				mat[i][j] = sc.nextInt();, 			}, 		}, 		, 		System.out.println("Diagonal: ");, 		for (int i = 0; i < mat.length; i++) {, 			System.out.print(mat[i][i] + " ");, 		}, 		, 		System.out.println();, 		, 		int count = 0;, 		, 		for (int i = 0; i < mat.length; i++) {, 			for (int j = 0; j < mat[i].length; j++) {, 				if(mat[i][j] < 0) {, 					count++;, 				}, 			}, 		}, 		System.out.println("Negative numbers = " + count);, 		, 		sc.close();, , 	}, , }]
[package entities;, , public class Employee {, 	private Integer id;, 	private String name;, 	private Double salary;, , 	public Employee(Integer id, String name, Double salary) {, 		this.id = id;, 		this.name = name;, 		this.salary = salary;, 	}, , 	public Integer getId() {, 		return id;, 	}, , 	public void setId(Integer id) {, 		this.id = id;, 	}, , 	public String getName() {, 		return name;, 	}, , 	public void setName(String name) {, 		this.name = name;, 	}, , 	public Double getSalary() {, 		return salary;, 	}, , 	public void setSalary(Double salary) {, 		this.salary = salary;, 	}, , 	public void increaseSalary(double percentage) {, 		salary += salary * percentage / 100.0;, 	}, , 	@Override, 	public String toString() {, 		return id + ", " + name + ", " + String.format("%.2f", salary);, 	}, , }]
[package app;, , import java.util.ArrayList;, import java.util.List;, import java.util.Locale;, import java.util.Scanner;, , import entities.Employee;, , public class Program {, , 	public static void main(String[] args) {, , 		Locale.setDefault(Locale.US);, 		Scanner sc = new Scanner(System.in);, , 		List<Employee> listEmployee = new ArrayList<Employee>();, , 		System.out.println("How many employees will be registered?");, 		int employees = sc.nextInt();, , 		for (int i = 1; i <= employees; i++) {, 			System.out.println("Emplyoee #" + i + " : ");, , 			System.out.print("id: ");, 			int id = sc.nextInt();, , 			System.out.print("Name: ");, 			sc.nextLine();, 			String name = sc.next();, , 			System.out.print("Salary: ");, 			double salary = sc.nextDouble();, , 			listEmployee.add(new Employee(id, name, salary));, 		}, 		System.out.println();, 		System.out.print("Enter the employee id that will have salary increase: ");, 		int id = sc.nextInt();, 		Employee emp = listEmployee.stream().filter(x -> x.getId() == id).findFirst().orElse(null);, 		if (emp == null) {, 			System.out.println("This id does not exist!");, 		} else {, 			System.out.print("Enter the percentage: ");, 			double percentage = sc.nextDouble();, 			emp.increaseSalary(percentage);, 		}, , 		System.out.println();, 		System.out.println("List of employees: ");, 		for (Employee obj : listEmployee) {, 			System.out.println(obj);, 		}, , 	}, , }]
[package app;, , import java.util.Locale;, import java.util.Scanner;, , public class Program {, , 	public static void main(String[] args) {, 		, 		Locale.setDefault(Locale.US);, 		Scanner sc = new Scanner(System.in);, 		, 		int n = sc.nextInt();, 		, 		double[] vet = new double[n];, 		, 		for(int i = 0 ; i < n ; i++) {, 			vet[i] = sc.nextDouble();, 		}, 		, 		double sum = 0.0;, 		for(int i = 0 ; i < n ; i++) {, 			sum += vet[i];, 		}, 		, 		double avg = sum /n ;, 		, 		System.out.printf("Average height: %.2f%n", avg);, 		, 		sc.close();, , 	}, , }]
[package app;, , import java.util.Iterator;, , public class Program {, , 	public static void main(String[] args) {, 		, 		String[] vect = new String[] {"JOSE", "Luci", "Mariazinha"};, 		, 		for (int i = 0; i < vect.length; i++) {, 			System.out.println(vect[i]);, 		}, 		System.out.println("-----------------------");, 		, 		for (String obj : vect) {, 			System.out.println(obj);, 		}, , 	}, , }]
[package app;, , import java.util.ArrayList;, import java.util.List;, import java.util.stream.Collectors;, , public class Program {, , 	public static void main(String[] args) {, , 		List<String> list = new ArrayList<>();, , 		list.add("Maria");, 		list.add("Alex");, 		list.add("Babel");, 		list.add("Pharo");, 		list.add("Alberto");, 		list.add("Ziraldo");, 		list.add("Zezinho");, , 		System.out.println(list.size());, 		for (String elem : list) {, 			System.out.println(elem);, 		}, 		System.out.println("---------------------------");, , 		list.removeIf(x -> x.charAt(0) == 'M');, 		for (String x : list) {, 			System.out.println(x);, 		}, 		System.out.println("---------------------");, 		, 		System.out.println("Index of Bob: " + list.indexOf("Bob"));, 		System.out.println("Index of Marco: " + list.indexOf("Marco"));, 		System.out.println("---------------------");, 		, 		List<String> result = list.stream().filter(x -> x.charAt(0) == 'A').collect(Collectors.toList());, 		for (String x : result) {, 			System.out.println(x);, 		}, 		System.out.println("---------------------");, 		, 		String name = list.stream().filter(x -> x.charAt(0) == 'J').findFirst().orElse(null);, 		System.out.println(name);, , 	}, , }]
[package app;, , import java.util.Scanner;, , public class Program {, , 	public static void main(String[] args) {, , 		Scanner sc = new Scanner(System.in);, , 		int m = sc.nextInt();, 		int n = sc.nextInt();, , 		int[][] mat = new int[m][n];, , 		for (int i = 0; i < mat.length; i++) {, 			for (int j = 0; j < mat[i].length; j++) {, 				mat[i][j] = sc.nextInt();, 			}, 		}, , 		int x = sc.nextInt();, , 		for (int i=0; i<mat.length; i++) {, 			for (int j=0; j<mat[i].length; j++) {, 				if (mat[i][j] == x) {, 					System.out.println("Position " + i + "," + j + ":");, 					if (j > 0) {, 						System.out.println("Left: " + mat[i][j-1]);, 					}, 					if (i > 0) {, 						System.out.println("Up: " + mat[i-1][j]);, 					}, 					if (j < mat[i].length-1) {, 						System.out.println("Right: " + mat[i][j+1]);, 					}, 					if (i < mat.length-1) {, 						System.out.println("Down: " + mat[i+1][j]);, 					}, 				}, 			}, 		}, 		sc.close();, 	}, , }]
[package entities;, , public class Rent {, 	private String name;, 	private String email;, , 	public Rent(String name, String email) {, 		this.name = name;, 		this.email = email;, 	}, , 	public String getName() {, 		return name;, 	}, , 	public void setName(String name) {, 		this.name = name;, 	}, , 	public String getEmail() {, 		return email;, 	}, , 	public void setEmail(String email) {, 		this.email = email;, 	}, , 	public String toString() {, 		return name + ", " + email;, 	}, , }]
[package app;, , import java.util.Scanner;, , import entities.Rent;, , public class Program {, , 	public static void main(String[] args) {, , 		Scanner sc = new Scanner(System.in);, , 		Rent[] vect = new Rent[10];, , 		System.out.println("How many roons will be rented?  ");, 		int n = sc.nextInt();, , 		for (int i = 1; i <= n; i++) {, 			System.out.println();, 			System.out.println("Rent #" + i + " : ");, 			System.out.print("Name: ");, 			sc.nextLine();, 			String name = sc.nextLine();, , 			System.out.print("Email: ");, 			String email = sc.nextLine();, , 			System.out.print("Room: ");, 			int room = sc.nextInt();, , 			vect[room] = new Rent(name, email);, 		}, , 		System.out.println();, 		System.out.println("Busy rooms: ");, 		for (int i = 0; i < vect.length; i++) {, 			if (vect[i] != null), 				System.out.println(i + ": " + vect[i]);, 		}, , 		sc.close();, , 	}, , }]
[package entities;, , import java.text.SimpleDateFormat;, import java.util.ArrayList;, import java.util.Date;, import java.util.List;, , import entities.enums.OrderStatus;, , public class Order {, , 	private static final SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");, , 	private Date moment;, 	private OrderStatus status;, , 	private Client client;, 	private List<OrderItem> items = new ArrayList<>();, , 	public Order(Date moment, OrderStatus status, Client client) {, 		this.moment = moment;, 		this.status = status;, 		this.client = client;, 	}, , 	public Date getMoment() {, 		return moment;, 	}, , 	public void setMoment(Date moment) {, 		this.moment = moment;, 	}, , 	public OrderStatus getStatus() {, 		return status;, 	}, , 	public void setStatus(OrderStatus status) {, 		this.status = status;, 	}, , 	public Client getClient() {, 		return client;, 	}, , 	public void setClient(Client client) {, 		this.client = client;, 	}, , 	public List<OrderItem> getItems() {, 		return items;, 	}, , 	public void addItem(OrderItem item) {, 		items.add(item);, 	}, , 	public void removeItem(OrderItem item) {, 		items.remove(item);, 	}, , 	@Override, 	public String toString() {, 		StringBuilder sb = new StringBuilder();, 		sb.append("Order moment: ");, 		sb.append(sdf.format(moment) + "\n");, 		sb.append("Order status: ");, 		sb.append(status + "\n");, 		sb.append("Client: ");, 		sb.append(client + "\n");, 		sb.append("Order items:\n");, 		for (OrderItem item : items) {, 			sb.append(item + "\n");, 		}, 		sb.append("Total price: $");, 		sb.append(String.format("%.2f", total()));, 		return sb.toString();, 	}, , 	// ------------------------- Methods -----------------------------, 	public double total() {, 		double sum = 0.0;, 		for (OrderItem item : items) {, 			sum += item.subTotal();, 		}, 		return sum;, 	}, , }]
[package entities;, , public class OrderItem {, , 	private Integer quantity;, 	private Double price;, 	, 	private Product product;, , 	public OrderItem(Integer quantity, Double price, Product product) {, 		this.quantity = quantity;, 		this.price = price;, 		this.product = product;, 	}, , 	public Integer getQuantity() {, 		return quantity;, 	}, , 	public void setQuantity(Integer quantity) {, 		this.quantity = quantity;, 	}, , 	public Double getPrice() {, 		return price;, 	}, , 	public void setPrice(Double price) {, 		this.price = price;, 	}, , 	public Product getProduct() {, 		return product;, 	}, , 	public void setProduct(Product product) {, 		this.product = product;, 	}	, 	, 	public double subTotal() {, 		return price * quantity;, 	}, 	, 	@Override, 	public String toString() {, 		return product.getName() , 				+ ", $" , 				+ String.format("%.2f", price) , 				+ ", Quantity: " , 				+ quantity + , 				", Subtotal: $" , 				+ String.format("%.2f", subTotal());, 	}, 	, }]
[package entities;, , public class Product {, , 	private String name;, 	private Double price;, 	, 	public Product(String name, Double price) {, 		this.name = name;, 		this.price = price;, 	}, 	public String getName() {, 		return name;, 	}, 	public void setName(String name) {, 		this.name = name;, 	}, 	public Double getPrice() {, 		return price;, 	}, 	public void setPrice(Double price) {, 		this.price = price;, 	}, 	, 	, }]
[package entities.enums;, , public enum OrderStatus {, 	PENDING_PAYMENT, PROCESSING, SHIPPED, DELIVERED;, }]
[package entities;, , import java.text.SimpleDateFormat;, import java.util.Date;, , public class Client {, 	, 	private static final SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");, , 	private String name;, 	private String email;, 	private Date birthDate;, , 	public Client(String name, String email, Date birthDate) {, 		this.name = name;, 		this.email = email;, 		this.birthDate = birthDate;, 	}, , 	public String getName() {, 		return name;, 	}, , 	public void setName(String name) {, 		this.name = name;, 	}, , 	public String getEmail() {, 		return email;, 	}, , 	public void setEmail(String email) {, 		this.email = email;, 	}, , 	public Date getBirthDate() {, 		return birthDate;, 	}, , 	public void setBirthDate(Date birthDate) {, 		this.birthDate = birthDate;, 	}, , 	@Override, 	public String toString() {, 		return name + " (" + sdf.format(birthDate) + ") - " + email;, 		//return "Client [name=" + name + ", email=" + email + ", birthDate=" + birthDate + "]";, 	}, 	, 	, 	, }]
[package app;, , import java.text.ParseException;, import java.text.SimpleDateFormat;, import java.util.Date;, import java.util.Locale;, import java.util.Scanner;, , import entities.Client;, import entities.Order;, import entities.OrderItem;, import entities.Product;, import entities.enums.OrderStatus;, , public class Program {, , 	public static void main(String[] args) throws ParseException {, , 		Locale.setDefault(Locale.US);, 		Scanner sc = new Scanner(System.in);, 		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");, , 		System.out.println("Enter client data:");, 		System.out.print("Name: ");, 		String name = sc.nextLine();, , 		System.out.print("Email: ");, 		String email = sc.next();, , 		System.out.print("Birth date (DD/MM/YYYY): ");, 		Date birthDate = sdf.parse(sc.next());, , 		Client client = new Client(name, email, birthDate);, , 		System.out.println("Enter order data:");, 		System.out.print("Status: ");, 		OrderStatus status = OrderStatus.valueOf(sc.next());, , 		Order order = new Order(new Date(), status, client);, , 		System.out.print("How many items to this order? ");, 		int n = sc.nextInt();, , 		for (int i = 1; i <= n; i++) {, 			System.out.println("Enter #" + i + " item data:");, 			System.out.print("Product name: ");, 			sc.nextLine();, 			String productName = sc.nextLine();, 			System.out.print("Product price: ");, 			double productPrice = sc.nextDouble();, 			, 			Product product = new Product(productName, productPrice);, 			, 			System.out.print("Quantity: ");, 			int quantity = sc.nextInt();, 			, 			OrderItem oderItem = new OrderItem(quantity, productPrice, product);, 			order.addItem(oderItem);, 		}, 		System.out.println();, 		System.out.println("ORDER SUMMARY:");, 		System.out.println(order);, 		, 		sc.close();, , 	}, , }]
[package entities;, , import java.util.Date;, , import entities.enums.OrderStatus;, , public class Order {, 	private Integer id;, 	private Date moment;, 	private OrderStatus status;, , 	public Order() {, 	}, , 	public Order(Integer id, Date moment, OrderStatus status) {, 		this.id = id;, 		this.moment = moment;, 		this.status = status;, 	}, , 	public Integer getId() {, 		return id;, 	}, , 	public void setId(Integer id) {, 		this.id = id;, 	}, , 	public Date getMoment() {, 		return moment;, 	}, , 	public void setMoment(Date moment) {, 		this.moment = moment;, 	}, , 	public OrderStatus getStatus() {, 		return status;, 	}, , 	public void setStatus(OrderStatus status) {, 		this.status = status;, 	}, , 	@Override, 	public String toString() {, 		return "Order [id=" + id + ", moment=" + moment + ", status=" + status + "]";, 	}, 	, 	, 	, }]
[package entities.enums;, , public enum OrderStatus {, 	PENDING_PAYMENT, PROCESSING, SHIPPED, DELIVERED;, , }]
[package app;, , import java.util.Date;, , import entities.Order;, import entities.enums.OrderStatus;, , public class Program {, , 	public static void main(String[] args) {, , 		Order order = new Order(1080, new Date(), OrderStatus.PENDING_PAYMENT);, 		System.out.println(order);, 		, 		OrderStatus os1 = OrderStatus.DELIVERED;, 		OrderStatus os2 = OrderStatus.valueOf("DELIVERED");, 		System.out.println(os1);, 		System.out.println(os2);, 	}, , }]
[package entities;, , import java.text.SimpleDateFormat;, import java.util.ArrayList;, import java.util.Date;, import java.util.List;, , public class Post {, 	private static SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");, , 	private Date moment;, 	private String title;, 	private String content;, 	private Integer likes;, , 	private List<Comment> comments = new ArrayList<>();, , 	public Post() {, 	}, , 	public Post(Date moment, String title, String content, Integer likes) {, 		this.moment = moment;, 		this.title = title;, 		this.content = content;, 		this.likes = likes;, 	}, , 	public Date getMoment() {, 		return moment;, 	}, , 	public void setMoment(Date moment) {, 		this.moment = moment;, 	}, , 	public String getTitle() {, 		return title;, 	}, , 	public void setTitle(String title) {, 		this.title = title;, 	}, , 	public String getContent() {, 		return content;, 	}, , 	public void setContent(String content) {, 		this.content = content;, 	}, , 	public Integer getLikes() {, 		return likes;, 	}, , 	public void setLikes(Integer likes) {, 		this.likes = likes;, 	}, , 	public List<Comment> getComments() {, 		return comments;, 	}, , 	public void addComment(Comment comment) {, 		comments.add(comment);, 	}, , 	public void removeComment(Comment comment) {, 		comments.remove(comment);, 	}, , 	public String toString() {, 		StringBuilder sb = new StringBuilder();, 		sb.append(title + "\n");, 		sb.append(likes);, 		sb.append(" Likes - ");, 		sb.append(sdf.format(moment) + "\n");, 		sb.append(content + "\n");, 		sb.append("Comments:\n");, 		for (Comment c : comments) {, 			sb.append(c.getText() + "\n");, 		}, 		return sb.toString();, 	}, }]
[package entities;, , public class Comment {, 	private String text;, , 	public Comment() {, 	}, , 	public Comment(String text) {, 		this.text = text;, 	}, , 	public String getText() {, 		return text;, 	}, , 	public void setText(String text) {, 		this.text = text;, 	}, }]
[package app;, , import java.text.ParseException;, import java.text.SimpleDateFormat;, , import entities.Comment;, import entities.Post;, , public class Program {, 	public static void main(String[] args) throws ParseException {, SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");, 		, 		Comment c1 = new Comment("Have a nice trip!");, 		Comment c2 = new Comment("Wow that's awesome!");, 		Post p1 = new Post(, 				sdf.parse("21/06/2018 13:05:44"), , 				"Traveling to New Zealand", , 				"I'm going to visit this wonderful country!", , 				12);, 		p1.addComment(c1);, 		p1.addComment(c2);, 		, 		Comment c3 = new Comment("Good night");, 		Comment c4 = new Comment("May the Force be with you");, 		Post p2 = new Post(, 				sdf.parse("28/07/2018 23:14:19"), , 				"Good night guys", , 				"See you tomorrow", , 				5);, 		p2.addComment(c3);, 		p2.addComment(c4);, 		, 		System.out.println(p1);, 		System.out.println(p2);, 	}, }]
[/**,  * 8-6-Exercicio-resolvido-1,  * 1 de jun de 2019,  * José Malcher Jr.,  * contato@josemalcher.net,  */, package entities;, , import java.util.ArrayList;, import java.util.Calendar;, import java.util.List;, , import entities.enums.WorkerLevel;, , public class Worker {, 	private String name;, 	private WorkerLevel level;, 	private Double baseSalary;, , 	private Department department;, 	private List<HourContract> contracts = new ArrayList<>();, , 	public Worker() {, 	}, , 	public Worker(String name, WorkerLevel level, Double baseSalary, Department department) {, 		this.name = name;, 		this.level = level;, 		this.baseSalary = baseSalary;, 		this.department = department;, 	}, , 	public String getName() {, 		return name;, 	}, , 	public void setName(String name) {, 		this.name = name;, 	}, , 	public WorkerLevel getLevel() {, 		return level;, 	}, , 	public void setLevel(WorkerLevel level) {, 		this.level = level;, 	}, , 	public Double getBaseSalary() {, 		return baseSalary;, 	}, , 	public void setBaseSalary(Double baseSalary) {, 		this.baseSalary = baseSalary;, 	}, , 	public Department getDepartment() {, 		return department;, 	}, , 	public void setDepartment(Department department) {, 		this.department = department;, 	}, , 	public List<HourContract> getContracts() {, 		return contracts;, 	}, //	public void setContracts(List<HourContract> contracts) {, //		this.contracts = contracts;, //	}, , 	// ------------------ Methods ------------------, , 	public void addContract(HourContract contract) {, 		contracts.add(contract);, 	}, , 	public void removeContract(HourContract contract) {, 		contracts.remove(contract);, 	}, , 	public double income(int year, int month) {, 		double sum = baseSalary;, 		Calendar cal = Calendar.getInstance();, 		for (HourContract c : contracts) {, 			cal.setTime(c.getDate());, 			int c_year = cal.get(Calendar.YEAR);, 			int c_month = 1 + cal.get(Calendar.MONTH);, , 			if (year == c_year && month == c_month) {, 				sum += c.totalValue();, 			}, 		}, 		return sum;, 	}, , }]
[package entities;, , public class Department {, 	private String name;, , 	public Department() {, 		, 	}, , 	public Department(String name) {, 		this.name = name;, 	}, , 	public String getName() {, 		return name;, 	}, , 	public void setName(String name) {, 		this.name = name;, 	}, 	, 	, , }]
[package entities.enums;, , /**,  * 8-6-Exercicio-resolvido-1,  * WorkerLevel.java,  * @author josemalcher,  * 1 de jun de 2019,  * ,  */, public enum WorkerLevel {, 	JUNIOR, MID_LEVEL, SENIOR;, }]
[package entities;, , import java.util.Date;, , public class HourContract {, , 	private Date date;, 	private Double valuePerHour;, 	private Integer hours;, 	, 	, 	public HourContract() {, 	}, , , 	public HourContract(Date date, Double valuePerHour, Integer hours) {, 		super();, 		this.date = date;, 		this.valuePerHour = valuePerHour;, 		this.hours = hours;, 	}, , , 	public Date getDate() {, 		return date;, 	}, , , 	public void setDate(Date date) {, 		this.date = date;, 	}, , , 	public Double getValuePerHour() {, 		return valuePerHour;, 	}, , , 	public void setValuePerHour(Double valuePerHour) {, 		this.valuePerHour = valuePerHour;, 	}, , , 	public Integer getHours() {, 		return hours;, 	}, , , 	public void setHours(Integer hours) {, 		this.hours = hours;, 	}, 	, 	public double totalValue() {, 		return valuePerHour * hours;, 	}, , }]
[package app;, , import java.text.ParseException;, import java.text.SimpleDateFormat;, import java.util.Date;, import java.util.Locale;, import java.util.Scanner;, , import entities.Department;, import entities.HourContract;, import entities.Worker;, import entities.enums.WorkerLevel;, , public class Program {, , 	public static void main(String[] args) throws ParseException {, , 		Locale.setDefault(Locale.US);, 		Scanner sc = new Scanner(System.in);, 		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");, , 		System.out.print("Enter department's name: ");, 		String departmentName = sc.nextLine();, 		System.out.println("Enter worker data:");, 		System.out.print("Name: ");, 		String workerName = sc.nextLine();, 		System.out.print("Level: ");, 		String workerLevel = sc.nextLine();, 		System.out.print("Base salary: ");, 		double baseSalary = sc.nextDouble();, 		, 		Worker worker = new Worker(workerName, WorkerLevel.valueOf(workerLevel), baseSalary,, 				new Department(departmentName));, , 		System.out.print("How many contracts to this worker? ");, 		int n = sc.nextInt();, , 		for (int i = 1; i <= n; i++) {, 			System.out.println("Enter contract #" + i + " data:");, 			System.out.print("Date (DD/MM/YYYY): ");, 			Date contractDate = sdf.parse(sc.next());, 			System.out.print("Value per hour: ");, 			double valuePerHour = sc.nextDouble();, 			System.out.print("Duration (hours): ");, 			int hours = sc.nextInt();, 			HourContract contract = new HourContract(contractDate, valuePerHour, hours);, 			worker.addContract(contract);, 		}, , 		System.out.println();, 		System.out.print("Enter month and year to calculate income (MM/YYYY): ");, 		String monthAndYear = sc.next();, 		, 		int month = Integer.parseInt(monthAndYear.substring(0, 2)); // recorte de strings, 		int year = Integer.parseInt(monthAndYear.substring(3));, 		, 		System.out.println("Name: " + worker.getName());, 		System.out.println("Department: " + worker.getDepartment().getName());, 		System.out.println("Income for " + monthAndYear + ": " + String.format("%.2f", worker.income(year, month)));, , 		sc.close();, , 	}, , }]
[//<-Aula de polimorfismo parte 1 sobreposição.->, package auladepolimorfismo;, public class Auladepolimorfismo {, ,     public static void main(String[] args) {,        Cachorro cachorrin = new Cachorro();,        cachorrin.setAbanarRabo("Abanando");,        cachorrin.emitirSom();,        cachorrin.alimentar();,        cachorrin.locomover();,        ,        System.out.println("-------------------------------");,        ,        Mamiferos MA = new Mamiferos();,        MA.emitirSom();,     }, }]
[package auladepolimorfismo;, public class Reptil extends Animal{,     private String corEscama;, ,     public float getPeso() {,         return peso;,     },     public void setPeso(float peso) {,         this.peso = peso;,     },     public int getIdade() {,         return idade;,     },     public void setIdade(int idade) {,         this.idade = idade;,     },     public int getMembros() {,         return membros;,     },     public void setMembros(int membros) {,         this.membros = membros;,     },     public String getCorEscama() {,         return corEscama;,     },     public void setCorEscama(String corEscama) {,         this.corEscama = corEscama;,     },     @Override,     public void locomover() {,         System.out.println("Rastejando.");,     },     @Override,     public void alimentar() {,         System.out.println("Comendo substâncias.");,     },     @Override,     public void emitirSom() {,         System.out.println("Emitindo som de Reptil.");,     }, ,     void setMorder(boolean b) {,         throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.,     }, }]
[//<-Classe filha da classe Animal->, package auladepolimorfismo;, public class Mamiferos extends Animal{//<-Aqui o extends Animal->,     ,     private String corPelo;,     public String getCorPelo() {,         return corPelo;,     },     public float getPeso() {,         return peso;,     },     public void setPeso(float peso) {,         this.peso = peso;,     },     public int getIdade() {,         return idade;,     },     public void setIdade(int idade) {,         this.idade = idade;,     },     public int getMembros() {,         return membros;,     },     public void setMembros(int membros) {,         this.membros = membros;,     },     public void setCorPelo(String corPelo) {,         this.corPelo = corPelo;,     },     @Override,     public void locomover() {,         System.out.println("Correndo!");,     },     @Override,     public void alimentar() {,         System.out.println("Mamando");,     },     @Override,     public void emitirSom() {,         System.out.println("Emitindo som de Mamifero.");,     }, }]
[package auladepolimorfismo;, public class Cachorro extends Mamiferos {,     private String abanarRabo;, ,     public String getAbanarRabo() {,         return abanarRabo;,     },     public void setAbanarRabo(String abanarRabo) {,         this.abanarRabo = abanarRabo;,         System.out.println(this.getAbanarRabo());,     },     @Override,     public float getPeso() {,         return peso;,     },     @Override,     public void setPeso(float peso) {,         this.peso = peso;,     },     @Override,     public int getIdade() {,         return idade;,     },     @Override,     public void setIdade(int idade) {,         this.idade = idade;,     },     @Override,     public int getMembros() {,         return membros;,     },     @Override,     public void setMembros(int membros) {,         this.membros = membros;,     },         @Override,     public void locomover() {,         System.out.println("Correndo!");,     },     @Override,     public void alimentar() {,         System.out.println("Mamando");,     },     @Override,     public void emitirSom() {,         System.out.println("Latindo.");,     }, }]
[/*<-Aula de polimorfismo parte 1 sobreposição.->, Aqui temos a classe progenitora, lembrando classes abstratas não instância, objetos.*/, package auladepolimorfismo;, abstract class Animal {,     protected float peso; //<-Usamos protected para poder utilizar os atributos nas classes filhas.->,     protected int idade;,     protected int membros;,     ,     public abstract void locomover();,     public abstract void alimentar();,     public abstract void emitirSom();, }]
[package arrays.pkg01;, import java.util.*;, , public class Arrays01 {, ,     public static void main(String[] args) {,         List nomes = new ArrayList();,         nomes.add("João");,         nomes.add("Felipe");,         nomes.add ("Jonathan");,         ,             System.out.println(nomes);,     },     , }]
[package contador;, , public class Contador {,     private static int contador = 0;,     private int numId;,     ,     public static int getContador(){,     return contador;,     },     public Contador(){,     contador++;,     numId = contador;, },     , }]
[package contador;, public class testarContador {,     public static void main(String[] args) {,         System.out.println("O valor do Contador é: " + Contador.getContador());,         Contador c = new Contador();,         System.out.println("O valor do Contador é: " + c.getContador());,     }, }]
[//Aula de relacionamento de agregação, //Aqui temos a classe Lutador, package ultraemojicombate;, public class Lutador {,     private String nome;,     private String nacionalidade;,     private int idade;,     private float altura;,     private float peso;,     private String categoria;,     private int vitorias;,     private int derrotas;,     private int empates;,     public void apresentar(){,         System.out.println("-------------------------------------");,         System.out.println("CHEGOU A HORA ! Apresentamos o Lutador "+this.getNome());,         System.out.println("Diretamente de "+ this.getNacionalidade());,         System.out.println("com "+ this.getIdade()+ " anos e ");,         System.out.println("pesando " + this.getPeso()+ "kg");,         System.out.println(this.getVitorias()+" VITORIAS");,         System.out.println(this.getDerrotas()+" DERROTAS");,         System.out.println(this.getEmpates()+" EMPATES");,     },     public void Status(){,         System.out.println("----------------------------------");,         System.out.println(this.getNome() + " é um peso " + this.getCategoria());,         System.out.println("Ganhou "+this.getVitorias()+" vezes");,         System.out.println("Perdeu "+this.getDerrotas()+" vezes");,         System.out.println("Empatou "+this.getEmpates()+" vezes");,     },     //Metodos basicos,     public void ganharLuta(){,         this.setVitorias(this.getVitorias() +1);,     },     public void perderLuta(){,         this.setDerrotas(this.getDerrotas() +1);,     },     public void empatarLuta(){,         this.setEmpates(this.getEmpates()+1);,     },     public Lutador(String no, String na, int id, float al, float pe, int vi, int de, int emp) {,         this.nome = no;//Acima temos o metodo construtor.,         this.nacionalidade = na;,         this.idade = id;,         this.altura = al;,         this.setPeso(pe);,         this.vitorias = vi;,         this.derrotas = de;,         this.empates = emp;,     },     //Metodos especiais,     public String getNome() {,         return nome;,     },     public void setNome(String nome) {,         this.nome = nome;,     },     public String getNacionalidade() {,         return nacionalidade;,     },     public void setNacionalidade(String nacionalidade) {,         this.nacionalidade = nacionalidade;,     },     public int getIdade() {,         return idade;,     },     public void setIdade(int idade) {,         this.idade = idade;,     },     public float getAltura() {,         return altura;,     },     public void setAltura(float altura) {,         this.altura = altura;,     },     public float getPeso() {,         return peso;,     },     public void setPeso(float peso) {,         this.peso = peso;,         this.setCategoria();,     },     public String getCategoria() {,         return categoria;,     },     private void setCategoria() {,         if(this.peso < 52.2){,             this.categoria = "Invalido";,         }else if(this.peso <= 70.3){,             this.categoria = "Leve";,         }else if(this.peso <= 83.9){,             this.categoria = "Medio";,         }else if(this.peso <= 120.2){,             this.categoria = "Pesado";,         }else {,             this.categoria = "Invalido";,         },     },     public int getVitorias() {,         return vitorias;,     },     public void setVitorias(int vitorias) {,         this.vitorias = vitorias;,     },     public int getDerrotas() {,         return derrotas;,     },     public void setDerrotas(int derrotas) {,         this.derrotas = derrotas;,     },     public int getEmpates() {,         return empates;,     },     public void setEmpates(int empates) {,         this.empates = empates;,     },   }]
[package ultraemojicombate;, //Aqui temos a classe Luta que iremos relacionar a classe Lutador, import java.util.Random;, , public class Luta {,     private Lutador desafiado;//Classe Lutador sendo utilizada para difinir tipo de dado.,     private Lutador desafiante;,     private int rounds;,     private boolean aprovada;, ,     public Lutador getDesafiado() {,         return desafiado;,     },     public void setDesafiado(Lutador dd) {,         this.desafiado = dd;,     },     public Lutador getDesafiante() {,         return desafiante;,     },     public void setDesafiante(Lutador desafiante) {,         this.desafiante = desafiante;,     },     public int getRounds() {,         return rounds;,     },     public void setRounds(int rounds) {,         this.rounds = rounds;,     },     public boolean isAprovada() {,         return aprovada;,     },     public void setAprovada(boolean aprovada) {,         this.aprovada = aprovada;,     },     public void marcarLuta(Lutador l1,Lutador l2){,         if((l1.getCategoria() == l2.getCategoria())&&(l1!=l2)){,             this.aprovada = true;,             this.desafiado = l1;,             this.desafiante = l2;,         }else{ this.aprovada = false;,                this.desafiado = null;,                this.desafiante = null;,                 },     },     public void lutar(){,         if(this.aprovada){,             System.out.println("## DESAFIADO ##");,             this.desafiado.apresentar();,             System.out.println("## DESAFIANTE ##");,             this.desafiante.apresentar();,             Random aleatorio = new Random();,             int vencedor = aleatorio.nextInt(3);,             System.out.println("## Resultado da Luta ##");,             switch(vencedor){,                 case 0:,                     System.out.println("EMPATOU!! ");,                     this.desafiado.empatarLuta();,                     this.desafiante.empatarLuta();,                     break;,                 case 1:,                     System.out.println("Vitoria do "+this.getDesafiado().getNome());,                     this.desafiado.ganharLuta();,                     this.desafiante.perderLuta();,                     break;,                 case 2:,                     System.out.println("Vitória do "+this.getDesafiante().getNome());,                     this.desafiado.perderLuta();,                     this.desafiante.ganharLuta();,                     break;,             },         }else{,             System.out.println("A luta não pode acontecer!");,         },     }, }]
[package ultraemojicombate; //Aqui temos o metodo principal, public class UltraEmojiCombate {,     public static void main(String[] args) {,         Lutador l []= new Lutador[6];//Metodo construtor,         l[0] = new Lutador("Luan","Brasil",18,1.75f,60.5f,,         2,5,5);,         l[1] = new Lutador("Renildo","Arabia Saudita",19,1.73f,75.5f,,         8,3,2);,         l[2] = new Lutador("Alberto","EUA",18,1.80f,99.5f,,         15,2,6);,         l[3] = new Lutador("Darla","Itália",20,1.78f,77.3f,,         9,4,5);,         l[4] = new Lutador("Isaac","Japão",23,1.75f,99f,,         2,0,0);,         l[5] = new Lutador("Marcelo","Espanha",25,1.70f,73.5f,,         10,2,2);,        Luta UEC01 = new Luta();,        UEC01.marcarLuta(l[4], l[2]);,        UEC01.lutar();,        l[4].Status();,        l[2].Status();,     },     , }]
[package carro;, //Exercicio Metodos Getters e Setters e Metodo construtor., public class Carros {,     public String modelo;,     public String marca;,     public String cor;,     public int portas;,     ,     public Carros(String m, String ma, String cr, int pt){//Metodo construtor.,         this.modelo = m;,         this.marca = ma;,         this.cor = cr;,         this.portas = pt;,     },     ,     public void status(){,         System.out.println("Modelo do carro: "+ this.getModelo());//Também posso usar o metodo Getter aqui.,         System.out.println("Marca do carro: "+ this.getMarca());,         System.out.println("Cor do Carro: "+ this.cor);,         System.out.println("Número de portas: "+this.portas);,         ,     },     public String getModelo(){,         return this.modelo;,     },     public void setModelo(String m){,         this.modelo = m;,     },     public String getMarca(){,         return this.marca;,     },     public void setMarca(String ma){,         this.marca = ma;,     },     public String getCor(){,         return this.cor;,     },     public void setCor(String c){,         this.cor = c;,     },     public int getPortas(){,         return this.portas;,     },     public void setPortas(int p){,         this.portas = p;,     }, }]
[package carro;, public class Carro {, ,     public static void main(String[] args) {,        Carros car = new Carros("Versa","Nissan","Preto",2);//Obejto criado com metodo construtor,        car.status();,        Carros car1 = new Carros("Onix","Chevrolet","Cinza",4);,        car1.status();,     },   }]
[//Metodo principal, package aula.de.herança;, public class AulaDeHerança {, ,     public static void main(String[] args) {,         //<-Aqui criei os objetos.->,     Pessoa p1 = new Pessoa();,     Aluno a1 = new Aluno();,     Professor pr= new Professor();,     Funcionario f = new Funcionario();,     //<- Aqui inseri os nomes ->,     p1.setNome("Mary");,     a1.setNome("Isaac");,     pr.setNome("José");,     f.setNome("João");,     //<- Aqui inseri idade e sexo da classe progenitora. ->,     p1.setIdade(18);,     p1.setSexo("Feminino");,     //<- Preenchi os atributos da classe Aluno. ->,     a1.setIdade(15);,     a1.setSexo("Masculino");,     a1.setCurso("Sistemas");,     a1.setMatricula(36707);,     a1.cancelarMat();//<- Metodo ->,     //<- Preenchi os atributos da classe Professor. ->,     pr.setIdade(30);,     pr.setSexo("Masculino");,     pr.setEspecialidade("Banco de Dados");,     pr.setSalario(3.500f);,     pr.aumentarSal();//<- Metodo ->,     //<- Preenchi os atributos da classe Funcionario. ->,     f.setIdade(38);,     f.setSexo("Masculino");,     f.setSetor("Estoque");,     f.setTrabalhando(true);,     f.mudarTrab();//<- Metodo ->,     ,         System.out.println(p1.toString());,         System.out.println(a1.toString());,         System.out.println(pr.toString());,         System.out.println(f.toString());,     }, }]
[/*Classe Professor usamos o extends para fazer a extensão da classe Pessoa., quando usamos o extends a classe que for extendida recebe todos os atributos, da classe progenitora.*/, package aula.de.herança;, public class Professor extends Pessoa{,     private String especialidade;,     private float salario;,     ,     public void aumentarSal(){,         System.out.println("Terá um aumento.");,     },     public String getEspecialidade() {,         return especialidade;,     },     public void setEspecialidade(String especialidade) {,         this.especialidade = especialidade;,     },     public float getSalario() {,         return salario;,     },     public void setSalario(float salario) {,         this.salario = salario;,     }, }]
[/*Classe Funcionario usamos o extends para fazer a extensão da classe Pessoa., quando usamos o extends a classe que for extendida recebe todos os atributos, da classe progenitora.*/, package aula.de.herança;, public class Funcionario extends Pessoa{,     private String setor;,     private boolean trabalhando;,     ,     public void mudarTrab(){,         System.out.println("Você mudou para o Administrativo.");,     },     public String getSetor() {,         return setor;,     },     public void setSetor(String setor) {,         this.setor = setor;,     },     public boolean getTrabalhando() {,         return trabalhando;,     },     public void setTrabalhando(boolean trabalhando) {,         this.trabalhando = trabalhando;,     }, }]
[//Aula de Herança Aqui temos a classe progenitora., package aula.de.herança;, public class Pessoa {, private String nome;, private int idade;, private String sexo;, , public void situacao(){,     System.out.println("Nome: "+ this.getNome());, }, public void fazerAniversario(){,     this.idade++;, },     public String getNome() {,         return nome;,     },     public void setNome(String nome) {,         this.nome = nome;,     },     public int getIdade() {,         return idade;,     },     public void setIdade(int idade) {,         this.idade = idade;,     },     public String getSexo() {,         return sexo;,     },     public void setSexo(String sexo) {,         this.sexo = sexo;,     }, ,     @Override,     public String toString() {,         return "Pessoa{" + "nome=" + nome + ", idade=" + idade + ", sexo=" + sexo + '}';,     }, }]
[/*Classe Aluno usamos o extends para fazer a extensão da classe Pessoa., quando usamos o extends a classe que for extendida recebe todos os atributos, da classe progenitora.*/, package aula.de.herança;, public class Aluno extends Pessoa{,     private int matricula;,     private String curso;,     ,     public void cancelarMat(){,         System.out.println("Sua matricula será cancelada.");,     },     public int getMatricula() {,         return matricula;,     },     public void setMatricula(int matricula) {,         this.matricula = matricula;,     },     public String getCurso() {,         return curso;,     },     public void setCurso(String curso) {,         this.curso = curso;,     }, }]
[//Aula de encapsulamento., package controleremoto;/*Isso aqui é a interface da capsula ou seja, aqui vai ficar a parte visivel por isso tem que ser publico, usa-se o abstract, pois trata-se de uma coisa abstrata.*/, , public interface Controlador {,     public abstract void ligar();,     public abstract void desligar();,     public abstract void abrirMenu();,     public abstract void fecharMenu();,     public abstract void maisVolume();,     public abstract void menosVolume();,     public abstract void ligarMudo();,     public abstract void desligarMudo();,     public abstract void play();,     public abstract void pause();, }]
[//Aula de encapsulamento, package controleremoto; , /*Aqui temos a classe Controle, usamos o implements para implementar a , interface a classe.*/, public class Controle implements Controlador {,     private int volume;,     private boolean ligado;,     private boolean tocando;, ,     public Controle() {//Metodo construtor,         this.volume=50;,         this.ligado=false;,         this.tocando = false;,     },     public int getVolume() {,         return volume;,     },     public void setVolume(int volume) {,         this.volume = volume;,     },     public boolean getLigado() {,         return ligado;,     },     public void setLigado(boolean ligado) {,         this.ligado = ligado;,     },     public boolean getTocando() {,         return tocando;,     },     public void setTocando(boolean tocando) {,         this.tocando = tocando;,     }, //Metodos abstratos, tudo que está na interface esta aqui.,     @Override,     public void ligar() {,         this.setLigado(true);,     },     @Override,     public void desligar() {,         this.setLigado(false);,     },     @Override,     public void abrirMenu() {,         System.out.println("-----MENU-----");,         System.out.println("Está ligado ?"+ this.getLigado());,         System.out.println("Está tocando? "+ this.getTocando());,         System.out.print("Volume: "+this.getVolume());,         for(int i = 0;i<= this.getVolume();i+=10){,                 System.out.print("|");,         },     },     @Override,     public void fecharMenu() {,         System.out.println("Fenchando menu.");,     },     @Override,     public void maisVolume() {,         if(this.getLigado()){,             this.setVolume(this.getVolume() + 5);,         },     },     @Override,     public void menosVolume() {,         if(this.getLigado()){,             this.setVolume(this.getVolume() -5);,         },     },     @Override,     public void ligarMudo() {,         if(this.getLigado() && this.getVolume()>0){,             this.setVolume(0);,         },     },     @Override,     public void desligarMudo() {,         if(this.getLigado() && this.getVolume() == 0){,             this.setVolume(55);,         },     },     @Override,     public void play() {,         if(this.getLigado() && !(this.getTocando())){,             this.setTocando(true);,     },     },     @Override,     public void pause() {,         if(this.getLigado() && this.getTocando()){,             this.setTocando(false);,         },     }, }]
[//Aula de encapsulamento, package controleremoto;, public class ControleRemoto {, //Aqui criamos o objeto,     public static void main(String[] args) {,        Controle c = new Controle();,        c.ligar();,        c.play();,        c.maisVolume();,        c.ligarMudo();,       // c.desligarMudo();,        c.abrirMenu();,     }, }]
[package javaapplication13;, import java.util.ArrayList;, // import java.util.Iterator;, import java.util.List;, public class JavaApplication13 {,     public static void main(String[] args) {,         List<String> cor = new <String>ArrayList();,         cor.add("Azul");,         cor.add("Verde");,         cor.add("Amarelo");,         cor.add("Branco");,        for(int i = 0;i < cor.size();i++){,               System.out.println("Cores "+i+": " +cor.get(i));,         },            System.out.println("----------------------------");,            cor.add(0,"Preto");,           for(int i = 0;i < cor.size();i++){,              System.out.println("Cores "+i+": " +cor.get(i));,         },          cor.remove(2);,          System.out.println("----------------------------");,          for(int i = 0;i < cor.size();i++){,             System.out.println("Cores "+i+": " +cor.get(i));,     },     },    }, /*Testei o Iterator, funcionou mas não testei no for ainda.,         Iterator iCor = cor.iterator();,         while(iCor.hasNext()){,             System.out.println("Cores: "+iCor.next());,         }*/]
[package aula07b_ultraemojicombat;, , public class Aula07b_UltraEmojiCombat {, ,     public static void main(String[] args) {,         Lutador L[] = new Lutador[6];,         L[0] = new Lutador("Pretty Boy", "França", 31, 1.75f, 68.9f, 11, 2, 1);,         L[1] = new Lutador("Putscript", "Brasil", 29, 1.68f, 57.8f, 14, 2, 3);,         L[2] = new Lutador("Snapshadow", "EUA", 35, 1.65f, 80.9f, 12, 2, 1);,         L[3] = new Lutador("Dead Code", "Austrália", 28, 1.93f, 81.6f, 13, 0, 2);,         L[4] = new Lutador("Ufocobol", "Brasil", 37, 1.70f, 119.3f, 5, 4, 3);,         L[5] = new Lutador("Nerdaard", "EUA", 30, 1.81f, 105.7f, 12, 2, 4);,         ,         Luta UEC01 = new Luta();,         UEC01.marcarLuta(L[4], L[5]);,         UEC01.lutar();,         L[4].status();,         L[5].status();,     },     , }]
[package aula07b_ultraemojicombat;, , public class Lutador {,     //Atributos,     private String nome;,     private String nacionalidade;,     private int idade;,     private float altura;,     private float peso;,     private String categoria;,     private int vitorias;,     private int derrotas;,     private int empates;,             ,     //Métodos Específicos,     public void apresentar(){,         System.out.println("-----------------------------");,         System.out.println("Lutador: " + this.getNome());,         System.out.println("Origem: " + this.getNacionalidade());,         System.out.println("Idade: " + this.getIdade() + " anos");,         System.out.println(this.getAltura() + "m de altura");,         System.out.println("Pesando: " + this.getPeso() + "kg");,         System.out.println("Ganhou: " + this.getVitorias());,         System.out.println("Perdeu: " + this.getDerrotas());,         System.out.println("Empatou: " + this.getEmpates());,     },     ,     public void status(){,         System.out.print(this.getNome());,         System.out.println(" é um peso " + this.getCategoria());,         System.out.println(this.getVitorias() + " vitórias");,         System.out.println(this.getDerrotas() + " derrotas");,         System.out.println(this.getEmpates() + " empates");,     },     ,     public void ganharLuta(){,         this.setVitorias(this.getVitorias() + 1);,     },     ,     public void perderLuta(){,         this.setDerrotas(this.getDerrotas() + 1);,     },     ,     public void empatarLuta(){,         this.setEmpates(this.getEmpates() + 1);,     },     ,     //Métodos Especiais: Construtor, Getters e Setters, ,     public Lutador(String nome, String nacionalidade, int idade, float altura, float peso, int vitorias, int derrotas, int empates) {,         this.nome = nome;,         this.nacionalidade = nacionalidade;,         this.idade = idade;,         this.altura = altura;,         this.setPeso(peso);,         this.vitorias = vitorias;,         this.derrotas = derrotas;,         this.empates = empates;,     }, ,     public String getNome() {,         return nome;,     }, ,     public void setNome(String nome) {,         this.nome = nome;,     }, ,     public String getNacionalidade() {,         return nacionalidade;,     }, ,     public void setNacionalidade(String nacionalidade) {,         this.nacionalidade = nacionalidade;,     }, ,     public int getIdade() {,         return idade;,     }, ,     public void setIdade(int idade) {,         this.idade = idade;,     }, ,     public float getAltura() {,         return altura;,     }, ,     public void setAltura(float altura) {,         this.altura = altura;,     }, ,     public float getPeso() {,         return peso;,     }, ,     public void setPeso(float peso) {,         this.peso = peso;,         this.setCategoria();,     }, ,     public String getCategoria() {,         return categoria;,     }, ,     private void setCategoria() {,         if(this.getPeso() < 52.2){,             this.categoria = "Inválido";,         } ,         else if(this.getPeso() <= 70.3){,             this.categoria = "Leve";,         },         else if(this.getPeso() <= 83.9){,             this.categoria = "Médio";,         },         else if(this.getPeso() <= 120.2){,             this.categoria = "Pesado";,         },         else{,             this.categoria = "Inválido";,         },     }, ,     public int getVitorias() {,         return vitorias;,     }, ,     public void setVitorias(int vitorias) {,         this.vitorias = vitorias;,     }, ,     public int getDerrotas() {,         return derrotas;,     }, ,     public void setDerrotas(int derrotas) {,         this.derrotas = derrotas;,     }, ,     public int getEmpates() {,         return empates;,     }, ,     public void setEmpates(int empates) {,         this.empates = empates;,     },     , }]
[package aula07b_ultraemojicombat;, , import java.util.Random;, , public class Luta {,     //Atributos,     private Lutador desafiado;,     private Lutador desafiante;,     private int rounds;,     private boolean aprovada;,         ,     //Métodos Públicos ou Específicos,     public void marcarLuta(Lutador L1, Lutador L2){,         if(L1.getCategoria().equals(L2.getCategoria()) && L1 != L2){,             this.aprovada = true;,             this.desafiado = L1;,             this.desafiante = L2;,         },         else{,             this.aprovada = false;,             this.desafiado = null;,             this.desafiante = null;,         },     },         ,     public void lutar(){,         if(this.aprovada){,             System.out.println("### DESAFIADO ###");,             this.desafiado.apresentar();,             System.out.println("### DESAFIANTE ###");,             this.desafiante.apresentar();,             System.out.println("===== RESULTADO DA LUTA =====");,             Random aleatorio = new Random();,             int vencedor = aleatorio.nextInt(3); //0, 1 ou 2,             switch(vencedor){,                 case 0: //Empate,                     System.out.println("Empatou!");,                     this.desafiado.empatarLuta();,                     this.desafiante.empatarLuta();,                     break;,                 case 1: //Ganhou Desafiado,                     System.out.println("Vitória do " + this.desafiado.getNome());,                     this.desafiado.ganharLuta();,                     this.desafiante.perderLuta();,                     break;,                 case 2: //Ganhou Desafiante,                     System.out.println("Vitória do " + this.desafiante.getNome());,                     this.desafiado.perderLuta();,                     this.desafiante.ganharLuta();,                     break;,             },             System.out.println("==============================");,         },         else{,             System.out.println("A luta não pode acontecer.");,         },     },         ,     //Métodos Especiais,     public Lutador getDesafiado() {,         return desafiado;,     }, ,     public void setDesafiado(Lutador desafiado) {,         this.desafiado = desafiado;,     }, ,     public Lutador getDesafiante() {,         return desafiante;,     }, ,     public void setDesafiante(Lutador desafiante) {,         this.desafiante = desafiante;,     }, ,     public int getRounds() {,         return rounds;,     }, ,     public void setRounds(int rounds) {,         this.rounds = rounds;,     }, ,     public boolean isAprovada() {,         return aprovada;,     }, ,     public void setAprovada(boolean aprovada) {,         this.aprovada = aprovada;,     } , }]
[package aula02b;, , public class Aula02b {, ,     public static void main(String[] args) {,         Caneta c1 = new Caneta();,         c1.cor = "Azul";,         c1.ponta = 0.5f;,         c1.tampada = false;,         c1.tampar();,         c1.status();,         c1.rabiscar();,         ,         Caneta c2 = new Caneta();,         c2.modelo = "Hostnet";,         c2.cor = "Preto";,         c2.destampar();,         c2.status();,         c2.rabiscar();,     },     , }]
[package aula02b;, , public class Caneta {,     String modelo;,     String cor;,     float ponta;,     int carga;,     boolean tampada;,     ,     void status(){,         System.out.println("Modelo: " + this.modelo);,         System.out.println("Cor: " + this.cor);,         System.out.println("Ponta: " + this.ponta);,         System.out.println("Carga: " + this.carga);,         System.out.println("Tampada? " + this.tampada);,     },     ,     void rabiscar(){,         if(this.tampada == true){,             System.out.println("ERRO! Não posso rabiscar.");,         },         else{,             System.out.println("Estou rabiscandooooooooo!");,         },     },     ,     void tampar(){,         this.tampada = true;,     },     ,     void destampar(){,         this.tampada = false;,     }, }]
[package aula06b;, , public interface Controlador {,     public abstract void ligar();,     public abstract void desligar();,     public abstract void abrirMenu();,     public abstract void fecharMenu();,     public abstract void maisVolume();,     public abstract void menosVolume();,     public abstract void ligarMudo();,     public abstract void desligarMudo();,     public abstract void play();,     public abstract void pause();, }]
[package aula06b;,  , public class Aula06b {, ,     public static void main(String[] args) {,        ControleRemoto c = new ControleRemoto();,        //c.ligar();,        c.maisVolume();,        c.play();,        c.abrirMenu();,        c.fecharMenu();,        ,     },     , }]
[package aula06b;, , public class ControleRemoto implements Controlador{,     //Atributos,     private int volume;,     private boolean ligado;,     private boolean tocando;,     ,     //Métodos Especiais,     public ControleRemoto() {,         this.volume = 50;,         this.ligado = false;,         this.tocando = false;,     }, ,     private int getVolume() {,         return volume;,     }, ,     private void setVolume(int volume) {,         this.volume = volume;,     }, ,     private boolean getLigado() {,         return ligado;,     }, ,     private void setLigado(boolean ligado) {,         this.ligado = ligado;,     }, ,     private boolean getTocando() {,         return tocando;,     }, ,     private void setTocando(boolean tocando) {,         this.tocando = tocando;,     },     ,     //Métodos Abstratos,     @Override,     public void ligar() {,         this.setLigado(true);,     }, ,     @Override,     public void desligar() {,         this.setLigado(false);,     }, ,     @Override,     public void abrirMenu() {,         System.out.println("---------- MENU ----------");,         System.out.println("Está ligado? " + this.getLigado());       ,         System.out.println("Está tocando? " + this.getTocando());,         System.out.print("Volume: " + this.getVolume());,         for (int i = 0; i < this.getVolume(); i+=10) {,             System.out.print(" |");,         },         System.out.println("");,     }, ,     @Override,     public void fecharMenu() {,         System.out.println("Fechando Menu...");,     }, ,     @Override,     public void maisVolume() {,         if(this.getLigado()){,             this.setVolume(this.getVolume() + 5);,         } else {,             System.out.println("Impossível aumentar o volume");,         },     }, ,     @Override,     public void menosVolume() {,         if(this.getLigado()){,             this.setVolume(this.getVolume() - 5);,         } else {,             System.out.println("Impossível diminuir o volume");,         },     }, ,     @Override,     public void ligarMudo() {,         if(this.getLigado() && this.getVolume() > 0){,             this.setVolume(0);,         },     }, ,     @Override,     public void desligarMudo() {,         if(this.getLigado() && this.getVolume() == 0){,             this.setVolume(50);,         },     }, ,     @Override,     public void play() {,         if(this.getLigado() && !(this.getTocando())){,             this.setTocando(true);,         },     }, ,     @Override,     public void pause() {,         if(this.getLigado() && this.getTocando()){,             this.setTocando(false);,         },     }    , }]
[package aula03b;, , public class Aula03b {, ,     public static void main(String[] args) {,         Caneta c1 = new Caneta();,         c1.modelo = "BIC Cristal";,         c1.cor = "Azul";,         //c1.ponta = 0.5f; //Acesso privado,         c1.carga = 80;,         c1.tampada = true;,         c1.status();,     },     , }]
[package aula03b;, , public class Caneta {,     public String modelo;,     public String cor;,     private float ponta;,     protected int carga;,     protected boolean tampada;,     ,     public void status(){,         System.out.println("Modelo: " + this.modelo);,         System.out.println("Cor: " + this.cor);,         System.out.println("Ponta: " + this.ponta);,         System.out.println("Carga: " + this.carga);,         System.out.println("Tampada? " + this.tampada);,     },     ,     public void rabiscar(){,         if(this.tampada == true){,             System.out.println("ERRO! Não posso rabiscar.");,         },         else{,             System.out.println("Estou rabiscandooooooooo!");,         },     },     ,     protected void tampar(){,         this.tampada = true;,     },     ,     protected void destampar(){,         this.tampada = false;,     }, }]
[package aula04b;, , public class Aula04b {, ,     public static void main(String[] args) {,         Caneta c1 = new Caneta("BIC", 0.7f);,         //c1.setModelo("BIC");,         //c1.setPonta(0.5f);,         c1.status();,         ,         System.out.println("Tenho uma caneta do modelo " + c1.getModelo() + " e ponta de tamanho " + c1.getPonta() + ".");,     },     , }]
[package aula04b;, , public final class Caneta {,     private String modelo;,     private float ponta;, ,     public Caneta(String modelo, float ponta) {,         this.modelo = modelo;,         this.ponta = ponta;,     }, ,     public String getModelo() {,         return modelo;,     }, ,     public void setModelo(String modelo) {,         this.modelo = modelo;,     }, ,     public float getPonta() {,         return ponta;,     }, ,     public void setPonta(float ponta) {,         this.ponta = ponta;,     },     ,     public void status(){,         System.out.println("SOBRE A CANETA");,         System.out.println("Modelo: " + this.getModelo());,         System.out.println("Ponta: " + this.getPonta());,     }, }]
[package aula2b_exercicio;, , public class Aula2b_exercicio {, ,     public static void main(String[] args) {,         Garrafa garrafaDeVictor = new Garrafa();,         garrafaDeVictor.capacidade = 500;,         garrafaDeVictor.cor = "Azul";,         garrafaDeVictor.marca = "Tupperware";,         garrafaDeVictor.modelo = "Esportivo";,         garrafaDeVictor.nivelDeAgua = 0.2f;,         garrafaDeVictor.tampada = true;,         ,         garrafaDeVictor.status();,         System.out.println();,         garrafaDeVictor.destampar();,         garrafaDeVictor.encher();,         garrafaDeVictor.status();,                 ,     },     , }]
[package aula2b_exercicio;, , public class Garrafa {,     String marca;,     String modelo;,     String cor;,     boolean tampada;,     int capacidade;,     float nivelDeAgua;,     ,     void status(){,         System.out.println("Marca: " + this.marca);,         System.out.println("Modelo: " + this.modelo);,         System.out.println("Cor: " + this.cor);,         if(tampada){,             System.out.println("Tampa: Fechada");,         },         else{,             System.out.println("Tampa: Aberta");,         },         System.out.println("Capacidade: " + this.capacidade + " ml");,         System.out.println("Nível de Água: " + this.capacidade*this.nivelDeAgua + " ml");,     },     ,     void tampar(){,         this.tampada = true;,     },     ,     void destampar(){,         this.tampada = false;,     },     ,     void encher(){,         if(this.nivelDeAgua < 1){,             this.nivelDeAgua = 1;,             System.out.println("A garrafa está cheia.");,         },         else{,             System.out.println("A garrafa já está cheia.");,         },     },     ,     void esvaziar(){,         if(this.nivelDeAgua > 0){,             this.nivelDeAgua = 0;,             System.out.println("A garrafa está vazia.");,         },         else{,             System.out.println("A garrafa já está vazia.");,         },     },     , }]
[package aula05;, , public class ContaBanco {,     //Atributos,     public int numConta;,     protected String tipoConta;,     private String donoConta;,     private float saldo;,     private boolean statusConta;,     ,     ,     ,     public void infoConta(){,         System.out.println("------------------------------");,         System.out.println("Número da Conta: " + getNumConta());,         System.out.println("Tipo de Conta: " + getTipoConta());,         System.out.println("Dono da Conta: " + getDonoConta());,         System.out.println("Saldo da Conta: " + getSaldo());,         if(isStatusConta()){,             System.out.println("Conta aberta.");,         },         else{,             System.out.println("Conta fechada.");,         },     },     ,     //Métodos Específicos,     public void abrirConta(String t){,         this.setTipoConta(t);,         this.setStatusConta(true);,         if(t.equals("CC")){,             this.setSaldo(50);,         },         else if(t.equals("CP")){,             this.setSaldo(150);,         },     },     ,     public void fecharConta(){,         if(this.getSaldo() > 0){,             System.out.println("Conta com dinheiro");,         },         else if(this.getSaldo() < 0){,             System.out.println("Conta em débito");,         },         else{,             this.setStatusConta(false);,             System.out.println("Conta fechada com sucesso!");,         },     },     ,     public void depositar(float valor){,         if(this.isStatusConta() == true){,             this.setSaldo(this.getSaldo() + valor);,             //System.out.println("Depósito efetuado com sucesso!");,         },         else{,             System.out.println("Impossível depositar. Conta fechada.");,         },     },     ,     public void sacar(float valor){,         if(this.isStatusConta() == true){,             if(this.getSaldo() >= valor){,                 this.setSaldo(this.getSaldo() - valor);,             },             else{,                 System.out.println("Saldo Insuficiente.");,             },         },         else{,             System.out.println("Impossível Operar.");,         },     },     ,     public void pagarMensalidade(){,         float valor = 0; //Valor que será cobrado a mensalidade pelo tipo de conta,         String tipo = this.getTipoConta();,         if(tipo.equals("CC")){,             valor = 12;,         },         else if(tipo.equals("CP")){,             valor = 20;,         } ,         this.sacar(valor);,     },     ,     //Metódos Especiais,     //Contrutor da Classe: Sempre que uma conta for criada ela deve estar fechada (statusConta = false) e o saldo deve ser zero (0),     public ContaBanco(){,         this.statusConta = false;,         this.saldo = 0;,     },     ,     public int getNumConta() {,         return numConta;,     }, ,     public void setNumConta(int numConta) {,         this.numConta = numConta;,     }, ,     public String getTipoConta() {,         return tipoConta;,     }, ,     public void setTipoConta(String tipoConta) {,         this.tipoConta = tipoConta;,     }, ,     public String getDonoConta() {,         return donoConta;,     }, ,     public void setDonoConta(String donoConta) {,         this.donoConta = donoConta;,     }, ,     public float getSaldo() {,         return saldo;,     }, ,     public void setSaldo(float saldo) {,         this.saldo = saldo;,     }, ,     public boolean isStatusConta() {,         return statusConta;,     }, ,     public void setStatusConta(boolean statusConta) {,         this.statusConta = statusConta;,     },     ,     , }]
[package aula05;, , public class Aula05 {, ,     public static void main(String[] args) {,         ContaBanco p1 = new ContaBanco();,         p1.setNumConta(1111);,         p1.setDonoConta("Jubileu");,         p1.abrirConta("CC");,         p1.depositar(300);,         p1.infoConta();,         ,         ContaBanco p2 = new ContaBanco();,         p2.setNumConta(2222);,         p2.setDonoConta("Creuza");,         p2.abrirConta("CP");,         p2.depositar(500);,         p2.infoConta();,     },     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec;, , /**,  *,  * @author fatecscs,  */, public class Qualquer {,     private int numero;,     private String texto;, ,     public Qualquer(int numero, String texto) {,         this.numero = numero;,         this.texto = texto;,     },     ,     public int getNumero() {,         return numero;,     }, ,     public void setNumero(int numero) {,         this.numero = numero;,     }, ,     public String getTexto() {,         return texto;,     }, ,     public void setTexto(String texto) {,         this.texto = texto;,     },     ,     ,     ,     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec;, , import java.util.ArrayList;, import java.util.Collection;, import java.util.HashSet;, import java.util.Iterator;, import java.util.LinkedList;, , /**,  *,  * @author fatecscs,  */, public class TestaColecoes {, ,     /**,      * @param args the command line arguments,      */,     public static void main(String[] args) {,         // TODO code application logic here,         Collection<Qualquer> colecao_a = new ArrayList<Qualquer>();,         //ArrayList colecao_b = new ArrayList();,         ,         //Collection colecao_a = new HashSet();,         HashSet<Qualquer> colecao_b = new HashSet<Qualquer>();,         ,         Qualquer q1 = new Qualquer(1, "Texto 1");,         Qualquer q2 = new Qualquer(2, "Texto 2");,         Qualquer q3 = new Qualquer(3, "Texto 3");,         ,         Qualquer q4 = new Qualquer(4, "Texto 4");,         Qualquer q5 = new Qualquer(5, "Texto 5");,         Qualquer q6 = new Qualquer(6, "Texto 6");,         ,         //Adicionando objetos nas colecoes,         colecao_a.add(q1);,         colecao_a.add(q2);,         colecao_a.add(q3);,         ,         colecao_b.add(q4);,         colecao_b.add(q5);,         colecao_b.add(q6);,         ,         //Exibindo os dados das coleçoes,         //usando o enhanced for,         System.out.println("Colecao A");,         for (Qualquer obj : colecao_a) {,             System.out.println("Nome: " +,                     obj.getTexto());,         },         ,         //Via Iterador,         System.out.println("\nColecao B");,         Iterator<Qualquer> it = colecao_b.iterator();,         Qualquer obj;,         while (it.hasNext()),         {,             obj = it.next();,             System.out.println("Nome: " +,                     obj.getTexto());,         },         ,         //Usando um metodo que existe em colecao_b e nao existe,         //em colecao_a,         //System.out.println("Numero: " +,         //        ((Qualquer)colecao_b.get(1)).getNumero());,         ,         long cont;,         Qualquer q;,         long start = System.currentTimeMillis();,         for(cont=0; cont<10000; cont++) {,             q = new Qualquer((int)cont, "Texto " + Long.toString(cont));,             colecao_a.add(q);,         },         long elapsed = System.currentTimeMillis() - start;,         System.out.println("Tempo Total para ArrayList: ",                     + elapsed);,         ,         start = System.currentTimeMillis();,         for(cont=0; cont<10000; cont++) {,             q = new Qualquer((int)cont, "Texto " + Long.toString(cont));,             colecao_b.add(q);,         },         elapsed = System.currentTimeMillis() - start;,         System.out.println("Tempo Total para HashSet: ",                     + elapsed);,     },     , }, , , , , , ]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec;, , import java.util.ArrayList;, import java.util.Collection;, , /**,  *,  * @author fatecscs,  */, public class TestaWrapper {, ,     /**,      * @param args the command line arguments,      */,     public static void main(String[] args) {,         // TODO code application logic here,         Integer  numero = new Integer("5");,         System.out.println("O numero vale: " + numero);,         ,         int valor = 7;,         ,         numero = numero + valor;,         //ou,         System.out.println("O numero vale: " + numero);,         //Armazenado em uma colecao,         ArrayList c = new ArrayList();,         ,         //nao da para adicionar um tipo primitivo,         c.add(valor);,         ,         System.out.println("Valor da colecao: " + c.get(0));,         ,         String qualquer;,         qualquer = numero.toString(); //converte Integer para String ,         //converte um tipo int em String,         qualquer = Integer.toString(valor); ,         ,         //para converter uma String em int,         valor = Integer.parseInt(qualquer);,     },     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec;, , import br.com.fatec.Exceptions.SaldoInsuficienteException;, import br.com.fatec.Exceptions.SaqueNegativoException;, , /**,  *,  * @author fatecscs,  */, public class TestaExcecao {, ,     /**,      * @param args the command line arguments,      */,     public static void main(String[] args) {,         // TODO code application logic here,         ContaCorrente cc = new ContaCorrente();,         ,         cc.depositar(1000);,         ,         System.out.println("Sem exceção");,         //Sem o uso de exceções,         if(cc.sacar(-1500)),             System.out.println("Saque efetuado com sucesso");,         else,             System.out.println("Ocorreu algum problema");,         ,         ,         System.out.println("Com exceção VEFIFICADA");,         ,         try {,             //Com o uso de exceções VERIFICADAS,             // portando o java OBRIGA o uso do try..catch,             if(cc.sacar_3(-1500)),                 System.out.println("Saque efetuado com sucesso");,             else,                 System.out.println("Ocorreu algum problema");,         } catch (Exception ex) {,             System.out.println("Erro: " + ex.getMessage());,         },     ,         System.out.println("Com exceção VEFIFICADA Criada por nós");,         ,         try {,             //Com o uso de exceções VERIFICADAS,             // portando o java OBRIGA o uso do try..catch,             if(cc.sacar_4(-1500)),                 System.out.println("Saque efetuado com sucesso");,             else,                 System.out.println("Ocorreu algum problema");,         } catch (SaldoInsuficienteException | SaqueNegativoException ex) {,             System.out.println("Erro: " + ex.getMessage());,         } //catch (SaqueNegativoException ex) {, //            System.out.println("Erro: " + ex.getMessage());, //        },         System.out.println("Com exceção NAO VEFIFICADA");,         ,         //try {,             //Com o uso de exceções NÃO VERIFICADAS,             // portando o java não obriga o uso do try..catch,             if(cc.sacar_2(1500)),                 System.out.println("Saque efetuado com sucesso");,             else,                 System.out.println("Ocorreu algum problema");,         //} catch (RuntimeException ex) {,         //    System.out.println("Erro: " + ex.getMessage());,         //},     }    ,         ,         ,     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec;, , import br.com.fatec.Exceptions.SaldoInsuficienteException;, import br.com.fatec.Exceptions.SaqueNegativoException;, , /**,  *,  * @author fatecscs,  */, public class ContaCorrente {,     private String nome;,     private double saldo;, ,     public void depositar(double valor) {,         saldo += valor;,     },     ,     /**,      * Este método não tem como especificar o motivo de não,      * ter efetuado o saque,      * @param valor,      * @return ,      */,     public boolean sacar(double valor) {,         // saldo insuficiente ou valor negativo (nao pode),         if(valor > saldo || valor < 0),             return false;,         else {,             saldo -= valor;,             return true;,         },     },     ,     ,     ,     /**,      * Este método especifica o texto do motivo de não,      * ter efetuado o saque,      * @param valor,      * @return ,      */,     public boolean sacar_2(double valor) {,         // saldo insuficiente ou valor negativo (nao pode),         if(valor > saldo),             //lança uma excecao NÃO VERIFICADA,             throw new RuntimeException("Saldo Insuficiente");,         if(valor < 0),             throw new RuntimeException("Valor de Saque negativo!!!");,         else {,             saldo -= valor;,             return true;,         },     },     ,     /**,      * Este método especifica o texto do motivo de não,      * ter efetuado o saque,      * Força o uso do try..cath no main() devido ao throws,      * @param valor,      * @return ,      */,     public boolean sacar_3(double valor) throws Exception {,         // saldo insuficiente ou valor negativo (nao pode),         if(valor > saldo),             //lança uma excecao VERIFICADA,             throw new Exception("Saldo Insuficiente");,         if(valor < 0),             throw new Exception("Valor de Saque negativo!!!");,         else {,             saldo -= valor;,             return true;,         },     },     ,     /**,      * Este método especifica o texto do motivo de não,      * ter efetuado o saque,      * Força o uso do try..cath no main() devido ao throws,      * @param valor,      * @return ,      */,     public boolean sacar_4(double valor) ,                 throws SaldoInsuficienteException, ,                        SaqueNegativoException {,         // saldo insuficiente ou valor negativo (nao pode),         if(valor > saldo),             //lança uma excecao VERIFICADA,             throw new SaldoInsuficienteException("Saldo Insuficiente");,         if(valor < 0),             throw new SaqueNegativoException();,         else {,             saldo -= valor;,             return true;,         },     },     ,     public double getSaldo() {,         return saldo;,     }, ,     public String getNome() {,         return nome;,     }, ,     public void setNome(String nome) {,         this.nome = nome;,     },     ,     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec.Exceptions;, , /**,  *,  * @author fatecscs,  */, public class SaqueNegativoException extends Exception {,     ,     public SaqueNegativoException() {,         // chama o construtor da super classe,         //super();,         //ou gera uma mensagem de erro padronizada,         this("O valor do do saque não pode ser negativo");,     },     ,     public SaqueNegativoException(String msg) {,         super(msg);,     },     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec.Exceptions;, , /**,  *,  * @author fatecscs,  */, public class SaldoInsuficienteException  extends Exception {,     ,     public SaldoInsuficienteException() {,         // chama o construtor da super classe,         //super();,         //ou gera uma mensagem de erro padronizada,         this("O saque não pode ser realizado, por insuficiencia de saldo");,     },     ,     public SaldoInsuficienteException(String msg) {,         super(msg);,     },     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec;, , /**,  *,  * @author caio_,  */, public class TestaComposicao {, ,     /**,      * @param args the command line arguments,      */,     public static void main(String[] args) {,         // TODO code application logic here,         Profissao prof = new Profissao();,         prof.setDescricao("Auxiliar Mecanico");,         prof.setInsalubre(true);,         ,         Funcionario f = new Funcionario("Julio", 4500, prof);,         ,     },     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec;, , /**,  *,  * @author caio_,  */, public class Gerente extends Funcionario {,     private float adicional;,     //Agregacao,     private Setor setor;, ,     //construtores,     public Gerente(String nome, float salario, Profissao prof) {,         //chama o construtor da superclasse,         super(nome, salario, prof);,         //Cria o objeto setor para ser utilizado na 2ª maneira,         //de criação de agregacao,         setor = new Setor(""); //como nao sei o setor, vou colocar,         // vazio para ele,     },     ,     //getter e setter   ,     public Setor getSetor() {,         return setor;,     }, ,     public void setSetor(Setor setor) {,         this.setor = setor;,     },     ,     public float getAdicional() {,         return adicional;,     }, ,     public void setAdicional(float adicional) {,         this.adicional = adicional;,     },     ,     //Métodos,     public float salarioAtual() {,         //o super busca da classe pai,         //o this busca da propria classe,         return super.getSalario() + this.getAdicional();,         ,         //ou,         //return getSalario() + getAdicional();,     },     ,     //Sobrescrevendo um metodo,     @Override,     public float gratificacao() {,         //o f do valor indica um dados float e nao double,         return getSalario() * 1.15f;,     }, }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec;, , /**,  *,  * @author fatecscs,  */, public class Setor {,     private String descricao;,     private int qtdFunc;,     ,     //Construtores,     public Setor(String descricao) {    ,         this.descricao = descricao;,     }, ,     //Getters e Setter,     public String getDescricao() {,         return descricao;,     }, ,     public void setDescricao(String descricao) {,         this.descricao = descricao;,     }, ,     public int getQtdFunc() {,         return qtdFunc;,     }, ,     public void setQtdFunc(int qtdFunc) {,         this.qtdFunc = qtdFunc;,     },     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec;, , /**,  *,  * @author caio_,  */, public class Funcionario {,     private String nome;,     private float salario;,     ,     //composicao,     private Profissao profissao;, ,     //construtores,     //public Funcionario() {,     //}, ,     public Funcionario(String nome, float salario, Profissao prof) {,         this.nome = nome;,         this.salario = salario;,         //para a composicao,         this.profissao = prof;,     }, ,     public Profissao getProfissao() {,         return profissao;,     }, ,     public void setProfissao(Profissao profissao) {,         this.profissao = profissao;,     }, ,     public String getNome() {,         return nome;,     },     ,     //Getters e setters,     public void setNome(String nome) {,         this.nome = nome;,     }, ,     public float getSalario() {,         return salario;,     }, ,     public void setSalario(float salario) {,         this.salario = salario;,     },     ,     public void aumento(float porc) {,         salario *= 1 + (porc / 100);,     },     ,     public float gratificacao() {,         return salario; //nao tem gratificacao,     },     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec;, , /**,  *,  * @author fatecscs,  */, public class Profissao {,     private String descricao;,     private boolean insalubre;, ,     public String getDescricao() {,         return descricao;,     }, ,     public void setDescricao(String descricao) {,         this.descricao = descricao;,     }, ,     public boolean isInsalubre() {,         return insalubre;,     }, ,     public void setInsalubre(boolean insalubre) {,         this.insalubre = insalubre;,     },     ,     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package aula1402_criando_classes;, , import br.com.fatec.exemplo.Pessoa;, , /**,  *,  * @author aluno,  */, public class AULA1402_CRIANDO_CLASSES {, ,     /**,      * @param args the command line arguments,      */,     public static void main(String[] args) throws Exception {,         // TODO code application logic here,         //Criar um objeto,         //importar classe pessoa do pacote br.com.fatec.exemplo.Pessoa ,         Pessoa p1 = new Pessoa();,         Pessoa p2 = new Pessoa();,         p1.setNome("Joao Pedro");,         p1.setIdade(45);,         ,         p2.setNome("Carla Santos");,         p2.setIdade(22);,         ,         //Exibindo Dados,         System.out.println("Nome: " + p1.getNome());,         System.out.println("Idade: " + p1.getIdade());,         ,         //Invocando um evento para p1,         p1.aniversario();,         System.out.println("Pós Aniversario: " + p1.getIdade());,         ,         ,         ,     },     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec.exemplo;, , /**,  *,  * @author aluno,  */, public class Pessoa {,     //Atributos,     private String nome;,     private int idade;,     ,     //Getters e Setters,     public void setNome(String nome) {,         this.nome = nome;,     },     ,     public String getNome() {,         return nome;,     },     ,     public void setIdade(int idade) throws Exception {,         if(idade < 0) {,             throw new Exception("erro idade");,             //return; // nao faz nada e vai embora,         },         this.idade = idade;,     },     public int getIdade() {,         return idade;,     },     ,     //Metodos,     public void aniversario() {,         idade++; //soma 1 na idade,     }, }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec;, , import java.util.ArrayList;, import java.util.Collection;, , /**,  *,  * @author fatecscs,  */, public class Pai {,     private String nome;,     private ArrayList<Filho> filhos = new ArrayList<>();, ,     //Metodo para adicionar um filho,     public void addFilho(Filho f) {,         filhos.add(f);,     },     ,     public void removeFilho(Filho f) {,         filhos.remove(f);,     },     ,     public String getNome() {,         return nome;,     }, ,     public void setNome(String nome) {,         this.nome = nome;,     }, ,     public ArrayList<Filho> getFilhos() {,         return filhos;,     }, ,     public void setFilhos(ArrayList<Filho> filhos) {,         this.filhos = filhos;,     },     ,     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec;, , /**,  *,  * @author fatecscs,  */, public class Filho {,     private String nome;, ,     public String getNome() {,         return nome;,     }, ,     public void setNome(String nome) {,         this.nome = nome;,     },     ,     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec;, , /**,  *,  * @author fatecscs,  */, public class TestaProjeto {, ,     /**,      * @param args the command line arguments,      */,     public static void main(String[] args) {,         // TODO code application logic here,         Filho f1 = new Filho();,         Filho f2 = new Filho();,         ,         Pai p = new Pai();,         ,         //adiciona o filho no pai,         p.addFilho(f1);,         p.addFilho(f2);,         ,         //listar os filhos,         for(Filho aux : p.getFilhos()) {,             System.out.println("Nome Filho: " + aux.getNome());,         },     },    , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec;, , import java.text.DecimalFormat;, , /**,  *,  * @author fatecscs,  */, public class TestaExercicio {, ,     /**,      * @param args the command line arguments,      */,     public static void main(String[] args) {,         // TODO code application logic here,         Cartao c1 = new Cartao();,         Cartao c2 = new Cartao();,         Cartao c3 = new Cartao();,         ,         Compra cp1 = new Compra();,         Compra cp2 = new Compra();,         Compra cp3 = new Compra();,         Compra cp4 = new Compra();,         ,         Cliente cli = new Cliente();,         ,         //colocando dados,         c1.setBandeira("Master");,         c1.setLimite(5000);,         c1.setNumero("1234 8765 2342 9877");,         ,         c2.setBandeira("Elo");,         c2.setLimite(1550);,         c2.setNumero("3753 6534 2352 9843");,         ,         c3.setBandeira("Amex");,         c3.setLimite(3400);,         c3.setNumero("7634 3765 8873 2498");,         ,         cp1.setDataCompa("10/03/2019");,         cp1.setValor(2500);,         ,         cp2.setDataCompa("01/04/2019");,         cp2.setValor(1980);,         ,         cp3.setDataCompa("01/03/2019");,         cp3.setValor(345);,         ,         cp4.setDataCompa("10/03/2019");,         cp4.setValor(750);,         ,         cli.adicionaCartao(c1);,         cli.adicionaCartao(c2);,         cli.adicionaCartao(c3);,         ,         Cartao clonado = new Cartao();,         clonado.setNumero("1234 6543 3333 9876");,         ,         //limpar os dados dos cartoes,         c1 = new Cartao();,         c3 = new Cartao();,         c1.setNumero("1234 8765 2342 9877");,         c3.setNumero("7634 3765 8873 2498");,                 ,         if(cli.comprar(cp1, clonado)),             System.out.println("Compra 1 Efetuada com sucesso");,         ,         if(cli.comprar(cp2, c1)),             System.out.println("Compra 2 Efetuada com sucesso");,         ,         if(cli.comprar(cp3, c3)),             System.out.println("Compra 3 Efetuada com sucesso");,         ,         if(cli.comprar(cp4, c3)),             System.out.println("Compra 4 Efetuada com sucesso");,                     ,         ,         //lista todos os cartoes,         cli.listarCartoes();,         ,         System.out.println("Compras ---------------------------");,         //lista todas as compras de cada cartao,         for(Cartao aux : cli.getCartoes()){,             System.out.println("Cartao: " + aux.getNumero());,             aux.listarCompras();,             System.out.println("-------------------------------------------");,         },         ,         //Calcula o total gasto em todos os cartoes,         double totalGeral=0;,         for(Cartao aux : cli.getCartoes()) {,             totalGeral += aux.somaCompra();,         },         ,         DecimalFormat df = new DecimalFormat("###,###,###.00");,         System.out.println("Total Geral gasto: " + ,                 df.format(totalGeral));,     },     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec;, , import java.util.ArrayList;, import java.util.Collection;, import java.util.Objects;, , /**,  *,  * @author fatecscs,  */, public class Cartao {,     private String numero, bandeira;,     private double limite;,     private Collection<Compra> compras = new ArrayList<>();,     ,     public void listarCompras() {,         for(Compra aux : compras) {,             System.out.println("Data: " + aux.dataToString() +,                     "\t Valor: " + aux.valorToString() );,         },     }, ,     @Override,     public int hashCode() {,         int hash = 3;,         hash = 71 * hash + Objects.hashCode(this.numero);,         return hash;,     }, ,     @Override,     public boolean equals(Object obj) {,         if (this == obj) {,             return true;,         },         if (obj == null) {,             return false;,         },         if (getClass() != obj.getClass()) {,             return false;,         },         final Cartao other = (Cartao) obj;,         if (!Objects.equals(this.numero, other.numero)) {,             return false;,         },         return true;,     },     ,     public boolean addCompra(Compra c) {,         if(limite < somaCompra() + c.getValor()),             return false;,         else {,             compras.add(c);,             return true;,         },             ,     },     ,     public double somaCompra() {,         double total=0;,         for(Compra aux : compras) {,             total += aux.getValor();,         },         return total;,     },     public String getNumero() {,         return numero;,     }, ,     public void setNumero(String numero) {,         this.numero = numero;,     }, ,     public String getBandeira() {,         return bandeira;,     }, ,     public void setBandeira(String bandeira) {,         this.bandeira = bandeira;,     }, ,     public double getLimite() {,         return limite;,     }, ,     public void setLimite(double limite) {,         this.limite = limite;,     }, ,     public Collection<Compra> getCompras() {,         return compras;,     }, ,     public void setCompras(Collection<Compra> compras) {,         this.compras = compras;,     },     ,     ,     ,     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec;, , import java.util.Collection;, import java.util.HashSet;, , /**,  *,  * @author fatecscs,  */, public class Cliente {,     private String nome;,     private Collection<Cartao> cartoes = new HashSet<>();, ,     public void listarCartoes() {,         for(Cartao c : cartoes) {,             System.out.println("Cartao: " + c.getNumero());,         },     },     ,     public boolean comprar(Compra compra, Cartao cartao){,         if(cartoes.contains(cartao)){,             return buscaCartao(cartao).addCompra(compra);,         } else,             return false;,     },     ,     private Cartao buscaCartao(Cartao c) {,         for(Cartao aux : cartoes){,             if(aux.equals(c)),                 return aux;,         },         return null;,     },     ,     public void adicionaCartao(Cartao c),     {,         cartoes.add(c);,     },     ,     public String getNome() {,         return nome;,     }, ,     public void setNome(String nome) {,         this.nome = nome;,     }, ,     public Collection<Cartao> getCartoes() {,         return cartoes;,     }, ,     public void setCartoes(Collection<Cartao> cartoes) {,         this.cartoes = cartoes;,     },     ,     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec;, , import java.text.DecimalFormat;, import java.text.ParseException;, import java.text.SimpleDateFormat;, import java.util.Date;, import java.util.GregorianCalendar;, import java.util.logging.Level;, import java.util.logging.Logger;, , /**,  *,  * @author fatecscs,  */, public class Compra {,     private Date data = new Date();,     private float valor;,     private SimpleDateFormat sdf= new SimpleDateFormat("dd/MM/yyyy"); ,     private DecimalFormat df = new DecimalFormat("###,###,###.00");, ,     public void setDataCompa(String data) {,         ,         try { ,             this.data = sdf.parse(data);,         } catch (ParseException ex) {,             Logger.getLogger(Compra.class.getName()).log(Level.SEVERE, null, ex);,         },     },     ,     public String valorToString() {,         return df.format(valor);,     },     ,     public String dataToString() {,         return sdf.format(data);,     },     ,     public float getValor() {,         return valor;,     }, ,     public void setValor(float valor) {,         this.valor = valor;,     },     , ,     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec;, , /**,  *,  * @author caio_,  */, public class Gerente extends Funcionario {,     private float adicional;,     //Agregacao,     private Setor setor;, ,     //construtores,     public Gerente(String nome, float salario) {,         //chama o construtor da superclasse,         super(nome, salario);,         //Cria o objeto setor para ser utilizado na 2ª maneira,         //de criação de agregacao,         setor = new Setor(""); //como nao sei o setor, vou colocar,         // vazio para ele,     },     ,     //getter e setter   ,     public Setor getSetor() {,         return setor;,     }, ,     public void setSetor(Setor setor) {,         this.setor = setor;,     },     ,     public float getAdicional() {,         return adicional;,     }, ,     public void setAdicional(float adicional) {,         this.adicional = adicional;,     },     ,     //Métodos,     public float salarioAtual() {,         //o super busca da classe pai,         //o this busca da propria classe,         return super.getSalario() + this.getAdicional();,         ,         //ou,         //return getSalario() + getAdicional();,     },     ,     //Sobrescrevendo um metodo,     @Override,     public float gratificacao() {,         //o f do valor indica um dados float e nao double,         return getSalario() * 1.15f;,     }, }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec;, , /**,  *,  * @author fatecscs,  */, public class Setor {,     private String descricao;,     private int qtdFunc;,     ,     //Construtores,     public Setor(String descricao) {    ,         this.descricao = descricao;,     }, ,     //Getters e Setter,     public String getDescricao() {,         return descricao;,     }, ,     public void setDescricao(String descricao) {,         this.descricao = descricao;,     }, ,     public int getQtdFunc() {,         return qtdFunc;,     }, ,     public void setQtdFunc(int qtdFunc) {,         this.qtdFunc = qtdFunc;,     },     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec;, , /**,  *,  * @author caio_,  */, public class TestaAgregacao {, ,     /**,      * @param args the command line arguments,      */,     public static void main(String[] args) {,         // TODO code application logic here,         Gerente g = new Gerente("Edcarlos", 5600);,         ,         //1ª maneira de colocar um setor no gerente,         Setor s = new Setor("Almoxarifado");,         g.setSetor(s);,         //colocar o numero de funcionarios no setor,         g.getSetor().setQtdFunc(15);,         System.out.println("Gerente:" + g.getNome());,         s.setDescricao("Compras");,         System.out.println("Setor:" + g.getSetor().getDescricao());,         System.out.println("Gratificação:" + g.gratificacao());,         ,         //2ª maneira de colocar um setor no gerente,         Gerente ger = new Gerente("Sonia", 4500);,         ger.getSetor().setDescricao("Distribuição");,         ger.getSetor().setQtdFunc(6);,     },     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec;, , /**,  *,  * @author caio_,  */, public class Funcionario {,     private String nome;,     private float salario;, ,     //construtores,     //public Funcionario() {,     //}, ,     public Funcionario(String nome, float salario) {,         this.nome = nome;,         this.salario = salario;,     }, ,     public String getNome() {,         return nome;,     },     ,     //Getters e setters,     public void setNome(String nome) {,         this.nome = nome;,     }, ,     public float getSalario() {,         return salario;,     }, ,     public void setSalario(float salario) {,         this.salario = salario;,     },     ,     public void aumento(float porc) {,         salario *= 1 + (porc / 100);,     },     ,     public float gratificacao() {,         return salario; //nao tem gratificacao,     },     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package aula1402_criando_classes;, , import br.com.fatec.exemplo.Pessoa;, , /**,  *,  * @author aluno,  */, public class TesteExemplo {, ,     /**,      * @param args the command line arguments,      */,     public static void main(String[] args) {,         // TODO code application logic here,         Pessoa p1 = new Pessoa();,         ,         System.out.println("Nome: " + p1.getNome());,         System.out.println("Idade: " + p1.getIdade());,         ,         Pessoa p2 = new Pessoa("Viotti");,         System.out.println("P2 Nome: " + p2.getNome());,         System.out.println("P2 Idade: " + p2.getIdade());,         ,         ,     },     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec.exemplo;, , /**,  *,  * @author aluno,  */, public class Pessoa {,     //Atributos,     private String nome;,     private int idade;,     ,     //construtores,     ,     //construtor default,     public Pessoa() {,         System.out.println("Criando uma pessoa");,         nome = "";,     },     ,     //construtor parametrico,     public Pessoa(String nome) {,         this.nome = nome;,     },     ,     ,     //Getters e Setters,     public void setNome(String nome) {,         this.nome = nome;,     },     ,     public String getNome() {,         return nome;,     },     ,     public void setIdade(int idade) {,         if(idade < 0) {,             return; // nao faz nada e vai embora,         },         this.idade = idade;,     },     public int getIdade() {,         return idade;,     },     ,     //Metodos,     public void aniversario() {,         idade++; //soma 1 na idade,     }, }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec;, , /**,  *,  * @author caio_,  */, public class TestaHeranca {, ,     /**,      * @param args the command line arguments,      */,     public static void main(String[] args) {,         // TODO code application logic here,         Gerente g = new Gerente("Edcarlos", 5600);,         ,         //atribuindo dados,         //g.setNome("Edcarlos");  foi passado pelo construtor,         //g.setSalario(5600);     foi passado pelo construtor,         g.setSetor("Informática");,         g.setAdicional(200);,         ,         //dar um aumento,         g.aumento(10);,         ,         //exibir dados,         System.out.println("Nome: " + g.getNome());,         System.out.println("Salario Atual: " + g.salarioAtual());,         ,         System.out.println("Gratificacao: " + g.gratificacao());,     },     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec;, , /**,  *,  * @author caio_,  */, public class Gerente extends Funcionario {,     private String setor;,     private float adicional;, ,     //construtores,     public Gerente(String nome, float salario) {,         //chama o construtor da superclasse,         super(nome, salario);,     },     ,     //getter e setter,     public String getSetor() {,         return setor;,     }, ,     public void setSetor(String setor) {,         this.setor = setor;,     }, ,     public float getAdicional() {,         return adicional;,     }, ,     public void setAdicional(float adicional) {,         this.adicional = adicional;,     },     ,     //Métodos,     public float salarioAtual() {,         //o super busca da classe pai,         //o this busca da propria classe,         return super.getSalario() + this.getAdicional();,         ,         //ou,         //return getSalario() + getAdicional();,     },     ,     //Sobrescrevendo um metodo,     @Override,     public float gratificacao() {,         //o f do valor indica um dados float e nao double,         return getSalario() * 1.15f;,     }, }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec;, , /**,  *,  * @author caio_,  */, public class Funcionario {,     private String nome;,     private float salario;, ,     //construtores,     //public Funcionario() {,     //}, ,     public Funcionario(String nome, float salario) {,         this.nome = nome;,         this.salario = salario;,     }, ,     public String getNome() {,         return nome;,     },     ,     //Getters e setters,     public void setNome(String nome) {,         this.nome = nome;,     }, ,     public float getSalario() {,         return salario;,     }, ,     public void setSalario(float salario) {,         this.salario = salario;,     },     ,     public void aumento(float porc) {,         salario *= 1 + (porc / 100);,     },     ,     public float gratificacao() {,         return salario; //nao tem gratificacao,     },     , }]
[, package br.com.fatec;, , , public class Aplicacao extends Investimento {, ,     public Aplicacao(Correntista correntista) {,         super(correntista);,     },     ,     @Override,     public void sacar(float valor),     {,         if(getSaldo() > valor * 1.0038),             setSaldo(getSaldo() - valor * 1.0038);,         else,             throw new RuntimeException(,                     "Saldo não comporta este saque");,     }, }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec;, , /**,  *,  * @author fatecscs,  */, public class CCredito {,     private String numero;,     private double limite;,     private int melhorDia;, ,     public String getNumero() {,         return numero;,     }, ,     public void setNumero(String numero) {,         this.numero = numero;,     }, ,     public double getLimite() {,         return limite;,     }, ,     public void setLimite(double limite) {,         this.limite = limite;,     }, ,     public int getMelhorDia() {,         return melhorDia;,     }, ,     public void setMelhorDia(int melhorDia) {,         this.melhorDia = melhorDia;,     },     ,     , }]
[, package br.com.fatec;, , , public class Poupanca extends Investimento {, ,     public Poupanca(Correntista correntista) {,         super(correntista);,     }, , }]
[, package br.com.fatec;, , , public class Correntista {,     private String nome;,     private String cpf;, ,     public String getNome() {,         return nome;,     }, ,     public void setNome(String nome) {,         this.nome = nome;,     }, ,     public String getCpf() {,         return cpf;,     }, ,     public void setCpf(String cpf) {,         this.cpf = cpf;,     },     ,     , }]
[package br.com.fatec;, , public abstract class Conta {, ,     private Correntista correntista;,     private int numero;,     private double saldo;, ,     public Conta(Correntista correntista) {,         this.correntista = correntista;,     }, ,     public void depositar(float valor) {,         saldo += valor;,     }, ,     public void sacar(float valor) {,         if(saldo >= valor) {,             saldo -= valor;,         } else {,             throw new RuntimeException("Saldo Insuficiente");,         },     },     public Correntista getCorrentista() {,         return correntista;,     }, ,     public void setCorrentista(Correntista correntista) {,         this.correntista = correntista;,     }, ,     public int getNumero() {,         return numero;,     }, ,     public void setNumero(int numero) {,         this.numero = numero;,     }, ,     public double getSaldo() {,         return saldo;,     }, ,     public void setSaldo(double saldo) {,         this.saldo = saldo;,     }, }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec;, , /**,  *,  * @author Viotti,  */, public class ControleContas {,     private double saldoInicialTotal = 0;,     ,     public void registra(Conta conta) {,         saldoInicialTotal += conta.getSaldo();,     },     ,     public double getSaldoInicial() {,         return saldoInicialTotal;,     }, }]
[, package br.com.fatec;, , , public abstract class Investimento extends Conta {, ,     public Investimento(Correntista correntista) {,         super(correntista);,     },     ,     public void rendimento(float porcentagem) {,         setSaldo(getSaldo() * (1+porcentagem/100));,     }, }]
[, package br.com.fatec;, , import javax.swing.JOptionPane;, , public class TestaProjeto {, ,     public static void main(String[] args) {,         Correntista corr = new Correntista();,         corr.setNome("eu mesmo");,         corr.setCpf("12345");,         ,         Normal normal = new Normal(corr);,         Especial especial = new Especial(4000, corr);,         Poupanca poupanca = new Poupanca(corr);,         ,         normal.setSaldo(1200);,         normal.setNumero(1);,         ,         especial.setNumero(2);,         especial.setSaldo(2400);,         ,         poupanca.setNumero(3);,         poupanca.setSaldo(4800);,         ,         //rendimento,         System.out.println("Saldo Poupanca: " + ,                 poupanca.getSaldo());,         poupanca.rendimento(15);,         System.out.println("Saldo Poupanca + 15%: " + ,                 poupanca.getSaldo());,         System.out.println("Sacar 6000 poupanca:");,         ,         try {,             poupanca.sacar(6000);,         } catch (RuntimeException ex) {,             System.out.println(ex.getMessage());,         },                 ,         System.out.println("Saldo Especial: " + ,                 especial.getSaldo());,         especial.sacar(5000);,         System.out.println("Saldo Especial (-5000): " + ,                 especial.getSaldo());,         ,         System.out.println("Saldo Normal: " + ,                 normal.getSaldo());,         ,         try {,             normal.sacar(5000);,         } catch (RuntimeException ex) {,             JOptionPane.showMessageDialog,                 (null, ex.getMessage());,         }, ,         System.out.println("Saldo normal (-5000): " + ,                 normal.getSaldo());,         ,     }, , }]
[, package br.com.fatec;, , , public class Normal extends Corrente {, ,     public Normal(Correntista correntista) {,         super(correntista);,     }, , }]
[, package br.com.fatec;, , , public class Especial extends Corrente {,     private double limite;,     private CCredito ccredito;, ,     public Especial(double limite, Correntista correntista) {,         super(correntista);,         this.limite = limite;,     }, ,     @Override,     public void sacar(float valor) {,         if(getSaldo() + limite >= valor),             setSaldo(getSaldo() - valor);,         else,             throw new RuntimeException("Saldo Insuficiente (especial)");,     }, ,     public CCredito getCcredito() {,         return ccredito;,     }, ,     public void setCcredito(CCredito ccredito) {,         this.ccredito = ccredito;,     },     ,     public double getLimite() {,         return limite;,     }, ,     public void setLimite(double limite) {,         this.limite = limite;,     },     ,     , }]
[, package br.com.fatec;, , , public abstract class Corrente extends Conta {, ,     public Corrente(Correntista correntista) {,         super(correntista);,     }, , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec;, , /**,  *,  * @author fatecscs,  */, public class Qualquer {,     private int numero;,     private String texto;, ,     public Qualquer(int numero, String texto) {,         this.numero = numero;,         this.texto = texto;,     },     ,     public int getNumero() {,         return numero;,     }, ,     public void setNumero(int numero) {,         this.numero = numero;,     }, ,     public String getTexto() {,         return texto;,     }, ,     public void setTexto(String texto) {,         this.texto = texto;,     },     ,     ,     ,     , }]
[/*,  * To change this license header, choose License Headers in Project Properties.,  * To change this template file, choose Tools | Templates,  * and open the template in the editor.,  */, package br.com.fatec;, , import java.util.ArrayList;, import java.util.Collection;, import java.util.HashSet;, import java.util.Iterator;, import java.util.LinkedList;, , /**,  *,  * @author fatecscs,  */, public class TestaColecoes {, ,     /**,      * @param args the command line arguments,      */,     public static void main(String[] args) {,         // TODO code application logic here,         Collection colecao_a = new ArrayList();,         //ArrayList colecao_b = new ArrayList();,         ,         //Collection colecao_a = new HashSet();,         HashSet colecao_b = new HashSet();,         ,         Qualquer q1 = new Qualquer(1, "Texto 1");,         Qualquer q2 = new Qualquer(2, "Texto 2");,         Qualquer q3 = new Qualquer(3, "Texto 3");,         ,         Qualquer q4 = new Qualquer(4, "Texto 4");,         Qualquer q5 = new Qualquer(5, "Texto 5");,         Qualquer q6 = new Qualquer(6, "Texto 6");,         ,         //Adicionando objetos nas colecoes,         colecao_a.add(q1);,         colecao_a.add(q2);,         colecao_a.add(q3);,         ,         colecao_b.add(q4);,         colecao_b.add(q5);,         colecao_b.add(q6);,         ,         //Exibindo os dados das coleçoes,         //usando o enhanced for,         System.out.println("Colecao A");,         for (Object obj : colecao_a) {,             System.out.println("Nome: " +,                     ((Qualquer)obj).getTexto());,         },         ,         //Via Iterador,         System.out.println("\nColecao B");,         Iterator it = colecao_b.iterator();,         Object obj;,         while (it.hasNext()),         {,             obj = it.next();,             System.out.println("Nome: " +,                     ((Qualquer)obj).getTexto());,         },         ,         //Usando um metodo que existe em colecao_b e nao existe,         //em colecao_a,         //System.out.println("Numero: " +,         //        ((Qualquer)colecao_b.get(1)).getNumero());,         ,         long cont;,         Qualquer q;,         long start = System.currentTimeMillis();,         for(cont=0; cont<10000; cont++) {,             q = new Qualquer((int)cont, "Texto " + Long.toString(cont));,             colecao_a.add(q);,         },         long elapsed = System.currentTimeMillis() - start;,         System.out.println("Tempo Total para ArrayList: ",                     + elapsed);,         ,         start = System.currentTimeMillis();,         for(cont=0; cont<10000; cont++) {,             q = new Qualquer((int)cont, "Texto " + Long.toString(cont));,             colecao_b.add(q);,         },         elapsed = System.currentTimeMillis() - start;,         System.out.println("Tempo Total para HashSet: ",                     + elapsed);,     },     , }, , , , , , ]
[package course;, , import java.util.Locale;, import java.util.Scanner;, , public class S2Aula24Exerc8 {, , 	public static void main(String[] args) {, 		// TODO Auto-generated method stub, 		Locale.setDefault(Locale.US);	, 		, 		Scanner sc = new Scanner(System.in);, 		, 		double salario = sc.nextDouble();, 		double imposto;, 		, 		if(salario <= 2000.00) {, 			imposto = 0.00;, 		}, 		else if(salario<=3000.00) {, 			imposto = ((salario - 2000.00)*8)/100;				, 		}, 		else if(salario<=4500.00) {			, 			imposto = (((salario - 3000.00)*18)/100)+80.00;				, 		}, 		else {, 			imposto = (((salario - 4500.00)* 0.28) + 1500 * 0.18 + 1000 * 0.08 );				, 		}	, 		, 		if (imposto == 0.00), 			System.out.printf("Isento!");, 		else, 			System.out.printf("R$ %.2f%n",imposto);, 		, 		sc.close();, 	}, , }]
[package course;, , import java.util.Scanner;, , public class S2Aula39Exerc2 {, 	, 	public static void main(String[] args) {, 		// TODO Auto-generated method stub, 		, 		Scanner sc = new Scanner(System.in);, 	, 		int numeroEntradas = sc.nextInt();, 		int qtdeOut=0;, 		int qtdeIn=0;, 	, 		for (int x = 1; x <= numeroEntradas; x++ ) {			, 			int value = sc.nextInt();, 			, 			if(value >=10 && value <= 20) {, 				qtdeIn++;				, 			}, 			else, 				 qtdeOut++;								, 		}	, 		System.out.println(qtdeIn +" in");	, 		System.out.println(qtdeOut +" out");	, 		, 		sc.close();		, 	}	, , }]
[package course;, , import java.util.Scanner;, , public class S2Aula39Exerc5 {, , 	public static void main(String[] args) {, 		// TODO Auto-generated method stub, , 	Scanner sc = new Scanner(System.in);, 		, 		int n = sc.nextInt(),fatorial = n;	, 				, 		if (n != 0) {, 		for (int x = n; x > 1;x--) {, 			fatorial = fatorial * (x-1);	, 			, 		}	, 		    System.out.println(fatorial);, 		}, 		else, 			System.out.println(1);, 		sc.close();	, 	}, }]
